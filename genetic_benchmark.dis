
genetic_benchmark:     file format elf64-x86-64


Disassembly of section .text:

0000000000006ea0 <_start>:
    6ea0:	f3 0f 1e fa          	endbr64 
    6ea4:	31 ed                	xor    %ebp,%ebp
    6ea6:	49 89 d1             	mov    %rdx,%r9
    6ea9:	5e                   	pop    %rsi
    6eaa:	48 89 e2             	mov    %rsp,%rdx
    6ead:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    6eb1:	50                   	push   %rax
    6eb2:	54                   	push   %rsp
    6eb3:	4c 8d 05 26 06 01 00 	lea    0x10626(%rip),%r8        # 174e0 <__libc_csu_fini>
    6eba:	48 8d 0d af 05 01 00 	lea    0x105af(%rip),%rcx        # 17470 <__libc_csu_init>
    6ec1:	48 8d 3d 48 54 00 00 	lea    0x5448(%rip),%rdi        # c310 <main>
    6ec8:	ff 15 a2 1e 01 00    	callq  *0x11ea2(%rip)        # 18d70 <__libc_start_main@GLIBC_2.2.5>
    6ece:	f4                   	hlt    
    6ecf:	cc                   	int3   

0000000000006ed0 <deregister_tm_clones>:
    6ed0:	48 8d 3d 69 2f 01 00 	lea    0x12f69(%rip),%rdi        # 19e40 <__TMC_END__>
    6ed7:	48 8d 05 62 2f 01 00 	lea    0x12f62(%rip),%rax        # 19e40 <__TMC_END__>
    6ede:	48 39 f8             	cmp    %rdi,%rax
    6ee1:	74 15                	je     6ef8 <deregister_tm_clones+0x28>
    6ee3:	48 8b 05 96 1e 01 00 	mov    0x11e96(%rip),%rax        # 18d80 <_ITM_deregisterTMCloneTable@Base>
    6eea:	48 85 c0             	test   %rax,%rax
    6eed:	74 09                	je     6ef8 <deregister_tm_clones+0x28>
    6eef:	ff e0                	jmpq   *%rax
    6ef1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    6ef8:	c3                   	retq   
    6ef9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000006f00 <register_tm_clones>:
    6f00:	48 8d 3d 39 2f 01 00 	lea    0x12f39(%rip),%rdi        # 19e40 <__TMC_END__>
    6f07:	48 8d 35 32 2f 01 00 	lea    0x12f32(%rip),%rsi        # 19e40 <__TMC_END__>
    6f0e:	48 29 fe             	sub    %rdi,%rsi
    6f11:	48 89 f0             	mov    %rsi,%rax
    6f14:	48 c1 ee 3f          	shr    $0x3f,%rsi
    6f18:	48 c1 f8 03          	sar    $0x3,%rax
    6f1c:	48 01 c6             	add    %rax,%rsi
    6f1f:	48 d1 fe             	sar    %rsi
    6f22:	74 14                	je     6f38 <register_tm_clones+0x38>
    6f24:	48 8b 05 5d 1e 01 00 	mov    0x11e5d(%rip),%rax        # 18d88 <_ITM_registerTMCloneTable@Base>
    6f2b:	48 85 c0             	test   %rax,%rax
    6f2e:	74 08                	je     6f38 <register_tm_clones+0x38>
    6f30:	ff e0                	jmpq   *%rax
    6f32:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    6f38:	c3                   	retq   
    6f39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000006f40 <__do_global_dtors_aux>:
    6f40:	f3 0f 1e fa          	endbr64 
    6f44:	80 3d 85 31 01 00 00 	cmpb   $0x0,0x13185(%rip)        # 1a0d0 <completed.0>
    6f4b:	75 2b                	jne    6f78 <__do_global_dtors_aux+0x38>
    6f4d:	55                   	push   %rbp
    6f4e:	48 83 3d 3a 1e 01 00 	cmpq   $0x0,0x11e3a(%rip)        # 18d90 <__cxa_finalize@GLIBC_2.2.5>
    6f55:	00 
    6f56:	48 89 e5             	mov    %rsp,%rbp
    6f59:	74 0c                	je     6f67 <__do_global_dtors_aux+0x27>
    6f5b:	48 8b 3d a6 2e 01 00 	mov    0x12ea6(%rip),%rdi        # 19e08 <__dso_handle>
    6f62:	e8 c9 05 01 00       	callq  17530 <__cxa_finalize@plt>
    6f67:	e8 64 ff ff ff       	callq  6ed0 <deregister_tm_clones>
    6f6c:	c6 05 5d 31 01 00 01 	movb   $0x1,0x1315d(%rip)        # 1a0d0 <completed.0>
    6f73:	5d                   	pop    %rbp
    6f74:	c3                   	retq   
    6f75:	0f 1f 00             	nopl   (%rax)
    6f78:	c3                   	retq   
    6f79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000006f80 <frame_dummy>:
    6f80:	f3 0f 1e fa          	endbr64 
    6f84:	e9 77 ff ff ff       	jmpq   6f00 <register_tm_clones>
    6f89:	cc                   	int3   
    6f8a:	cc                   	int3   
    6f8b:	cc                   	int3   
    6f8c:	cc                   	int3   
    6f8d:	cc                   	int3   
    6f8e:	cc                   	int3   
    6f8f:	cc                   	int3   

0000000000006f90 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
// Utility functions
namespace utils {

    // Load dataset from CSV file
    std::pair<std::vector<std::vector<float>>, std::vector<float>>
    load_dataset(const std::string& filename) {
    6f90:	55                   	push   %rbp
    6f91:	41 57                	push   %r15
    6f93:	41 56                	push   %r14
    6f95:	41 55                	push   %r13
    6f97:	41 54                	push   %r12
    6f99:	53                   	push   %rbx
    6f9a:	48 81 ec 88 04 00 00 	sub    $0x488,%rsp
    6fa1:	48 89 f3             	mov    %rsi,%rbx
    6fa4:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
    6fa9:	0f 57 c0             	xorps  %xmm0,%xmm0
    6fac:	0f 29 44 24 30       	movaps %xmm0,0x30(%rsp)
    6fb1:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
    6fb8:	00 00 
    6fba:	0f 29 44 24 50       	movaps %xmm0,0x50(%rsp)
    6fbf:	48 c7 44 24 60 00 00 	movq   $0x0,0x60(%rsp)
    6fc6:	00 00 
    6fc8:	48 8d bc 24 80 02 00 	lea    0x280(%rsp),%rdi
    6fcf:	00 
        std::vector<std::vector<float>> X;
        std::vector<float>              y;

        std::ifstream file(filename);
    6fd0:	ba 08 00 00 00       	mov    $0x8,%edx
    6fd5:	e8 66 05 01 00       	callq  17540 <_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode@plt>
      /**
       *  @brief  Returns true if the external file is open.
       */
      bool
      is_open() const throw()
      { return _M_file.is_open(); }
    6fda:	48 8d bc 24 f8 02 00 	lea    0x2f8(%rsp),%rdi
    6fe1:	00 
    6fe2:	e8 99 06 01 00       	callq  17680 <_ZNKSt12__basic_fileIcE7is_openEv@plt>
        if (!file.is_open()) {
    6fe7:	84 c0                	test   %al,%al
    6fe9:	0f 84 af 06 00 00    	je     769e <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x70e>

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    6fef:	48 8d 84 24 88 00 00 	lea    0x88(%rsp),%rax
    6ff6:	00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    6ff7:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
      { _M_string_length = __length; }
    6ffc:	48 c7 84 24 80 00 00 	movq   $0x0,0x80(%rsp)
    7003:	00 00 00 00 00 
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { __c1 = __c2; }
    7008:	c6 84 24 88 00 00 00 	movb   $0x0,0x88(%rsp)
    700f:	00 
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
	    basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str, __is.widen('\n')); }
    7010:	48 8b 84 24 80 02 00 	mov    0x280(%rsp),%rax
    7017:	00 
    7018:	48 8b 40 e8          	mov    -0x18(%rax),%rax
       *  Additional l10n notes are at
       *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/localization.html
      */
      char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }
    701c:	48 8b 9c 04 70 03 00 	mov    0x370(%rsp,%rax,1),%rbx
    7023:	00 
      if (!__f)
    7024:	48 85 db             	test   %rbx,%rbx
    7027:	0f 84 5b 06 00 00    	je     7688 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6f8>
       *  @return  The converted character.
      */
      char_type
      widen(char __c) const
      {
	if (_M_widen_ok)
    702d:	80 7b 38 00          	cmpb   $0x0,0x38(%rbx)
    7031:	74 06                	je     7039 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa9>
	  return _M_widen[static_cast<unsigned char>(__c)];
    7033:	0f b6 43 43          	movzbl 0x43(%rbx),%eax
    7037:	eb 16                	jmp    704f <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbf>
	this->_M_widen_init();
    7039:	48 89 df             	mov    %rbx,%rdi
    703c:	e8 ef 06 01 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    7041:	48 8b 03             	mov    (%rbx),%rax
    7044:	48 89 df             	mov    %rbx,%rdi
    7047:	be 0a 00 00 00       	mov    $0xa,%esi
    704c:	ff 50 30             	callq  *0x30(%rax)
    704f:	0f be d0             	movsbl %al,%edx
    7052:	48 8d bc 24 80 02 00 	lea    0x280(%rsp),%rdi
    7059:	00 
    705a:	48 8d 74 24 78       	lea    0x78(%rsp),%rsi
    705f:	e8 ec 05 01 00       	callq  17650 <_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_@plt>
    7064:	48 8b 84 24 80 02 00 	mov    0x280(%rsp),%rax
    706b:	00 
    706c:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    7070:	48 8b ac 04 70 03 00 	mov    0x370(%rsp,%rax,1),%rbp
    7077:	00 
      if (!__f)
    7078:	48 85 ed             	test   %rbp,%rbp
    707b:	0f 84 07 06 00 00    	je     7688 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6f8>
    7081:	48 8b 05 38 1d 01 00 	mov    0x11d38(%rip),%rax        # 18dc0 <_ZTTNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE@GLIBCXX_3.4.21>
    7088:	48 8b 08             	mov    (%rax),%rcx
    708b:	48 89 8c 24 e8 00 00 	mov    %rcx,0xe8(%rsp)
    7092:	00 
    7093:	48 8b 48 10          	mov    0x10(%rax),%rcx
    7097:	48 89 8c 24 e0 00 00 	mov    %rcx,0xe0(%rsp)
    709e:	00 
    709f:	48 8b 48 40          	mov    0x40(%rax),%rcx
    70a3:	48 89 8c 24 d8 00 00 	mov    %rcx,0xd8(%rsp)
    70aa:	00 
    70ab:	48 8b 48 48          	mov    0x48(%rax),%rcx
    70af:	48 89 8c 24 d0 00 00 	mov    %rcx,0xd0(%rsp)
    70b6:	00 
    70b7:	48 8b 40 18          	mov    0x18(%rax),%rax
    70bb:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
    70c2:	00 
    70c3:	31 db                	xor    %ebx,%ebx
    70c5:	48 8b 05 ec 1c 01 00 	mov    0x11cec(%rip),%rax        # 18db8 <_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE@GLIBCXX_3.4.21>
    70cc:	48 83 c0 10          	add    $0x10,%rax
    70d0:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
    70d7:	00 
    70d8:	48 8b 05 c1 1c 01 00 	mov    0x11cc1(%rip),%rax        # 18da0 <_ZTVSt15basic_streambufIcSt11char_traitsIcEE@GLIBCXX_3.4>
    70df:	48 83 c0 10          	add    $0x10,%rax
    70e3:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
    70ea:	00 
    70eb:	4c 8d b4 24 f8 00 00 	lea    0xf8(%rsp),%r14
    70f2:	00 
    70f3:	31 c0                	xor    %eax,%eax
    70f5:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
    70fa:	45 31 ff             	xor    %r15d,%r15d
    70fd:	eb 1e                	jmp    711d <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x18d>
    70ff:	90                   	nop
    7100:	48 8b 84 24 80 02 00 	mov    0x280(%rsp),%rax
    7107:	00 
    7108:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    710c:	48 8b ac 04 70 03 00 	mov    0x370(%rsp,%rax,1),%rbp
    7113:	00 
      if (!__f)
    7114:	48 85 ed             	test   %rbp,%rbp
    7117:	0f 84 6b 05 00 00    	je     7688 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6f8>
	if (_M_widen_ok)
    711d:	80 7d 38 00          	cmpb   $0x0,0x38(%rbp)
    7121:	74 0d                	je     7130 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a0>
	  return _M_widen[static_cast<unsigned char>(__c)];
    7123:	0f b6 45 43          	movzbl 0x43(%rbp),%eax
    7127:	eb 1e                	jmp    7147 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b7>
    7129:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	this->_M_widen_init();
    7130:	48 89 ef             	mov    %rbp,%rdi
    7133:	e8 f8 05 01 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    7138:	48 8b 45 00          	mov    0x0(%rbp),%rax
    713c:	48 89 ef             	mov    %rbp,%rdi
    713f:	be 0a 00 00 00       	mov    $0xa,%esi
    7144:	ff 50 30             	callq  *0x30(%rax)
    7147:	0f be d0             	movsbl %al,%edx
    714a:	48 8d bc 24 80 02 00 	lea    0x280(%rsp),%rdi
    7151:	00 
    7152:	48 8d 74 24 78       	lea    0x78(%rsp),%rsi
    7157:	e8 f4 04 01 00       	callq  17650 <_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_@plt>

        std::string line;
        // Skip header
        std::getline(file, line);

        while (std::getline(file, line)) {
    715c:	48 8b 08             	mov    (%rax),%rcx
    715f:	48 8b 49 e8          	mov    -0x18(%rcx),%rcx
      { return (this->rdstate() & (badbit | failbit)) != 0; }
    7163:	f6 44 08 20 05       	testb  $0x5,0x20(%rax,%rcx,1)
    7168:	0f 85 3f 04 00 00    	jne    75ad <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x61d>
    716e:	0f 57 c0             	xorps  %xmm0,%xmm0
    7171:	0f 29 04 24          	movaps %xmm0,(%rsp)
    7175:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
    717c:	00 00 
            std::vector<float> row;
            std::stringstream  ss(line);
    717e:	4c 89 f7             	mov    %r14,%rdi
    7181:	48 8d 74 24 78       	lea    0x78(%rsp),%rsi
    7186:	ba 18 00 00 00       	mov    $0x18,%edx
    718b:	e8 60 05 01 00       	callq  176f0 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1ERKNS_12basic_stringIcS2_S3_EESt13_Ios_Openmode@plt>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    7190:	48 8d 84 24 a8 00 00 	lea    0xa8(%rsp),%rax
    7197:	00 
    7198:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
    719f:	00 
      { _M_string_length = __length; }
    71a0:	48 c7 84 24 a0 00 00 	movq   $0x0,0xa0(%rsp)
    71a7:	00 00 00 00 00 
    71ac:	c6 84 24 a8 00 00 00 	movb   $0x0,0xa8(%rsp)
    71b3:	00 
    71b4:	48 89 5c 24 20       	mov    %rbx,0x20(%rsp)
    71b9:	eb 13                	jmp    71ce <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x23e>
    71bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    71c0:	f3 0f 11 45 00       	movss  %xmm0,0x0(%rbp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
    71c5:	48 83 c5 04          	add    $0x4,%rbp
    71c9:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
            std::string        value;

            while (std::getline(ss, value, ',')) {
    71ce:	4c 89 f7             	mov    %r14,%rdi
    71d1:	48 8d b4 24 98 00 00 	lea    0x98(%rsp),%rsi
    71d8:	00 
    71d9:	ba 2c 00 00 00       	mov    $0x2c,%edx
    71de:	e8 6d 04 01 00       	callq  17650 <_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_@plt>
    71e3:	48 8b 08             	mov    (%rax),%rcx
    71e6:	48 8b 49 e8          	mov    -0x18(%rcx),%rcx
    71ea:	f6 44 08 20 05       	testb  $0x5,0x20(%rax,%rcx,1)
    71ef:	0f 85 1b 01 00 00    	jne    7310 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x380>
      { return _M_dataplus._M_p; }
    71f5:	4c 8b a4 24 98 00 00 	mov    0x98(%rsp),%r12
    71fc:	00 
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
    71fd:	e8 3e 07 01 00       	callq  17940 <__errno_location@plt>
    7202:	49 89 c5             	mov    %rax,%r13
    7205:	8b 28                	mov    (%rax),%ebp
    7207:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
	  }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
    720d:	4c 89 e7             	mov    %r12,%rdi
    7210:	48 8d b4 24 f0 00 00 	lea    0xf0(%rsp),%rsi
    7217:	00 
    7218:	e8 33 07 01 00       	callq  17950 <strtof@plt>

      if (__endptr == __str)
    721d:	4c 39 a4 24 f0 00 00 	cmp    %r12,0xf0(%rsp)
    7224:	00 
    7225:	0f 84 39 04 00 00    	je     7664 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6d4>
	std::__throw_invalid_argument(__name);
      else if (errno == ERANGE
    722b:	41 8b 45 00          	mov    0x0(%r13),%eax
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
    722f:	85 c0                	test   %eax,%eax
    7231:	74 0d                	je     7240 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2b0>
    7233:	83 f8 22             	cmp    $0x22,%eax
    7236:	75 0c                	jne    7244 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2b4>
    7238:	e9 33 04 00 00       	jmpq   7670 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e0>
    723d:	0f 1f 00             	nopl   (%rax)
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
    7240:	41 89 6d 00          	mov    %ebp,0x0(%r13)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    7244:	48 8b 6c 24 08       	mov    0x8(%rsp),%rbp
    7249:	48 3b 6c 24 10       	cmp    0x10(%rsp),%rbp
    724e:	0f 85 6c ff ff ff    	jne    71c0 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x230>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    7254:	4c 8b 2c 24          	mov    (%rsp),%r13
    7258:	4c 29 ed             	sub    %r13,%rbp

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
    725b:	48 b8 fc ff ff ff ff 	movabs $0x7ffffffffffffffc,%rax
    7262:	ff ff 7f 
    7265:	48 39 c5             	cmp    %rax,%rbp
    7268:	0f 84 0e 04 00 00    	je     767c <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6ec>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    726e:	48 89 eb             	mov    %rbp,%rbx
    7271:	48 c1 fb 02          	sar    $0x2,%rbx
	  __throw_length_error(__N(__s));

	const size_type __len = size() + (std::max)(size(), __n);
    7275:	48 83 fb 01          	cmp    $0x1,%rbx
    7279:	48 89 d8             	mov    %rbx,%rax
    727c:	48 83 d0 00          	adc    $0x0,%rax
    7280:	4c 8d 34 18          	lea    (%rax,%rbx,1),%r14
    7284:	48 b9 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rcx
    728b:	ff ff 1f 
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    728e:	49 39 ce             	cmp    %rcx,%r14
    7291:	4c 0f 43 f1          	cmovae %rcx,%r14
	const size_type __len = size() + (std::max)(size(), __n);
    7295:	48 01 d8             	add    %rbx,%rax
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    7298:	4c 0f 42 f1          	cmovb  %rcx,%r14
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    729c:	4d 85 f6             	test   %r14,%r14
    729f:	74 1e                	je     72bf <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x32f>
    72a1:	f3 0f 11 44 24 2c    	movss  %xmm0,0x2c(%rsp)
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    72a7:	4a 8d 3c b5 00 00 00 	lea    0x0(,%r14,4),%rdi
    72ae:	00 
    72af:	e8 ac 04 01 00       	callq  17760 <_Znwm@plt>
    72b4:	49 89 c4             	mov    %rax,%r12
    72b7:	f3 0f 10 44 24 2c    	movss  0x2c(%rsp),%xmm0
    72bd:	eb 03                	jmp    72c2 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x332>
    72bf:	45 31 e4             	xor    %r12d,%r12d
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    72c2:	f3 41 0f 11 04 9c    	movss  %xmm0,(%r12,%rbx,4)
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
    72c8:	48 85 ed             	test   %rbp,%rbp
    72cb:	7e 0e                	jle    72db <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34b>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    72cd:	4c 89 e7             	mov    %r12,%rdi
    72d0:	4c 89 ee             	mov    %r13,%rsi
    72d3:	48 89 ea             	mov    %rbp,%rdx
    72d6:	e8 85 06 01 00       	callq  17960 <memmove@plt>
	if (__p)
    72db:	4d 85 ed             	test   %r13,%r13
    72de:	74 08                	je     72e8 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x358>
	::operator delete(__p
    72e0:	4c 89 ef             	mov    %r13,%rdi
    72e3:	e8 d8 03 01 00       	callq  176c0 <_ZdlPv@plt>
    72e8:	49 8d 04 2c          	lea    (%r12,%rbp,1),%rax
    72ec:	48 83 c0 04          	add    $0x4,%rax
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
    72f0:	4c 89 24 24          	mov    %r12,(%rsp)
      this->_M_impl._M_finish = __new_finish;
    72f4:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
      this->_M_impl._M_end_of_storage = __new_start + __len;
    72f9:	4b 8d 04 b4          	lea    (%r12,%r14,4),%rax
    72fd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    7302:	4c 8d b4 24 f8 00 00 	lea    0xf8(%rsp),%r14
    7309:	00 
    730a:	e9 bf fe ff ff       	jmpq   71ce <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x23e>
    730f:	90                   	nop
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
    7310:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
    7315:	48 8b 6c 24 70       	mov    0x70(%rsp),%rbp
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    731a:	49 39 ef             	cmp    %rbp,%r15
    731d:	74 21                	je     7340 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3b0>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    731f:	f3 41 0f 10 46 fc    	movss  -0x4(%r14),%xmm0
    7325:	f3 41 0f 11 07       	movss  %xmm0,(%r15)
	    ++this->_M_impl._M_finish;
    732a:	49 83 c7 04          	add    $0x4,%r15
    732e:	4c 89 7c 24 58       	mov    %r15,0x58(%rsp)
    7333:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
    7338:	e9 bf 00 00 00       	jmpq   73fc <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x46c>
    733d:	0f 1f 00             	nopl   (%rax)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    7340:	48 2b 6c 24 20       	sub    0x20(%rsp),%rbp
	if (max_size() - size() < __n)
    7345:	48 b8 fc ff ff ff ff 	movabs $0x7ffffffffffffffc,%rax
    734c:	ff ff 7f 
    734f:	48 39 c5             	cmp    %rax,%rbp
    7352:	0f 84 3a 03 00 00    	je     7692 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x702>
    7358:	48 89 eb             	mov    %rbp,%rbx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    735b:	48 c1 fd 02          	sar    $0x2,%rbp
	const size_type __len = size() + (std::max)(size(), __n);
    735f:	48 83 fd 01          	cmp    $0x1,%rbp
    7363:	48 89 e8             	mov    %rbp,%rax
    7366:	48 83 d0 00          	adc    $0x0,%rax
    736a:	4c 8d 24 28          	lea    (%rax,%rbp,1),%r12
    736e:	48 b9 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rcx
    7375:	ff ff 1f 
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    7378:	49 39 cc             	cmp    %rcx,%r12
    737b:	4c 0f 43 e1          	cmovae %rcx,%r12
	const size_type __len = size() + (std::max)(size(), __n);
    737f:	48 01 e8             	add    %rbp,%rax
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    7382:	4c 0f 42 e1          	cmovb  %rcx,%r12
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    7386:	4d 85 e4             	test   %r12,%r12
    7389:	74 12                	je     739d <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x40d>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    738b:	4a 8d 3c a5 00 00 00 	lea    0x0(,%r12,4),%rdi
    7392:	00 
    7393:	e8 c8 03 01 00       	callq  17760 <_Znwm@plt>
    7398:	49 89 c5             	mov    %rax,%r13
    739b:	eb 03                	jmp    73a0 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x410>
    739d:	45 31 ed             	xor    %r13d,%r13d
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    73a0:	f3 41 0f 10 46 fc    	movss  -0x4(%r14),%xmm0
    73a6:	f3 41 0f 11 44 ad 00 	movss  %xmm0,0x0(%r13,%rbp,4)
    73ad:	49 89 de             	mov    %rbx,%r14
      if (__count > 0)
    73b0:	48 85 db             	test   %rbx,%rbx
    73b3:	48 8b 5c 24 20       	mov    0x20(%rsp),%rbx
    73b8:	7e 0e                	jle    73c8 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x438>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    73ba:	4c 89 ef             	mov    %r13,%rdi
    73bd:	48 89 de             	mov    %rbx,%rsi
    73c0:	4c 89 f2             	mov    %r14,%rdx
    73c3:	e8 98 05 01 00       	callq  17960 <memmove@plt>
	if (__p)
    73c8:	48 85 db             	test   %rbx,%rbx
    73cb:	74 08                	je     73d5 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x445>
	::operator delete(__p
    73cd:	48 89 df             	mov    %rbx,%rdi
    73d0:	e8 eb 02 01 00       	callq  176c0 <_ZdlPv@plt>
    73d5:	4f 8d 3c 2e          	lea    (%r14,%r13,1),%r15
    73d9:	49 83 c7 04          	add    $0x4,%r15
      this->_M_impl._M_start = __new_start;
    73dd:	4c 89 6c 24 50       	mov    %r13,0x50(%rsp)
      this->_M_impl._M_finish = __new_finish;
    73e2:	4c 89 7c 24 58       	mov    %r15,0x58(%rsp)
      this->_M_impl._M_end_of_storage = __new_start + __len;
    73e7:	4b 8d 4c a5 00       	lea    0x0(%r13,%r12,4),%rcx
    73ec:	48 89 c8             	mov    %rcx,%rax
    73ef:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
    73f4:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
    73f9:	4d 89 ee             	mov    %r13,%r14
	--this->_M_impl._M_finish;
    73fc:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    7401:	48 83 c7 fc          	add    $0xfffffffffffffffc,%rdi
    7405:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    740a:	48 8b 6c 24 38       	mov    0x38(%rsp),%rbp
    740f:	48 3b 6c 24 40       	cmp    0x40(%rsp),%rbp
    7414:	74 4a                	je     7460 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4d0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    7416:	48 8b 04 24          	mov    (%rsp),%rax
    741a:	48 89 fb             	mov    %rdi,%rbx
    741d:	48 29 c3             	sub    %rax,%rbx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    7420:	48 c1 fb 02          	sar    $0x2,%rbx
	: _M_start(), _M_finish(), _M_end_of_storage()
    7424:	0f 57 c0             	xorps  %xmm0,%xmm0
    7427:	0f 11 45 00          	movups %xmm0,0x0(%rbp)
    742b:	48 c7 45 10 00 00 00 	movq   $0x0,0x10(%rbp)
    7432:	00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    7433:	48 29 c7             	sub    %rax,%rdi
    7436:	74 48                	je     7480 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f0>
	if (__n > this->_M_max_size())
    7438:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    743f:	ff ff 1f 
    7442:	48 39 c3             	cmp    %rax,%rbx
    7445:	0f 87 42 02 00 00    	ja     768d <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6fd>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    744b:	e8 10 03 01 00       	callq  17760 <_Znwm@plt>
    7450:	49 89 c4             	mov    %rax,%r12
    7453:	eb 2e                	jmp    7483 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f3>
    7455:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    745c:	00 00 00 00 
	  _M_realloc_insert(end(), __x);
    7460:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
    7465:	48 89 ee             	mov    %rbp,%rsi
    7468:	48 89 e2             	mov    %rsp,%rdx
    746b:	e8 20 54 00 00       	callq  c890 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
    7470:	eb 47                	jmp    74b9 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x529>
    7472:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    7479:	1f 84 00 00 00 00 00 
    7480:	45 31 e4             	xor    %r12d,%r12d
	this->_M_impl._M_start = this->_M_allocate(__n);
    7483:	4c 89 65 00          	mov    %r12,0x0(%rbp)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    7487:	4c 89 65 08          	mov    %r12,0x8(%rbp)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    748b:	49 8d 04 9c          	lea    (%r12,%rbx,4),%rax
    748f:	48 89 45 10          	mov    %rax,0x10(%rbp)
    7493:	48 8b 34 24          	mov    (%rsp),%rsi
    7497:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
    749c:	49 29 f5             	sub    %rsi,%r13
    749f:	74 0b                	je     74ac <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x51c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    74a1:	4c 89 e7             	mov    %r12,%rdi
    74a4:	4c 89 ea             	mov    %r13,%rdx
    74a7:	e8 b4 04 01 00       	callq  17960 <memmove@plt>
	  return __result + _Num;
    74ac:	4d 01 ec             	add    %r13,%r12
	this->_M_impl._M_finish =
    74af:	4c 89 65 08          	mov    %r12,0x8(%rbp)
	    ++this->_M_impl._M_finish;
    74b3:	48 83 44 24 38 18    	addq   $0x18,0x38(%rsp)
    74b9:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
    74c0:	00 
      { return _M_data() == _M_local_data(); }
    74c1:	48 8d 84 24 a8 00 00 	lea    0xa8(%rsp),%rax
    74c8:	00 
    74c9:	48 39 c7             	cmp    %rax,%rdi
	if (!_M_is_local())
    74cc:	74 05                	je     74d3 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x543>
	::operator delete(__p
    74ce:	e8 ed 01 01 00       	callq  176c0 <_ZdlPv@plt>
    74d3:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
    74da:	00 
       *
       *  The buffer is deallocated by the stringbuf object, not the
       *  formatting stream.
      */
      ~basic_stringstream()
      { }
    74db:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
    74e2:	00 
    74e3:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    74e7:	48 8b 8c 24 d8 00 00 	mov    0xd8(%rsp),%rcx
    74ee:	00 
    74ef:	48 89 8c 04 f8 00 00 	mov    %rcx,0xf8(%rsp,%rax,1)
    74f6:	00 
    74f7:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
    74fe:	00 
    74ff:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
    7506:	00 
    7507:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
    750e:	00 
    }

  // Inhibit implicit instantiations for required instantiations,
  // which are defined via explicit instantiations elsewhere.
#if _GLIBCXX_EXTERN_TEMPLATE
  extern template class basic_stringbuf<char>;
    750f:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
    7516:	00 
      { return _M_dataplus._M_p; }
    7517:	48 8b bc 24 58 01 00 	mov    0x158(%rsp),%rdi
    751e:	00 
      { return _M_data() == _M_local_data(); }
    751f:	48 8d 84 24 68 01 00 	lea    0x168(%rsp),%rax
    7526:	00 
    7527:	48 39 c7             	cmp    %rax,%rdi
    752a:	4c 89 f3             	mov    %r14,%rbx
	if (!_M_is_local())
    752d:	74 05                	je     7534 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5a4>
    752f:	e8 8c 01 01 00       	callq  176c0 <_ZdlPv@plt>
    7534:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
    753b:	00 

  public:
      /// Destructor deallocates no buffer space.
      virtual
      ~basic_streambuf()
      { }
    753c:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
    7543:	00 
    7544:	48 8d bc 24 48 01 00 	lea    0x148(%rsp),%rdi
    754b:	00 
    754c:	e8 0f 00 01 00       	callq  17560 <_ZNSt6localeD1Ev@plt>
    7551:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
    7558:	00 
       *
       *  This does very little apart from providing a virtual base dtor.
      */
      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }
    7559:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
    7560:	00 
    7561:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    7565:	48 8b 8c 24 c8 00 00 	mov    0xc8(%rsp),%rcx
    756c:	00 
    756d:	48 89 8c 04 f8 00 00 	mov    %rcx,0xf8(%rsp,%rax,1)
    7574:	00 
    7575:	48 c7 84 24 00 01 00 	movq   $0x0,0x100(%rsp)
    757c:	00 00 00 00 00 
    7581:	48 8d bc 24 78 01 00 	lea    0x178(%rsp),%rdi
    7588:	00 
    7589:	e8 12 00 01 00       	callq  175a0 <_ZNSt8ios_baseD2Ev@plt>
	_M_deallocate(_M_impl._M_start,
    758e:	48 8b 3c 24          	mov    (%rsp),%rdi
	if (__p)
    7592:	48 85 ff             	test   %rdi,%rdi
    7595:	4c 8d b4 24 f8 00 00 	lea    0xf8(%rsp),%r14
    759c:	00 
    759d:	0f 84 5d fb ff ff    	je     7100 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x170>
    75a3:	e8 18 01 01 00       	callq  176c0 <_ZdlPv@plt>
    75a8:	e9 53 fb ff ff       	jmpq   7100 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x170>
    75ad:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
    75b2:	48 8d 54 24 50       	lea    0x50(%rsp),%rdx
    75b7:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
            y.push_back(row.back());
            row.pop_back();
            X.push_back(row);
        }

        return {X, y};
    75bc:	e8 2f 51 00 00       	callq  c6f0 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES2_EC2IRS4_RS2_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairISA_SB_EEEbE4typeELb1EEEOSA_OSB_>
      { return _M_dataplus._M_p; }
    75c1:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
      { return _M_data() == _M_local_data(); }
    75c6:	48 8d 84 24 88 00 00 	lea    0x88(%rsp),%rax
    75cd:	00 
    75ce:	48 39 c7             	cmp    %rax,%rdi
	if (!_M_is_local())
    75d1:	74 05                	je     75d8 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x648>
    75d3:	e8 e8 00 01 00       	callq  176c0 <_ZdlPv@plt>
       *
       *  The file is closed by the filebuf object, not the formatting
       *  stream.
       */
      ~basic_ifstream()
      { }
    75d8:	48 8b 35 b9 17 01 00 	mov    0x117b9(%rip),%rsi        # 18d98 <_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE@GLIBCXX_3.4>
    75df:	48 8d bc 24 80 02 00 	lea    0x280(%rsp),%rdi
    75e6:	00 
    75e7:	e8 14 00 01 00       	callq  17600 <_ZNSt14basic_ifstreamIcSt11char_traitsIcEED2Ev@plt>
    75ec:	48 8d bc 24 80 03 00 	lea    0x380(%rsp),%rdi
    75f3:	00 
    75f4:	e8 a7 ff 00 00       	callq  175a0 <_ZNSt8ios_baseD2Ev@plt>
	_M_deallocate(_M_impl._M_start,
    75f9:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
	if (__p)
    75fe:	48 85 ff             	test   %rdi,%rdi
    7601:	74 05                	je     7608 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x678>
    7603:	e8 b8 00 01 00       	callq  176c0 <_ZdlPv@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    7608:	48 8b 5c 24 30       	mov    0x30(%rsp),%rbx
    760d:	4c 8b 74 24 38       	mov    0x38(%rsp),%r14
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
    7612:	4c 39 f3             	cmp    %r14,%rbx
    7615:	75 32                	jne    7649 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6b9>
	if (__p)
    7617:	48 85 db             	test   %rbx,%rbx
    761a:	74 08                	je     7624 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x694>
    761c:	48 89 df             	mov    %rbx,%rdi
    761f:	e8 9c 00 01 00       	callq  176c0 <_ZdlPv@plt>
    7624:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
    }
    7629:	48 81 c4 88 04 00 00 	add    $0x488,%rsp
    7630:	5b                   	pop    %rbx
    7631:	41 5c                	pop    %r12
    7633:	41 5d                	pop    %r13
    7635:	41 5e                	pop    %r14
    7637:	41 5f                	pop    %r15
    7639:	5d                   	pop    %rbp
    763a:	c3                   	retq   
    763b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    7640:	48 83 c3 18          	add    $0x18,%rbx
    7644:	4c 39 f3             	cmp    %r14,%rbx
    7647:	74 0f                	je     7658 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6c8>
	_M_deallocate(_M_impl._M_start,
    7649:	48 8b 3b             	mov    (%rbx),%rdi
	if (__p)
    764c:	48 85 ff             	test   %rdi,%rdi
    764f:	74 ef                	je     7640 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6b0>
    7651:	e8 6a 00 01 00       	callq  176c0 <_ZdlPv@plt>
    7656:	eb e8                	jmp    7640 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6b0>
	_M_deallocate(_M_impl._M_start,
    7658:	48 8b 5c 24 30       	mov    0x30(%rsp),%rbx
	if (__p)
    765d:	48 85 db             	test   %rbx,%rbx
    7660:	75 ba                	jne    761c <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x68c>
    7662:	eb c0                	jmp    7624 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x694>
	std::__throw_invalid_argument(__name);
    7664:	48 8d 3d 6b b4 ff ff 	lea    -0x4b95(%rip),%rdi        # 2ad6 <_IO_stdin_used+0x3e6>
    766b:	e8 b0 ff 00 00       	callq  17620 <_ZSt24__throw_invalid_argumentPKc@plt>
	std::__throw_out_of_range(__name);
    7670:	48 8d 3d 5f b4 ff ff 	lea    -0x4ba1(%rip),%rdi        # 2ad6 <_IO_stdin_used+0x3e6>
    7677:	e8 34 01 01 00       	callq  177b0 <_ZSt20__throw_out_of_rangePKc@plt>
	  __throw_length_error(__N(__s));
    767c:	48 8d 3d 2f b4 ff ff 	lea    -0x4bd1(%rip),%rdi        # 2ab2 <_IO_stdin_used+0x3c2>
    7683:	e8 e8 fe 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
	__throw_bad_cast();
    7688:	e8 43 00 01 00       	callq  176d0 <_ZSt16__throw_bad_castv@plt>
	  std::__throw_bad_alloc();
    768d:	e8 0e 00 01 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
    7692:	48 8d 3d 19 b4 ff ff 	lea    -0x4be7(%rip),%rdi        # 2ab2 <_IO_stdin_used+0x3c2>
    7699:	e8 d2 fe 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
            throw std::runtime_error("Failed to open file: " + filename);
    769e:	bf 10 00 00 00       	mov    $0x10,%edi
    76a3:	e8 38 00 01 00       	callq  176e0 <__cxa_allocate_exception@plt>
    76a8:	49 89 c6             	mov    %rax,%r14
    76ab:	48 8d 35 f9 b2 ff ff 	lea    -0x4d07(%rip),%rsi        # 29ab <_IO_stdin_used+0x2bb>
    76b2:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
    76b9:	00 
    76ba:	48 89 da             	mov    %rbx,%rdx
    76bd:	e8 8e 4f 00 00       	callq  c650 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
    76c2:	40 b5 01             	mov    $0x1,%bpl
    76c5:	48 8d b4 24 f8 00 00 	lea    0xf8(%rsp),%rsi
    76cc:	00 
    76cd:	4c 89 f7             	mov    %r14,%rdi
    76d0:	e8 fb fe 00 00       	callq  175d0 <_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>
    76d5:	31 ed                	xor    %ebp,%ebp
    76d7:	48 8b 35 ea 16 01 00 	mov    0x116ea(%rip),%rsi        # 18dc8 <_ZTISt13runtime_error@GLIBCXX_3.4>
    76de:	48 8b 15 f3 16 01 00 	mov    0x116f3(%rip),%rdx        # 18dd8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    76e5:	4c 89 f7             	mov    %r14,%rdi
    76e8:	e8 a3 ff 00 00       	callq  17690 <__cxa_throw@plt>
    76ed:	48 89 c3             	mov    %rax,%rbx
      { return _M_dataplus._M_p; }
    76f0:	48 8b bc 24 f8 00 00 	mov    0xf8(%rsp),%rdi
    76f7:	00 
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    76f8:	48 8d 84 24 08 01 00 	lea    0x108(%rsp),%rax
    76ff:	00 
      { return _M_data() == _M_local_data(); }
    7700:	48 39 c7             	cmp    %rax,%rdi
	if (!_M_is_local())
    7703:	74 05                	je     770a <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x77a>
	::operator delete(__p
    7705:	e8 b6 ff 00 00       	callq  176c0 <_ZdlPv@plt>
    770a:	40 84 ed             	test   %bpl,%bpl
    770d:	75 08                	jne    7717 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x787>
    770f:	e9 88 00 00 00       	jmpq   779c <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80c>
    7714:	48 89 c3             	mov    %rax,%rbx
    7717:	4c 89 f7             	mov    %r14,%rdi
    771a:	e8 d1 00 01 00       	callq  177f0 <__cxa_free_exception@plt>
    771f:	eb 7b                	jmp    779c <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80c>
    7721:	48 89 c3             	mov    %rax,%rbx
    7724:	e9 a3 00 00 00       	jmpq   77cc <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x83c>
    7729:	eb 12                	jmp    773d <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7ad>
    772b:	eb 10                	jmp    773d <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7ad>
    772d:	48 89 c3             	mov    %rax,%rbx
    7730:	eb 45                	jmp    7777 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e7>
    7732:	eb 00                	jmp    7734 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7a4>
    7734:	48 89 c3             	mov    %rax,%rbx
    7737:	eb 4c                	jmp    7785 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7f5>
    7739:	eb 02                	jmp    773d <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7ad>
    773b:	eb 00                	jmp    773d <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7ad>
    773d:	48 89 c3             	mov    %rax,%rbx
    7740:	eb 0e                	jmp    7750 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7c0>
    7742:	48 89 c3             	mov    %rax,%rbx
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
    7745:	41 83 7d 00 00       	cmpl   $0x0,0x0(%r13)
    774a:	75 04                	jne    7750 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7c0>
    774c:	41 89 6d 00          	mov    %ebp,0x0(%r13)
      { return _M_dataplus._M_p; }
    7750:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
    7757:	00 
      { return _M_data() == _M_local_data(); }
    7758:	48 8d 84 24 a8 00 00 	lea    0xa8(%rsp),%rax
    775f:	00 
    7760:	48 39 c7             	cmp    %rax,%rdi
	if (!_M_is_local())
    7763:	74 05                	je     776a <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7da>
    7765:	e8 56 ff 00 00       	callq  176c0 <_ZdlPv@plt>
    776a:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
    7771:	00 
        }
    7772:	e8 29 00 01 00       	callq  177a0 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@plt>
	_M_deallocate(_M_impl._M_start,
    7777:	48 8b 3c 24          	mov    (%rsp),%rdi
	if (__p)
    777b:	48 85 ff             	test   %rdi,%rdi
    777e:	74 05                	je     7785 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7f5>
    7780:	e8 3b ff 00 00       	callq  176c0 <_ZdlPv@plt>
      { return _M_dataplus._M_p; }
    7785:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
      { return _M_data() == _M_local_data(); }
    778a:	48 8d 84 24 88 00 00 	lea    0x88(%rsp),%rax
    7791:	00 
    7792:	48 39 c7             	cmp    %rax,%rdi
	if (!_M_is_local())
    7795:	74 05                	je     779c <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80c>
    7797:	e8 24 ff 00 00       	callq  176c0 <_ZdlPv@plt>
    779c:	48 8b 35 f5 15 01 00 	mov    0x115f5(%rip),%rsi        # 18d98 <_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE@GLIBCXX_3.4>
    77a3:	48 8d bc 24 80 02 00 	lea    0x280(%rsp),%rdi
    77aa:	00 
    77ab:	e8 50 fe 00 00       	callq  17600 <_ZNSt14basic_ifstreamIcSt11char_traitsIcEED2Ev@plt>
    77b0:	48 8d bc 24 80 03 00 	lea    0x380(%rsp),%rdi
    77b7:	00 
    77b8:	e8 e3 fd 00 00       	callq  175a0 <_ZNSt8ios_baseD2Ev@plt>
	_M_deallocate(_M_impl._M_start,
    77bd:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
	if (__p)
    77c2:	48 85 ff             	test   %rdi,%rdi
    77c5:	74 05                	je     77cc <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x83c>
    77c7:	e8 f4 fe 00 00       	callq  176c0 <_ZdlPv@plt>
    77cc:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
    }
    77d1:	e8 4a 50 00 00       	callq  c820 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED2Ev>
    77d6:	48 89 df             	mov    %rbx,%rdi
    77d9:	e8 92 01 01 00       	callq  17970 <_Unwind_Resume@plt>
    77de:	66 90                	xchg   %ax,%ax

00000000000077e0 <_ZN5utils20flatten_column_majorERKSt6vectorIS0_IfSaIfEESaIS2_EE>:

    // Convert 2D vector to column-major vector
    std::vector<float> flatten_column_major(const std::vector<std::vector<float>>& data) {
    77e0:	55                   	push   %rbp
    77e1:	41 57                	push   %r15
    77e3:	41 56                	push   %r14
    77e5:	41 55                	push   %r13
    77e7:	41 54                	push   %r12
    77e9:	53                   	push   %rbx
    77ea:	48 83 ec 28          	sub    $0x28,%rsp
    77ee:	48 8b 06             	mov    (%rsi),%rax
    77f1:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() == __rhs.base(); }
    77f5:	48 39 c8             	cmp    %rcx,%rax
        if (data.empty())
    77f8:	0f 84 8f 00 00 00    	je     788d <_ZN5utils20flatten_column_majorERKSt6vectorIS0_IfSaIfEESaIS2_EE+0xad>
    77fe:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    7803:	48 29 c1             	sub    %rax,%rcx
    7806:	48 c1 f9 03          	sar    $0x3,%rcx
    780a:	49 bd ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%r13
    7811:	aa aa aa 
    7814:	4c 0f af e9          	imul   %rcx,%r13
    7818:	48 8b 08             	mov    (%rax),%rcx
    781b:	48 8b 50 08          	mov    0x8(%rax),%rdx
    781f:	48 89 d5             	mov    %rdx,%rbp
    7822:	48 29 cd             	sub    %rcx,%rbp
    7825:	48 c1 fd 02          	sar    $0x2,%rbp
            return {};

        size_t             rows = data.size();
        size_t             cols = data[0].size();
        std::vector<float> flattened(rows * cols);
    7829:	49 89 ec             	mov    %rbp,%r12
    782c:	4d 0f af e5          	imul   %r13,%r12

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    7830:	4c 89 e0             	mov    %r12,%rax
    7833:	48 c1 e8 3d          	shr    $0x3d,%rax
    7837:	0f 85 b2 01 00 00    	jne    79ef <_ZN5utils20flatten_column_majorERKSt6vectorIS0_IfSaIfEESaIS2_EE+0x20f>
    783d:	49 89 f7             	mov    %rsi,%r15
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    7840:	4d 85 e4             	test   %r12,%r12
    7843:	74 5e                	je     78a3 <_ZN5utils20flatten_column_majorERKSt6vectorIS0_IfSaIfEESaIS2_EE+0xc3>
    7845:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
    784a:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    784f:	4a 8d 3c a5 00 00 00 	lea    0x0(,%r12,4),%rdi
    7856:	00 
    7857:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
    785c:	e8 ff fe 00 00       	callq  17760 <_Znwm@plt>
    7861:	49 89 c6             	mov    %rax,%r14
    7864:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
	this->_M_impl._M_start = this->_M_allocate(__n);
    7869:	4c 89 30             	mov    %r14,(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    786c:	4b 8d 1c a6          	lea    (%r14,%r12,4),%rbx
    7870:	48 89 58 10          	mov    %rbx,0x10(%rax)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
    7874:	41 c7 06 00 00 00 00 	movl   $0x0,(%r14)
	      ++__first;
    787b:	4c 89 f7             	mov    %r14,%rdi
    787e:	48 83 c7 04          	add    $0x4,%rdi
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
    7882:	49 83 fc 01          	cmp    $0x1,%r12
    7886:	75 35                	jne    78bd <_ZN5utils20flatten_column_majorERKSt6vectorIS0_IfSaIfEESaIS2_EE+0xdd>
    7888:	48 89 fb             	mov    %rdi,%rbx
    788b:	eb 40                	jmp    78cd <_ZN5utils20flatten_column_majorERKSt6vectorIS0_IfSaIfEESaIS2_EE+0xed>
	: _M_start(), _M_finish(), _M_end_of_storage()
    788d:	0f 57 c0             	xorps  %xmm0,%xmm0
    7890:	0f 11 07             	movups %xmm0,(%rdi)
    7893:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
    789a:	00 
                flattened[j * rows + i] = data[i][j];
            }
        }

        return flattened;
    }
    789b:	48 89 f8             	mov    %rdi,%rax
    789e:	e9 3d 01 00 00       	jmpq   79e0 <_ZN5utils20flatten_column_majorERKSt6vectorIS0_IfSaIfEESaIS2_EE+0x200>
	this->_M_impl._M_finish = this->_M_impl._M_start;
    78a3:	0f 57 c0             	xorps  %xmm0,%xmm0
    78a6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    78ab:	0f 11 00             	movups %xmm0,(%rax)
    78ae:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    78b5:	00 
    78b6:	45 31 f6             	xor    %r14d,%r14d
    78b9:	31 db                	xor    %ebx,%ebx
    78bb:	eb 1f                	jmp    78dc <_ZN5utils20flatten_column_majorERKSt6vectorIS0_IfSaIfEESaIS2_EE+0xfc>
    78bd:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
      for (; __first != __last; ++__first)
    78c2:	48 83 c2 fc          	add    $0xfffffffffffffffc,%rdx
	*__first = __tmp;
    78c6:	31 f6                	xor    %esi,%esi
    78c8:	e8 c3 00 01 00       	callq  17990 <memset@plt>
    78cd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    78d2:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
    78d7:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
	this->_M_impl._M_finish =
    78dc:	48 89 58 08          	mov    %rbx,0x8(%rax)
        for (size_t j = 0; j < cols; ++j) {
    78e0:	48 39 ca             	cmp    %rcx,%rdx
    78e3:	0f 84 f7 00 00 00    	je     79e0 <_ZN5utils20flatten_column_majorERKSt6vectorIS0_IfSaIfEESaIS2_EE+0x200>
    78e9:	4d 8b 3f             	mov    (%r15),%r15
    78ec:	49 83 fd 01          	cmp    $0x1,%r13
    78f0:	4c 89 e9             	mov    %r13,%rcx
    78f3:	48 83 d1 00          	adc    $0x0,%rcx
    78f7:	48 83 fd 01          	cmp    $0x1,%rbp
    78fb:	48 83 d5 00          	adc    $0x0,%rbp
    78ff:	89 ca                	mov    %ecx,%edx
    7901:	83 e2 03             	and    $0x3,%edx
    7904:	48 83 e1 fc          	and    $0xfffffffffffffffc,%rcx
    7908:	49 8d 76 0c          	lea    0xc(%r14),%rsi
    790c:	4a 8d 3c ad 00 00 00 	lea    0x0(,%r13,4),%rdi
    7913:	00 
    7914:	45 31 c0             	xor    %r8d,%r8d
    7917:	eb 19                	jmp    7932 <_ZN5utils20flatten_column_majorERKSt6vectorIS0_IfSaIfEESaIS2_EE+0x152>
    7919:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    7920:	49 ff c0             	inc    %r8
    7923:	48 01 fe             	add    %rdi,%rsi
    7926:	49 01 fe             	add    %rdi,%r14
    7929:	49 39 e8             	cmp    %rbp,%r8
    792c:	0f 84 ae 00 00 00    	je     79e0 <_ZN5utils20flatten_column_majorERKSt6vectorIS0_IfSaIfEESaIS2_EE+0x200>
    7932:	49 83 fd 04          	cmp    $0x4,%r13
            for (size_t i = 0; i < rows; ++i) {
    7936:	73 08                	jae    7940 <_ZN5utils20flatten_column_majorERKSt6vectorIS0_IfSaIfEESaIS2_EE+0x160>
    7938:	45 31 c9             	xor    %r9d,%r9d
    793b:	eb 62                	jmp    799f <_ZN5utils20flatten_column_majorERKSt6vectorIS0_IfSaIfEESaIS2_EE+0x1bf>
    793d:	0f 1f 00             	nopl   (%rax)
    7940:	4d 89 fa             	mov    %r15,%r10
    7943:	45 31 c9             	xor    %r9d,%r9d
    7946:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    794d:	00 00 00 
	return *(this->_M_impl._M_start + __n);
    7950:	4d 8b 1a             	mov    (%r10),%r11
                flattened[j * rows + i] = data[i][j];
    7953:	f3 43 0f 10 04 83    	movss  (%r11,%r8,4),%xmm0
    7959:	f3 42 0f 11 44 8e f4 	movss  %xmm0,-0xc(%rsi,%r9,4)
    7960:	4d 8b 5a 18          	mov    0x18(%r10),%r11
    7964:	f3 43 0f 10 04 83    	movss  (%r11,%r8,4),%xmm0
    796a:	f3 42 0f 11 44 8e f8 	movss  %xmm0,-0x8(%rsi,%r9,4)
    7971:	4d 8b 5a 30          	mov    0x30(%r10),%r11
    7975:	f3 43 0f 10 04 83    	movss  (%r11,%r8,4),%xmm0
    797b:	f3 42 0f 11 44 8e fc 	movss  %xmm0,-0x4(%rsi,%r9,4)
    7982:	4d 8b 5a 48          	mov    0x48(%r10),%r11
    7986:	f3 43 0f 10 04 83    	movss  (%r11,%r8,4),%xmm0
    798c:	f3 42 0f 11 04 8e    	movss  %xmm0,(%rsi,%r9,4)
            for (size_t i = 0; i < rows; ++i) {
    7992:	49 83 c1 04          	add    $0x4,%r9
    7996:	49 83 c2 60          	add    $0x60,%r10
    799a:	4c 39 c9             	cmp    %r9,%rcx
    799d:	75 b1                	jne    7950 <_ZN5utils20flatten_column_majorERKSt6vectorIS0_IfSaIfEESaIS2_EE+0x170>
    799f:	48 85 d2             	test   %rdx,%rdx
    79a2:	0f 84 78 ff ff ff    	je     7920 <_ZN5utils20flatten_column_majorERKSt6vectorIS0_IfSaIfEESaIS2_EE+0x140>
    79a8:	4f 8d 14 8e          	lea    (%r14,%r9,4),%r10
    79ac:	4f 8d 0c 49          	lea    (%r9,%r9,2),%r9
    79b0:	4f 8d 0c cf          	lea    (%r15,%r9,8),%r9
    79b4:	45 31 db             	xor    %r11d,%r11d
    79b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    79be:	00 00 
    79c0:	49 8b 19             	mov    (%r9),%rbx
                flattened[j * rows + i] = data[i][j];
    79c3:	f3 42 0f 10 04 83    	movss  (%rbx,%r8,4),%xmm0
    79c9:	f3 43 0f 11 04 9a    	movss  %xmm0,(%r10,%r11,4)
            for (size_t i = 0; i < rows; ++i) {
    79cf:	49 ff c3             	inc    %r11
    79d2:	49 83 c1 18          	add    $0x18,%r9
    79d6:	4c 39 da             	cmp    %r11,%rdx
    79d9:	75 e5                	jne    79c0 <_ZN5utils20flatten_column_majorERKSt6vectorIS0_IfSaIfEESaIS2_EE+0x1e0>
    79db:	e9 40 ff ff ff       	jmpq   7920 <_ZN5utils20flatten_column_majorERKSt6vectorIS0_IfSaIfEESaIS2_EE+0x140>
    }
    79e0:	48 83 c4 28          	add    $0x28,%rsp
    79e4:	5b                   	pop    %rbx
    79e5:	41 5c                	pop    %r12
    79e7:	41 5d                	pop    %r13
    79e9:	41 5e                	pop    %r14
    79eb:	41 5f                	pop    %r15
    79ed:	5d                   	pop    %rbp
    79ee:	c3                   	retq   
	  __throw_length_error(
    79ef:	48 8d 3d cd b3 ff ff 	lea    -0x4c33(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
    79f6:	e8 75 fb 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
    79fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000007a00 <_ZN5utils18mean_squared_errorERKSt6vectorIfSaIfEES4_>:

        return {train, test};
    }

    // Calculate mean squared error
    float mean_squared_error(const std::vector<float>& y_true, const std::vector<float>& y_pred) {
    7a00:	41 56                	push   %r14
    7a02:	53                   	push   %rbx
    7a03:	50                   	push   %rax
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    7a04:	48 8b 17             	mov    (%rdi),%rdx
    7a07:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
    7a0b:	48 89 c8             	mov    %rcx,%rax
    7a0e:	48 29 d0             	sub    %rdx,%rax
    7a11:	48 8b 3e             	mov    (%rsi),%rdi
    7a14:	48 8b 76 08          	mov    0x8(%rsi),%rsi
    7a18:	48 29 fe             	sub    %rdi,%rsi
        if (y_true.size() != y_pred.size()) {
    7a1b:	48 39 f0             	cmp    %rsi,%rax
    7a1e:	0f 85 f9 00 00 00    	jne    7b1d <_ZN5utils18mean_squared_errorERKSt6vectorIfSaIfEES4_+0x11d>
    7a24:	48 c1 f8 02          	sar    $0x2,%rax
            throw std::runtime_error("Arrays must have the same length");
        }

        float sum = 0.0f;
        for (size_t i = 0; i < y_true.size(); ++i) {
    7a28:	48 39 d1             	cmp    %rdx,%rcx
    7a2b:	74 1e                	je     7a4b <_ZN5utils18mean_squared_errorERKSt6vectorIfSaIfEES4_+0x4b>
    7a2d:	48 83 f8 01          	cmp    $0x1,%rax
    7a31:	49 89 c0             	mov    %rax,%r8
    7a34:	49 83 d0 00          	adc    $0x0,%r8
    7a38:	44 89 c1             	mov    %r8d,%ecx
    7a3b:	83 e1 03             	and    $0x3,%ecx
    7a3e:	48 83 f8 04          	cmp    $0x4,%rax
    7a42:	73 0f                	jae    7a53 <_ZN5utils18mean_squared_errorERKSt6vectorIfSaIfEES4_+0x53>
    7a44:	0f 57 c0             	xorps  %xmm0,%xmm0
    7a47:	31 f6                	xor    %esi,%esi
    7a49:	eb 6c                	jmp    7ab7 <_ZN5utils18mean_squared_errorERKSt6vectorIfSaIfEES4_+0xb7>
    7a4b:	0f 57 c0             	xorps  %xmm0,%xmm0
    7a4e:	e9 97 00 00 00       	jmpq   7aea <_ZN5utils18mean_squared_errorERKSt6vectorIfSaIfEES4_+0xea>
    7a53:	49 83 e0 fc          	and    $0xfffffffffffffffc,%r8
    7a57:	0f 57 c0             	xorps  %xmm0,%xmm0
    7a5a:	31 f6                	xor    %esi,%esi
    7a5c:	0f 1f 40 00          	nopl   0x0(%rax)
            float diff = y_true[i] - y_pred[i];
    7a60:	f3 0f 10 0c b2       	movss  (%rdx,%rsi,4),%xmm1
    7a65:	f3 0f 10 54 b2 04    	movss  0x4(%rdx,%rsi,4),%xmm2
    7a6b:	f3 0f 5c 0c b7       	subss  (%rdi,%rsi,4),%xmm1
            sum += diff * diff;
    7a70:	f3 0f 59 c9          	mulss  %xmm1,%xmm1
    7a74:	f3 0f 58 c8          	addss  %xmm0,%xmm1
            float diff = y_true[i] - y_pred[i];
    7a78:	f3 0f 5c 54 b7 04    	subss  0x4(%rdi,%rsi,4),%xmm2
            sum += diff * diff;
    7a7e:	f3 0f 59 d2          	mulss  %xmm2,%xmm2
    7a82:	f3 0f 58 d1          	addss  %xmm1,%xmm2
            float diff = y_true[i] - y_pred[i];
    7a86:	f3 0f 10 4c b2 08    	movss  0x8(%rdx,%rsi,4),%xmm1
    7a8c:	f3 0f 5c 4c b7 08    	subss  0x8(%rdi,%rsi,4),%xmm1
            sum += diff * diff;
    7a92:	f3 0f 59 c9          	mulss  %xmm1,%xmm1
    7a96:	f3 0f 58 ca          	addss  %xmm2,%xmm1
            float diff = y_true[i] - y_pred[i];
    7a9a:	f3 0f 10 44 b2 0c    	movss  0xc(%rdx,%rsi,4),%xmm0
    7aa0:	f3 0f 5c 44 b7 0c    	subss  0xc(%rdi,%rsi,4),%xmm0
            sum += diff * diff;
    7aa6:	f3 0f 59 c0          	mulss  %xmm0,%xmm0
    7aaa:	f3 0f 58 c1          	addss  %xmm1,%xmm0
        for (size_t i = 0; i < y_true.size(); ++i) {
    7aae:	48 83 c6 04          	add    $0x4,%rsi
    7ab2:	49 39 f0             	cmp    %rsi,%r8
    7ab5:	75 a9                	jne    7a60 <_ZN5utils18mean_squared_errorERKSt6vectorIfSaIfEES4_+0x60>
    7ab7:	48 85 c9             	test   %rcx,%rcx
    7aba:	74 2e                	je     7aea <_ZN5utils18mean_squared_errorERKSt6vectorIfSaIfEES4_+0xea>
    7abc:	48 8d 3c b7          	lea    (%rdi,%rsi,4),%rdi
    7ac0:	48 8d 14 b2          	lea    (%rdx,%rsi,4),%rdx
    7ac4:	31 f6                	xor    %esi,%esi
    7ac6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    7acd:	00 00 00 
            float diff = y_true[i] - y_pred[i];
    7ad0:	f3 0f 10 0c b2       	movss  (%rdx,%rsi,4),%xmm1
    7ad5:	f3 0f 5c 0c b7       	subss  (%rdi,%rsi,4),%xmm1
            sum += diff * diff;
    7ada:	f3 0f 59 c9          	mulss  %xmm1,%xmm1
    7ade:	f3 0f 58 c1          	addss  %xmm1,%xmm0
        for (size_t i = 0; i < y_true.size(); ++i) {
    7ae2:	48 ff c6             	inc    %rsi
    7ae5:	48 39 f1             	cmp    %rsi,%rcx
    7ae8:	75 e6                	jne    7ad0 <_ZN5utils18mean_squared_errorERKSt6vectorIfSaIfEES4_+0xd0>
        }

        return sum / y_true.size();
    7aea:	48 85 c0             	test   %rax,%rax
    7aed:	78 0a                	js     7af9 <_ZN5utils18mean_squared_errorERKSt6vectorIfSaIfEES4_+0xf9>
    7aef:	0f 57 c9             	xorps  %xmm1,%xmm1
    7af2:	f3 48 0f 2a c8       	cvtsi2ss %rax,%xmm1
    7af7:	eb 18                	jmp    7b11 <_ZN5utils18mean_squared_errorERKSt6vectorIfSaIfEES4_+0x111>
    7af9:	48 89 c1             	mov    %rax,%rcx
    7afc:	48 d1 e9             	shr    %rcx
    7aff:	83 e0 01             	and    $0x1,%eax
    7b02:	48 09 c8             	or     %rcx,%rax
    7b05:	0f 57 c9             	xorps  %xmm1,%xmm1
    7b08:	f3 48 0f 2a c8       	cvtsi2ss %rax,%xmm1
    7b0d:	f3 0f 58 c9          	addss  %xmm1,%xmm1
    7b11:	f3 0f 5e c1          	divss  %xmm1,%xmm0
    7b15:	48 83 c4 08          	add    $0x8,%rsp
    7b19:	5b                   	pop    %rbx
    7b1a:	41 5e                	pop    %r14
    7b1c:	c3                   	retq   
            throw std::runtime_error("Arrays must have the same length");
    7b1d:	bf 10 00 00 00       	mov    $0x10,%edi
    7b22:	e8 b9 fb 00 00       	callq  176e0 <__cxa_allocate_exception@plt>
    7b27:	48 89 c3             	mov    %rax,%rbx
    7b2a:	48 8d 35 0c b0 ff ff 	lea    -0x4ff4(%rip),%rsi        # 2b3d <_IO_stdin_used+0x44d>
    7b31:	48 89 c7             	mov    %rax,%rdi
    7b34:	e8 f7 fa 00 00       	callq  17630 <_ZNSt13runtime_errorC1EPKc@plt>
    7b39:	48 8b 35 88 12 01 00 	mov    0x11288(%rip),%rsi        # 18dc8 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7b40:	48 8b 15 91 12 01 00 	mov    0x11291(%rip),%rdx        # 18dd8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7b47:	48 89 df             	mov    %rbx,%rdi
    7b4a:	e8 41 fb 00 00       	callq  17690 <__cxa_throw@plt>
    7b4f:	49 89 c6             	mov    %rax,%r14
    7b52:	48 89 df             	mov    %rbx,%rdi
    7b55:	e8 96 fc 00 00       	callq  177f0 <__cxa_free_exception@plt>
    7b5a:	4c 89 f7             	mov    %r14,%rdi
    7b5d:	e8 0e fe 00 00       	callq  17970 <_Unwind_Resume@plt>
    7b62:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    7b69:	1f 84 00 00 00 00 00 

0000000000007b70 <_ZN5utils8accuracyERKSt6vectorIfSaIfEES4_>:
    }

    // Calculate accuracy for classification
    float accuracy(const std::vector<float>& y_true, const std::vector<float>& y_pred) {
    7b70:	41 56                	push   %r14
    7b72:	53                   	push   %rbx
    7b73:	50                   	push   %rax
    7b74:	48 8b 0f             	mov    (%rdi),%rcx
    7b77:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
    7b7b:	48 89 f8             	mov    %rdi,%rax
    7b7e:	48 29 c8             	sub    %rcx,%rax
    7b81:	48 8b 16             	mov    (%rsi),%rdx
    7b84:	48 8b 76 08          	mov    0x8(%rsi),%rsi
    7b88:	48 29 d6             	sub    %rdx,%rsi
        if (y_true.size() != y_pred.size()) {
    7b8b:	48 39 f0             	cmp    %rsi,%rax
    7b8e:	0f 85 c2 00 00 00    	jne    7c56 <_ZN5utils8accuracyERKSt6vectorIfSaIfEES4_+0xe6>
    7b94:	48 c1 f8 02          	sar    $0x2,%rax
            throw std::runtime_error("Arrays must have the same length");
        }

        size_t correct = 0;
        for (size_t i = 0; i < y_true.size(); ++i) {
    7b98:	48 39 cf             	cmp    %rcx,%rdi
    7b9b:	74 66                	je     7c03 <_ZN5utils8accuracyERKSt6vectorIfSaIfEES4_+0x93>
    7b9d:	48 83 f8 01          	cmp    $0x1,%rax
    7ba1:	48 89 c7             	mov    %rax,%rdi
    7ba4:	48 83 d7 00          	adc    $0x0,%rdi
    7ba8:	45 31 c0             	xor    %r8d,%r8d
    7bab:	f3 0f 10 05 25 ab ff 	movss  -0x54db(%rip),%xmm0        # 26d8 <_IO_stdin_used-0x18>
    7bb2:	ff 
    7bb3:	31 f6                	xor    %esi,%esi
    7bb5:	eb 14                	jmp    7bcb <_ZN5utils8accuracyERKSt6vectorIfSaIfEES4_+0x5b>
    7bb7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    7bbe:	00 00 
            if ((y_pred[i] >= 0.5f && y_true[i] >= 0.5f) ||
                (y_pred[i] < 0.5f && y_true[i] < 0.5f)) {
                correct++;
    7bc0:	48 ff c6             	inc    %rsi
        for (size_t i = 0; i < y_true.size(); ++i) {
    7bc3:	49 ff c0             	inc    %r8
    7bc6:	4c 39 c7             	cmp    %r8,%rdi
    7bc9:	74 24                	je     7bef <_ZN5utils8accuracyERKSt6vectorIfSaIfEES4_+0x7f>
            if ((y_pred[i] >= 0.5f && y_true[i] >= 0.5f) ||
    7bcb:	f3 42 0f 10 0c 82    	movss  (%rdx,%r8,4),%xmm1
    7bd1:	0f 2e c8             	ucomiss %xmm0,%xmm1
    7bd4:	72 0b                	jb     7be1 <_ZN5utils8accuracyERKSt6vectorIfSaIfEES4_+0x71>
    7bd6:	f3 42 0f 10 14 81    	movss  (%rcx,%r8,4),%xmm2
    7bdc:	0f 2e d0             	ucomiss %xmm0,%xmm2
    7bdf:	73 df                	jae    7bc0 <_ZN5utils8accuracyERKSt6vectorIfSaIfEES4_+0x50>
                (y_pred[i] < 0.5f && y_true[i] < 0.5f)) {
    7be1:	0f 2e c1             	ucomiss %xmm1,%xmm0
    7be4:	76 dd                	jbe    7bc3 <_ZN5utils8accuracyERKSt6vectorIfSaIfEES4_+0x53>
    7be6:	42 0f 2e 04 81       	ucomiss (%rcx,%r8,4),%xmm0
            if ((y_pred[i] >= 0.5f && y_true[i] >= 0.5f) ||
    7beb:	77 d3                	ja     7bc0 <_ZN5utils8accuracyERKSt6vectorIfSaIfEES4_+0x50>
    7bed:	eb d4                	jmp    7bc3 <_ZN5utils8accuracyERKSt6vectorIfSaIfEES4_+0x53>
            }
        }

        return static_cast<float>(correct) / y_true.size();
    7bef:	48 85 f6             	test   %rsi,%rsi
    7bf2:	78 21                	js     7c15 <_ZN5utils8accuracyERKSt6vectorIfSaIfEES4_+0xa5>
    7bf4:	0f 57 c0             	xorps  %xmm0,%xmm0
    7bf7:	f3 48 0f 2a c6       	cvtsi2ss %rsi,%xmm0
    7bfc:	48 85 c0             	test   %rax,%rax
    7bff:	79 0a                	jns    7c0b <_ZN5utils8accuracyERKSt6vectorIfSaIfEES4_+0x9b>
    7c01:	eb 2f                	jmp    7c32 <_ZN5utils8accuracyERKSt6vectorIfSaIfEES4_+0xc2>
    7c03:	0f 57 c0             	xorps  %xmm0,%xmm0
    7c06:	48 85 c0             	test   %rax,%rax
    7c09:	78 27                	js     7c32 <_ZN5utils8accuracyERKSt6vectorIfSaIfEES4_+0xc2>
    7c0b:	0f 57 c9             	xorps  %xmm1,%xmm1
    7c0e:	f3 48 0f 2a c8       	cvtsi2ss %rax,%xmm1
    7c13:	eb 35                	jmp    7c4a <_ZN5utils8accuracyERKSt6vectorIfSaIfEES4_+0xda>
    7c15:	48 89 f1             	mov    %rsi,%rcx
    7c18:	48 d1 e9             	shr    %rcx
    7c1b:	83 e6 01             	and    $0x1,%esi
    7c1e:	48 09 ce             	or     %rcx,%rsi
    7c21:	0f 57 c0             	xorps  %xmm0,%xmm0
    7c24:	f3 48 0f 2a c6       	cvtsi2ss %rsi,%xmm0
    7c29:	f3 0f 58 c0          	addss  %xmm0,%xmm0
    7c2d:	48 85 c0             	test   %rax,%rax
    7c30:	79 d9                	jns    7c0b <_ZN5utils8accuracyERKSt6vectorIfSaIfEES4_+0x9b>
    7c32:	48 89 c1             	mov    %rax,%rcx
    7c35:	48 d1 e9             	shr    %rcx
    7c38:	83 e0 01             	and    $0x1,%eax
    7c3b:	48 09 c8             	or     %rcx,%rax
    7c3e:	0f 57 c9             	xorps  %xmm1,%xmm1
    7c41:	f3 48 0f 2a c8       	cvtsi2ss %rax,%xmm1
    7c46:	f3 0f 58 c9          	addss  %xmm1,%xmm1
    7c4a:	f3 0f 5e c1          	divss  %xmm1,%xmm0
    7c4e:	48 83 c4 08          	add    $0x8,%rsp
    7c52:	5b                   	pop    %rbx
    7c53:	41 5e                	pop    %r14
    7c55:	c3                   	retq   
            throw std::runtime_error("Arrays must have the same length");
    7c56:	bf 10 00 00 00       	mov    $0x10,%edi
    7c5b:	e8 80 fa 00 00       	callq  176e0 <__cxa_allocate_exception@plt>
    7c60:	48 89 c3             	mov    %rax,%rbx
    7c63:	48 8d 35 d3 ae ff ff 	lea    -0x512d(%rip),%rsi        # 2b3d <_IO_stdin_used+0x44d>
    7c6a:	48 89 c7             	mov    %rax,%rdi
    7c6d:	e8 be f9 00 00       	callq  17630 <_ZNSt13runtime_errorC1EPKc@plt>
    7c72:	48 8b 35 4f 11 01 00 	mov    0x1114f(%rip),%rsi        # 18dc8 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7c79:	48 8b 15 58 11 01 00 	mov    0x11158(%rip),%rdx        # 18dd8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7c80:	48 89 df             	mov    %rbx,%rdi
    7c83:	e8 08 fa 00 00       	callq  17690 <__cxa_throw@plt>
    7c88:	49 89 c6             	mov    %rax,%r14
    7c8b:	48 89 df             	mov    %rbx,%rdi
    7c8e:	e8 5d fb 00 00       	callq  177f0 <__cxa_free_exception@plt>
    7c93:	4c 89 f7             	mov    %r14,%rdi
    7c96:	e8 d5 fc 00 00       	callq  17970 <_Unwind_Resume@plt>
    7c9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000007ca0 <_Z10selectTop2PN7genetic7programEi>:

std::pair<ssize_t, ssize_t> selectTop2(genetic::program* programs, int size) {
    ssize_t idx1 = 0, idx2 = 0;
    float   rf1 = programs[0].raw_fitness_;
    float   rf2 = programs[0].raw_fitness_;
    for (int i = 1; i < size; i++) {
    7ca0:	83 fe 02             	cmp    $0x2,%esi
    7ca3:	7c 2b                	jl     7cd0 <_Z10selectTop2PN7genetic7programEi+0x30>
    float   rf1 = programs[0].raw_fitness_;
    7ca5:	f3 0f 10 47 10       	movss  0x10(%rdi),%xmm0
    for (int i = 1; i < size; i++) {
    7caa:	41 89 f0             	mov    %esi,%r8d
    7cad:	49 ff c8             	dec    %r8
    7cb0:	83 fe 02             	cmp    $0x2,%esi
    7cb3:	75 20                	jne    7cd5 <_Z10selectTop2PN7genetic7programEi+0x35>
    7cb5:	b9 01 00 00 00       	mov    $0x1,%ecx
    7cba:	31 d2                	xor    %edx,%edx
    7cbc:	0f 28 c8             	movaps %xmm0,%xmm1
    7cbf:	45 31 c9             	xor    %r9d,%r9d
    7cc2:	4c 89 c8             	mov    %r9,%rax
        float rf = programs[i].raw_fitness_;
        if (rf < rf1) {
    7cc5:	41 f6 c0 01          	test   $0x1,%r8b
    7cc9:	0f 85 a6 00 00 00    	jne    7d75 <_Z10selectTop2PN7genetic7programEi+0xd5>
            rf2  = rf;
            idx2 = i;
        }
    }
    return std::make_pair(idx1, idx2);
}
    7ccf:	c3                   	retq   
    7cd0:	31 c0                	xor    %eax,%eax
    7cd2:	31 d2                	xor    %edx,%edx
    7cd4:	c3                   	retq   
    for (int i = 1; i < size; i++) {
    7cd5:	48 8d 47 50          	lea    0x50(%rdi),%rax
    7cd9:	4c 89 c6             	mov    %r8,%rsi
    7cdc:	48 83 e6 fe          	and    $0xfffffffffffffffe,%rsi
    7ce0:	48 f7 de             	neg    %rsi
    7ce3:	b9 01 00 00 00       	mov    $0x1,%ecx
    7ce8:	45 31 d2             	xor    %r10d,%r10d
    7ceb:	0f 28 c8             	movaps %xmm0,%xmm1
    7cee:	45 31 c9             	xor    %r9d,%r9d
    7cf1:	eb 32                	jmp    7d25 <_Z10selectTop2PN7genetic7programEi+0x85>
    7cf3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    7cfa:	84 00 00 00 00 00 
    7d00:	49 89 d1             	mov    %rdx,%r9
    7d03:	4c 89 da             	mov    %r11,%rdx
    7d06:	0f 28 c8             	movaps %xmm0,%xmm1
    7d09:	0f 28 c2             	movaps %xmm2,%xmm0
    7d0c:	48 83 c0 40          	add    $0x40,%rax
    7d10:	4c 8d 1c 0e          	lea    (%rsi,%rcx,1),%r11
    7d14:	49 83 c3 02          	add    $0x2,%r11
    7d18:	48 83 c1 02          	add    $0x2,%rcx
    7d1c:	49 89 d2             	mov    %rdx,%r10
    7d1f:	49 83 fb 01          	cmp    $0x1,%r11
    7d23:	74 9d                	je     7cc2 <_Z10selectTop2PN7genetic7programEi+0x22>
        float rf = programs[i].raw_fitness_;
    7d25:	f3 0f 10 50 e0       	movss  -0x20(%rax),%xmm2
        if (rf < rf1) {
    7d2a:	0f 2e c2             	ucomiss %xmm2,%xmm0
    7d2d:	76 11                	jbe    7d40 <_Z10selectTop2PN7genetic7programEi+0xa0>
    7d2f:	49 89 cb             	mov    %rcx,%r11
    7d32:	4d 89 ca             	mov    %r9,%r10
    7d35:	0f 28 c8             	movaps %xmm0,%xmm1
    7d38:	0f 28 c2             	movaps %xmm2,%xmm0
    7d3b:	eb 11                	jmp    7d4e <_Z10selectTop2PN7genetic7programEi+0xae>
    7d3d:	0f 1f 00             	nopl   (%rax)
    7d40:	4d 89 cb             	mov    %r9,%r11
        } else if (rf < rf2) {
    7d43:	0f 2e ca             	ucomiss %xmm2,%xmm1
    7d46:	76 06                	jbe    7d4e <_Z10selectTop2PN7genetic7programEi+0xae>
    7d48:	49 89 ca             	mov    %rcx,%r10
    7d4b:	0f 28 ca             	movaps %xmm2,%xmm1
        float rf = programs[i].raw_fitness_;
    7d4e:	48 8d 51 01          	lea    0x1(%rcx),%rdx
    7d52:	f3 0f 10 10          	movss  (%rax),%xmm2
        if (rf < rf1) {
    7d56:	0f 2e c2             	ucomiss %xmm2,%xmm0
    7d59:	77 a5                	ja     7d00 <_Z10selectTop2PN7genetic7programEi+0x60>
    7d5b:	4d 89 d9             	mov    %r11,%r9
        } else if (rf < rf2) {
    7d5e:	0f 2e ca             	ucomiss %xmm2,%xmm1
    7d61:	76 0d                	jbe    7d70 <_Z10selectTop2PN7genetic7programEi+0xd0>
    7d63:	0f 28 ca             	movaps %xmm2,%xmm1
    7d66:	eb a4                	jmp    7d0c <_Z10selectTop2PN7genetic7programEi+0x6c>
    7d68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    7d6f:	00 
    7d70:	4c 89 d2             	mov    %r10,%rdx
    7d73:	eb 97                	jmp    7d0c <_Z10selectTop2PN7genetic7programEi+0x6c>
        float rf = programs[i].raw_fitness_;
    7d75:	48 89 c8             	mov    %rcx,%rax
    7d78:	48 c1 e0 05          	shl    $0x5,%rax
    7d7c:	f3 0f 10 54 07 10    	movss  0x10(%rdi,%rax,1),%xmm2
        if (rf < rf1) {
    7d82:	0f 2e c2             	ucomiss %xmm2,%xmm0
    7d85:	76 07                	jbe    7d8e <_Z10selectTop2PN7genetic7programEi+0xee>
    7d87:	48 89 c8             	mov    %rcx,%rax
    7d8a:	4c 89 ca             	mov    %r9,%rdx
}
    7d8d:	c3                   	retq   
    7d8e:	4c 89 c8             	mov    %r9,%rax
        } else if (rf < rf2) {
    7d91:	0f 2e ca             	ucomiss %xmm2,%xmm1
    7d94:	0f 86 35 ff ff ff    	jbe    7ccf <_Z10selectTop2PN7genetic7programEi+0x2f>
    7d9a:	48 89 ca             	mov    %rcx,%rdx
}
    7d9d:	c3                   	retq   
    7d9e:	66 90                	xchg   %ax,%ax

0000000000007da0 <_Z21insertionSortProgramsPN7genetic7programEi>:

void insertionSortPrograms(genetic::program* programs, int size) {
    7da0:	55                   	push   %rbp
    7da1:	41 57                	push   %r15
    7da3:	41 56                	push   %r14
    7da5:	41 55                	push   %r13
    7da7:	41 54                	push   %r12
    7da9:	53                   	push   %rbx
    7daa:	48 83 ec 28          	sub    $0x28,%rsp
    for (int i = 1; i < size; i++) {
    7dae:	83 fe 02             	cmp    $0x2,%esi
    7db1:	0f 8c 92 00 00 00    	jl     7e49 <_Z21insertionSortProgramsPN7genetic7programEi+0xa9>
    7db7:	48 89 fb             	mov    %rdi,%rbx
    7dba:	89 f0                	mov    %esi,%eax
    7dbc:	48 89 04 24          	mov    %rax,(%rsp)
    7dc0:	4c 8d 6f 20          	lea    0x20(%rdi),%r13
    7dc4:	41 bc 01 00 00 00    	mov    $0x1,%r12d
    7dca:	4c 8d 74 24 08       	lea    0x8(%rsp),%r14
    7dcf:	90                   	nop
        genetic::program key(programs[i]);
    7dd0:	4c 89 e6             	mov    %r12,%rsi
    7dd3:	48 c1 e6 05          	shl    $0x5,%rsi
    7dd7:	48 01 de             	add    %rbx,%rsi
    7dda:	4c 89 f7             	mov    %r14,%rdi
    7ddd:	e8 5e 5f 00 00       	callq  dd40 <_ZN7genetic7programC1ERKS0_>
    7de2:	4c 89 ef             	mov    %r13,%rdi
    7de5:	4c 89 e5             	mov    %r12,%rbp
    7de8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    7def:	00 
        int              j = i - 1;

        while (j >= 0 && (programs[j].raw_fitness_ > key.raw_fitness_)) {
    7df0:	48 85 ed             	test   %rbp,%rbp
    7df3:	7e 2b                	jle    7e20 <_Z21insertionSortProgramsPN7genetic7programEi+0x80>
    7df5:	f3 0f 10 47 f0       	movss  -0x10(%rdi),%xmm0
    7dfa:	0f 2e 44 24 18       	ucomiss 0x18(%rsp),%xmm0
    7dff:	76 21                	jbe    7e22 <_Z21insertionSortProgramsPN7genetic7programEi+0x82>
            programs[j + 1] = programs[j];
    7e01:	4c 8d 7f e0          	lea    -0x20(%rdi),%r15
    7e05:	48 ff cd             	dec    %rbp
    7e08:	4c 89 fe             	mov    %r15,%rsi
    7e0b:	e8 30 60 00 00       	callq  de40 <_ZN7genetic7programaSERKS0_>
    7e10:	4c 89 ff             	mov    %r15,%rdi
    7e13:	eb db                	jmp    7df0 <_Z21insertionSortProgramsPN7genetic7programEi+0x50>
    7e15:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    7e1c:	00 00 00 00 
    7e20:	31 ed                	xor    %ebp,%ebp
            j--;
        }
        programs[j + 1] = key;
    7e22:	48 63 fd             	movslq %ebp,%rdi
    7e25:	48 c1 e7 05          	shl    $0x5,%rdi
    7e29:	48 01 df             	add    %rbx,%rdi
    7e2c:	4c 89 f6             	mov    %r14,%rsi
    7e2f:	e8 0c 60 00 00       	callq  de40 <_ZN7genetic7programaSERKS0_>
    }
    7e34:	4c 89 f7             	mov    %r14,%rdi
    7e37:	e8 e4 5e 00 00       	callq  dd20 <_ZN7genetic7programD1Ev>
    for (int i = 1; i < size; i++) {
    7e3c:	49 ff c4             	inc    %r12
    7e3f:	49 83 c5 20          	add    $0x20,%r13
    7e43:	4c 3b 24 24          	cmp    (%rsp),%r12
    7e47:	75 87                	jne    7dd0 <_Z21insertionSortProgramsPN7genetic7programEi+0x30>
}
    7e49:	48 83 c4 28          	add    $0x28,%rsp
    7e4d:	5b                   	pop    %rbx
    7e4e:	41 5c                	pop    %r12
    7e50:	41 5d                	pop    %r13
    7e52:	41 5e                	pop    %r14
    7e54:	41 5f                	pop    %r15
    7e56:	5d                   	pop    %rbp
    7e57:	c3                   	retq   
    7e58:	eb 00                	jmp    7e5a <_Z21insertionSortProgramsPN7genetic7programEi+0xba>
    7e5a:	48 89 c3             	mov    %rax,%rbx
    7e5d:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
    }
    7e62:	e8 b9 5e 00 00       	callq  dd20 <_ZN7genetic7programD1Ev>
    7e67:	48 89 df             	mov    %rbx,%rdi
    7e6a:	e8 01 fb 00 00       	callq  17970 <_Unwind_Resume@plt>
    7e6f:	90                   	nop

0000000000007e70 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void run_symbolic_regression(const std::string& dataset_file) {
    7e70:	55                   	push   %rbp
    7e71:	41 57                	push   %r15
    7e73:	41 56                	push   %r14
    7e75:	41 55                	push   %r13
    7e77:	41 54                	push   %r12
    7e79:	53                   	push   %rbx
    7e7a:	48 81 ec d8 02 00 00 	sub    $0x2d8,%rsp
    7e81:	48 89 fb             	mov    %rdi,%rbx
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
	__out.setstate(ios_base::badbit);
      else
	__ostream_insert(__out, __s,
    7e84:	4c 8b 35 5d 0f 01 00 	mov    0x10f5d(%rip),%r14        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    7e8b:	48 8d 35 c6 aa ff ff 	lea    -0x553a(%rip),%rsi        # 2958 <_IO_stdin_used+0x268>
    7e92:	ba 2b 00 00 00       	mov    $0x2b,%edx
    7e97:	4c 89 f7             	mov    %r14,%rdi
    7e9a:	e8 61 f8 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   *  for more on this subject.
  */
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }
    7e9f:	49 8b 06             	mov    (%r14),%rax
    7ea2:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    7ea6:	4d 8b bc 06 f0 00 00 	mov    0xf0(%r14,%rax,1),%r15
    7ead:	00 
      if (!__f)
    7eae:	4d 85 ff             	test   %r15,%r15
    7eb1:	0f 84 63 1f 00 00    	je     9e1a <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1faa>
	if (_M_widen_ok)
    7eb7:	41 80 7f 38 00       	cmpb   $0x0,0x38(%r15)
    7ebc:	74 07                	je     7ec5 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x55>
	  return _M_widen[static_cast<unsigned char>(__c)];
    7ebe:	41 0f b6 47 43       	movzbl 0x43(%r15),%eax
    7ec3:	eb 16                	jmp    7edb <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6b>
	this->_M_widen_init();
    7ec5:	4c 89 ff             	mov    %r15,%rdi
    7ec8:	e8 63 f8 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    7ecd:	49 8b 07             	mov    (%r15),%rax
    7ed0:	4c 89 ff             	mov    %r15,%rdi
    7ed3:	be 0a 00 00 00       	mov    $0xa,%esi
    7ed8:	ff 50 30             	callq  *0x30(%rax)
    7edb:	0f be f0             	movsbl %al,%esi
    7ede:	4c 89 f7             	mov    %r14,%rdi
    7ee1:	e8 3a f8 00 00       	callq  17720 <_ZNSo3putEc@plt>
   *  This manipulator simply calls the stream's @c flush() member function.
  */
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
    7ee6:	48 89 c7             	mov    %rax,%rdi
    7ee9:	e8 52 f8 00 00       	callq  17740 <_ZNSo5flushEv@plt>
    7eee:	48 8d b4 24 a8 02 00 	lea    0x2a8(%rsp),%rsi
    7ef5:	00 
 * @sa ctimer_measure
 * @sa ctimer_lap
 */
static inline void ctimer_start(ctimer_t* t /**<[in,out] stopwatch pointer */
) {
    clock_gettime(CLOCK_MONOTONIC, &t->start);
    7ef6:	bf 01 00 00 00       	mov    $0x1,%edi
    7efb:	e8 a0 fa 00 00       	callq  179a0 <clock_gettime@plt>
	__ostream_insert(__out, __s,
    7f00:	48 8d 35 cd a9 ff ff 	lea    -0x5633(%rip),%rsi        # 28d4 <_IO_stdin_used+0x1e4>
    7f07:	ba 12 00 00 00       	mov    $0x12,%edx
    7f0c:	4c 89 f7             	mov    %r14,%rdi
    7f0f:	e8 ec f7 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    { return flush(__os.put(__os.widen('\n'))); }
    7f14:	49 8b 06             	mov    (%r14),%rax
    7f17:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    7f1b:	4d 8b b4 06 f0 00 00 	mov    0xf0(%r14,%rax,1),%r14
    7f22:	00 
      if (!__f)
    7f23:	4d 85 f6             	test   %r14,%r14
    7f26:	0f 84 ee 1e 00 00    	je     9e1a <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1faa>
	if (_M_widen_ok)
    7f2c:	41 80 7e 38 00       	cmpb   $0x0,0x38(%r14)
    7f31:	74 07                	je     7f3a <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xca>
	  return _M_widen[static_cast<unsigned char>(__c)];
    7f33:	41 0f b6 46 43       	movzbl 0x43(%r14),%eax
    7f38:	eb 16                	jmp    7f50 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe0>
	this->_M_widen_init();
    7f3a:	4c 89 f7             	mov    %r14,%rdi
    7f3d:	e8 ee f7 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    7f42:	49 8b 06             	mov    (%r14),%rax
    7f45:	4c 89 f7             	mov    %r14,%rdi
    7f48:	be 0a 00 00 00       	mov    $0xa,%esi
    7f4d:	ff 50 30             	callq  *0x30(%rax)
    7f50:	0f be f0             	movsbl %al,%esi
    7f53:	48 8b 3d 8e 0e 01 00 	mov    0x10e8e(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    7f5a:	e8 c1 f7 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    7f5f:	48 89 c7             	mov    %rax,%rdi
    7f62:	e8 d9 f7 00 00       	callq  17740 <_ZNSo5flushEv@plt>
    7f67:	48 8d bc 24 10 02 00 	lea    0x210(%rsp),%rdi
    7f6e:	00 
    ctimer_start(&end_to_end_timer);

    // Load dataset
    std::cout << "Loading dataset..." << std::endl;

    auto dataset = utils::load_dataset(dataset_file);
    7f6f:	48 89 de             	mov    %rbx,%rsi
    7f72:	e8 19 f0 ff ff       	callq  6f90 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
    7f77:	48 8b b4 24 18 02 00 	mov    0x218(%rsp),%rsi
    7f7e:	00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    7f7f:	48 8b 84 24 10 02 00 	mov    0x210(%rsp),%rax
    7f86:	00 
    7f87:	48 89 f3             	mov    %rsi,%rbx
    7f8a:	48 29 c3             	sub    %rax,%rbx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    7f8d:	48 c1 fb 03          	sar    $0x3,%rbx
    7f91:	48 b9 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rcx
    7f98:	aa aa aa 
    7f9b:	48 0f af d9          	imul   %rcx,%rbx
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    7f9f:	48 89 f7             	mov    %rsi,%rdi
    7fa2:	49 bd 55 55 55 55 55 	movabs $0x555555555555555,%r13
    7fa9:	55 55 05 
	: _M_start(), _M_finish(), _M_end_of_storage()
    7fac:	0f 57 c0             	xorps  %xmm0,%xmm0
    7faf:	0f 29 84 24 80 00 00 	movaps %xmm0,0x80(%rsp)
    7fb6:	00 
    7fb7:	48 c7 84 24 90 00 00 	movq   $0x0,0x90(%rsp)
    7fbe:	00 00 00 00 00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    7fc3:	48 29 c7             	sub    %rax,%rdi
    7fc6:	74 23                	je     7feb <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17b>
	if (__n > this->_M_max_size())
    7fc8:	4c 39 eb             	cmp    %r13,%rbx
    7fcb:	0f 87 e0 1e 00 00    	ja     9eb1 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2041>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    7fd1:	e8 8a f7 00 00       	callq  17760 <_Znwm@plt>
    7fd6:	48 89 c2             	mov    %rax,%rdx
      : _M_current(__i) { }
    7fd9:	48 8b bc 24 10 02 00 	mov    0x210(%rsp),%rdi
    7fe0:	00 
    7fe1:	48 8b b4 24 18 02 00 	mov    0x218(%rsp),%rsi
    7fe8:	00 
    7fe9:	eb 05                	jmp    7ff0 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x180>
    7feb:	31 d2                	xor    %edx,%edx
    7fed:	48 89 f7             	mov    %rsi,%rdi
	this->_M_impl._M_start = this->_M_allocate(__n);
    7ff0:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
    7ff7:	00 
	this->_M_impl._M_finish = this->_M_impl._M_start;
    7ff8:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
    7fff:	00 
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    8000:	48 8d 04 5b          	lea    (%rbx,%rbx,2),%rax
    8004:	48 8d 04 c2          	lea    (%rdx,%rax,8),%rax
    8008:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
    800f:	00 
      return std::__uninitialized_copy<__is_trivial(_ValueType1)
    8010:	e8 ab 4a 00 00       	callq  cac0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_>
    8015:	49 bc fc ff ff ff ff 	movabs $0x7ffffffffffffffc,%r12
    801c:	ff ff 7f 
	this->_M_impl._M_finish =
    801f:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
    8026:	00 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    8027:	4c 8b bc 24 30 02 00 	mov    0x230(%rsp),%r15
    802e:	00 
	: _M_start(), _M_finish(), _M_end_of_storage()
    802f:	0f 57 c0             	xorps  %xmm0,%xmm0
    8032:	0f 29 84 24 b0 00 00 	movaps %xmm0,0xb0(%rsp)
    8039:	00 
    803a:	48 c7 84 24 c0 00 00 	movq   $0x0,0xc0(%rsp)
    8041:	00 00 00 00 00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    8046:	4c 2b bc 24 28 02 00 	sub    0x228(%rsp),%r15
    804d:	00 
    804e:	74 51                	je     80a1 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x231>
	if (__n > this->_M_max_size())
    8050:	4d 39 e7             	cmp    %r12,%r15
    8053:	0f 87 5d 1e 00 00    	ja     9eb6 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2046>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    8059:	4c 89 ff             	mov    %r15,%rdi
    805c:	e8 ff f6 00 00       	callq  17760 <_Znwm@plt>
    8061:	48 89 c3             	mov    %rax,%rbx
    8064:	48 8b b4 24 28 02 00 	mov    0x228(%rsp),%rsi
    806b:	00 
    806c:	4c 8b b4 24 30 02 00 	mov    0x230(%rsp),%r14
    8073:	00 
	this->_M_impl._M_start = this->_M_allocate(__n);
    8074:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
    807b:	00 
	this->_M_impl._M_finish = this->_M_impl._M_start;
    807c:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
    8083:	00 
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    8084:	49 01 c7             	add    %rax,%r15
    8087:	4c 89 bc 24 c0 00 00 	mov    %r15,0xc0(%rsp)
    808e:	00 
	  if (_Num)
    808f:	49 29 f6             	sub    %rsi,%r14
    8092:	74 22                	je     80b6 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x246>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    8094:	48 89 df             	mov    %rbx,%rdi
    8097:	4c 89 f2             	mov    %r14,%rdx
    809a:	e8 c1 f8 00 00       	callq  17960 <memmove@plt>
    809f:	eb 15                	jmp    80b6 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x246>
	this->_M_impl._M_finish = this->_M_impl._M_start;
    80a1:	0f 29 84 24 b0 00 00 	movaps %xmm0,0xb0(%rsp)
    80a8:	00 
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    80a9:	4c 89 bc 24 c0 00 00 	mov    %r15,0xc0(%rsp)
    80b0:	00 
    80b1:	45 31 f6             	xor    %r14d,%r14d
    80b4:	31 db                	xor    %ebx,%ebx
	  return __result + _Num;
    80b6:	49 01 de             	add    %rbx,%r14
	this->_M_impl._M_finish =
    80b9:	4c 89 b4 24 b8 00 00 	mov    %r14,0xb8(%rsp)
    80c0:	00 
	__ostream_insert(__out, __s,
    80c1:	48 8b 3d 20 0d 01 00 	mov    0x10d20(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    80c8:	48 8d 35 7f a7 ff ff 	lea    -0x5881(%rip),%rsi        # 284e <_IO_stdin_used+0x15e>
    80cf:	ba 14 00 00 00       	mov    $0x14,%edx
    80d4:	e8 27 f6 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    80d9:	48 8b b4 24 88 00 00 	mov    0x88(%rsp),%rsi
    80e0:	00 
    80e1:	48 2b b4 24 80 00 00 	sub    0x80(%rsp),%rsi
    80e8:	00 
    80e9:	48 c1 fe 03          	sar    $0x3,%rsi
    80ed:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
    80f4:	aa aa aa 
    80f7:	48 0f af f0          	imul   %rax,%rsi
      { return _M_insert(__n); }
    80fb:	48 8b 3d e6 0c 01 00 	mov    0x10ce6(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    8102:	e8 e9 f4 00 00       	callq  175f0 <_ZNSo9_M_insertImEERSoT_@plt>
    auto X       = dataset.first;
    auto y       = dataset.second;

    std::cout << "Dataset dimensions: " << X.size() << " samples x " << X[0].size() << " features"
    8107:	48 89 c3             	mov    %rax,%rbx
	__ostream_insert(__out, __s,
    810a:	48 8d 35 02 ad ff ff 	lea    -0x52fe(%rip),%rsi        # 2e13 <_IO_stdin_used+0x723>
    8111:	ba 0b 00 00 00       	mov    $0xb,%edx
    8116:	48 89 c7             	mov    %rax,%rdi
    8119:	e8 e2 f5 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
	return *(this->_M_impl._M_start + __n);
    811e:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
    8125:	00 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    8126:	48 8b 70 08          	mov    0x8(%rax),%rsi
    812a:	48 2b 30             	sub    (%rax),%rsi
    812d:	48 c1 fe 02          	sar    $0x2,%rsi
      { return _M_insert(__n); }
    8131:	48 89 df             	mov    %rbx,%rdi
    8134:	e8 b7 f4 00 00       	callq  175f0 <_ZNSo9_M_insertImEERSoT_@plt>
    8139:	48 89 c3             	mov    %rax,%rbx
	__ostream_insert(__out, __s,
    813c:	48 8d 35 49 ac ff ff 	lea    -0x53b7(%rip),%rsi        # 2d8c <_IO_stdin_used+0x69c>
    8143:	ba 09 00 00 00       	mov    $0x9,%edx
    8148:	48 89 c7             	mov    %rax,%rdi
    814b:	e8 b0 f5 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    { return flush(__os.put(__os.widen('\n'))); }
    8150:	48 8b 03             	mov    (%rbx),%rax
    8153:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    8157:	4c 8b b4 03 f0 00 00 	mov    0xf0(%rbx,%rax,1),%r14
    815e:	00 
      if (!__f)
    815f:	4d 85 f6             	test   %r14,%r14
    8162:	0f 84 b7 1c 00 00    	je     9e1f <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1faf>
	if (_M_widen_ok)
    8168:	41 80 7e 38 00       	cmpb   $0x0,0x38(%r14)
    816d:	74 07                	je     8176 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x306>
	  return _M_widen[static_cast<unsigned char>(__c)];
    816f:	41 0f b6 46 43       	movzbl 0x43(%r14),%eax
    8174:	eb 16                	jmp    818c <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x31c>
	this->_M_widen_init();
    8176:	4c 89 f7             	mov    %r14,%rdi
    8179:	e8 b2 f5 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    817e:	49 8b 06             	mov    (%r14),%rax
    8181:	4c 89 f7             	mov    %r14,%rdi
    8184:	be 0a 00 00 00       	mov    $0xa,%esi
    8189:	ff 50 30             	callq  *0x30(%rax)
    818c:	0f be f0             	movsbl %al,%esi
    818f:	48 89 df             	mov    %rbx,%rdi
    8192:	e8 89 f5 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    8197:	48 89 c7             	mov    %rax,%rdi
    819a:	e8 a1 f5 00 00       	callq  17740 <_ZNSo5flushEv@plt>
    819f:	48 8d bc 24 e0 01 00 	lea    0x1e0(%rsp),%rdi
    81a6:	00 
    81a7:	48 8d b4 24 80 00 00 	lea    0x80(%rsp),%rsi
    81ae:	00 
    81af:	f3 0f 10 05 2d a5 ff 	movss  -0x5ad3(%rip),%xmm0        # 26e4 <_IO_stdin_used-0xc>
    81b6:	ff 
              << std::endl;

    // Split dataset
    auto X_split = utils::train_test_split(X);
    81b7:	e8 44 4a 00 00       	callq  cc00 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f>
    81bc:	48 8d bc 24 58 02 00 	lea    0x258(%rsp),%rdi
    81c3:	00 
    81c4:	48 8d b4 24 b0 00 00 	lea    0xb0(%rsp),%rsi
    81cb:	00 
    81cc:	f3 0f 10 05 10 a5 ff 	movss  -0x5af0(%rip),%xmm0        # 26e4 <_IO_stdin_used-0xc>
    81d3:	ff 
    auto y_split = utils::train_test_split(y);
    81d4:	e8 87 50 00 00       	callq  d260 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f>
    81d9:	48 8b b4 24 e8 01 00 	mov    0x1e8(%rsp),%rsi
    81e0:	00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    81e1:	48 8b 84 24 e0 01 00 	mov    0x1e0(%rsp),%rax
    81e8:	00 
    81e9:	48 89 f3             	mov    %rsi,%rbx
    81ec:	48 29 c3             	sub    %rax,%rbx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    81ef:	48 c1 fb 03          	sar    $0x3,%rbx
    81f3:	48 b9 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rcx
    81fa:	aa aa aa 
    81fd:	48 0f af d9          	imul   %rcx,%rbx
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    8201:	48 89 f7             	mov    %rsi,%rdi
    8204:	48 29 c7             	sub    %rax,%rdi
    8207:	74 23                	je     822c <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3bc>
	if (__n > this->_M_max_size())
    8209:	4c 39 eb             	cmp    %r13,%rbx
    820c:	0f 87 a9 1c 00 00    	ja     9ebb <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x204b>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    8212:	e8 49 f5 00 00       	callq  17760 <_Znwm@plt>
    8217:	49 89 c6             	mov    %rax,%r14
    821a:	48 8b bc 24 e0 01 00 	mov    0x1e0(%rsp),%rdi
    8221:	00 
    8222:	48 8b b4 24 e8 01 00 	mov    0x1e8(%rsp),%rsi
    8229:	00 
    822a:	eb 06                	jmp    8232 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c2>
    822c:	45 31 f6             	xor    %r14d,%r14d
    822f:	48 89 f7             	mov    %rsi,%rdi
	this->_M_impl._M_start = this->_M_allocate(__n);
    8232:	4c 89 b4 24 40 02 00 	mov    %r14,0x240(%rsp)
    8239:	00 
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    823a:	48 8d 04 5b          	lea    (%rbx,%rbx,2),%rax
    823e:	49 8d 04 c6          	lea    (%r14,%rax,8),%rax
    8242:	48 89 84 24 50 02 00 	mov    %rax,0x250(%rsp)
    8249:	00 
    824a:	4c 89 f2             	mov    %r14,%rdx
    824d:	4c 89 74 24 18       	mov    %r14,0x18(%rsp)
    8252:	e8 69 48 00 00       	callq  cac0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    8257:	48 8b b4 24 00 02 00 	mov    0x200(%rsp),%rsi
    825e:	00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    825f:	48 8b 94 24 f8 01 00 	mov    0x1f8(%rsp),%rdx
    8266:	00 
    8267:	48 89 f3             	mov    %rsi,%rbx
    826a:	48 29 d3             	sub    %rdx,%rbx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    826d:	48 c1 fb 03          	sar    $0x3,%rbx
    8271:	48 b9 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rcx
    8278:	aa aa aa 
    827b:	48 0f af d9          	imul   %rcx,%rbx
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    827f:	48 89 f7             	mov    %rsi,%rdi
	this->_M_impl._M_finish =
    8282:	48 89 84 24 48 02 00 	mov    %rax,0x248(%rsp)
    8289:	00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    828a:	48 29 d7             	sub    %rdx,%rdi
    828d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    8292:	74 23                	je     82b7 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x447>
	if (__n > this->_M_max_size())
    8294:	4c 39 eb             	cmp    %r13,%rbx
    8297:	0f 87 23 1c 00 00    	ja     9ec0 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2050>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    829d:	e8 be f4 00 00       	callq  17760 <_Znwm@plt>
    82a2:	49 89 c5             	mov    %rax,%r13
    82a5:	48 8b bc 24 f8 01 00 	mov    0x1f8(%rsp),%rdi
    82ac:	00 
    82ad:	48 8b b4 24 00 02 00 	mov    0x200(%rsp),%rsi
    82b4:	00 
    82b5:	eb 06                	jmp    82bd <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44d>
    82b7:	45 31 ed             	xor    %r13d,%r13d
    82ba:	48 89 f7             	mov    %rsi,%rdi
	this->_M_impl._M_start = this->_M_allocate(__n);
    82bd:	4c 89 ac 24 c8 00 00 	mov    %r13,0xc8(%rsp)
    82c4:	00 
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    82c5:	48 8d 04 5b          	lea    (%rbx,%rbx,2),%rax
    82c9:	48 8d 04 c5 00 00 00 	lea    0x0(,%rax,8),%rax
    82d0:	00 
    82d1:	4c 01 e8             	add    %r13,%rax
    82d4:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
    82db:	00 
    82dc:	4c 89 ea             	mov    %r13,%rdx
    82df:	e8 dc 47 00 00       	callq  cac0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_>
    82e4:	49 89 c7             	mov    %rax,%r15
	this->_M_impl._M_finish =
    82e7:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
    82ee:	00 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    82ef:	48 8b bc 24 60 02 00 	mov    0x260(%rsp),%rdi
    82f6:	00 
    82f7:	b0 01                	mov    $0x1,%al
    82f9:	89 44 24 14          	mov    %eax,0x14(%rsp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    82fd:	48 2b bc 24 58 02 00 	sub    0x258(%rsp),%rdi
    8304:	00 
    8305:	74 36                	je     833d <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4cd>
	if (__n > this->_M_max_size())
    8307:	4c 39 e7             	cmp    %r12,%rdi
    830a:	0f 87 b5 1b 00 00    	ja     9ec5 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2055>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    8310:	e8 4b f4 00 00       	callq  17760 <_Znwm@plt>
    8315:	48 89 c5             	mov    %rax,%rbp
    8318:	48 8b b4 24 58 02 00 	mov    0x258(%rsp),%rsi
    831f:	00 
    8320:	48 8b 9c 24 60 02 00 	mov    0x260(%rsp),%rbx
    8327:	00 
	  if (_Num)
    8328:	48 29 f3             	sub    %rsi,%rbx
    832b:	74 19                	je     8346 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4d6>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    832d:	48 89 ef             	mov    %rbp,%rdi
    8330:	48 89 da             	mov    %rbx,%rdx
    8333:	e8 28 f6 00 00       	callq  17960 <memmove@plt>
    8338:	45 31 f6             	xor    %r14d,%r14d
    833b:	eb 0c                	jmp    8349 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4d9>
    833d:	31 db                	xor    %ebx,%ebx
    833f:	41 b6 01             	mov    $0x1,%r14b
    8342:	31 ed                	xor    %ebp,%ebp
    8344:	eb 03                	jmp    8349 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4d9>
    8346:	41 b6 01             	mov    $0x1,%r14b
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    8349:	48 8b bc 24 78 02 00 	mov    0x278(%rsp),%rdi
    8350:	00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    8351:	48 2b bc 24 70 02 00 	sub    0x270(%rsp),%rdi
    8358:	00 
    8359:	48 89 6c 24 60       	mov    %rbp,0x60(%rsp)
    835e:	48 89 5c 24 58       	mov    %rbx,0x58(%rsp)
    8363:	44 89 74 24 68       	mov    %r14d,0x68(%rsp)
    8368:	74 4a                	je     83b4 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x544>
	if (__n > this->_M_max_size())
    836a:	4c 39 e7             	cmp    %r12,%rdi
    836d:	0f 87 57 1b 00 00    	ja     9eca <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x205a>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    8373:	e8 e8 f3 00 00       	callq  17760 <_Znwm@plt>
    8378:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
    837f:	00 
    8380:	48 8b b4 24 70 02 00 	mov    0x270(%rsp),%rsi
    8387:	00 
    8388:	48 8b 94 24 78 02 00 	mov    0x278(%rsp),%rdx
    838f:	00 
	  if (_Num)
    8390:	48 29 f2             	sub    %rsi,%rdx
    8393:	48 89 94 24 a0 00 00 	mov    %rdx,0xa0(%rsp)
    839a:	00 
    839b:	74 2b                	je     83c8 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x558>
    839d:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
    83a4:	00 
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    83a5:	e8 b6 f5 00 00       	callq  17960 <memmove@plt>
    83aa:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%rsp)
    83b1:	00 
    83b2:	eb 14                	jmp    83c8 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x558>
    83b4:	31 c0                	xor    %eax,%eax
    83b6:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
    83bd:	00 
    83be:	31 c0                	xor    %eax,%eax
    83c0:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
    83c7:	00 
    83c8:	48 b9 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rcx
    83cf:	ff ff 1f 
    83d2:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
    83d7:	4c 8b 74 24 28       	mov    0x28(%rsp),%r14
    { return __lhs.base() == __rhs.base(); }
    83dc:	4c 39 f2             	cmp    %r14,%rdx
        if (data.empty())
    83df:	0f 84 99 00 00 00    	je     847e <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x60e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    83e5:	49 29 d6             	sub    %rdx,%r14
    83e8:	49 c1 fe 03          	sar    $0x3,%r14
    83ec:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
    83f3:	aa aa aa 
    83f6:	4c 0f af f0          	imul   %rax,%r14
    83fa:	48 8b 32             	mov    (%rdx),%rsi
    83fd:	48 8b 52 08          	mov    0x8(%rdx),%rdx
    8401:	49 89 d4             	mov    %rdx,%r12
    8404:	49 29 f4             	sub    %rsi,%r12
    8407:	49 c1 fc 02          	sar    $0x2,%r12
        std::vector<float> flattened(rows * cols);
    840b:	4c 89 e3             	mov    %r12,%rbx
    840e:	49 0f af de          	imul   %r14,%rbx
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    8412:	48 39 cb             	cmp    %rcx,%rbx
    8415:	0f 87 b4 1a 00 00    	ja     9ecf <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x205f>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    841b:	48 85 db             	test   %rbx,%rbx
    841e:	0f 84 df 0c 00 00    	je     9103 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1293>
    8424:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
    8429:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    842e:	48 8d 2c 9d 00 00 00 	lea    0x0(,%rbx,4),%rbp
    8435:	00 
    8436:	48 89 ef             	mov    %rbp,%rdi
    8439:	e8 22 f3 00 00       	callq  17760 <_Znwm@plt>
    843e:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      if (__n <= 0)
    8444:	48 83 fb 01          	cmp    $0x1,%rbx
    8448:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
    844d:	74 15                	je     8464 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5f4>
	      ++__first;
    844f:	48 89 c7             	mov    %rax,%rdi
    8452:	48 83 c7 04          	add    $0x4,%rdi
      for (; __first != __last; ++__first)
    8456:	48 83 c5 fc          	add    $0xfffffffffffffffc,%rbp
	*__first = __tmp;
    845a:	31 f6                	xor    %esi,%esi
    845c:	48 89 ea             	mov    %rbp,%rdx
    845f:	e8 2c f5 00 00       	callq  17990 <memset@plt>
    8464:	48 8b 6c 24 60       	mov    0x60(%rsp),%rbp
    8469:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    846e:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
        for (size_t j = 0; j < cols; ++j) {
    8473:	48 39 f2             	cmp    %rsi,%rdx
    8476:	0f 85 97 0c 00 00    	jne    9113 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x12a3>
    847c:	eb 07                	jmp    8485 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x615>
    847e:	31 c0                	xor    %eax,%eax
    8480:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
    8485:	4d 39 fd             	cmp    %r15,%r13
        if (data.empty())
    8488:	0f 84 9a 00 00 00    	je     8528 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6b8>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    848e:	4d 29 ef             	sub    %r13,%r15
    8491:	49 c1 ff 03          	sar    $0x3,%r15
    8495:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
    849c:	aa aa aa 
    849f:	4c 0f af f8          	imul   %rax,%r15
    84a3:	49 8b 4d 00          	mov    0x0(%r13),%rcx
    84a7:	4d 8b 65 08          	mov    0x8(%r13),%r12
    84ab:	4d 89 e6             	mov    %r12,%r14
    84ae:	49 29 ce             	sub    %rcx,%r14
    84b1:	49 c1 fe 02          	sar    $0x2,%r14
        std::vector<float> flattened(rows * cols);
    84b5:	4c 89 f3             	mov    %r14,%rbx
    84b8:	49 0f af df          	imul   %r15,%rbx
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    84bc:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    84c3:	ff ff 1f 
    84c6:	48 39 c3             	cmp    %rax,%rbx
    84c9:	0f 87 0c 1a 00 00    	ja     9edb <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x206b>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    84cf:	48 85 db             	test   %rbx,%rbx
    84d2:	0f 84 37 0d 00 00    	je     920f <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x139f>
    84d8:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
    84dd:	48 8d 2c 9d 00 00 00 	lea    0x0(,%rbx,4),%rbp
    84e4:	00 
    84e5:	48 89 ef             	mov    %rbp,%rdi
    84e8:	e8 73 f2 00 00       	callq  17760 <_Znwm@plt>
    84ed:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      if (__n <= 0)
    84f3:	48 83 fb 01          	cmp    $0x1,%rbx
    84f7:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    84fc:	74 15                	je     8513 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6a3>
    84fe:	48 89 c7             	mov    %rax,%rdi
    8501:	48 83 c7 04          	add    $0x4,%rdi
      for (; __first != __last; ++__first)
    8505:	48 83 c5 fc          	add    $0xfffffffffffffffc,%rbp
	*__first = __tmp;
    8509:	31 f6                	xor    %esi,%esi
    850b:	48 89 ea             	mov    %rbp,%rdx
    850e:	e8 7d f4 00 00       	callq  17990 <memset@plt>
    8513:	48 8b 6c 24 60       	mov    0x60(%rsp),%rbp
    8518:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
        for (size_t j = 0; j < cols; ++j) {
    851d:	49 39 cc             	cmp    %rcx,%r12
    8520:	0f 85 f9 0c 00 00    	jne    921f <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x13af>
    8526:	eb 07                	jmp    852f <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6bf>
    8528:	31 c0                	xor    %eax,%eax
    852a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    852f:	49 bc fc ff ff ff ff 	movabs $0x7ffffffffffffffc,%r12
    8536:	ff ff 7f 
    8539:	4c 8b 74 24 58       	mov    0x58(%rsp),%r14
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    853e:	4d 39 e6             	cmp    %r12,%r14
    8541:	48 8b 5c 24 18       	mov    0x18(%rsp),%rbx
    8546:	0f 87 d8 18 00 00    	ja     9e24 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1fb4>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    854c:	80 7c 24 68 00       	cmpb   $0x0,0x68(%rsp)
    8551:	74 09                	je     855c <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6ec>
    8553:	31 c0                	xor    %eax,%eax
    8555:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
    855a:	eb 73                	jmp    85cf <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x75f>
    855c:	4c 89 f7             	mov    %r14,%rdi
    855f:	e8 fc f1 00 00       	callq  17760 <_Znwm@plt>
      for (; __first != __last; ++__first)
    8564:	49 8d 4e fc          	lea    -0x4(%r14),%rcx
    8568:	48 89 c6             	mov    %rax,%rsi
    856b:	48 83 f9 1c          	cmp    $0x1c,%rcx
    856f:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
    8574:	72 41                	jb     85b7 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x747>
    8576:	48 c1 e9 02          	shr    $0x2,%rcx
    857a:	48 ff c1             	inc    %rcx
    857d:	49 83 c4 fc          	add    $0xfffffffffffffffc,%r12
    8581:	49 21 cc             	and    %rcx,%r12
    8584:	4a 8d 34 a0          	lea    (%rax,%r12,4),%rsi
    8588:	31 d2                	xor    %edx,%edx
    858a:	0f 28 05 7f a2 ff ff 	movaps -0x5d81(%rip),%xmm0        # 2810 <_IO_stdin_used+0x120>
    8591:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    8598:	0f 1f 84 00 00 00 00 
    859f:	00 
	*__first = __tmp;
    85a0:	0f 11 04 90          	movups %xmm0,(%rax,%rdx,4)
    85a4:	0f 11 44 90 10       	movups %xmm0,0x10(%rax,%rdx,4)
    85a9:	48 83 c2 08          	add    $0x8,%rdx
    85ad:	49 39 d4             	cmp    %rdx,%r12
    85b0:	75 ee                	jne    85a0 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x730>
      for (; __first != __last; ++__first)
    85b2:	4c 39 e1             	cmp    %r12,%rcx
    85b5:	74 18                	je     85cf <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x75f>
    85b7:	48 89 c1             	mov    %rax,%rcx
    85ba:	4c 01 f1             	add    %r14,%rcx
    85bd:	0f 1f 00             	nopl   (%rax)
	*__first = __tmp;
    85c0:	c7 06 00 00 80 3f    	movl   $0x3f800000,(%rsi)
      for (; __first != __last; ++__first)
    85c6:	48 83 c6 04          	add    $0x4,%rsi
    85ca:	48 39 ce             	cmp    %rcx,%rsi
    85cd:	75 f1                	jne    85c0 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x750>
     * @note Unless otherwise mentioned, all the parameters below are applicable to
     *       all of classification, regression and transformation.
     */
    struct param {
        /** number of programs in each generation */
        int population_size = 1000;
    85cf:	0f 28 05 3a a1 ff ff 	movaps -0x5ec6(%rip),%xmm0        # 2710 <_IO_stdin_used+0x20>
    85d6:	0f 29 84 24 e0 00 00 	movaps %xmm0,0xe0(%rsp)
    85dd:	00 

        /**
         * number of programs that compete in the tournament to become part of next
         * generation
         */
        int tournament_size = 20;
    85de:	c7 84 24 f0 00 00 00 	movl   $0x14,0xf0(%rsp)
    85e5:	14 00 00 00 

        /** metric threshold used for early stopping */
        float stopping_criteria = 0.0f;
    85e9:	f2 0f 10 05 6f a1 ff 	movsd  -0x5e91(%rip),%xmm0        # 2760 <_IO_stdin_used+0x70>
    85f0:	ff 
    85f1:	f2 0f 11 84 24 f4 00 	movsd  %xmm0,0xf4(%rsp)
    85f8:	00 00 

        /** minimum/maximum value for `constant` nodes */
        float const_range[2] = {-1.0f, 1.0f};
    85fa:	0f 28 05 6f a1 ff ff 	movaps -0x5e91(%rip),%xmm0        # 2770 <_IO_stdin_used+0x80>
    8601:	0f 11 84 24 fc 00 00 	movups %xmm0,0xfc(%rsp)
    8608:	00 
	: _M_start(), _M_finish(), _M_end_of_storage()
    8609:	0f 57 c0             	xorps  %xmm0,%xmm0
    860c:	0f 29 84 24 10 01 00 	movaps %xmm0,0x110(%rsp)
    8613:	00 
    8614:	48 c7 84 24 20 01 00 	movq   $0x0,0x120(%rsp)
    861b:	00 00 00 00 00 
    8620:	bf 04 00 00 00       	mov    $0x4,%edi
    8625:	e8 36 f1 00 00       	callq  17760 <_Znwm@plt>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
    862a:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
    8631:	00 
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    8632:	48 89 c1             	mov    %rax,%rcx
    8635:	48 83 c1 04          	add    $0x4,%rcx
    8639:	48 89 8c 24 20 01 00 	mov    %rcx,0x120(%rsp)
    8640:	00 
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    8641:	c7 00 02 08 04 0a    	movl   $0xa040802,(%rax)
	  this->_M_impl._M_finish =
    8647:	48 89 8c 24 18 01 00 	mov    %rcx,0x118(%rsp)
    864e:	00 
	: _M_start(), _M_finish(), _M_end_of_storage()
    864f:	0f 57 c0             	xorps  %xmm0,%xmm0
    8652:	0f 11 84 24 28 01 00 	movups %xmm0,0x128(%rsp)
    8659:	00 
    865a:	0f 11 84 24 38 01 00 	movups %xmm0,0x138(%rsp)
    8661:	00 
    8662:	0f 11 84 24 48 01 00 	movups %xmm0,0x148(%rsp)
    8669:	00 
    866a:	0f 11 84 24 58 01 00 	movups %xmm0,0x158(%rsp)
    8671:	00 
    8672:	48 c7 84 24 68 01 00 	movq   $0x0,0x168(%rsp)
    8679:	00 00 00 00 00 
    867e:	bf 04 00 00 00       	mov    $0x4,%edi
    8683:	e8 d8 f0 00 00       	callq  17760 <_Znwm@plt>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
    8688:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
    868f:	00 
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    8690:	48 89 c1             	mov    %rax,%rcx
    8693:	48 83 c1 04          	add    $0x4,%rcx
    8697:	48 89 8c 24 68 01 00 	mov    %rcx,0x168(%rsp)
    869e:	00 
    869f:	c7 00 02 08 04 0a    	movl   $0xa040802,(%rax)
	  this->_M_impl._M_finish =
    86a5:	48 89 8c 24 60 01 00 	mov    %rcx,0x160(%rsp)
    86ac:	00 

        /** map of functions ordered by their arity */
        std::vector<node::type> arity_set[3]{
            {}, {}, {node::type::add, node::type::mul, node::type::div, node::type::sub}};
        /** transformation function to class probabilities (classification-only) */
        transformer_t transformer = transformer_t::sigmoid;
    86ad:	48 c7 84 24 70 01 00 	movq   $0x0,0x170(%rsp)
    86b4:	00 00 00 00 00 
        /** fitness metric */
        metric_t metric = metric_t::mae;
        /** penalization factor for large programs */
        float parsimony_coefficient = 0.001f;
    86b9:	0f 28 05 00 a1 ff ff 	movaps -0x5f00(%rip),%xmm0        # 27c0 <_IO_stdin_used+0xd0>
    86c0:	0f 11 84 24 78 01 00 	movups %xmm0,0x178(%rsp)
    86c7:	00 
	: _M_start(), _M_finish(), _M_end_of_storage()
    86c8:	0f 57 c0             	xorps  %xmm0,%xmm0
    86cb:	0f 11 84 24 98 01 00 	movups %xmm0,0x198(%rsp)
    86d2:	00 
    86d3:	48 c7 84 24 a8 01 00 	movq   $0x0,0x1a8(%rsp)
    86da:	00 00 00 00 00 
        int num_features;
        ///@todo: feature_names
        ///@todo: verbose

        /** random seed used for RNG */
        uint32_t random_state = 0xdead;
    86df:	48 c7 84 24 b4 01 00 	movq   $0xdead,0x1b4(%rsp)
    86e6:	00 ad de 00 00 

        /** Number of epochs for which the algorithm ran */
        int num_epochs = 0;

        /** Low memory flag for program history */
        bool low_memory = false;
    86eb:	c6 84 24 bc 01 00 00 	movb   $0x0,0x1bc(%rsp)
    86f2:	00 
    // Create weights (all 1.0)
    std::vector<float> sample_weights(y_train.size(), 1.0f);

    // Set parameters
    genetic::param params;
    params.population_size = 512;
    86f3:	c7 84 24 e0 00 00 00 	movl   $0x200,0xe0(%rsp)
    86fa:	00 02 00 00 
    86fe:	48 b8 10 00 00 00 04 	movabs $0x400000010,%rax
    8705:	00 00 00 
    params.generations     = 16;
    8708:	48 89 84 24 ec 00 00 	mov    %rax,0xec(%rsp)
    870f:	00 
    8710:	48 b8 02 00 00 00 06 	movabs $0x600000002,%rax
    8717:	00 00 00 
    params.tournament_size = 4;
    params.init_depth[0]   = 2;
    871a:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
    8721:	00 
    params.init_depth[1]   = 6;
    params.init_method     = genetic::init_method_t::half_and_half;
    8722:	c7 84 24 08 01 00 00 	movl   $0x2,0x108(%rsp)
    8729:	02 00 00 00 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    872d:	48 8b 43 08          	mov    0x8(%rbx),%rax
    8731:	48 2b 03             	sub    (%rbx),%rax
    8734:	48 c1 e8 02          	shr    $0x2,%rax
    params.num_features    = X_train[0].size(); // Number of features
    8738:	89 84 24 b0 01 00 00 	mov    %eax,0x1b0(%rsp)
        float p_point_mutation = 0.01f;
    873f:	0f 28 05 da 9f ff ff 	movaps -0x6026(%rip),%xmm0        # 2720 <_IO_stdin_used+0x30>
    8746:	0f 11 84 24 88 01 00 	movups %xmm0,0x188(%rsp)
    874d:	00 
    874e:	48 b8 02 0a 08 0b 1c 	movabs $0x516131c0b080a02,%rax
    8755:	13 16 05 
    params.terminalRatio   = 0.05;
    // Function set
    {
        using namespace genetic;
        params.function_set = {node::type::add, node::type::sub,  node::type::mul,
    8758:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
    875d:	c6 44 24 38 18       	movb   $0x18,0x38(%rsp)
			 - this->_M_impl._M_start); }
    8762:	4c 8b bc 24 10 01 00 	mov    0x110(%rsp),%r15
    8769:	00 
      { return size_type(this->_M_impl._M_end_of_storage
    876a:	48 8b 84 24 20 01 00 	mov    0x120(%rsp),%rax
    8771:	00 
			 - this->_M_impl._M_start); }
    8772:	4c 29 f8             	sub    %r15,%rax
	if (__len > capacity())
    8775:	48 83 f8 08          	cmp    $0x8,%rax
    8779:	77 51                	ja     87cc <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x95c>
    877b:	bf 09 00 00 00       	mov    $0x9,%edi
    8780:	e8 db ef 00 00       	callq  17760 <_Znwm@plt>
    8785:	49 89 c7             	mov    %rax,%r15
    8788:	0f b6 44 24 38       	movzbl 0x38(%rsp),%eax
    878d:	41 88 47 08          	mov    %al,0x8(%r15)
    8791:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    8796:	49 89 07             	mov    %rax,(%r15)
	    _M_deallocate(this->_M_impl._M_start,
    8799:	48 8b bc 24 10 01 00 	mov    0x110(%rsp),%rdi
    87a0:	00 
	if (__p)
    87a1:	48 85 ff             	test   %rdi,%rdi
    87a4:	74 05                	je     87ab <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x93b>
	::operator delete(__p
    87a6:	e8 15 ef 00 00       	callq  176c0 <_ZdlPv@plt>
	    this->_M_impl._M_start = __tmp;
    87ab:	4c 89 bc 24 10 01 00 	mov    %r15,0x110(%rsp)
    87b2:	00 
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
    87b3:	49 83 c7 09          	add    $0x9,%r15
    87b7:	4c 89 bc 24 18 01 00 	mov    %r15,0x118(%rsp)
    87be:	00 
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
    87bf:	4c 89 bc 24 20 01 00 	mov    %r15,0x120(%rsp)
    87c6:	00 
    87c7:	e9 81 00 00 00       	jmpq   884d <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9dd>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    87cc:	48 8b 84 24 18 01 00 	mov    0x118(%rsp),%rax
    87d3:	00 
    87d4:	49 89 c4             	mov    %rax,%r12
    87d7:	4d 29 fc             	sub    %r15,%r12
	else if (size() >= __len)
    87da:	49 83 fc 09          	cmp    $0x9,%r12
    87de:	73 46                	jae    8826 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9b6>
	  if (_Num)
    87e0:	4c 39 f8             	cmp    %r15,%rax
    87e3:	74 18                	je     87fd <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x98d>
    87e5:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    87ea:	4c 89 ff             	mov    %r15,%rdi
    87ed:	4c 89 e2             	mov    %r12,%rdx
    87f0:	e8 6b f1 00 00       	callq  17960 <memmove@plt>
    87f5:	4c 8b bc 24 18 01 00 	mov    0x118(%rsp),%r15
    87fc:	00 
    87fd:	41 be 09 00 00 00    	mov    $0x9,%r14d
	  const ptrdiff_t _Num = __last - __first;
    8803:	4d 29 e6             	sub    %r12,%r14
    8806:	4a 8d 34 24          	lea    (%rsp,%r12,1),%rsi
    880a:	48 83 c6 30          	add    $0x30,%rsi
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    880e:	4c 89 ff             	mov    %r15,%rdi
    8811:	4c 89 f2             	mov    %r14,%rdx
    8814:	e8 47 f1 00 00       	callq  17960 <memmove@plt>
	  return __result + _Num;
    8819:	4d 01 fe             	add    %r15,%r14
	    this->_M_impl._M_finish =
    881c:	4c 89 b4 24 18 01 00 	mov    %r14,0x118(%rsp)
    8823:	00 
    8824:	eb 27                	jmp    884d <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9dd>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    8826:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    882b:	0f b6 4c 24 38       	movzbl 0x38(%rsp),%ecx
    8830:	41 88 4f 08          	mov    %cl,0x8(%r15)
    8834:	49 89 07             	mov    %rax,(%r15)
	  return __result + _Num;
    8837:	49 83 c7 09          	add    $0x9,%r15
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
    883b:	4c 39 bc 24 18 01 00 	cmp    %r15,0x118(%rsp)
    8842:	00 
    8843:	74 08                	je     884d <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9dd>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
    8845:	4c 89 bc 24 18 01 00 	mov    %r15,0x118(%rsp)
    884c:	00 
                               node::type::abs, node::type::sin,  node::type::cos,
                               node::type::exp, node::type::fdim, node::type::log};
        // Arity set
        params.arity_set[1] = {node::type::abs, node::type::sin, node::type::cos, node::type::exp,
    884d:	c7 44 24 30 0b 1c 13 	movl   $0x16131c0b,0x30(%rsp)
    8854:	16 
    8855:	c6 44 24 34 18       	movb   $0x18,0x34(%rsp)
			 - this->_M_impl._M_start); }
    885a:	4c 8b bc 24 40 01 00 	mov    0x140(%rsp),%r15
    8861:	00 
      { return size_type(this->_M_impl._M_end_of_storage
    8862:	48 8b 84 24 50 01 00 	mov    0x150(%rsp),%rax
    8869:	00 
			 - this->_M_impl._M_start); }
    886a:	4c 29 f8             	sub    %r15,%rax
	if (__len > capacity())
    886d:	48 83 f8 04          	cmp    $0x4,%rax
    8871:	77 50                	ja     88c3 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa53>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    8873:	bf 05 00 00 00       	mov    $0x5,%edi
    8878:	e8 e3 ee 00 00       	callq  17760 <_Znwm@plt>
    887d:	49 89 c7             	mov    %rax,%r15
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    8880:	0f b6 44 24 34       	movzbl 0x34(%rsp),%eax
    8885:	41 88 47 04          	mov    %al,0x4(%r15)
    8889:	8b 44 24 30          	mov    0x30(%rsp),%eax
    888d:	41 89 07             	mov    %eax,(%r15)
	    _M_deallocate(this->_M_impl._M_start,
    8890:	48 8b bc 24 40 01 00 	mov    0x140(%rsp),%rdi
    8897:	00 
	if (__p)
    8898:	48 85 ff             	test   %rdi,%rdi
    889b:	74 05                	je     88a2 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa32>
	::operator delete(__p
    889d:	e8 1e ee 00 00       	callq  176c0 <_ZdlPv@plt>
	    this->_M_impl._M_start = __tmp;
    88a2:	4c 89 bc 24 40 01 00 	mov    %r15,0x140(%rsp)
    88a9:	00 
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
    88aa:	49 83 c7 05          	add    $0x5,%r15
    88ae:	4c 89 bc 24 48 01 00 	mov    %r15,0x148(%rsp)
    88b5:	00 
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
    88b6:	4c 89 bc 24 50 01 00 	mov    %r15,0x150(%rsp)
    88bd:	00 
    88be:	e9 80 00 00 00       	jmpq   8943 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xad3>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    88c3:	48 8b 84 24 48 01 00 	mov    0x148(%rsp),%rax
    88ca:	00 
    88cb:	49 89 c4             	mov    %rax,%r12
    88ce:	4d 29 fc             	sub    %r15,%r12
	else if (size() >= __len)
    88d1:	49 83 fc 05          	cmp    $0x5,%r12
    88d5:	73 46                	jae    891d <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xaad>
	  if (_Num)
    88d7:	4c 39 f8             	cmp    %r15,%rax
    88da:	74 18                	je     88f4 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa84>
    88dc:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    88e1:	4c 89 ff             	mov    %r15,%rdi
    88e4:	4c 89 e2             	mov    %r12,%rdx
    88e7:	e8 74 f0 00 00       	callq  17960 <memmove@plt>
    88ec:	4c 8b bc 24 48 01 00 	mov    0x148(%rsp),%r15
    88f3:	00 
    88f4:	41 be 05 00 00 00    	mov    $0x5,%r14d
	  const ptrdiff_t _Num = __last - __first;
    88fa:	4d 29 e6             	sub    %r12,%r14
    88fd:	4a 8d 34 24          	lea    (%rsp,%r12,1),%rsi
    8901:	48 83 c6 30          	add    $0x30,%rsi
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    8905:	4c 89 ff             	mov    %r15,%rdi
    8908:	4c 89 f2             	mov    %r14,%rdx
    890b:	e8 50 f0 00 00       	callq  17960 <memmove@plt>
	  return __result + _Num;
    8910:	4d 01 fe             	add    %r15,%r14
	    this->_M_impl._M_finish =
    8913:	4c 89 b4 24 48 01 00 	mov    %r14,0x148(%rsp)
    891a:	00 
    891b:	eb 26                	jmp    8943 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xad3>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    891d:	8b 44 24 30          	mov    0x30(%rsp),%eax
    8921:	0f b6 4c 24 34       	movzbl 0x34(%rsp),%ecx
    8926:	41 88 4f 04          	mov    %cl,0x4(%r15)
    892a:	41 89 07             	mov    %eax,(%r15)
	  return __result + _Num;
    892d:	49 83 c7 05          	add    $0x5,%r15
	if (size_type __n = this->_M_impl._M_finish - __pos)
    8931:	4c 39 bc 24 48 01 00 	cmp    %r15,0x148(%rsp)
    8938:	00 
    8939:	74 08                	je     8943 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xad3>
	    this->_M_impl._M_finish = __pos;
    893b:	4c 89 bc 24 48 01 00 	mov    %r15,0x148(%rsp)
    8942:	00 
                               node::type::log};
        params.arity_set[2] = {node::type::add, node::type::sub, node::type::mul, node::type::fdim};
    8943:	c7 44 24 30 02 0a 08 	movl   $0x5080a02,0x30(%rsp)
    894a:	05 
			 - this->_M_impl._M_start); }
    894b:	4c 8b bc 24 58 01 00 	mov    0x158(%rsp),%r15
    8952:	00 
      { return size_type(this->_M_impl._M_end_of_storage
    8953:	48 8b 84 24 68 01 00 	mov    0x168(%rsp),%rax
    895a:	00 
			 - this->_M_impl._M_start); }
    895b:	4c 29 f8             	sub    %r15,%rax
	if (__len > capacity())
    895e:	48 83 f8 03          	cmp    $0x3,%rax
    8962:	77 44                	ja     89a8 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb38>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    8964:	bf 04 00 00 00       	mov    $0x4,%edi
    8969:	e8 f2 ed 00 00       	callq  17760 <_Znwm@plt>
    896e:	49 89 c6             	mov    %rax,%r14
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    8971:	8b 44 24 30          	mov    0x30(%rsp),%eax
    8975:	41 89 06             	mov    %eax,(%r14)
	    _M_deallocate(this->_M_impl._M_start,
    8978:	48 8b bc 24 58 01 00 	mov    0x158(%rsp),%rdi
    897f:	00 
	if (__p)
    8980:	48 85 ff             	test   %rdi,%rdi
    8983:	74 05                	je     898a <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb1a>
	::operator delete(__p
    8985:	e8 36 ed 00 00       	callq  176c0 <_ZdlPv@plt>
	    this->_M_impl._M_start = __tmp;
    898a:	4c 89 b4 24 58 01 00 	mov    %r14,0x158(%rsp)
    8991:	00 
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
    8992:	49 83 c6 04          	add    $0x4,%r14
    8996:	4c 89 b4 24 60 01 00 	mov    %r14,0x160(%rsp)
    899d:	00 
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
    899e:	4c 89 b4 24 68 01 00 	mov    %r14,0x168(%rsp)
    89a5:	00 
    89a6:	eb 77                	jmp    8a1f <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbaf>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    89a8:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
    89af:	00 
    89b0:	49 89 c4             	mov    %rax,%r12
    89b3:	4d 29 fc             	sub    %r15,%r12
	else if (size() >= __len)
    89b6:	49 83 fc 04          	cmp    $0x4,%r12
    89ba:	73 46                	jae    8a02 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb92>
	  if (_Num)
    89bc:	4c 39 f8             	cmp    %r15,%rax
    89bf:	74 18                	je     89d9 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb69>
    89c1:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    89c6:	4c 89 ff             	mov    %r15,%rdi
    89c9:	4c 89 e2             	mov    %r12,%rdx
    89cc:	e8 8f ef 00 00       	callq  17960 <memmove@plt>
    89d1:	4c 8b bc 24 60 01 00 	mov    0x160(%rsp),%r15
    89d8:	00 
    89d9:	41 be 04 00 00 00    	mov    $0x4,%r14d
	  const ptrdiff_t _Num = __last - __first;
    89df:	4d 29 e6             	sub    %r12,%r14
    89e2:	4a 8d 34 24          	lea    (%rsp,%r12,1),%rsi
    89e6:	48 83 c6 30          	add    $0x30,%rsi
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    89ea:	4c 89 ff             	mov    %r15,%rdi
    89ed:	4c 89 f2             	mov    %r14,%rdx
    89f0:	e8 6b ef 00 00       	callq  17960 <memmove@plt>
	  return __result + _Num;
    89f5:	4d 01 fe             	add    %r15,%r14
	    this->_M_impl._M_finish =
    89f8:	4c 89 b4 24 60 01 00 	mov    %r14,0x160(%rsp)
    89ff:	00 
    8a00:	eb 1d                	jmp    8a1f <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbaf>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    8a02:	8b 44 24 30          	mov    0x30(%rsp),%eax
    8a06:	41 89 07             	mov    %eax,(%r15)
	  return __result + _Num;
    8a09:	49 83 c7 04          	add    $0x4,%r15
	if (size_type __n = this->_M_impl._M_finish - __pos)
    8a0d:	4c 39 bc 24 60 01 00 	cmp    %r15,0x160(%rsp)
    8a14:	00 
    8a15:	74 08                	je     8a1f <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbaf>
	    this->_M_impl._M_finish = __pos;
    8a17:	4c 89 bc 24 60 01 00 	mov    %r15,0x160(%rsp)
    8a1e:	00 
    }

    params.metric                = genetic::metric_t::mse; // Use MSE as the fitness metric
    8a1f:	c7 84 24 74 01 00 00 	movl   $0x1,0x174(%rsp)
    8a26:	01 00 00 00 
    params.parsimony_coefficient = 0.00f;                  // Penalize complexity
    8a2a:	0f 28 05 4f 9d ff ff 	movaps -0x62b1(%rip),%xmm0        # 2780 <_IO_stdin_used+0x90>
    8a31:	0f 11 84 24 78 01 00 	movups %xmm0,0x178(%rsp)
    8a38:	00 
    params.p_crossover           = 0.80f;                  // High crossover probability
    params.p_subtree_mutation    = 0.05f;
    params.p_hoist_mutation      = 0.01f;
    params.p_point_mutation      = 0.01f;
    8a39:	c7 84 24 88 01 00 00 	movl   $0x3c23d70a,0x188(%rsp)
    8a40:	0a d7 23 3c 
    params.max_samples           = 1.0f;       // Use all samples
    8a44:	c7 84 24 90 01 00 00 	movl   $0x3f800000,0x190(%rsp)
    8a4b:	00 00 80 3f 
    params.random_state          = 2025000000; // For reproducibility
    8a4f:	c7 84 24 b4 01 00 00 	movl   $0x78b30c40,0x1b4(%rsp)
    8a56:	40 0c b3 78 
	__ostream_insert(__out, __s,
    8a5a:	48 8b 3d 87 03 01 00 	mov    0x10387(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    8a61:	48 8d 35 59 9f ff ff 	lea    -0x60a7(%rip),%rsi        # 29c1 <_IO_stdin_used+0x2d1>
    8a68:	ba 21 00 00 00       	mov    $0x21,%edx
    8a6d:	e8 8e ec 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>

    // Running the symbolic regression
    std::cout << "Training symbolic regressor with " << params.population_size
    8a72:	8b b4 24 e0 00 00 00 	mov    0xe0(%rsp),%esi
    8a79:	48 8b 3d 68 03 01 00 	mov    0x10368(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    8a80:	e8 2b eb 00 00       	callq  175b0 <_ZNSolsEi@plt>
    8a85:	49 89 c6             	mov    %rax,%r14
    8a88:	48 8d 35 63 a0 ff ff 	lea    -0x5f9d(%rip),%rsi        # 2af2 <_IO_stdin_used+0x402>
    8a8f:	ba 15 00 00 00       	mov    $0x15,%edx
    8a94:	48 89 c7             	mov    %rax,%rdi
    8a97:	e8 64 ec 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
              << " population size and " << params.generations << " generations" << std::endl;
    8a9c:	8b b4 24 ec 00 00 00 	mov    0xec(%rsp),%esi
    8aa3:	4c 89 f7             	mov    %r14,%rdi
    8aa6:	e8 05 eb 00 00       	callq  175b0 <_ZNSolsEi@plt>
    8aab:	49 89 c7             	mov    %rax,%r15
    8aae:	48 8d 35 3c 9f ff ff 	lea    -0x60c4(%rip),%rsi        # 29f1 <_IO_stdin_used+0x301>
    8ab5:	ba 0c 00 00 00       	mov    $0xc,%edx
    8aba:	48 89 c7             	mov    %rax,%rdi
    8abd:	e8 3e ec 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    { return flush(__os.put(__os.widen('\n'))); }
    8ac2:	49 8b 07             	mov    (%r15),%rax
    8ac5:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    8ac9:	4d 8b b4 07 f0 00 00 	mov    0xf0(%r15,%rax,1),%r14
    8ad0:	00 
      if (!__f)
    8ad1:	4d 85 f6             	test   %r14,%r14
    8ad4:	0f 84 56 13 00 00    	je     9e30 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1fc0>
	if (_M_widen_ok)
    8ada:	41 80 7e 38 00       	cmpb   $0x0,0x38(%r14)
    8adf:	74 07                	je     8ae8 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc78>
	  return _M_widen[static_cast<unsigned char>(__c)];
    8ae1:	41 0f b6 46 43       	movzbl 0x43(%r14),%eax
    8ae6:	eb 16                	jmp    8afe <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc8e>
	this->_M_widen_init();
    8ae8:	4c 89 f7             	mov    %r14,%rdi
    8aeb:	e8 40 ec 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    8af0:	49 8b 06             	mov    (%r14),%rax
    8af3:	4c 89 f7             	mov    %r14,%rdi
    8af6:	be 0a 00 00 00       	mov    $0xa,%esi
    8afb:	ff 50 30             	callq  *0x30(%rax)
    8afe:	0f be f0             	movsbl %al,%esi
    8b01:	4c 89 ff             	mov    %r15,%rdi
    8b04:	e8 17 ec 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    8b09:	48 89 c7             	mov    %rax,%rdi
    8b0c:	e8 2f ec 00 00       	callq  17740 <_ZNSo5flushEv@plt>

    // Create history vector to store programs
    genetic::program_t final_programs;
    final_programs = new genetic::program[params.population_size]();
    8b11:	4c 63 b4 24 e0 00 00 	movslq 0xe0(%rsp),%r14
    8b18:	00 
    8b19:	4c 89 f3             	mov    %r14,%rbx
    8b1c:	48 c1 e3 05          	shl    $0x5,%rbx
    8b20:	48 8d 43 08          	lea    0x8(%rbx),%rax
    8b24:	4d 85 f6             	test   %r14,%r14
    8b27:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
    8b2e:	48 0f 49 f8          	cmovns %rax,%rdi
    8b32:	e8 29 eb 00 00       	callq  17660 <_Znam@plt>
    8b37:	49 89 c4             	mov    %rax,%r12
    8b3a:	4c 89 30             	mov    %r14,(%rax)
    8b3d:	4c 8d 78 08          	lea    0x8(%rax),%r15
    8b41:	45 85 f6             	test   %r14d,%r14d
    8b44:	74 1f                	je     8b65 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcf5>
    8b46:	48 f7 db             	neg    %rbx
    8b49:	45 31 ed             	xor    %r13d,%r13d
    8b4c:	4d 89 fe             	mov    %r15,%r14
    8b4f:	90                   	nop
    8b50:	4c 89 f7             	mov    %r14,%rdi
    8b53:	e8 a8 51 00 00       	callq  dd00 <_ZN7genetic7programC1Ev>
    8b58:	49 83 c5 e0          	add    $0xffffffffffffffe0,%r13
    8b5c:	49 83 c6 20          	add    $0x20,%r14
    8b60:	4c 39 eb             	cmp    %r13,%rbx
    8b63:	75 eb                	jne    8b50 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce0>
    8b65:	4c 89 7c 24 50       	mov    %r15,0x50(%rsp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    8b6a:	0f 57 c0             	xorps  %xmm0,%xmm0
    8b6d:	0f 29 84 24 c0 01 00 	movaps %xmm0,0x1c0(%rsp)
    8b74:	00 
    8b75:	48 c7 84 24 d0 01 00 	movq   $0x0,0x1d0(%rsp)
    8b7c:	00 00 00 00 00 
    8b81:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    8b86:	48 2b 44 24 18       	sub    0x18(%rsp),%rax
    8b8b:	48 c1 e8 03          	shr    $0x3,%rax
    8b8f:	69 c8 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%ecx
    8b95:	48 8d 84 24 c0 01 00 	lea    0x1c0(%rsp),%rax
    8b9c:	00 
    std::vector<std::vector<genetic::program>> history;

    // Train the model
    genetic::symFit(X_train_flat.data(), y_train.data(), sample_weights.data(),
    8b9d:	48 89 04 24          	mov    %rax,(%rsp)
    8ba1:	4c 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%r8
    8ba8:	00 
    8ba9:	4c 8d 4c 24 50       	lea    0x50(%rsp),%r9
    8bae:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
    8bb3:	48 89 ee             	mov    %rbp,%rsi
    8bb6:	48 8b 54 24 68       	mov    0x68(%rsp),%rdx
    8bbb:	e8 10 c9 00 00       	callq  154d0 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE>
    //             << std::endl;
    // }

    // Predict on top 2 candidates
    // insertionSortPrograms(final_programs, params.population_size);
    auto [idx1, idx2] = selectTop2(final_programs, params.population_size);
    8bc0:	8b 8c 24 e0 00 00 00 	mov    0xe0(%rsp),%ecx
    for (int i = 1; i < size; i++) {
    8bc7:	83 f9 02             	cmp    $0x2,%ecx
    8bca:	7c 4b                	jl     8c17 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xda7>
    auto [idx1, idx2] = selectTop2(final_programs, params.population_size);
    8bcc:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
    float   rf1 = programs[0].raw_fitness_;
    8bd1:	f3 0f 10 40 10       	movss  0x10(%rax),%xmm0
    for (int i = 1; i < size; i++) {
    8bd6:	48 8d 51 ff          	lea    -0x1(%rcx),%rdx
    8bda:	48 83 f9 02          	cmp    $0x2,%rcx
    8bde:	0f 85 01 02 00 00    	jne    8de5 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf75>
    8be4:	b9 01 00 00 00       	mov    $0x1,%ecx
    8be9:	31 ed                	xor    %ebp,%ebp
    8beb:	0f 28 c8             	movaps %xmm0,%xmm1
    8bee:	45 31 c0             	xor    %r8d,%r8d
    8bf1:	4d 89 c6             	mov    %r8,%r14
        if (rf < rf1) {
    8bf4:	f6 c2 01             	test   $0x1,%dl
    8bf7:	74 23                	je     8c1c <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdac>
        float rf = programs[i].raw_fitness_;
    8bf9:	48 89 ca             	mov    %rcx,%rdx
    8bfc:	48 c1 e2 05          	shl    $0x5,%rdx
    8c00:	f3 0f 10 54 10 10    	movss  0x10(%rax,%rdx,1),%xmm2
        if (rf < rf1) {
    8c06:	0f 2e c2             	ucomiss %xmm2,%xmm0
    8c09:	0f 86 ed 11 00 00    	jbe    9dfc <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1f8c>
    8c0f:	49 89 ce             	mov    %rcx,%r14
    8c12:	4c 89 c5             	mov    %r8,%rbp
    8c15:	eb 05                	jmp    8c1c <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdac>
    8c17:	45 31 f6             	xor    %r14d,%r14d
    8c1a:	31 ed                	xor    %ebp,%ebp
    8c1c:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
    8c23:	00 
    8c24:	48 8b 8c 24 d0 00 00 	mov    0xd0(%rsp),%rcx
    8c2b:	00 
    8c2c:	49 89 cd             	mov    %rcx,%r13
    8c2f:	49 29 c5             	sub    %rax,%r13
    8c32:	4c 89 eb             	mov    %r13,%rbx
    8c35:	48 c1 fb 03          	sar    $0x3,%rbx
    8c39:	48 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdx
    8c40:	aa aa aa 
    8c43:	48 0f af da          	imul   %rdx,%rbx
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    8c47:	48 ba ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rdx
    8c4e:	ff ff 1f 
    8c51:	48 39 d3             	cmp    %rdx,%rbx
    8c54:	0f 87 db 11 00 00    	ja     9e35 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1fc5>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    8c5a:	48 39 c1             	cmp    %rax,%rcx
    8c5d:	74 43                	je     8ca2 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe32>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    8c5f:	4c 8d 3c 9d 00 00 00 	lea    0x0(,%rbx,4),%r15
    8c66:	00 
    8c67:	4c 89 ff             	mov    %r15,%rdi
    8c6a:	e8 f1 ea 00 00       	callq  17760 <_Znwm@plt>
    8c6f:	48 89 c1             	mov    %rax,%rcx
    8c72:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    8c78:	4c 8d 60 04          	lea    0x4(%rax),%r12
      if (__n <= 0)
    8c7c:	49 83 fd 18          	cmp    $0x18,%r13
    8c80:	74 25                	je     8ca7 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe37>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    8c82:	4c 8d 2c 99          	lea    (%rcx,%rbx,4),%r13
      for (; __first != __last; ++__first)
    8c86:	49 83 c7 fc          	add    $0xfffffffffffffffc,%r15
	*__first = __tmp;
    8c8a:	4c 89 e7             	mov    %r12,%rdi
    8c8d:	31 f6                	xor    %esi,%esi
    8c8f:	4c 89 fa             	mov    %r15,%rdx
    8c92:	49 89 cf             	mov    %rcx,%r15
    8c95:	e8 f6 ec 00 00       	callq  17990 <memset@plt>
    8c9a:	4c 89 f9             	mov    %r15,%rcx
    8c9d:	4d 89 ec             	mov    %r13,%r12
    8ca0:	eb 05                	jmp    8ca7 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe37>
    8ca2:	31 c9                	xor    %ecx,%ecx
    8ca4:	45 31 e4             	xor    %r12d,%r12d

    std::vector<float> y_pred1(X_test.size());
    genetic::symRegPredict(X_test_flat.data(), X_test.size(), &final_programs[idx1],
    8ca7:	49 c1 e6 05          	shl    $0x5,%r14
    8cab:	4c 03 74 24 50       	add    0x50(%rsp),%r14
    8cb0:	4c 89 74 24 30       	mov    %r14,0x30(%rsp)
    8cb5:	48 8d 54 24 30       	lea    0x30(%rsp),%rdx
    8cba:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    8cbf:	89 de                	mov    %ebx,%esi
    8cc1:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
    8cc6:	e8 95 ce 00 00       	callq  15b60 <_ZN7genetic13symRegPredictEPKfiRKPNS_7programEPf>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    8ccb:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
    8cd2:	00 
    8cd3:	48 8b 8c 24 d0 00 00 	mov    0xd0(%rsp),%rcx
    8cda:	00 
    8cdb:	49 89 cf             	mov    %rcx,%r15
    8cde:	49 29 c7             	sub    %rax,%r15
    8ce1:	4d 89 fd             	mov    %r15,%r13
    8ce4:	49 c1 fd 03          	sar    $0x3,%r13
    8ce8:	48 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdx
    8cef:	aa aa aa 
    8cf2:	4c 0f af ea          	imul   %rdx,%r13
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    8cf6:	48 ba ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rdx
    8cfd:	ff ff 1f 
    8d00:	49 39 d5             	cmp    %rdx,%r13
    8d03:	0f 87 38 11 00 00    	ja     9e41 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1fd1>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    8d09:	48 39 c1             	cmp    %rax,%rcx
    8d0c:	74 30                	je     8d3e <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xece>
    8d0e:	4e 8d 34 ad 00 00 00 	lea    0x0(,%r13,4),%r14
    8d15:	00 
    8d16:	4c 89 f7             	mov    %r14,%rdi
    8d19:	e8 42 ea 00 00       	callq  17760 <_Znwm@plt>
    8d1e:	48 89 c3             	mov    %rax,%rbx
    8d21:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    8d27:	48 8d 78 04          	lea    0x4(%rax),%rdi
      if (__n <= 0)
    8d2b:	49 83 ff 18          	cmp    $0x18,%r15
    8d2f:	75 14                	jne    8d45 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xed5>
    8d31:	4c 8b b4 24 a0 00 00 	mov    0xa0(%rsp),%r14
    8d38:	00 
    8d39:	49 89 ff             	mov    %rdi,%r15
    8d3c:	eb 21                	jmp    8d5f <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xeef>
    8d3e:	31 db                	xor    %ebx,%ebx
    8d40:	45 31 ff             	xor    %r15d,%r15d
    8d43:	eb 12                	jmp    8d57 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xee7>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    8d45:	4e 8d 3c ab          	lea    (%rbx,%r13,4),%r15
      for (; __first != __last; ++__first)
    8d49:	49 83 c6 fc          	add    $0xfffffffffffffffc,%r14
	*__first = __tmp;
    8d4d:	31 f6                	xor    %esi,%esi
    8d4f:	4c 89 f2             	mov    %r14,%rdx
    8d52:	e8 39 ec 00 00       	callq  17990 <memset@plt>
    8d57:	4c 8b b4 24 a0 00 00 	mov    0xa0(%rsp),%r14
    8d5e:	00 
                           y_pred1.data());

    std::vector<float> y_pred2(X_test.size());
    genetic::symRegPredict(X_test_flat.data(), X_test.size(), &final_programs[idx2],
    8d5f:	48 c1 e5 05          	shl    $0x5,%rbp
    8d63:	48 03 6c 24 50       	add    0x50(%rsp),%rbp
    8d68:	48 89 6c 24 30       	mov    %rbp,0x30(%rsp)
    8d6d:	48 8d 54 24 30       	lea    0x30(%rsp),%rdx
    8d72:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    8d77:	44 89 ee             	mov    %r13d,%esi
    8d7a:	48 89 d9             	mov    %rbx,%rcx
    8d7d:	e8 de cd 00 00       	callq  15b60 <_ZN7genetic13symRegPredictEPKfiRKPNS_7programEPf>
    8d82:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    8d87:	4d 29 c4             	sub    %r8,%r12
        if (y_true.size() != y_pred.size()) {
    8d8a:	4d 39 e6             	cmp    %r12,%r14
    8d8d:	4c 8b 6c 24 60       	mov    0x60(%rsp),%r13
    8d92:	48 8b ac 24 a8 00 00 	mov    0xa8(%rsp),%rbp
    8d99:	00 
    8d9a:	0f 85 ad 10 00 00    	jne    9e4d <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1fdd>
    8da0:	4c 89 f1             	mov    %r14,%rcx
    8da3:	48 c1 f9 02          	sar    $0x2,%rcx
        for (size_t i = 0; i < y_true.size(); ++i) {
    8da7:	80 7c 24 14 00       	cmpb   $0x0,0x14(%rsp)
    8dac:	74 13                	je     8dc1 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf51>
        return sum / y_true.size();
    8dae:	48 85 c9             	test   %rcx,%rcx
    8db1:	0f 88 de 00 00 00    	js     8e95 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1025>
    8db7:	f3 48 0f 2a c1       	cvtsi2ss %rcx,%xmm0
    8dbc:	e9 e9 00 00 00       	jmpq   8eaa <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x103a>
        for (size_t i = 0; i < y_true.size(); ++i) {
    8dc1:	48 83 f9 01          	cmp    $0x1,%rcx
    8dc5:	48 89 c8             	mov    %rcx,%rax
    8dc8:	48 83 d0 00          	adc    $0x0,%rax
    8dcc:	89 c2                	mov    %eax,%edx
    8dce:	83 e2 03             	and    $0x3,%edx
    8dd1:	48 83 f9 04          	cmp    $0x4,%rcx
    8dd5:	0f 83 fb 00 00 00    	jae    8ed6 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1066>
    8ddb:	0f 57 d2             	xorps  %xmm2,%xmm2
    8dde:	31 f6                	xor    %esi,%esi
    8de0:	e9 67 01 00 00       	jmpq   8f4c <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10dc>
    for (int i = 1; i < size; i++) {
    8de5:	48 8d 70 50          	lea    0x50(%rax),%rsi
    8de9:	48 89 d7             	mov    %rdx,%rdi
    8dec:	48 83 e7 fe          	and    $0xfffffffffffffffe,%rdi
    8df0:	48 f7 df             	neg    %rdi
    8df3:	b9 01 00 00 00       	mov    $0x1,%ecx
    8df8:	45 31 c9             	xor    %r9d,%r9d
    8dfb:	0f 28 c8             	movaps %xmm0,%xmm1
    8dfe:	45 31 c0             	xor    %r8d,%r8d
    8e01:	eb 36                	jmp    8e39 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xfc9>
    8e03:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    8e0a:	84 00 00 00 00 00 
    8e10:	49 89 e8             	mov    %rbp,%r8
    8e13:	4c 89 d5             	mov    %r10,%rbp
    8e16:	0f 28 c8             	movaps %xmm0,%xmm1
    8e19:	0f 28 c2             	movaps %xmm2,%xmm0
    8e1c:	48 83 c6 40          	add    $0x40,%rsi
    8e20:	4c 8d 14 0f          	lea    (%rdi,%rcx,1),%r10
    8e24:	49 83 c2 02          	add    $0x2,%r10
    8e28:	48 83 c1 02          	add    $0x2,%rcx
    8e2c:	49 89 e9             	mov    %rbp,%r9
    8e2f:	49 83 fa 01          	cmp    $0x1,%r10
    8e33:	0f 84 b8 fd ff ff    	je     8bf1 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd81>
        float rf = programs[i].raw_fitness_;
    8e39:	f3 0f 10 56 e0       	movss  -0x20(%rsi),%xmm2
        if (rf < rf1) {
    8e3e:	0f 2e c2             	ucomiss %xmm2,%xmm0
    8e41:	76 1d                	jbe    8e60 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xff0>
    8e43:	49 89 ca             	mov    %rcx,%r10
    8e46:	4d 89 c1             	mov    %r8,%r9
    8e49:	0f 28 c8             	movaps %xmm0,%xmm1
    8e4c:	0f 28 c2             	movaps %xmm2,%xmm0
    8e4f:	eb 1d                	jmp    8e6e <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xffe>
    8e51:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    8e58:	0f 1f 84 00 00 00 00 
    8e5f:	00 
    8e60:	4d 89 c2             	mov    %r8,%r10
        } else if (rf < rf2) {
    8e63:	0f 2e ca             	ucomiss %xmm2,%xmm1
    8e66:	76 06                	jbe    8e6e <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xffe>
    8e68:	49 89 c9             	mov    %rcx,%r9
    8e6b:	0f 28 ca             	movaps %xmm2,%xmm1
        float rf = programs[i].raw_fitness_;
    8e6e:	48 8d 69 01          	lea    0x1(%rcx),%rbp
    8e72:	f3 0f 10 16          	movss  (%rsi),%xmm2
        if (rf < rf1) {
    8e76:	0f 2e c2             	ucomiss %xmm2,%xmm0
    8e79:	77 95                	ja     8e10 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xfa0>
    8e7b:	4d 89 d0             	mov    %r10,%r8
        } else if (rf < rf2) {
    8e7e:	0f 2e ca             	ucomiss %xmm2,%xmm1
    8e81:	76 0d                	jbe    8e90 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1020>
    8e83:	0f 28 ca             	movaps %xmm2,%xmm1
    8e86:	eb 94                	jmp    8e1c <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xfac>
    8e88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    8e8f:	00 
    8e90:	4c 89 cd             	mov    %r9,%rbp
    8e93:	eb 87                	jmp    8e1c <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xfac>
    8e95:	48 89 c8             	mov    %rcx,%rax
    8e98:	48 d1 e8             	shr    %rax
    8e9b:	83 e1 01             	and    $0x1,%ecx
    8e9e:	48 09 c1             	or     %rax,%rcx
    8ea1:	f3 48 0f 2a c1       	cvtsi2ss %rcx,%xmm0
    8ea6:	f3 0f 58 c0          	addss  %xmm0,%xmm0
    8eaa:	f3 0f 11 44 24 14    	movss  %xmm0,0x14(%rsp)
    8eb0:	49 29 df             	sub    %rbx,%r15
        if (y_true.size() != y_pred.size()) {
    8eb3:	4d 39 fe             	cmp    %r15,%r14
    8eb6:	0f 85 c3 0f 00 00    	jne    9e7f <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x200f>
    8ebc:	0f 57 c0             	xorps  %xmm0,%xmm0
    8ebf:	f3 0f 11 44 24 58    	movss  %xmm0,0x58(%rsp)
    8ec5:	f3 0f 5e 44 24 14    	divss  0x14(%rsp),%xmm0
    8ecb:	f3 0f 11 44 24 28    	movss  %xmm0,0x28(%rsp)
    8ed1:	e9 ca 01 00 00       	jmpq   90a0 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1230>
        for (size_t i = 0; i < y_true.size(); ++i) {
    8ed6:	48 89 c7             	mov    %rax,%rdi
    8ed9:	48 83 e7 fc          	and    $0xfffffffffffffffc,%rdi
    8edd:	0f 57 d2             	xorps  %xmm2,%xmm2
    8ee0:	31 f6                	xor    %esi,%esi
    8ee2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    8ee9:	1f 84 00 00 00 00 00 
            float diff = y_true[i] - y_pred[i];
    8ef0:	f3 0f 10 44 b5 00    	movss  0x0(%rbp,%rsi,4),%xmm0
    8ef6:	f3 0f 10 4c b5 04    	movss  0x4(%rbp,%rsi,4),%xmm1
    8efc:	f3 41 0f 5c 04 b0    	subss  (%r8,%rsi,4),%xmm0
            sum += diff * diff;
    8f02:	f3 0f 59 c0          	mulss  %xmm0,%xmm0
    8f06:	f3 0f 58 c2          	addss  %xmm2,%xmm0
            float diff = y_true[i] - y_pred[i];
    8f0a:	f3 41 0f 5c 4c b0 04 	subss  0x4(%r8,%rsi,4),%xmm1
            sum += diff * diff;
    8f11:	f3 0f 59 c9          	mulss  %xmm1,%xmm1
    8f15:	f3 0f 58 c8          	addss  %xmm0,%xmm1
            float diff = y_true[i] - y_pred[i];
    8f19:	f3 0f 10 44 b5 08    	movss  0x8(%rbp,%rsi,4),%xmm0
    8f1f:	f3 41 0f 5c 44 b0 08 	subss  0x8(%r8,%rsi,4),%xmm0
            sum += diff * diff;
    8f26:	f3 0f 59 c0          	mulss  %xmm0,%xmm0
    8f2a:	f3 0f 58 c1          	addss  %xmm1,%xmm0
            float diff = y_true[i] - y_pred[i];
    8f2e:	f3 0f 10 54 b5 0c    	movss  0xc(%rbp,%rsi,4),%xmm2
    8f34:	f3 41 0f 5c 54 b0 0c 	subss  0xc(%r8,%rsi,4),%xmm2
            sum += diff * diff;
    8f3b:	f3 0f 59 d2          	mulss  %xmm2,%xmm2
    8f3f:	f3 0f 58 d0          	addss  %xmm0,%xmm2
        for (size_t i = 0; i < y_true.size(); ++i) {
    8f43:	48 83 c6 04          	add    $0x4,%rsi
    8f47:	48 39 f7             	cmp    %rsi,%rdi
    8f4a:	75 a4                	jne    8ef0 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1080>
    8f4c:	48 85 d2             	test   %rdx,%rdx
    8f4f:	74 3b                	je     8f8c <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x111c>
    8f51:	49 8d 3c b0          	lea    (%r8,%rsi,4),%rdi
    8f55:	48 8d 34 b5 00 00 00 	lea    0x0(,%rsi,4),%rsi
    8f5c:	00 
    8f5d:	48 01 ee             	add    %rbp,%rsi
    8f60:	45 31 c0             	xor    %r8d,%r8d
    8f63:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    8f6a:	84 00 00 00 00 00 
            float diff = y_true[i] - y_pred[i];
    8f70:	f3 42 0f 10 04 86    	movss  (%rsi,%r8,4),%xmm0
    8f76:	f3 42 0f 5c 04 87    	subss  (%rdi,%r8,4),%xmm0
            sum += diff * diff;
    8f7c:	f3 0f 59 c0          	mulss  %xmm0,%xmm0
    8f80:	f3 0f 58 d0          	addss  %xmm0,%xmm2
        for (size_t i = 0; i < y_true.size(); ++i) {
    8f84:	49 ff c0             	inc    %r8
    8f87:	4c 39 c2             	cmp    %r8,%rdx
    8f8a:	75 e4                	jne    8f70 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1100>
    8f8c:	f3 0f 11 54 24 28    	movss  %xmm2,0x28(%rsp)
        return sum / y_true.size();
    8f92:	48 85 c9             	test   %rcx,%rcx
    8f95:	78 0a                	js     8fa1 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1131>
    8f97:	0f 57 c0             	xorps  %xmm0,%xmm0
    8f9a:	f3 48 0f 2a c1       	cvtsi2ss %rcx,%xmm0
    8f9f:	eb 1a                	jmp    8fbb <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x114b>
    8fa1:	48 89 ca             	mov    %rcx,%rdx
    8fa4:	48 d1 ea             	shr    %rdx
    8fa7:	89 ce                	mov    %ecx,%esi
    8fa9:	83 e6 01             	and    $0x1,%esi
    8fac:	48 09 d6             	or     %rdx,%rsi
    8faf:	0f 57 c0             	xorps  %xmm0,%xmm0
    8fb2:	f3 48 0f 2a c6       	cvtsi2ss %rsi,%xmm0
    8fb7:	f3 0f 58 c0          	addss  %xmm0,%xmm0
    8fbb:	f3 0f 11 44 24 14    	movss  %xmm0,0x14(%rsp)
    8fc1:	49 29 df             	sub    %rbx,%r15
        if (y_true.size() != y_pred.size()) {
    8fc4:	4d 39 fe             	cmp    %r15,%r14
    8fc7:	0f 85 b2 0e 00 00    	jne    9e7f <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x200f>
        for (size_t i = 0; i < y_true.size(); ++i) {
    8fcd:	89 c2                	mov    %eax,%edx
    8fcf:	83 e2 03             	and    $0x3,%edx
    8fd2:	48 83 f9 04          	cmp    $0x4,%rcx
    8fd6:	73 07                	jae    8fdf <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x116f>
    8fd8:	0f 57 d2             	xorps  %xmm2,%xmm2
    8fdb:	31 c9                	xor    %ecx,%ecx
    8fdd:	eb 69                	jmp    9048 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11d8>
    8fdf:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
    8fe3:	0f 57 d2             	xorps  %xmm2,%xmm2
    8fe6:	31 c9                	xor    %ecx,%ecx
    8fe8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    8fef:	00 
            float diff = y_true[i] - y_pred[i];
    8ff0:	f3 0f 10 44 8d 00    	movss  0x0(%rbp,%rcx,4),%xmm0
    8ff6:	f3 0f 10 4c 8d 04    	movss  0x4(%rbp,%rcx,4),%xmm1
    8ffc:	f3 0f 5c 04 8b       	subss  (%rbx,%rcx,4),%xmm0
            sum += diff * diff;
    9001:	f3 0f 59 c0          	mulss  %xmm0,%xmm0
    9005:	f3 0f 58 c2          	addss  %xmm2,%xmm0
            float diff = y_true[i] - y_pred[i];
    9009:	f3 0f 5c 4c 8b 04    	subss  0x4(%rbx,%rcx,4),%xmm1
            sum += diff * diff;
    900f:	f3 0f 59 c9          	mulss  %xmm1,%xmm1
    9013:	f3 0f 58 c8          	addss  %xmm0,%xmm1
            float diff = y_true[i] - y_pred[i];
    9017:	f3 0f 10 44 8d 08    	movss  0x8(%rbp,%rcx,4),%xmm0
    901d:	f3 0f 5c 44 8b 08    	subss  0x8(%rbx,%rcx,4),%xmm0
            sum += diff * diff;
    9023:	f3 0f 59 c0          	mulss  %xmm0,%xmm0
    9027:	f3 0f 58 c1          	addss  %xmm1,%xmm0
            float diff = y_true[i] - y_pred[i];
    902b:	f3 0f 10 54 8d 0c    	movss  0xc(%rbp,%rcx,4),%xmm2
    9031:	f3 0f 5c 54 8b 0c    	subss  0xc(%rbx,%rcx,4),%xmm2
            sum += diff * diff;
    9037:	f3 0f 59 d2          	mulss  %xmm2,%xmm2
    903b:	f3 0f 58 d0          	addss  %xmm0,%xmm2
        for (size_t i = 0; i < y_true.size(); ++i) {
    903f:	48 83 c1 04          	add    $0x4,%rcx
    9043:	48 39 c8             	cmp    %rcx,%rax
    9046:	75 a8                	jne    8ff0 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1180>
    9048:	f3 0f 11 54 24 58    	movss  %xmm2,0x58(%rsp)
    904e:	f3 0f 10 44 24 28    	movss  0x28(%rsp),%xmm0
    9054:	f3 0f 5e 44 24 14    	divss  0x14(%rsp),%xmm0
    905a:	f3 0f 11 44 24 28    	movss  %xmm0,0x28(%rsp)
    9060:	48 85 d2             	test   %rdx,%rdx
    9063:	74 3b                	je     90a0 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1230>
    9065:	48 8d 04 8b          	lea    (%rbx,%rcx,4),%rax
    9069:	48 8d 0c 8d 00 00 00 	lea    0x0(,%rcx,4),%rcx
    9070:	00 
    9071:	48 01 e9             	add    %rbp,%rcx
    9074:	31 f6                	xor    %esi,%esi
    9076:	f3 0f 10 4c 24 58    	movss  0x58(%rsp),%xmm1
    907c:	0f 1f 40 00          	nopl   0x0(%rax)
            float diff = y_true[i] - y_pred[i];
    9080:	f3 0f 10 04 b1       	movss  (%rcx,%rsi,4),%xmm0
    9085:	f3 0f 5c 04 b0       	subss  (%rax,%rsi,4),%xmm0
            sum += diff * diff;
    908a:	f3 0f 59 c0          	mulss  %xmm0,%xmm0
    908e:	f3 0f 58 c8          	addss  %xmm0,%xmm1
        for (size_t i = 0; i < y_true.size(); ++i) {
    9092:	48 ff c6             	inc    %rsi
    9095:	48 39 f2             	cmp    %rsi,%rdx
    9098:	75 e6                	jne    9080 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1210>
    909a:	f3 0f 11 4c 24 58    	movss  %xmm1,0x58(%rsp)
      : _M_current(__i) { }
    90a0:	48 8b 84 24 c8 01 00 	mov    0x1c8(%rsp),%rax
    90a7:	00 
    90a8:	48 8b 48 f0          	mov    -0x10(%rax),%rcx
    // Calculate MSE on test set
    float mse  = utils::mean_squared_error(y_test, y_pred1);
    float mse2 = utils::mean_squared_error(y_test, y_pred2);

    // Extract the best programs and print some stats
    if (history.back().size() > 0) {
    90ac:	48 3b 48 e8          	cmp    -0x18(%rax),%rcx
    90b0:	0f 84 76 08 00 00    	je     992c <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1abc>
        genetic::program_t best_program1 = &final_programs[0];
    90b6:	4c 8b 7c 24 50       	mov    0x50(%rsp),%r15
	__ostream_insert(__out, __s,
    90bb:	4c 8b 35 26 fd 00 00 	mov    0xfd26(%rip),%r14        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    90c2:	48 8d 35 57 97 ff ff 	lea    -0x68a9(%rip),%rsi        # 2820 <_IO_stdin_used+0x130>
    90c9:	ba 17 00 00 00       	mov    $0x17,%edx
    90ce:	4c 89 f7             	mov    %r14,%rdi
    90d1:	e8 2a e6 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    { return flush(__os.put(__os.widen('\n'))); }
    90d6:	49 8b 06             	mov    (%r14),%rax
    90d9:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    90dd:	4d 8b b4 06 f0 00 00 	mov    0xf0(%r14,%rax,1),%r14
    90e4:	00 
      if (!__f)
    90e5:	4d 85 f6             	test   %r14,%r14
    90e8:	0f 84 22 0d 00 00    	je     9e10 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1fa0>
	if (_M_widen_ok)
    90ee:	41 80 7e 38 00       	cmpb   $0x0,0x38(%r14)
    90f3:	0f 84 26 02 00 00    	je     931f <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x14af>
	  return _M_widen[static_cast<unsigned char>(__c)];
    90f9:	41 0f b6 46 43       	movzbl 0x43(%r14),%eax
    90fe:	e9 32 02 00 00       	jmpq   9335 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x14c5>
    9103:	31 c0                	xor    %eax,%eax
    9105:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
        for (size_t j = 0; j < cols; ++j) {
    910a:	48 39 f2             	cmp    %rsi,%rdx
    910d:	0f 84 72 f3 ff ff    	je     8485 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x615>
    9113:	49 83 fe 01          	cmp    $0x1,%r14
    9117:	4c 89 f0             	mov    %r14,%rax
    911a:	48 83 d0 00          	adc    $0x0,%rax
    911e:	49 83 fc 01          	cmp    $0x1,%r12
    9122:	49 83 d4 00          	adc    $0x0,%r12
    9126:	89 c1                	mov    %eax,%ecx
    9128:	83 e1 03             	and    $0x3,%ecx
    912b:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
    912f:	4c 8b 44 24 70       	mov    0x70(%rsp),%r8
    9134:	49 8d 50 0c          	lea    0xc(%r8),%rdx
    9138:	4a 8d 34 b5 00 00 00 	lea    0x0(,%r14,4),%rsi
    913f:	00 
    9140:	31 ff                	xor    %edi,%edi
    9142:	eb 1e                	jmp    9162 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x12f2>
    9144:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
    914b:	00 00 00 00 00 
    9150:	48 ff c7             	inc    %rdi
    9153:	48 01 f2             	add    %rsi,%rdx
    9156:	49 01 f0             	add    %rsi,%r8
    9159:	4c 39 e7             	cmp    %r12,%rdi
    915c:	0f 84 23 f3 ff ff    	je     8485 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x615>
    9162:	49 83 fe 04          	cmp    $0x4,%r14
            for (size_t i = 0; i < rows; ++i) {
    9166:	73 08                	jae    9170 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1300>
    9168:	45 31 c9             	xor    %r9d,%r9d
    916b:	eb 62                	jmp    91cf <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x135f>
    916d:	0f 1f 00             	nopl   (%rax)
    9170:	4c 8b 54 24 18       	mov    0x18(%rsp),%r10
    9175:	45 31 c9             	xor    %r9d,%r9d
    9178:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    917f:	00 
	return *(this->_M_impl._M_start + __n);
    9180:	4d 8b 1a             	mov    (%r10),%r11
                flattened[j * rows + i] = data[i][j];
    9183:	f3 41 0f 10 04 bb    	movss  (%r11,%rdi,4),%xmm0
    9189:	f3 42 0f 11 44 8a f4 	movss  %xmm0,-0xc(%rdx,%r9,4)
    9190:	4d 8b 5a 18          	mov    0x18(%r10),%r11
    9194:	f3 41 0f 10 04 bb    	movss  (%r11,%rdi,4),%xmm0
    919a:	f3 42 0f 11 44 8a f8 	movss  %xmm0,-0x8(%rdx,%r9,4)
    91a1:	4d 8b 5a 30          	mov    0x30(%r10),%r11
    91a5:	f3 41 0f 10 04 bb    	movss  (%r11,%rdi,4),%xmm0
    91ab:	f3 42 0f 11 44 8a fc 	movss  %xmm0,-0x4(%rdx,%r9,4)
    91b2:	4d 8b 5a 48          	mov    0x48(%r10),%r11
    91b6:	f3 41 0f 10 04 bb    	movss  (%r11,%rdi,4),%xmm0
    91bc:	f3 42 0f 11 04 8a    	movss  %xmm0,(%rdx,%r9,4)
            for (size_t i = 0; i < rows; ++i) {
    91c2:	49 83 c1 04          	add    $0x4,%r9
    91c6:	49 83 c2 60          	add    $0x60,%r10
    91ca:	4c 39 c8             	cmp    %r9,%rax
    91cd:	75 b1                	jne    9180 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1310>
    91cf:	48 85 c9             	test   %rcx,%rcx
    91d2:	0f 84 78 ff ff ff    	je     9150 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x12e0>
    91d8:	4f 8d 14 88          	lea    (%r8,%r9,4),%r10
    91dc:	4f 8d 0c 49          	lea    (%r9,%r9,2),%r9
    91e0:	4c 8b 5c 24 18       	mov    0x18(%rsp),%r11
    91e5:	4f 8d 0c cb          	lea    (%r11,%r9,8),%r9
    91e9:	45 31 db             	xor    %r11d,%r11d
    91ec:	0f 1f 40 00          	nopl   0x0(%rax)
    91f0:	49 8b 19             	mov    (%r9),%rbx
                flattened[j * rows + i] = data[i][j];
    91f3:	f3 0f 10 04 bb       	movss  (%rbx,%rdi,4),%xmm0
    91f8:	f3 43 0f 11 04 9a    	movss  %xmm0,(%r10,%r11,4)
            for (size_t i = 0; i < rows; ++i) {
    91fe:	49 ff c3             	inc    %r11
    9201:	49 83 c1 18          	add    $0x18,%r9
    9205:	4c 39 d9             	cmp    %r11,%rcx
    9208:	75 e6                	jne    91f0 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1380>
    920a:	e9 41 ff ff ff       	jmpq   9150 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x12e0>
    920f:	31 c0                	xor    %eax,%eax
    9211:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
        for (size_t j = 0; j < cols; ++j) {
    9216:	49 39 cc             	cmp    %rcx,%r12
    9219:	0f 84 10 f3 ff ff    	je     852f <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6bf>
    921f:	49 83 ff 01          	cmp    $0x1,%r15
    9223:	4c 89 f8             	mov    %r15,%rax
    9226:	48 83 d0 00          	adc    $0x0,%rax
    922a:	49 83 fe 01          	cmp    $0x1,%r14
    922e:	49 83 d6 00          	adc    $0x0,%r14
    9232:	89 c1                	mov    %eax,%ecx
    9234:	83 e1 03             	and    $0x3,%ecx
    9237:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
    923b:	4c 8b 44 24 20       	mov    0x20(%rsp),%r8
    9240:	49 8d 50 0c          	lea    0xc(%r8),%rdx
    9244:	4a 8d 34 bd 00 00 00 	lea    0x0(,%r15,4),%rsi
    924b:	00 
    924c:	31 ff                	xor    %edi,%edi
    924e:	49 bc fc ff ff ff ff 	movabs $0x7ffffffffffffffc,%r12
    9255:	ff ff 7f 
    9258:	eb 18                	jmp    9272 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1402>
    925a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    9260:	48 ff c7             	inc    %rdi
    9263:	48 01 f2             	add    %rsi,%rdx
    9266:	49 01 f0             	add    %rsi,%r8
    9269:	4c 39 f7             	cmp    %r14,%rdi
    926c:	0f 84 c7 f2 ff ff    	je     8539 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6c9>
    9272:	49 83 ff 04          	cmp    $0x4,%r15
            for (size_t i = 0; i < rows; ++i) {
    9276:	73 08                	jae    9280 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1410>
    9278:	45 31 c9             	xor    %r9d,%r9d
    927b:	eb 62                	jmp    92df <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x146f>
    927d:	0f 1f 00             	nopl   (%rax)
    9280:	4d 89 ea             	mov    %r13,%r10
    9283:	45 31 c9             	xor    %r9d,%r9d
    9286:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    928d:	00 00 00 
    9290:	4d 8b 1a             	mov    (%r10),%r11
                flattened[j * rows + i] = data[i][j];
    9293:	f3 41 0f 10 04 bb    	movss  (%r11,%rdi,4),%xmm0
    9299:	f3 42 0f 11 44 8a f4 	movss  %xmm0,-0xc(%rdx,%r9,4)
    92a0:	4d 8b 5a 18          	mov    0x18(%r10),%r11
    92a4:	f3 41 0f 10 04 bb    	movss  (%r11,%rdi,4),%xmm0
    92aa:	f3 42 0f 11 44 8a f8 	movss  %xmm0,-0x8(%rdx,%r9,4)
    92b1:	4d 8b 5a 30          	mov    0x30(%r10),%r11
    92b5:	f3 41 0f 10 04 bb    	movss  (%r11,%rdi,4),%xmm0
    92bb:	f3 42 0f 11 44 8a fc 	movss  %xmm0,-0x4(%rdx,%r9,4)
    92c2:	4d 8b 5a 48          	mov    0x48(%r10),%r11
    92c6:	f3 41 0f 10 04 bb    	movss  (%r11,%rdi,4),%xmm0
    92cc:	f3 42 0f 11 04 8a    	movss  %xmm0,(%rdx,%r9,4)
            for (size_t i = 0; i < rows; ++i) {
    92d2:	49 83 c1 04          	add    $0x4,%r9
    92d6:	49 83 c2 60          	add    $0x60,%r10
    92da:	4c 39 c8             	cmp    %r9,%rax
    92dd:	75 b1                	jne    9290 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1420>
    92df:	48 85 c9             	test   %rcx,%rcx
    92e2:	0f 84 78 ff ff ff    	je     9260 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x13f0>
    92e8:	4f 8d 14 88          	lea    (%r8,%r9,4),%r10
    92ec:	4f 8d 0c 49          	lea    (%r9,%r9,2),%r9
    92f0:	4e 8d 0c cd 00 00 00 	lea    0x0(,%r9,8),%r9
    92f7:	00 
    92f8:	4d 01 e9             	add    %r13,%r9
    92fb:	45 31 db             	xor    %r11d,%r11d
    92fe:	66 90                	xchg   %ax,%ax
    9300:	49 8b 19             	mov    (%r9),%rbx
                flattened[j * rows + i] = data[i][j];
    9303:	f3 0f 10 04 bb       	movss  (%rbx,%rdi,4),%xmm0
    9308:	f3 43 0f 11 04 9a    	movss  %xmm0,(%r10,%r11,4)
            for (size_t i = 0; i < rows; ++i) {
    930e:	49 ff c3             	inc    %r11
    9311:	49 83 c1 18          	add    $0x18,%r9
    9315:	4c 39 d9             	cmp    %r11,%rcx
    9318:	75 e6                	jne    9300 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1490>
    931a:	e9 41 ff ff ff       	jmpq   9260 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x13f0>
	this->_M_widen_init();
    931f:	4c 89 f7             	mov    %r14,%rdi
    9322:	e8 09 e4 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    9327:	49 8b 06             	mov    (%r14),%rax
    932a:	4c 89 f7             	mov    %r14,%rdi
    932d:	be 0a 00 00 00       	mov    $0xa,%esi
    9332:	ff 50 30             	callq  *0x30(%rax)
    9335:	0f be f0             	movsbl %al,%esi
    9338:	48 8b 3d a9 fa 00 00 	mov    0xfaa9(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    933f:	e8 dc e3 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    9344:	48 89 c7             	mov    %rax,%rdi
    9347:	e8 f4 e3 00 00       	callq  17740 <_ZNSo5flushEv@plt>
	__ostream_insert(__out, __s,
    934c:	48 8b 3d 95 fa 00 00 	mov    0xfa95(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    9353:	48 8d 35 b6 97 ff ff 	lea    -0x684a(%rip),%rsi        # 2b10 <_IO_stdin_used+0x420>
    935a:	ba 0a 00 00 00       	mov    $0xa,%edx
    935f:	e8 9c e3 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
        std::cout << "Best program 1 details:" << std::endl;
        std::cout << "- Length: " << best_program1->len << " nodes" << std::endl;
    9364:	41 8b 77 08          	mov    0x8(%r15),%esi
    9368:	48 8b 3d 79 fa 00 00 	mov    0xfa79(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    936f:	e8 3c e2 00 00       	callq  175b0 <_ZNSolsEi@plt>
    9374:	49 89 c4             	mov    %rax,%r12
    9377:	48 8d 35 df 98 ff ff 	lea    -0x6721(%rip),%rsi        # 2c5d <_IO_stdin_used+0x56d>
    937e:	ba 06 00 00 00       	mov    $0x6,%edx
    9383:	48 89 c7             	mov    %rax,%rdi
    9386:	e8 75 e3 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    { return flush(__os.put(__os.widen('\n'))); }
    938b:	49 8b 04 24          	mov    (%r12),%rax
    938f:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    9393:	4d 8b b4 04 f0 00 00 	mov    0xf0(%r12,%rax,1),%r14
    939a:	00 
      if (!__f)
    939b:	4d 85 f6             	test   %r14,%r14
    939e:	0f 84 6c 0a 00 00    	je     9e10 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1fa0>
	if (_M_widen_ok)
    93a4:	41 80 7e 38 00       	cmpb   $0x0,0x38(%r14)
    93a9:	74 07                	je     93b2 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1542>
	  return _M_widen[static_cast<unsigned char>(__c)];
    93ab:	41 0f b6 46 43       	movzbl 0x43(%r14),%eax
    93b0:	eb 16                	jmp    93c8 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1558>
	this->_M_widen_init();
    93b2:	4c 89 f7             	mov    %r14,%rdi
    93b5:	e8 76 e3 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    93ba:	49 8b 06             	mov    (%r14),%rax
    93bd:	4c 89 f7             	mov    %r14,%rdi
    93c0:	be 0a 00 00 00       	mov    $0xa,%esi
    93c5:	ff 50 30             	callq  *0x30(%rax)
    93c8:	0f be f0             	movsbl %al,%esi
    93cb:	4c 89 e7             	mov    %r12,%rdi
    93ce:	e8 4d e3 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    93d3:	48 89 c7             	mov    %rax,%rdi
    93d6:	e8 65 e3 00 00       	callq  17740 <_ZNSo5flushEv@plt>
	__ostream_insert(__out, __s,
    93db:	48 8b 3d 06 fa 00 00 	mov    0xfa06(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    93e2:	48 8d 35 1c 98 ff ff 	lea    -0x67e4(%rip),%rsi        # 2c05 <_IO_stdin_used+0x515>
    93e9:	ba 09 00 00 00       	mov    $0x9,%edx
    93ee:	e8 0d e3 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
        std::cout << "- Depth: " << best_program1->depth << std::endl;
    93f3:	41 8b 77 0c          	mov    0xc(%r15),%esi
    93f7:	48 8b 3d ea f9 00 00 	mov    0xf9ea(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    93fe:	e8 ad e1 00 00       	callq  175b0 <_ZNSolsEi@plt>
    9403:	49 89 c4             	mov    %rax,%r12
    { return flush(__os.put(__os.widen('\n'))); }
    9406:	48 8b 00             	mov    (%rax),%rax
    9409:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    940d:	4d 8b b4 04 f0 00 00 	mov    0xf0(%r12,%rax,1),%r14
    9414:	00 
      if (!__f)
    9415:	4d 85 f6             	test   %r14,%r14
    9418:	0f 84 f2 09 00 00    	je     9e10 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1fa0>
	if (_M_widen_ok)
    941e:	41 80 7e 38 00       	cmpb   $0x0,0x38(%r14)
    9423:	74 07                	je     942c <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x15bc>
	  return _M_widen[static_cast<unsigned char>(__c)];
    9425:	41 0f b6 46 43       	movzbl 0x43(%r14),%eax
    942a:	eb 16                	jmp    9442 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x15d2>
	this->_M_widen_init();
    942c:	4c 89 f7             	mov    %r14,%rdi
    942f:	e8 fc e2 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    9434:	49 8b 06             	mov    (%r14),%rax
    9437:	4c 89 f7             	mov    %r14,%rdi
    943a:	be 0a 00 00 00       	mov    $0xa,%esi
    943f:	ff 50 30             	callq  *0x30(%rax)
    9442:	0f be f0             	movsbl %al,%esi
    9445:	4c 89 e7             	mov    %r12,%rdi
    9448:	e8 d3 e2 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    944d:	48 89 c7             	mov    %rax,%rdi
    9450:	e8 eb e2 00 00       	callq  17740 <_ZNSo5flushEv@plt>
	__ostream_insert(__out, __s,
    9455:	48 8b 3d 8c f9 00 00 	mov    0xf98c(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    945c:	48 8d 35 fa 98 ff ff 	lea    -0x6706(%rip),%rsi        # 2d5d <_IO_stdin_used+0x66d>
    9463:	ba 0f 00 00 00       	mov    $0xf,%edx
    9468:	e8 93 e2 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
        std::cout << "- Raw fitness: " << best_program1->raw_fitness_ << std::endl;
    946d:	f3 41 0f 10 47 10    	movss  0x10(%r15),%xmm0
	return _M_insert(static_cast<double>(__f));
    9473:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
    9477:	48 8b 3d 6a f9 00 00 	mov    0xf96a(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    947e:	e8 8d e1 00 00       	callq  17610 <_ZNSo9_M_insertIdEERSoT_@plt>
    9483:	49 89 c4             	mov    %rax,%r12
    { return flush(__os.put(__os.widen('\n'))); }
    9486:	48 8b 00             	mov    (%rax),%rax
    9489:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    948d:	4d 8b b4 04 f0 00 00 	mov    0xf0(%r12,%rax,1),%r14
    9494:	00 
      if (!__f)
    9495:	4d 85 f6             	test   %r14,%r14
    9498:	0f 84 72 09 00 00    	je     9e10 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1fa0>
	if (_M_widen_ok)
    949e:	41 80 7e 38 00       	cmpb   $0x0,0x38(%r14)
    94a3:	74 07                	je     94ac <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x163c>
	  return _M_widen[static_cast<unsigned char>(__c)];
    94a5:	41 0f b6 46 43       	movzbl 0x43(%r14),%eax
    94aa:	eb 16                	jmp    94c2 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1652>
	this->_M_widen_init();
    94ac:	4c 89 f7             	mov    %r14,%rdi
    94af:	e8 7c e2 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    94b4:	49 8b 06             	mov    (%r14),%rax
    94b7:	4c 89 f7             	mov    %r14,%rdi
    94ba:	be 0a 00 00 00       	mov    $0xa,%esi
    94bf:	ff 50 30             	callq  *0x30(%rax)
    94c2:	0f be f0             	movsbl %al,%esi
    94c5:	4c 89 e7             	mov    %r12,%rdi
    94c8:	e8 53 e2 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    94cd:	48 89 c7             	mov    %rax,%rdi
    94d0:	e8 6b e2 00 00       	callq  17740 <_ZNSo5flushEv@plt>
	__ostream_insert(__out, __s,
    94d5:	48 8b 3d 0c f9 00 00 	mov    0xf90c(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    94dc:	48 8d 35 f8 95 ff ff 	lea    -0x6a08(%rip),%rsi        # 2adb <_IO_stdin_used+0x3eb>
    94e3:	ba 0c 00 00 00       	mov    $0xc,%edx
    94e8:	e8 13 e2 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    94ed:	f3 0f 10 44 24 28    	movss  0x28(%rsp),%xmm0
	return _M_insert(static_cast<double>(__f));
    94f3:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
    94f7:	48 8b 3d ea f8 00 00 	mov    0xf8ea(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    94fe:	e8 0d e1 00 00       	callq  17610 <_ZNSo9_M_insertIdEERSoT_@plt>
        std::cout << "- Test MSE: " << mse << std::endl;
    9503:	49 89 c4             	mov    %rax,%r12
    { return flush(__os.put(__os.widen('\n'))); }
    9506:	48 8b 00             	mov    (%rax),%rax
    9509:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    950d:	4d 8b b4 04 f0 00 00 	mov    0xf0(%r12,%rax,1),%r14
    9514:	00 
      if (!__f)
    9515:	4d 85 f6             	test   %r14,%r14
    9518:	0f 84 f2 08 00 00    	je     9e10 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1fa0>
	if (_M_widen_ok)
    951e:	41 80 7e 38 00       	cmpb   $0x0,0x38(%r14)
    9523:	74 07                	je     952c <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16bc>
	  return _M_widen[static_cast<unsigned char>(__c)];
    9525:	41 0f b6 46 43       	movzbl 0x43(%r14),%eax
    952a:	eb 16                	jmp    9542 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16d2>
	this->_M_widen_init();
    952c:	4c 89 f7             	mov    %r14,%rdi
    952f:	e8 fc e1 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    9534:	49 8b 06             	mov    (%r14),%rax
    9537:	4c 89 f7             	mov    %r14,%rdi
    953a:	be 0a 00 00 00       	mov    $0xa,%esi
    953f:	ff 50 30             	callq  *0x30(%rax)
    9542:	0f be f0             	movsbl %al,%esi
    9545:	4c 89 e7             	mov    %r12,%rdi
    9548:	e8 d3 e1 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    954d:	48 89 c7             	mov    %rax,%rdi
    9550:	e8 eb e1 00 00       	callq  17740 <_ZNSo5flushEv@plt>
    9555:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi

        // Convert to string representation
        std::string program_str = genetic::stringify(*best_program1);
    955a:	4c 89 fe             	mov    %r15,%rsi
    955d:	e8 7e b3 00 00       	callq  148e0 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE>
	__ostream_insert(__out, __s,
    9562:	48 8b 3d 7f f8 00 00 	mov    0xf87f(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    9569:	48 8d 35 d1 97 ff ff 	lea    -0x682f(%rip),%rsi        # 2d41 <_IO_stdin_used+0x651>
    9570:	ba 0b 00 00 00       	mov    $0xb,%edx
    9575:	e8 86 e1 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
      { return _M_dataplus._M_p; }
    957a:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
      { return _M_string_length; }
    957f:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
      return __ostream_insert(__os, __str.data(), __str.size());
    9584:	48 8b 3d 5d f8 00 00 	mov    0xf85d(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    958b:	e8 70 e1 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
        std::cout << "- Program: " << program_str << std::endl;
    9590:	49 89 c7             	mov    %rax,%r15
    { return flush(__os.put(__os.widen('\n'))); }
    9593:	48 8b 00             	mov    (%rax),%rax
    9596:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    959a:	4d 8b b4 07 f0 00 00 	mov    0xf0(%r15,%rax,1),%r14
    95a1:	00 
      if (!__f)
    95a2:	4d 85 f6             	test   %r14,%r14
    95a5:	0f 84 3c 09 00 00    	je     9ee7 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2077>
	if (_M_widen_ok)
    95ab:	41 80 7e 38 00       	cmpb   $0x0,0x38(%r14)
    95b0:	74 07                	je     95b9 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1749>
	  return _M_widen[static_cast<unsigned char>(__c)];
    95b2:	41 0f b6 46 43       	movzbl 0x43(%r14),%eax
    95b7:	eb 16                	jmp    95cf <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x175f>
	this->_M_widen_init();
    95b9:	4c 89 f7             	mov    %r14,%rdi
    95bc:	e8 6f e1 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    95c1:	49 8b 06             	mov    (%r14),%rax
    95c4:	4c 89 f7             	mov    %r14,%rdi
    95c7:	be 0a 00 00 00       	mov    $0xa,%esi
    95cc:	ff 50 30             	callq  *0x30(%rax)
    95cf:	0f be f0             	movsbl %al,%esi
    95d2:	4c 89 ff             	mov    %r15,%rdi
    95d5:	e8 46 e1 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    95da:	48 89 c7             	mov    %rax,%rdi
    95dd:	e8 5e e1 00 00       	callq  17740 <_ZNSo5flushEv@plt>

        genetic::program_t best_program2 = &final_programs[1];
    95e2:	4c 8b 7c 24 50       	mov    0x50(%rsp),%r15
	__ostream_insert(__out, __s,
    95e7:	4c 8b 35 fa f7 00 00 	mov    0xf7fa(%rip),%r14        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    95ee:	48 8d 35 09 94 ff ff 	lea    -0x6bf7(%rip),%rsi        # 29fe <_IO_stdin_used+0x30e>
    95f5:	ba 17 00 00 00       	mov    $0x17,%edx
    95fa:	4c 89 f7             	mov    %r14,%rdi
    95fd:	e8 fe e0 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    { return flush(__os.put(__os.widen('\n'))); }
    9602:	49 8b 06             	mov    (%r14),%rax
    9605:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    9609:	4d 8b b4 06 f0 00 00 	mov    0xf0(%r14,%rax,1),%r14
    9610:	00 
      if (!__f)
    9611:	4d 85 f6             	test   %r14,%r14
    9614:	0f 84 fb 07 00 00    	je     9e15 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1fa5>
	if (_M_widen_ok)
    961a:	41 80 7e 38 00       	cmpb   $0x0,0x38(%r14)
    961f:	74 07                	je     9628 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17b8>
	  return _M_widen[static_cast<unsigned char>(__c)];
    9621:	41 0f b6 46 43       	movzbl 0x43(%r14),%eax
    9626:	eb 16                	jmp    963e <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17ce>
	this->_M_widen_init();
    9628:	4c 89 f7             	mov    %r14,%rdi
    962b:	e8 00 e1 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    9630:	49 8b 06             	mov    (%r14),%rax
    9633:	4c 89 f7             	mov    %r14,%rdi
    9636:	be 0a 00 00 00       	mov    $0xa,%esi
    963b:	ff 50 30             	callq  *0x30(%rax)
    963e:	0f be f0             	movsbl %al,%esi
    9641:	48 8b 3d a0 f7 00 00 	mov    0xf7a0(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    9648:	e8 d3 e0 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    964d:	48 89 c7             	mov    %rax,%rdi
    9650:	e8 eb e0 00 00       	callq  17740 <_ZNSo5flushEv@plt>
	__ostream_insert(__out, __s,
    9655:	48 8b 3d 8c f7 00 00 	mov    0xf78c(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    965c:	48 8d 35 ad 94 ff ff 	lea    -0x6b53(%rip),%rsi        # 2b10 <_IO_stdin_used+0x420>
    9663:	ba 0a 00 00 00       	mov    $0xa,%edx
    9668:	e8 93 e0 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
        std::cout << "Best program 2 details:" << std::endl;
        std::cout << "- Length: " << best_program2->len << " nodes" << std::endl;
    966d:	41 8b 77 28          	mov    0x28(%r15),%esi
    9671:	48 8b 3d 70 f7 00 00 	mov    0xf770(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    9678:	e8 33 df 00 00       	callq  175b0 <_ZNSolsEi@plt>
    967d:	49 89 c4             	mov    %rax,%r12
    9680:	48 8d 35 d6 95 ff ff 	lea    -0x6a2a(%rip),%rsi        # 2c5d <_IO_stdin_used+0x56d>
    9687:	ba 06 00 00 00       	mov    $0x6,%edx
    968c:	48 89 c7             	mov    %rax,%rdi
    968f:	e8 6c e0 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    { return flush(__os.put(__os.widen('\n'))); }
    9694:	49 8b 04 24          	mov    (%r12),%rax
    9698:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    969c:	4d 8b b4 04 f0 00 00 	mov    0xf0(%r12,%rax,1),%r14
    96a3:	00 
      if (!__f)
    96a4:	4d 85 f6             	test   %r14,%r14
    96a7:	0f 84 68 07 00 00    	je     9e15 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1fa5>
	if (_M_widen_ok)
    96ad:	41 80 7e 38 00       	cmpb   $0x0,0x38(%r14)
    96b2:	74 07                	je     96bb <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x184b>
	  return _M_widen[static_cast<unsigned char>(__c)];
    96b4:	41 0f b6 46 43       	movzbl 0x43(%r14),%eax
    96b9:	eb 16                	jmp    96d1 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1861>
	this->_M_widen_init();
    96bb:	4c 89 f7             	mov    %r14,%rdi
    96be:	e8 6d e0 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    96c3:	49 8b 06             	mov    (%r14),%rax
    96c6:	4c 89 f7             	mov    %r14,%rdi
    96c9:	be 0a 00 00 00       	mov    $0xa,%esi
    96ce:	ff 50 30             	callq  *0x30(%rax)
    96d1:	0f be f0             	movsbl %al,%esi
    96d4:	4c 89 e7             	mov    %r12,%rdi
    96d7:	e8 44 e0 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    96dc:	48 89 c7             	mov    %rax,%rdi
    96df:	e8 5c e0 00 00       	callq  17740 <_ZNSo5flushEv@plt>
	__ostream_insert(__out, __s,
    96e4:	48 8b 3d fd f6 00 00 	mov    0xf6fd(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    96eb:	48 8d 35 13 95 ff ff 	lea    -0x6aed(%rip),%rsi        # 2c05 <_IO_stdin_used+0x515>
    96f2:	ba 09 00 00 00       	mov    $0x9,%edx
    96f7:	e8 04 e0 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
        std::cout << "- Depth: " << best_program2->depth << std::endl;
    96fc:	41 8b 77 2c          	mov    0x2c(%r15),%esi
    9700:	48 8b 3d e1 f6 00 00 	mov    0xf6e1(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    9707:	e8 a4 de 00 00       	callq  175b0 <_ZNSolsEi@plt>
    970c:	49 89 c4             	mov    %rax,%r12
    { return flush(__os.put(__os.widen('\n'))); }
    970f:	48 8b 00             	mov    (%rax),%rax
    9712:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    9716:	4d 8b b4 04 f0 00 00 	mov    0xf0(%r12,%rax,1),%r14
    971d:	00 
      if (!__f)
    971e:	4d 85 f6             	test   %r14,%r14
    9721:	0f 84 ee 06 00 00    	je     9e15 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1fa5>
	if (_M_widen_ok)
    9727:	41 80 7e 38 00       	cmpb   $0x0,0x38(%r14)
    972c:	74 07                	je     9735 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x18c5>
	  return _M_widen[static_cast<unsigned char>(__c)];
    972e:	41 0f b6 46 43       	movzbl 0x43(%r14),%eax
    9733:	eb 16                	jmp    974b <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x18db>
	this->_M_widen_init();
    9735:	4c 89 f7             	mov    %r14,%rdi
    9738:	e8 f3 df 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    973d:	49 8b 06             	mov    (%r14),%rax
    9740:	4c 89 f7             	mov    %r14,%rdi
    9743:	be 0a 00 00 00       	mov    $0xa,%esi
    9748:	ff 50 30             	callq  *0x30(%rax)
    974b:	0f be f0             	movsbl %al,%esi
    974e:	4c 89 e7             	mov    %r12,%rdi
    9751:	e8 ca df 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    9756:	48 89 c7             	mov    %rax,%rdi
    9759:	e8 e2 df 00 00       	callq  17740 <_ZNSo5flushEv@plt>
	__ostream_insert(__out, __s,
    975e:	48 8b 3d 83 f6 00 00 	mov    0xf683(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    9765:	48 8d 35 f1 95 ff ff 	lea    -0x6a0f(%rip),%rsi        # 2d5d <_IO_stdin_used+0x66d>
    976c:	ba 0f 00 00 00       	mov    $0xf,%edx
    9771:	e8 8a df 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
        std::cout << "- Raw fitness: " << best_program2->raw_fitness_ << std::endl;
    9776:	f3 41 0f 10 47 30    	movss  0x30(%r15),%xmm0
	return _M_insert(static_cast<double>(__f));
    977c:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
    9780:	48 8b 3d 61 f6 00 00 	mov    0xf661(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    9787:	e8 84 de 00 00       	callq  17610 <_ZNSo9_M_insertIdEERSoT_@plt>
    978c:	49 89 c4             	mov    %rax,%r12
    { return flush(__os.put(__os.widen('\n'))); }
    978f:	48 8b 00             	mov    (%rax),%rax
    9792:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    9796:	4d 8b b4 04 f0 00 00 	mov    0xf0(%r12,%rax,1),%r14
    979d:	00 
      if (!__f)
    979e:	4d 85 f6             	test   %r14,%r14
    97a1:	0f 84 6e 06 00 00    	je     9e15 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1fa5>
	if (_M_widen_ok)
    97a7:	41 80 7e 38 00       	cmpb   $0x0,0x38(%r14)
    97ac:	74 07                	je     97b5 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1945>
	  return _M_widen[static_cast<unsigned char>(__c)];
    97ae:	41 0f b6 46 43       	movzbl 0x43(%r14),%eax
    97b3:	eb 16                	jmp    97cb <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x195b>
	this->_M_widen_init();
    97b5:	4c 89 f7             	mov    %r14,%rdi
    97b8:	e8 73 df 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    97bd:	49 8b 06             	mov    (%r14),%rax
    97c0:	4c 89 f7             	mov    %r14,%rdi
    97c3:	be 0a 00 00 00       	mov    $0xa,%esi
    97c8:	ff 50 30             	callq  *0x30(%rax)
    97cb:	0f be f0             	movsbl %al,%esi
    97ce:	4c 89 e7             	mov    %r12,%rdi
    97d1:	e8 4a df 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    97d6:	48 89 c7             	mov    %rax,%rdi
    97d9:	e8 62 df 00 00       	callq  17740 <_ZNSo5flushEv@plt>
	__ostream_insert(__out, __s,
    97de:	48 8b 3d 03 f6 00 00 	mov    0xf603(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    97e5:	48 8d 35 ef 92 ff ff 	lea    -0x6d11(%rip),%rsi        # 2adb <_IO_stdin_used+0x3eb>
    97ec:	ba 0c 00 00 00       	mov    $0xc,%edx
    97f1:	e8 0a df 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    97f6:	f3 0f 10 44 24 58    	movss  0x58(%rsp),%xmm0
    97fc:	f3 0f 5e 44 24 14    	divss  0x14(%rsp),%xmm0
	return _M_insert(static_cast<double>(__f));
    9802:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
    9806:	48 8b 3d db f5 00 00 	mov    0xf5db(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    980d:	e8 fe dd 00 00       	callq  17610 <_ZNSo9_M_insertIdEERSoT_@plt>
        std::cout << "- Test MSE: " << mse2 << std::endl;
    9812:	49 89 c4             	mov    %rax,%r12
    { return flush(__os.put(__os.widen('\n'))); }
    9815:	48 8b 00             	mov    (%rax),%rax
    9818:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    981c:	4d 8b b4 04 f0 00 00 	mov    0xf0(%r12,%rax,1),%r14
    9823:	00 
      if (!__f)
    9824:	4d 85 f6             	test   %r14,%r14
    9827:	0f 84 e8 05 00 00    	je     9e15 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1fa5>
	if (_M_widen_ok)
    982d:	41 80 7e 38 00       	cmpb   $0x0,0x38(%r14)
    9832:	74 07                	je     983b <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x19cb>
	  return _M_widen[static_cast<unsigned char>(__c)];
    9834:	41 0f b6 46 43       	movzbl 0x43(%r14),%eax
    9839:	eb 16                	jmp    9851 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x19e1>
	this->_M_widen_init();
    983b:	4c 89 f7             	mov    %r14,%rdi
    983e:	e8 ed de 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    9843:	49 8b 06             	mov    (%r14),%rax
    9846:	4c 89 f7             	mov    %r14,%rdi
    9849:	be 0a 00 00 00       	mov    $0xa,%esi
    984e:	ff 50 30             	callq  *0x30(%rax)
    9851:	0f be f0             	movsbl %al,%esi
    9854:	4c 89 e7             	mov    %r12,%rdi
    9857:	e8 c4 de 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    985c:	48 89 c7             	mov    %rax,%rdi
    985f:	e8 dc de 00 00       	callq  17740 <_ZNSo5flushEv@plt>
    9864:	49 83 c7 20          	add    $0x20,%r15
    9868:	48 8d bc 24 88 02 00 	lea    0x288(%rsp),%rdi
    986f:	00 

        // Convert to string representation
        std::string program_str2 = genetic::stringify(*best_program2);
    9870:	4c 89 fe             	mov    %r15,%rsi
    9873:	e8 68 b0 00 00       	callq  148e0 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE>
	__ostream_insert(__out, __s,
    9878:	48 8b 3d 69 f5 00 00 	mov    0xf569(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    987f:	48 8d 35 bb 94 ff ff 	lea    -0x6b45(%rip),%rsi        # 2d41 <_IO_stdin_used+0x651>
    9886:	ba 0b 00 00 00       	mov    $0xb,%edx
    988b:	e8 70 de 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
      { return _M_dataplus._M_p; }
    9890:	48 8b b4 24 88 02 00 	mov    0x288(%rsp),%rsi
    9897:	00 
      { return _M_string_length; }
    9898:	48 8b 94 24 90 02 00 	mov    0x290(%rsp),%rdx
    989f:	00 
      return __ostream_insert(__os, __str.data(), __str.size());
    98a0:	48 8b 3d 41 f5 00 00 	mov    0xf541(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    98a7:	e8 54 de 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
        std::cout << "- Program: " << program_str2 << std::endl;
    98ac:	49 89 c7             	mov    %rax,%r15
    { return flush(__os.put(__os.widen('\n'))); }
    98af:	48 8b 00             	mov    (%rax),%rax
    98b2:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    98b6:	4d 8b b4 07 f0 00 00 	mov    0xf0(%r15,%rax,1),%r14
    98bd:	00 
      if (!__f)
    98be:	4d 85 f6             	test   %r14,%r14
    98c1:	0f 84 25 06 00 00    	je     9eec <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x207c>
	if (_M_widen_ok)
    98c7:	41 80 7e 38 00       	cmpb   $0x0,0x38(%r14)
    98cc:	74 07                	je     98d5 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a65>
	  return _M_widen[static_cast<unsigned char>(__c)];
    98ce:	41 0f b6 46 43       	movzbl 0x43(%r14),%eax
    98d3:	eb 16                	jmp    98eb <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a7b>
	this->_M_widen_init();
    98d5:	4c 89 f7             	mov    %r14,%rdi
    98d8:	e8 53 de 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    98dd:	49 8b 06             	mov    (%r14),%rax
    98e0:	4c 89 f7             	mov    %r14,%rdi
    98e3:	be 0a 00 00 00       	mov    $0xa,%esi
    98e8:	ff 50 30             	callq  *0x30(%rax)
    98eb:	0f be f0             	movsbl %al,%esi
    98ee:	4c 89 ff             	mov    %r15,%rdi
    98f1:	e8 2a de 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    98f6:	48 89 c7             	mov    %rax,%rdi
    98f9:	e8 42 de 00 00       	callq  17740 <_ZNSo5flushEv@plt>
      { return _M_dataplus._M_p; }
    98fe:	48 8b bc 24 88 02 00 	mov    0x288(%rsp),%rdi
    9905:	00 
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    9906:	48 8d 84 24 98 02 00 	lea    0x298(%rsp),%rax
    990d:	00 
      { return _M_data() == _M_local_data(); }
    990e:	48 39 c7             	cmp    %rax,%rdi
	if (!_M_is_local())
    9911:	74 05                	je     9918 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1aa8>
	::operator delete(__p
    9913:	e8 a8 dd 00 00       	callq  176c0 <_ZdlPv@plt>
      { return _M_dataplus._M_p; }
    9918:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    991d:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
      { return _M_data() == _M_local_data(); }
    9922:	48 39 c7             	cmp    %rax,%rdi
	if (!_M_is_local())
    9925:	74 05                	je     992c <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1abc>
    9927:	e8 94 dd 00 00       	callq  176c0 <_ZdlPv@plt>
 * @sa ctimer_measure
 * @sa ctimer_lap
 */
static inline void ctimer_stop(ctimer_t* t /**<[in,out] stopwatch pointer */
) {
    clock_gettime(CLOCK_MONOTONIC, &t->end);
    992c:	48 8d b4 24 b8 02 00 	lea    0x2b8(%rsp),%rsi
    9933:	00 
    9934:	bf 01 00 00 00       	mov    $0x1,%edi
    9939:	e8 62 e0 00 00       	callq  179a0 <clock_gettime@plt>
    timespec_sub(&t->elapsed, t->end, t->start);
    993e:	48 8b 84 24 a8 02 00 	mov    0x2a8(%rsp),%rax
    9945:	00 
    9946:	4c 8b bc 24 c0 02 00 	mov    0x2c0(%rsp),%r15
    994d:	00 
    t_diff->tv_nsec = t_end.tv_nsec - t_start.tv_nsec;
    994e:	4c 2b bc 24 b0 02 00 	sub    0x2b0(%rsp),%r15
    9955:	00 
    timespec_sub(&t->elapsed, t->end, t->start);
    9956:	4c 8b a4 24 b8 02 00 	mov    0x2b8(%rsp),%r12
    995d:	00 
    t_diff->tv_nsec = t_end.tv_nsec - t_start.tv_nsec;
    995e:	4c 89 bc 24 d0 02 00 	mov    %r15,0x2d0(%rsp)
    9965:	00 
    if ((t_diff->tv_sec > 0) && (t_diff->tv_nsec < 0)) {
    9966:	49 29 c4             	sub    %rax,%r12
    t_diff->tv_sec  = t_end.tv_sec - t_start.tv_sec;
    9969:	4c 89 a4 24 c8 02 00 	mov    %r12,0x2c8(%rsp)
    9970:	00 
    if ((t_diff->tv_sec > 0) && (t_diff->tv_nsec < 0)) {
    9971:	7e 13                	jle    9986 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b16>
    9973:	4d 85 ff             	test   %r15,%r15
    9976:	79 37                	jns    99af <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b3f>
    9978:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
    997f:	b9 00 ca 9a 3b       	mov    $0x3b9aca00,%ecx
    9984:	eb 13                	jmp    9999 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b29>
    } else if ((t_diff->tv_sec < 0) && (t_diff->tv_nsec > 0)) {
    9986:	74 27                	je     99af <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b3f>
    9988:	4d 85 ff             	test   %r15,%r15
    998b:	7e 22                	jle    99af <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b3f>
    998d:	b8 01 00 00 00       	mov    $0x1,%eax
    9992:	48 c7 c1 00 36 65 c4 	mov    $0xffffffffc4653600,%rcx
    9999:	49 01 cf             	add    %rcx,%r15
    999c:	4c 89 bc 24 d0 02 00 	mov    %r15,0x2d0(%rsp)
    99a3:	00 
    99a4:	49 01 c4             	add    %rax,%r12
    99a7:	4c 89 a4 24 c8 02 00 	mov    %r12,0x2c8(%rsp)
    99ae:	00 
 */
static inline void ctimer_print(ctimer_t const t,    /**<[in] stopwatch pointer */
                                char const*    label /**<[in] label/description for printed time */
) {
    if ((label != NULL) && (label[0] != '\0'))
        printf("Time(%s) = ", label);
    99af:	48 8d 3d f4 91 ff ff 	lea    -0x6e0c(%rip),%rdi        # 2baa <_IO_stdin_used+0x4ba>
    99b6:	48 8d 35 e3 92 ff ff 	lea    -0x6d1d(%rip),%rsi        # 2ca0 <_IO_stdin_used+0x5b0>
    99bd:	31 c0                	xor    %eax,%eax
    99bf:	e8 ec df 00 00       	callq  179b0 <printf@plt>
    else
        printf("Time = ");

    printf("%ld.%09ld sec\n", (long)t.elapsed.tv_sec, t.elapsed.tv_nsec);
    99c4:	48 8d 3d 44 92 ff ff 	lea    -0x6dbc(%rip),%rdi        # 2c0f <_IO_stdin_used+0x51f>
    99cb:	4c 89 e6             	mov    %r12,%rsi
    99ce:	4c 89 fa             	mov    %r15,%rdx
    99d1:	31 c0                	xor    %eax,%eax
    99d3:	e8 d8 df 00 00       	callq  179b0 <printf@plt>
    // Stop end-to-end timer and print results
    ctimer_stop(&end_to_end_timer);
    ctimer_measure(&end_to_end_timer);
    ctimer_print(end_to_end_timer, "Symbolic Regression (End-to-End)");

    delete[] final_programs;
    99d8:	4c 8b 74 24 50       	mov    0x50(%rsp),%r14
    99dd:	4d 85 f6             	test   %r14,%r14
    99e0:	74 35                	je     9a17 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ba7>
    99e2:	4d 8d 7e f8          	lea    -0x8(%r14),%r15
    99e6:	4d 8b 66 f8          	mov    -0x8(%r14),%r12
    99ea:	4d 85 e4             	test   %r12,%r12
    99ed:	74 20                	je     9a0f <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b9f>
    99ef:	49 c1 e4 05          	shl    $0x5,%r12
    99f3:	49 83 c6 e0          	add    $0xffffffffffffffe0,%r14
    99f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    99fe:	00 00 
    9a00:	4b 8d 3c 26          	lea    (%r14,%r12,1),%rdi
    9a04:	e8 17 43 00 00       	callq  dd20 <_ZN7genetic7programD1Ev>
    9a09:	49 83 c4 e0          	add    $0xffffffffffffffe0,%r12
    9a0d:	75 f1                	jne    9a00 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b90>
    9a0f:	4c 89 ff             	mov    %r15,%rdi
    9a12:	e8 f9 dc 00 00       	callq  17710 <_ZdaPv@plt>
	if (__p)
    9a17:	48 85 db             	test   %rbx,%rbx
    9a1a:	74 08                	je     9a24 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1bb4>
    9a1c:	48 89 df             	mov    %rbx,%rdi
    9a1f:	e8 9c dc 00 00       	callq  176c0 <_ZdlPv@plt>
    9a24:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    9a29:	48 85 ff             	test   %rdi,%rdi
    9a2c:	74 05                	je     9a33 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1bc3>
    9a2e:	e8 8d dc 00 00       	callq  176c0 <_ZdlPv@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    9a33:	48 8b 9c 24 c0 01 00 	mov    0x1c0(%rsp),%rbx
    9a3a:	00 
    9a3b:	4c 8b b4 24 c8 01 00 	mov    0x1c8(%rsp),%r14
    9a42:	00 
	  for (; __first != __last; ++__first)
    9a43:	4c 39 f3             	cmp    %r14,%rbx
    9a46:	0f 85 f1 00 00 00    	jne    9b3d <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ccd>
	if (__p)
    9a4c:	48 85 db             	test   %rbx,%rbx
    9a4f:	74 08                	je     9a59 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1be9>
    9a51:	48 89 df             	mov    %rbx,%rdi
    9a54:	e8 67 dc 00 00       	callq  176c0 <_ZdlPv@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    9a59:	48 8b 9c 24 98 01 00 	mov    0x198(%rsp),%rbx
    9a60:	00 
    9a61:	4c 8b b4 24 a0 01 00 	mov    0x1a0(%rsp),%r14
    9a68:	00 
    9a69:	4c 39 f3             	cmp    %r14,%rbx
    9a6c:	0f 85 1b 01 00 00    	jne    9b8d <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d1d>
	if (__p)
    9a72:	48 85 db             	test   %rbx,%rbx
    9a75:	74 08                	je     9a7f <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c0f>
    9a77:	48 89 df             	mov    %rbx,%rdi
    9a7a:	e8 41 dc 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    9a7f:	48 8b bc 24 58 01 00 	mov    0x158(%rsp),%rdi
    9a86:	00 
	if (__p)
    9a87:	48 85 ff             	test   %rdi,%rdi
    9a8a:	74 05                	je     9a91 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c21>
    9a8c:	e8 2f dc 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    9a91:	48 8b bc 24 40 01 00 	mov    0x140(%rsp),%rdi
    9a98:	00 
	if (__p)
    9a99:	48 85 ff             	test   %rdi,%rdi
    9a9c:	74 05                	je     9aa3 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c33>
    9a9e:	e8 1d dc 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    9aa3:	48 8b bc 24 28 01 00 	mov    0x128(%rsp),%rdi
    9aaa:	00 
	if (__p)
    9aab:	48 85 ff             	test   %rdi,%rdi
    9aae:	74 05                	je     9ab5 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c45>
    9ab0:	e8 0b dc 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    9ab5:	48 8b bc 24 10 01 00 	mov    0x110(%rsp),%rdi
    9abc:	00 
	if (__p)
    9abd:	48 85 ff             	test   %rdi,%rdi
    9ac0:	74 05                	je     9ac7 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c57>
    9ac2:	e8 f9 db 00 00       	callq  176c0 <_ZdlPv@plt>
    9ac7:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
    9acc:	48 85 ff             	test   %rdi,%rdi
    9acf:	74 05                	je     9ad6 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c66>
    9ad1:	e8 ea db 00 00       	callq  176c0 <_ZdlPv@plt>
    9ad6:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    9adb:	48 85 ff             	test   %rdi,%rdi
    9ade:	74 05                	je     9ae5 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c75>
    9ae0:	e8 db db 00 00       	callq  176c0 <_ZdlPv@plt>
    9ae5:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
    9aea:	48 85 ff             	test   %rdi,%rdi
    9aed:	74 05                	je     9af4 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c84>
    9aef:	e8 cc db 00 00       	callq  176c0 <_ZdlPv@plt>
    9af4:	48 85 ed             	test   %rbp,%rbp
    9af7:	74 08                	je     9b01 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c91>
    9af9:	48 89 ef             	mov    %rbp,%rdi
    9afc:	e8 bf db 00 00       	callq  176c0 <_ZdlPv@plt>
    9b01:	4d 85 ed             	test   %r13,%r13
    9b04:	74 08                	je     9b0e <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c9e>
    9b06:	4c 89 ef             	mov    %r13,%rdi
    9b09:	e8 b2 db 00 00       	callq  176c0 <_ZdlPv@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    9b0e:	48 8b 9c 24 c8 00 00 	mov    0xc8(%rsp),%rbx
    9b15:	00 
    9b16:	4c 8b b4 24 d0 00 00 	mov    0xd0(%rsp),%r14
    9b1d:	00 
    9b1e:	4c 39 f3             	cmp    %r14,%rbx
    9b21:	0f 84 91 00 00 00    	je     9bb8 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d48>
    9b27:	49 89 df             	mov    %rbx,%r15
    9b2a:	eb 7d                	jmp    9ba9 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d39>
    9b2c:	0f 1f 40 00          	nopl   0x0(%rax)
    9b30:	48 83 c3 18          	add    $0x18,%rbx
    9b34:	4c 39 f3             	cmp    %r14,%rbx
    9b37:	0f 84 3b 02 00 00    	je     9d78 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1f08>
    9b3d:	4c 8b 3b             	mov    (%rbx),%r15
    9b40:	4c 8b 63 08          	mov    0x8(%rbx),%r12
    9b44:	4d 39 e7             	cmp    %r12,%r15
    9b47:	74 1b                	je     9b64 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1cf4>
    9b49:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      __pointer->~_Tp();
    9b50:	4c 89 ff             	mov    %r15,%rdi
    9b53:	e8 c8 41 00 00       	callq  dd20 <_ZN7genetic7programD1Ev>
	  for (; __first != __last; ++__first)
    9b58:	49 83 c7 20          	add    $0x20,%r15
    9b5c:	4d 39 e7             	cmp    %r12,%r15
    9b5f:	75 ef                	jne    9b50 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ce0>
	_M_deallocate(_M_impl._M_start,
    9b61:	4c 8b 3b             	mov    (%rbx),%r15
	if (__p)
    9b64:	4d 85 ff             	test   %r15,%r15
    9b67:	74 c7                	je     9b30 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1cc0>
    9b69:	4c 89 ff             	mov    %r15,%rdi
    9b6c:	e8 4f db 00 00       	callq  176c0 <_ZdlPv@plt>
    9b71:	eb bd                	jmp    9b30 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1cc0>
    9b73:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    9b7a:	84 00 00 00 00 00 
    9b80:	48 83 c3 10          	add    $0x10,%rbx
    9b84:	4c 39 f3             	cmp    %r14,%rbx
    9b87:	0f 84 01 02 00 00    	je     9d8e <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1f1e>
      { return _M_dataplus._M_p; }
    9b8d:	48 8b 3b             	mov    (%rbx),%rdi
      { return _M_data() == _M_local_data(); }
    9b90:	48 83 c3 10          	add    $0x10,%rbx
    9b94:	48 39 df             	cmp    %rbx,%rdi
	if (!_M_is_local())
    9b97:	74 e7                	je     9b80 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d10>
    9b99:	e8 22 db 00 00       	callq  176c0 <_ZdlPv@plt>
    9b9e:	eb e0                	jmp    9b80 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d10>
    9ba0:	49 83 c7 18          	add    $0x18,%r15
    9ba4:	4d 39 f7             	cmp    %r14,%r15
    9ba7:	74 0f                	je     9bb8 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d48>
	_M_deallocate(_M_impl._M_start,
    9ba9:	49 8b 3f             	mov    (%r15),%rdi
	if (__p)
    9bac:	48 85 ff             	test   %rdi,%rdi
    9baf:	74 ef                	je     9ba0 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d30>
    9bb1:	e8 0a db 00 00       	callq  176c0 <_ZdlPv@plt>
    9bb6:	eb e8                	jmp    9ba0 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d30>
    9bb8:	48 85 db             	test   %rbx,%rbx
    9bbb:	74 08                	je     9bc5 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d55>
    9bbd:	48 89 df             	mov    %rbx,%rdi
    9bc0:	e8 fb da 00 00       	callq  176c0 <_ZdlPv@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    9bc5:	48 8b 9c 24 40 02 00 	mov    0x240(%rsp),%rbx
    9bcc:	00 
    9bcd:	4c 8b b4 24 48 02 00 	mov    0x248(%rsp),%r14
    9bd4:	00 
    9bd5:	4c 39 f3             	cmp    %r14,%rbx
    9bd8:	74 1e                	je     9bf8 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d88>
    9bda:	49 89 df             	mov    %rbx,%r15
    9bdd:	eb 0a                	jmp    9be9 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d79>
    9bdf:	90                   	nop
    9be0:	49 83 c7 18          	add    $0x18,%r15
    9be4:	4d 39 f7             	cmp    %r14,%r15
    9be7:	74 0f                	je     9bf8 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d88>
	_M_deallocate(_M_impl._M_start,
    9be9:	49 8b 3f             	mov    (%r15),%rdi
	if (__p)
    9bec:	48 85 ff             	test   %rdi,%rdi
    9bef:	74 ef                	je     9be0 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d70>
    9bf1:	e8 ca da 00 00       	callq  176c0 <_ZdlPv@plt>
    9bf6:	eb e8                	jmp    9be0 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d70>
    9bf8:	48 85 db             	test   %rbx,%rbx
    9bfb:	74 08                	je     9c05 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d95>
    9bfd:	48 89 df             	mov    %rbx,%rdi
    9c00:	e8 bb da 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    9c05:	48 8b bc 24 70 02 00 	mov    0x270(%rsp),%rdi
    9c0c:	00 
	if (__p)
    9c0d:	48 85 ff             	test   %rdi,%rdi
    9c10:	74 05                	je     9c17 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1da7>
    9c12:	e8 a9 da 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    9c17:	48 8b bc 24 58 02 00 	mov    0x258(%rsp),%rdi
    9c1e:	00 
	if (__p)
    9c1f:	48 85 ff             	test   %rdi,%rdi
    9c22:	74 05                	je     9c29 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1db9>
    9c24:	e8 97 da 00 00       	callq  176c0 <_ZdlPv@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    9c29:	48 8b 9c 24 f8 01 00 	mov    0x1f8(%rsp),%rbx
    9c30:	00 
    9c31:	4c 8b b4 24 00 02 00 	mov    0x200(%rsp),%r14
    9c38:	00 
    9c39:	4c 39 f3             	cmp    %r14,%rbx
    9c3c:	0f 85 cb 00 00 00    	jne    9d0d <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e9d>
	if (__p)
    9c42:	48 85 db             	test   %rbx,%rbx
    9c45:	74 08                	je     9c4f <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ddf>
    9c47:	48 89 df             	mov    %rbx,%rdi
    9c4a:	e8 71 da 00 00       	callq  176c0 <_ZdlPv@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    9c4f:	48 8b 9c 24 e0 01 00 	mov    0x1e0(%rsp),%rbx
    9c56:	00 
    9c57:	4c 8b b4 24 e8 01 00 	mov    0x1e8(%rsp),%r14
    9c5e:	00 
    9c5f:	4c 39 f3             	cmp    %r14,%rbx
    9c62:	0f 85 c5 00 00 00    	jne    9d2d <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ebd>
	if (__p)
    9c68:	48 85 db             	test   %rbx,%rbx
    9c6b:	74 08                	je     9c75 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e05>
    9c6d:	48 89 df             	mov    %rbx,%rdi
    9c70:	e8 4b da 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    9c75:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
    9c7c:	00 
	if (__p)
    9c7d:	48 85 ff             	test   %rdi,%rdi
    9c80:	74 05                	je     9c87 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e17>
    9c82:	e8 39 da 00 00       	callq  176c0 <_ZdlPv@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    9c87:	48 8b 9c 24 80 00 00 	mov    0x80(%rsp),%rbx
    9c8e:	00 
    9c8f:	4c 8b b4 24 88 00 00 	mov    0x88(%rsp),%r14
    9c96:	00 
    9c97:	4c 39 f3             	cmp    %r14,%rbx
    9c9a:	0f 85 ad 00 00 00    	jne    9d4d <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1edd>
	if (__p)
    9ca0:	48 85 db             	test   %rbx,%rbx
    9ca3:	74 08                	je     9cad <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e3d>
    9ca5:	48 89 df             	mov    %rbx,%rdi
    9ca8:	e8 13 da 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    9cad:	48 8b bc 24 28 02 00 	mov    0x228(%rsp),%rdi
    9cb4:	00 
	if (__p)
    9cb5:	48 85 ff             	test   %rdi,%rdi
    9cb8:	74 05                	je     9cbf <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e4f>
    9cba:	e8 01 da 00 00       	callq  176c0 <_ZdlPv@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    9cbf:	48 8b 9c 24 10 02 00 	mov    0x210(%rsp),%rbx
    9cc6:	00 
    9cc7:	4c 8b b4 24 18 02 00 	mov    0x218(%rsp),%r14
    9cce:	00 
    9ccf:	4c 39 f3             	cmp    %r14,%rbx
    9cd2:	0f 85 91 00 00 00    	jne    9d69 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ef9>
	if (__p)
    9cd8:	48 85 db             	test   %rbx,%rbx
    9cdb:	74 08                	je     9ce5 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e75>
    9cdd:	48 89 df             	mov    %rbx,%rdi
    9ce0:	e8 db d9 00 00       	callq  176c0 <_ZdlPv@plt>
}
    9ce5:	48 81 c4 d8 02 00 00 	add    $0x2d8,%rsp
    9cec:	5b                   	pop    %rbx
    9ced:	41 5c                	pop    %r12
    9cef:	41 5d                	pop    %r13
    9cf1:	41 5e                	pop    %r14
    9cf3:	41 5f                	pop    %r15
    9cf5:	5d                   	pop    %rbp
    9cf6:	c3                   	retq   
    9cf7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    9cfe:	00 00 
    9d00:	48 83 c3 18          	add    $0x18,%rbx
    9d04:	4c 39 f3             	cmp    %r14,%rbx
    9d07:	0f 84 97 00 00 00    	je     9da4 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1f34>
	_M_deallocate(_M_impl._M_start,
    9d0d:	48 8b 3b             	mov    (%rbx),%rdi
	if (__p)
    9d10:	48 85 ff             	test   %rdi,%rdi
    9d13:	74 eb                	je     9d00 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e90>
    9d15:	e8 a6 d9 00 00       	callq  176c0 <_ZdlPv@plt>
    9d1a:	eb e4                	jmp    9d00 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e90>
    9d1c:	0f 1f 40 00          	nopl   0x0(%rax)
    9d20:	48 83 c3 18          	add    $0x18,%rbx
    9d24:	4c 39 f3             	cmp    %r14,%rbx
    9d27:	0f 84 8d 00 00 00    	je     9dba <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1f4a>
	_M_deallocate(_M_impl._M_start,
    9d2d:	48 8b 3b             	mov    (%rbx),%rdi
	if (__p)
    9d30:	48 85 ff             	test   %rdi,%rdi
    9d33:	74 eb                	je     9d20 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1eb0>
    9d35:	e8 86 d9 00 00       	callq  176c0 <_ZdlPv@plt>
    9d3a:	eb e4                	jmp    9d20 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1eb0>
    9d3c:	0f 1f 40 00          	nopl   0x0(%rax)
    9d40:	48 83 c3 18          	add    $0x18,%rbx
    9d44:	4c 39 f3             	cmp    %r14,%rbx
    9d47:	0f 84 83 00 00 00    	je     9dd0 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1f60>
	_M_deallocate(_M_impl._M_start,
    9d4d:	48 8b 3b             	mov    (%rbx),%rdi
	if (__p)
    9d50:	48 85 ff             	test   %rdi,%rdi
    9d53:	74 eb                	je     9d40 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ed0>
    9d55:	e8 66 d9 00 00       	callq  176c0 <_ZdlPv@plt>
    9d5a:	eb e4                	jmp    9d40 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ed0>
    9d5c:	0f 1f 40 00          	nopl   0x0(%rax)
    9d60:	48 83 c3 18          	add    $0x18,%rbx
    9d64:	4c 39 f3             	cmp    %r14,%rbx
    9d67:	74 7d                	je     9de6 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1f76>
	_M_deallocate(_M_impl._M_start,
    9d69:	48 8b 3b             	mov    (%rbx),%rdi
	if (__p)
    9d6c:	48 85 ff             	test   %rdi,%rdi
    9d6f:	74 ef                	je     9d60 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ef0>
    9d71:	e8 4a d9 00 00       	callq  176c0 <_ZdlPv@plt>
    9d76:	eb e8                	jmp    9d60 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ef0>
	_M_deallocate(_M_impl._M_start,
    9d78:	48 8b 9c 24 c0 01 00 	mov    0x1c0(%rsp),%rbx
    9d7f:	00 
	if (__p)
    9d80:	48 85 db             	test   %rbx,%rbx
    9d83:	0f 85 c8 fc ff ff    	jne    9a51 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1be1>
    9d89:	e9 cb fc ff ff       	jmpq   9a59 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1be9>
	_M_deallocate(_M_impl._M_start,
    9d8e:	48 8b 9c 24 98 01 00 	mov    0x198(%rsp),%rbx
    9d95:	00 
	if (__p)
    9d96:	48 85 db             	test   %rbx,%rbx
    9d99:	0f 85 d8 fc ff ff    	jne    9a77 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c07>
    9d9f:	e9 db fc ff ff       	jmpq   9a7f <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c0f>
	_M_deallocate(_M_impl._M_start,
    9da4:	48 8b 9c 24 f8 01 00 	mov    0x1f8(%rsp),%rbx
    9dab:	00 
	if (__p)
    9dac:	48 85 db             	test   %rbx,%rbx
    9daf:	0f 85 92 fe ff ff    	jne    9c47 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1dd7>
    9db5:	e9 95 fe ff ff       	jmpq   9c4f <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ddf>
	_M_deallocate(_M_impl._M_start,
    9dba:	48 8b 9c 24 e0 01 00 	mov    0x1e0(%rsp),%rbx
    9dc1:	00 
	if (__p)
    9dc2:	48 85 db             	test   %rbx,%rbx
    9dc5:	0f 85 a2 fe ff ff    	jne    9c6d <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1dfd>
    9dcb:	e9 a5 fe ff ff       	jmpq   9c75 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e05>
	_M_deallocate(_M_impl._M_start,
    9dd0:	48 8b 9c 24 80 00 00 	mov    0x80(%rsp),%rbx
    9dd7:	00 
	if (__p)
    9dd8:	48 85 db             	test   %rbx,%rbx
    9ddb:	0f 85 c4 fe ff ff    	jne    9ca5 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e35>
    9de1:	e9 c7 fe ff ff       	jmpq   9cad <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e3d>
	_M_deallocate(_M_impl._M_start,
    9de6:	48 8b 9c 24 10 02 00 	mov    0x210(%rsp),%rbx
    9ded:	00 
	if (__p)
    9dee:	48 85 db             	test   %rbx,%rbx
    9df1:	0f 85 e6 fe ff ff    	jne    9cdd <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e6d>
    9df7:	e9 e9 fe ff ff       	jmpq   9ce5 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e75>
    9dfc:	4d 89 c6             	mov    %r8,%r14
        } else if (rf < rf2) {
    9dff:	0f 2e ca             	ucomiss %xmm2,%xmm1
    9e02:	0f 86 14 ee ff ff    	jbe    8c1c <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdac>
    9e08:	48 89 cd             	mov    %rcx,%rbp
    9e0b:	e9 0c ee ff ff       	jmpq   8c1c <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdac>
	__throw_bad_cast();
    9e10:	e8 bb d8 00 00       	callq  176d0 <_ZSt16__throw_bad_castv@plt>
    9e15:	e8 b6 d8 00 00       	callq  176d0 <_ZSt16__throw_bad_castv@plt>
    9e1a:	e8 b1 d8 00 00       	callq  176d0 <_ZSt16__throw_bad_castv@plt>
    9e1f:	e8 ac d8 00 00       	callq  176d0 <_ZSt16__throw_bad_castv@plt>
	  __throw_length_error(
    9e24:	48 8d 3d 98 8f ff ff 	lea    -0x7068(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
    9e2b:	e8 40 d7 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
    9e30:	e8 9b d8 00 00       	callq  176d0 <_ZSt16__throw_bad_castv@plt>
    9e35:	48 8d 3d 87 8f ff ff 	lea    -0x7079(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
    9e3c:	e8 2f d7 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
    9e41:	48 8d 3d 7b 8f ff ff 	lea    -0x7085(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
    9e48:	e8 23 d7 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
            throw std::runtime_error("Arrays must have the same length");
    9e4d:	bf 10 00 00 00       	mov    $0x10,%edi
    9e52:	e8 89 d8 00 00       	callq  176e0 <__cxa_allocate_exception@plt>
    9e57:	49 89 c6             	mov    %rax,%r14
    9e5a:	48 8d 35 dc 8c ff ff 	lea    -0x7324(%rip),%rsi        # 2b3d <_IO_stdin_used+0x44d>
    9e61:	48 89 c7             	mov    %rax,%rdi
    9e64:	e8 c7 d7 00 00       	callq  17630 <_ZNSt13runtime_errorC1EPKc@plt>
    9e69:	48 8b 35 58 ef 00 00 	mov    0xef58(%rip),%rsi        # 18dc8 <_ZTISt13runtime_error@GLIBCXX_3.4>
    9e70:	48 8b 15 61 ef 00 00 	mov    0xef61(%rip),%rdx        # 18dd8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    9e77:	4c 89 f7             	mov    %r14,%rdi
    9e7a:	e8 11 d8 00 00       	callq  17690 <__cxa_throw@plt>
    9e7f:	bf 10 00 00 00       	mov    $0x10,%edi
    9e84:	e8 57 d8 00 00       	callq  176e0 <__cxa_allocate_exception@plt>
    9e89:	49 89 c6             	mov    %rax,%r14
    9e8c:	48 8d 35 aa 8c ff ff 	lea    -0x7356(%rip),%rsi        # 2b3d <_IO_stdin_used+0x44d>
    9e93:	48 89 c7             	mov    %rax,%rdi
    9e96:	e8 95 d7 00 00       	callq  17630 <_ZNSt13runtime_errorC1EPKc@plt>
    9e9b:	48 8b 35 26 ef 00 00 	mov    0xef26(%rip),%rsi        # 18dc8 <_ZTISt13runtime_error@GLIBCXX_3.4>
    9ea2:	48 8b 15 2f ef 00 00 	mov    0xef2f(%rip),%rdx        # 18dd8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    9ea9:	4c 89 f7             	mov    %r14,%rdi
    9eac:	e8 df d7 00 00       	callq  17690 <__cxa_throw@plt>
	  std::__throw_bad_alloc();
    9eb1:	e8 ea d7 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
    9eb6:	e8 e5 d7 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
    9ebb:	e8 e0 d7 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
    9ec0:	e8 db d7 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
    9ec5:	e8 d6 d7 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
    9eca:	e8 d1 d7 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
    9ecf:	48 8d 3d ed 8e ff ff 	lea    -0x7113(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
    9ed6:	e8 95 d6 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
    9edb:	48 8d 3d e1 8e ff ff 	lea    -0x711f(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
    9ee2:	e8 89 d6 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
    9ee7:	e8 e4 d7 00 00       	callq  176d0 <_ZSt16__throw_bad_castv@plt>
    9eec:	e8 df d7 00 00       	callq  176d0 <_ZSt16__throw_bad_castv@plt>
    9ef1:	e9 e6 01 00 00       	jmpq   a0dc <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x226c>
    9ef6:	eb 05                	jmp    9efd <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x208d>
    9ef8:	e9 df 01 00 00       	jmpq   a0dc <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x226c>
    9efd:	49 89 c7             	mov    %rax,%r15
    9f00:	4c 89 f7             	mov    %r14,%rdi
    9f03:	e8 e8 d8 00 00       	callq  177f0 <__cxa_free_exception@plt>
	if (__p)
    9f08:	48 85 db             	test   %rbx,%rbx
    9f0b:	0f 84 9e 01 00 00    	je     a0af <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x223f>
    9f11:	e9 ce 01 00 00       	jmpq   a0e4 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2274>
    9f16:	49 89 c7             	mov    %rax,%r15
    9f19:	e9 09 02 00 00       	jmpq   a127 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22b7>
    9f1e:	49 89 c7             	mov    %rax,%r15
    9f21:	e9 01 02 00 00       	jmpq   a127 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22b7>
    9f26:	49 89 c7             	mov    %rax,%r15
    9f29:	e9 f9 01 00 00       	jmpq   a127 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22b7>
    9f2e:	e9 65 01 00 00       	jmpq   a098 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2228>
    9f33:	e9 a4 01 00 00       	jmpq   a0dc <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x226c>
    9f38:	e9 9f 01 00 00       	jmpq   a0dc <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x226c>
    9f3d:	e9 13 01 00 00       	jmpq   a055 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x21e5>
    9f42:	49 89 c7             	mov    %rax,%r15
    9f45:	e9 77 01 00 00       	jmpq   a0c1 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2251>
    9f4a:	49 89 c7             	mov    %rax,%r15
    9f4d:	e9 d5 01 00 00       	jmpq   a127 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22b7>
    9f52:	49 89 c7             	mov    %rax,%r15
	_M_deallocate(_M_impl._M_start,
    9f55:	48 8b bc 24 58 01 00 	mov    0x158(%rsp),%rdi
    9f5c:	00 
	if (__p)
    9f5d:	48 85 ff             	test   %rdi,%rdi
    9f60:	74 05                	je     9f67 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20f7>
	::operator delete(__p
    9f62:	e8 59 d7 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    9f67:	48 8b bc 24 40 01 00 	mov    0x140(%rsp),%rdi
    9f6e:	00 
	if (__p)
    9f6f:	48 85 ff             	test   %rdi,%rdi
    9f72:	74 05                	je     9f79 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2109>
    9f74:	e8 47 d7 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    9f79:	48 8b bc 24 28 01 00 	mov    0x128(%rsp),%rdi
    9f80:	00 
	if (__p)
    9f81:	48 85 ff             	test   %rdi,%rdi
    9f84:	74 0a                	je     9f90 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2120>
    9f86:	e8 35 d7 00 00       	callq  176c0 <_ZdlPv@plt>
    9f8b:	eb 03                	jmp    9f90 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2120>
    9f8d:	49 89 c7             	mov    %rax,%r15
    9f90:	48 8b bc 24 10 01 00 	mov    0x110(%rsp),%rdi
    9f97:	00 
    9f98:	48 85 ff             	test   %rdi,%rdi
    9f9b:	0f 84 93 01 00 00    	je     a134 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22c4>
    9fa1:	e8 1a d7 00 00       	callq  176c0 <_ZdlPv@plt>
    9fa6:	e9 89 01 00 00       	jmpq   a134 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22c4>
    9fab:	49 89 c7             	mov    %rax,%r15
    9fae:	4d 85 ed             	test   %r13,%r13
    9fb1:	0f 84 d8 01 00 00    	je     a18f <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x231f>
    9fb7:	4c 89 ef             	mov    %r13,%rdi
    9fba:	e8 01 d7 00 00       	callq  176c0 <_ZdlPv@plt>
    9fbf:	e9 cb 01 00 00       	jmpq   a18f <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x231f>
    9fc4:	49 89 c7             	mov    %rax,%r15
    9fc7:	4d 85 f6             	test   %r14,%r14
    9fca:	0f 84 cc 01 00 00    	je     a19c <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x232c>
    9fd0:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    9fd5:	e8 e6 d6 00 00       	callq  176c0 <_ZdlPv@plt>
    9fda:	e9 bd 01 00 00       	jmpq   a19c <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x232c>
    9fdf:	49 89 c7             	mov    %rax,%r15
    9fe2:	e9 c2 01 00 00       	jmpq   a1a9 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2339>
    9fe7:	49 89 c7             	mov    %rax,%r15
    9fea:	e9 c7 01 00 00       	jmpq   a1b6 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2346>
    9fef:	49 89 c7             	mov    %rax,%r15
	_M_deallocate(_M_impl._M_start,
    9ff2:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
    9ff9:	00 
	if (__p)
    9ffa:	48 85 ff             	test   %rdi,%rdi
    9ffd:	0f 84 d2 01 00 00    	je     a1d5 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2365>
    a003:	e8 b8 d6 00 00       	callq  176c0 <_ZdlPv@plt>
    a008:	e9 c8 01 00 00       	jmpq   a1d5 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2365>
    a00d:	49 89 c7             	mov    %rax,%r15
    a010:	e9 3d 01 00 00       	jmpq   a152 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22e2>
    a015:	49 89 c7             	mov    %rax,%r15
    a018:	e9 44 01 00 00       	jmpq   a161 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22f1>
    a01d:	49 89 c7             	mov    %rax,%r15
    a020:	e9 4e 01 00 00       	jmpq   a173 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2303>
    a025:	49 89 c7             	mov    %rax,%r15
    a028:	e9 55 01 00 00       	jmpq   a182 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2312>
    a02d:	49 89 c7             	mov    %rax,%r15
    a030:	e9 5a 01 00 00       	jmpq   a18f <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x231f>
    a035:	49 89 c7             	mov    %rax,%r15
    a038:	e9 5f 01 00 00       	jmpq   a19c <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x232c>
    a03d:	49 89 c7             	mov    %rax,%r15
    a040:	e9 83 01 00 00       	jmpq   a1c8 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2358>
    a045:	49 89 c7             	mov    %rax,%r15
    a048:	e9 88 01 00 00       	jmpq   a1d5 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2365>
    a04d:	49 89 c7             	mov    %rax,%r15
    a050:	e9 ee 00 00 00       	jmpq   a143 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22d3>
    a055:	49 89 c7             	mov    %rax,%r15
    a058:	48 83 7c 24 18 00    	cmpq   $0x0,0x18(%rsp)
    a05e:	75 57                	jne    a0b7 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2247>
    a060:	eb 5f                	jmp    a0c1 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2251>
    a062:	49 89 c7             	mov    %rax,%r15
    a065:	eb 5a                	jmp    a0c1 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2251>
    a067:	49 89 c7             	mov    %rax,%r15
      { return _M_dataplus._M_p; }
    a06a:	48 8b bc 24 88 02 00 	mov    0x288(%rsp),%rdi
    a071:	00 
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    a072:	48 8d 84 24 98 02 00 	lea    0x298(%rsp),%rax
    a079:	00 
      { return _M_data() == _M_local_data(); }
    a07a:	48 39 c7             	cmp    %rax,%rdi
	if (!_M_is_local())
    a07d:	74 1c                	je     a09b <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x222b>
    a07f:	e8 3c d6 00 00       	callq  176c0 <_ZdlPv@plt>
    a084:	eb 15                	jmp    a09b <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x222b>
    a086:	eb 10                	jmp    a098 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2228>
    a088:	49 89 c7             	mov    %rax,%r15
    a08b:	e9 97 00 00 00       	jmpq   a127 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22b7>
    a090:	49 89 c7             	mov    %rax,%r15
    a093:	e9 1e 01 00 00       	jmpq   a1b6 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2346>
    a098:	49 89 c7             	mov    %rax,%r15
      { return _M_dataplus._M_p; }
    a09b:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    a0a0:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
      { return _M_data() == _M_local_data(); }
    a0a5:	48 39 c7             	cmp    %rax,%rdi
	if (!_M_is_local())
    a0a8:	75 26                	jne    a0d0 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2260>
    a0aa:	48 85 db             	test   %rbx,%rbx
    a0ad:	75 35                	jne    a0e4 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2274>
    a0af:	48 83 7c 24 18 00    	cmpq   $0x0,0x18(%rsp)
    a0b5:	74 0a                	je     a0c1 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2251>
    a0b7:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    a0bc:	e8 ff d5 00 00       	callq  176c0 <_ZdlPv@plt>
    a0c1:	48 8d bc 24 c0 01 00 	lea    0x1c0(%rsp),%rdi
    a0c8:	00 
}
    a0c9:	e8 22 37 00 00       	callq  d7f0 <_ZNSt6vectorIS_IN7genetic7programESaIS1_EESaIS3_EED2Ev>
    a0ce:	eb 57                	jmp    a127 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22b7>
    a0d0:	e8 eb d5 00 00       	callq  176c0 <_ZdlPv@plt>
    a0d5:	48 85 db             	test   %rbx,%rbx
    a0d8:	74 d5                	je     a0af <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x223f>
    a0da:	eb 08                	jmp    a0e4 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2274>
    a0dc:	49 89 c7             	mov    %rax,%r15
    a0df:	48 85 db             	test   %rbx,%rbx
    a0e2:	74 cb                	je     a0af <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x223f>
    a0e4:	48 89 df             	mov    %rbx,%rdi
    a0e7:	e8 d4 d5 00 00       	callq  176c0 <_ZdlPv@plt>
    a0ec:	48 83 7c 24 18 00    	cmpq   $0x0,0x18(%rsp)
    a0f2:	75 c3                	jne    a0b7 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2247>
    a0f4:	eb cb                	jmp    a0c1 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2251>
    a0f6:	49 89 c7             	mov    %rax,%r15
    final_programs = new genetic::program[params.population_size]();
    a0f9:	4d 85 ed             	test   %r13,%r13
    a0fc:	74 21                	je     a11f <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22af>
    a0fe:	49 f7 dd             	neg    %r13
    a101:	4c 89 e3             	mov    %r12,%rbx
    a104:	48 83 c3 e8          	add    $0xffffffffffffffe8,%rbx
    a108:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    a10f:	00 
    a110:	4a 8d 3c 2b          	lea    (%rbx,%r13,1),%rdi
    a114:	e8 07 3c 00 00       	callq  dd20 <_ZN7genetic7programD1Ev>
    a119:	49 83 c5 e0          	add    $0xffffffffffffffe0,%r13
    a11d:	75 f1                	jne    a110 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22a0>
    a11f:	4c 89 e7             	mov    %r12,%rdi
    a122:	e8 e9 d5 00 00       	callq  17710 <_ZdaPv@plt>
    a127:	48 8d bc 24 e0 00 00 	lea    0xe0(%rsp),%rdi
    a12e:	00 
}
    a12f:	e8 4c 37 00 00       	callq  d880 <_ZN7genetic5paramD2Ev>
    a134:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
    a139:	48 85 ff             	test   %rdi,%rdi
    a13c:	74 05                	je     a143 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22d3>
    a13e:	e8 7d d5 00 00       	callq  176c0 <_ZdlPv@plt>
    a143:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    a148:	48 85 ff             	test   %rdi,%rdi
    a14b:	74 05                	je     a152 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22e2>
    a14d:	e8 6e d5 00 00       	callq  176c0 <_ZdlPv@plt>
    a152:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
    a157:	48 85 ff             	test   %rdi,%rdi
    a15a:	74 05                	je     a161 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22f1>
    a15c:	e8 5f d5 00 00       	callq  176c0 <_ZdlPv@plt>
    a161:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
    a168:	00 
    a169:	48 85 ff             	test   %rdi,%rdi
    a16c:	74 05                	je     a173 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2303>
    a16e:	e8 4d d5 00 00       	callq  176c0 <_ZdlPv@plt>
    a173:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
    a178:	48 85 ff             	test   %rdi,%rdi
    a17b:	74 05                	je     a182 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2312>
    a17d:	e8 3e d5 00 00       	callq  176c0 <_ZdlPv@plt>
    a182:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
    a189:	00 
    a18a:	e8 91 26 00 00       	callq  c820 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED2Ev>
    a18f:	48 8d bc 24 40 02 00 	lea    0x240(%rsp),%rdi
    a196:	00 
    a197:	e8 84 26 00 00       	callq  c820 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED2Ev>
    a19c:	48 8d bc 24 58 02 00 	lea    0x258(%rsp),%rdi
    a1a3:	00 
    a1a4:	e8 77 37 00 00       	callq  d920 <_ZNSt4pairISt6vectorIfSaIfEES2_ED2Ev>
    a1a9:	48 8d bc 24 e0 01 00 	lea    0x1e0(%rsp),%rdi
    a1b0:	00 
    a1b1:	e8 9a 37 00 00       	callq  d950 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_ED2Ev>
	_M_deallocate(_M_impl._M_start,
    a1b6:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
    a1bd:	00 
	if (__p)
    a1be:	48 85 ff             	test   %rdi,%rdi
    a1c1:	74 05                	je     a1c8 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2358>
    a1c3:	e8 f8 d4 00 00       	callq  176c0 <_ZdlPv@plt>
    a1c8:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
    a1cf:	00 
    a1d0:	e8 4b 26 00 00       	callq  c820 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED2Ev>
    a1d5:	48 8d bc 24 10 02 00 	lea    0x210(%rsp),%rdi
    a1dc:	00 
    a1dd:	e8 0e 38 00 00       	callq  d9f0 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES2_ED2Ev>
    a1e2:	4c 89 ff             	mov    %r15,%rdi
    a1e5:	e8 86 d7 00 00       	callq  17970 <_Unwind_Resume@plt>
    a1ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000a1f0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void run_symbolic_classification(const std::string& dataset_file) {
    a1f0:	55                   	push   %rbp
    a1f1:	41 57                	push   %r15
    a1f3:	41 56                	push   %r14
    a1f5:	41 55                	push   %r13
    a1f7:	41 54                	push   %r12
    a1f9:	53                   	push   %rbx
    a1fa:	48 81 ec 18 03 00 00 	sub    $0x318,%rsp
    a201:	48 89 fb             	mov    %rdi,%rbx
	__ostream_insert(__out, __s,
    a204:	4c 8b 35 dd eb 00 00 	mov    0xebdd(%rip),%r14        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    a20b:	48 8d 35 0e 87 ff ff 	lea    -0x78f2(%rip),%rsi        # 2920 <_IO_stdin_used+0x230>
    a212:	ba 2f 00 00 00       	mov    $0x2f,%edx
    a217:	4c 89 f7             	mov    %r14,%rdi
    a21a:	e8 e1 d4 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    { return flush(__os.put(__os.widen('\n'))); }
    a21f:	49 8b 06             	mov    (%r14),%rax
    a222:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    a226:	4d 8b bc 06 f0 00 00 	mov    0xf0(%r14,%rax,1),%r15
    a22d:	00 
      if (!__f)
    a22e:	4d 85 ff             	test   %r15,%r15
    a231:	0f 84 96 1d 00 00    	je     bfcd <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ddd>
	if (_M_widen_ok)
    a237:	41 80 7f 38 00       	cmpb   $0x0,0x38(%r15)
    a23c:	74 07                	je     a245 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x55>
	  return _M_widen[static_cast<unsigned char>(__c)];
    a23e:	41 0f b6 47 43       	movzbl 0x43(%r15),%eax
    a243:	eb 16                	jmp    a25b <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6b>
	this->_M_widen_init();
    a245:	4c 89 ff             	mov    %r15,%rdi
    a248:	e8 e3 d4 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    a24d:	49 8b 07             	mov    (%r15),%rax
    a250:	4c 89 ff             	mov    %r15,%rdi
    a253:	be 0a 00 00 00       	mov    $0xa,%esi
    a258:	ff 50 30             	callq  *0x30(%rax)
    a25b:	0f be f0             	movsbl %al,%esi
    a25e:	4c 89 f7             	mov    %r14,%rdi
    a261:	e8 ba d4 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    a266:	48 89 c7             	mov    %rax,%rdi
    a269:	e8 d2 d4 00 00       	callq  17740 <_ZNSo5flushEv@plt>
    a26e:	48 8d b4 24 e8 02 00 	lea    0x2e8(%rsp),%rsi
    a275:	00 
    clock_gettime(CLOCK_MONOTONIC, &t->start);
    a276:	bf 01 00 00 00       	mov    $0x1,%edi
    a27b:	e8 20 d7 00 00       	callq  179a0 <clock_gettime@plt>
	__ostream_insert(__out, __s,
    a280:	48 8d 35 4d 86 ff ff 	lea    -0x79b3(%rip),%rsi        # 28d4 <_IO_stdin_used+0x1e4>
    a287:	ba 12 00 00 00       	mov    $0x12,%edx
    a28c:	4c 89 f7             	mov    %r14,%rdi
    a28f:	e8 6c d4 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    { return flush(__os.put(__os.widen('\n'))); }
    a294:	49 8b 06             	mov    (%r14),%rax
    a297:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    a29b:	4d 8b b4 06 f0 00 00 	mov    0xf0(%r14,%rax,1),%r14
    a2a2:	00 
      if (!__f)
    a2a3:	4d 85 f6             	test   %r14,%r14
    a2a6:	0f 84 21 1d 00 00    	je     bfcd <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ddd>
	if (_M_widen_ok)
    a2ac:	41 80 7e 38 00       	cmpb   $0x0,0x38(%r14)
    a2b1:	74 07                	je     a2ba <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xca>
	  return _M_widen[static_cast<unsigned char>(__c)];
    a2b3:	41 0f b6 46 43       	movzbl 0x43(%r14),%eax
    a2b8:	eb 16                	jmp    a2d0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe0>
	this->_M_widen_init();
    a2ba:	4c 89 f7             	mov    %r14,%rdi
    a2bd:	e8 6e d4 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    a2c2:	49 8b 06             	mov    (%r14),%rax
    a2c5:	4c 89 f7             	mov    %r14,%rdi
    a2c8:	be 0a 00 00 00       	mov    $0xa,%esi
    a2cd:	ff 50 30             	callq  *0x30(%rax)
    a2d0:	0f be f0             	movsbl %al,%esi
    a2d3:	48 8b 3d 0e eb 00 00 	mov    0xeb0e(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    a2da:	e8 41 d4 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    a2df:	48 89 c7             	mov    %rax,%rdi
    a2e2:	e8 59 d4 00 00       	callq  17740 <_ZNSo5flushEv@plt>
    a2e7:	48 8d bc 24 50 02 00 	lea    0x250(%rsp),%rdi
    a2ee:	00 
    ctimer_start(&end_to_end_timer);

    // Load dataset
    std::cout << "Loading dataset..." << std::endl;

    auto dataset = utils::load_dataset(dataset_file);
    a2ef:	48 89 de             	mov    %rbx,%rsi
    a2f2:	e8 99 cc ff ff       	callq  6f90 <_ZN5utils12load_datasetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    a2f7:	48 8b b4 24 58 02 00 	mov    0x258(%rsp),%rsi
    a2fe:	00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    a2ff:	48 8b 84 24 50 02 00 	mov    0x250(%rsp),%rax
    a306:	00 
    a307:	48 89 f3             	mov    %rsi,%rbx
    a30a:	48 29 c3             	sub    %rax,%rbx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    a30d:	48 c1 fb 03          	sar    $0x3,%rbx
    a311:	49 bd ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%r13
    a318:	aa aa aa 
    a31b:	49 0f af dd          	imul   %r13,%rbx
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    a31f:	48 89 f7             	mov    %rsi,%rdi
    a322:	49 bc 55 55 55 55 55 	movabs $0x555555555555555,%r12
    a329:	55 55 05 
	: _M_start(), _M_finish(), _M_end_of_storage()
    a32c:	0f 57 c0             	xorps  %xmm0,%xmm0
    a32f:	0f 29 44 24 60       	movaps %xmm0,0x60(%rsp)
    a334:	48 c7 44 24 70 00 00 	movq   $0x0,0x70(%rsp)
    a33b:	00 00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    a33d:	48 29 c7             	sub    %rax,%rdi
    a340:	74 23                	je     a365 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x175>
	if (__n > this->_M_max_size())
    a342:	4c 39 e3             	cmp    %r12,%rbx
    a345:	0f 87 b5 1c 00 00    	ja     c000 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e10>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    a34b:	e8 10 d4 00 00       	callq  17760 <_Znwm@plt>
    a350:	48 89 c2             	mov    %rax,%rdx
    a353:	48 8b bc 24 50 02 00 	mov    0x250(%rsp),%rdi
    a35a:	00 
    a35b:	48 8b b4 24 58 02 00 	mov    0x258(%rsp),%rsi
    a362:	00 
    a363:	eb 05                	jmp    a36a <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17a>
    a365:	31 d2                	xor    %edx,%edx
    a367:	48 89 f7             	mov    %rsi,%rdi
	this->_M_impl._M_start = this->_M_allocate(__n);
    a36a:	48 89 54 24 60       	mov    %rdx,0x60(%rsp)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    a36f:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    a374:	48 8d 04 5b          	lea    (%rbx,%rbx,2),%rax
    a378:	48 8d 04 c2          	lea    (%rdx,%rax,8),%rax
    a37c:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
      return std::__uninitialized_copy<__is_trivial(_ValueType1)
    a381:	e8 3a 27 00 00       	callq  cac0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_>
    a386:	48 b9 fc ff ff ff ff 	movabs $0x7ffffffffffffffc,%rcx
    a38d:	ff ff 7f 
	this->_M_impl._M_finish =
    a390:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    a395:	4c 8b bc 24 70 02 00 	mov    0x270(%rsp),%r15
    a39c:	00 
	: _M_start(), _M_finish(), _M_end_of_storage()
    a39d:	0f 57 c0             	xorps  %xmm0,%xmm0
    a3a0:	0f 29 84 24 a0 00 00 	movaps %xmm0,0xa0(%rsp)
    a3a7:	00 
    a3a8:	48 c7 84 24 b0 00 00 	movq   $0x0,0xb0(%rsp)
    a3af:	00 00 00 00 00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    a3b4:	4c 2b bc 24 68 02 00 	sub    0x268(%rsp),%r15
    a3bb:	00 
    a3bc:	74 51                	je     a40f <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x21f>
	if (__n > this->_M_max_size())
    a3be:	49 39 cf             	cmp    %rcx,%r15
    a3c1:	0f 87 3e 1c 00 00    	ja     c005 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e15>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    a3c7:	4c 89 ff             	mov    %r15,%rdi
    a3ca:	e8 91 d3 00 00       	callq  17760 <_Znwm@plt>
    a3cf:	48 89 c3             	mov    %rax,%rbx
    a3d2:	48 8b b4 24 68 02 00 	mov    0x268(%rsp),%rsi
    a3d9:	00 
    a3da:	4c 8b b4 24 70 02 00 	mov    0x270(%rsp),%r14
    a3e1:	00 
	this->_M_impl._M_start = this->_M_allocate(__n);
    a3e2:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
    a3e9:	00 
	this->_M_impl._M_finish = this->_M_impl._M_start;
    a3ea:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
    a3f1:	00 
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    a3f2:	49 01 c7             	add    %rax,%r15
    a3f5:	4c 89 bc 24 b0 00 00 	mov    %r15,0xb0(%rsp)
    a3fc:	00 
	  if (_Num)
    a3fd:	49 29 f6             	sub    %rsi,%r14
    a400:	74 22                	je     a424 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x234>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    a402:	48 89 df             	mov    %rbx,%rdi
    a405:	4c 89 f2             	mov    %r14,%rdx
    a408:	e8 53 d5 00 00       	callq  17960 <memmove@plt>
    a40d:	eb 15                	jmp    a424 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x234>
	this->_M_impl._M_finish = this->_M_impl._M_start;
    a40f:	0f 29 84 24 a0 00 00 	movaps %xmm0,0xa0(%rsp)
    a416:	00 
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    a417:	4c 89 bc 24 b0 00 00 	mov    %r15,0xb0(%rsp)
    a41e:	00 
    a41f:	45 31 f6             	xor    %r14d,%r14d
    a422:	31 db                	xor    %ebx,%ebx
	  return __result + _Num;
    a424:	49 01 de             	add    %rbx,%r14
	this->_M_impl._M_finish =
    a427:	4c 89 b4 24 a8 00 00 	mov    %r14,0xa8(%rsp)
    a42e:	00 
	__ostream_insert(__out, __s,
    a42f:	48 8b 3d b2 e9 00 00 	mov    0xe9b2(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    a436:	48 8d 35 11 84 ff ff 	lea    -0x7bef(%rip),%rsi        # 284e <_IO_stdin_used+0x15e>
    a43d:	ba 14 00 00 00       	mov    $0x14,%edx
    a442:	e8 b9 d2 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    a447:	48 8b 74 24 68       	mov    0x68(%rsp),%rsi
    a44c:	48 2b 74 24 60       	sub    0x60(%rsp),%rsi
    a451:	48 c1 fe 03          	sar    $0x3,%rsi
    a455:	49 0f af f5          	imul   %r13,%rsi
      { return _M_insert(__n); }
    a459:	48 8b 3d 88 e9 00 00 	mov    0xe988(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    a460:	e8 8b d1 00 00       	callq  175f0 <_ZNSo9_M_insertImEERSoT_@plt>
    auto X       = dataset.first;
    auto y       = dataset.second;

    std::cout << "Dataset dimensions: " << X.size() << " samples x " << X[0].size() << " features"
    a465:	48 89 c3             	mov    %rax,%rbx
	__ostream_insert(__out, __s,
    a468:	48 8d 35 a4 89 ff ff 	lea    -0x765c(%rip),%rsi        # 2e13 <_IO_stdin_used+0x723>
    a46f:	ba 0b 00 00 00       	mov    $0xb,%edx
    a474:	48 89 c7             	mov    %rax,%rdi
    a477:	e8 84 d2 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
	return *(this->_M_impl._M_start + __n);
    a47c:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    a481:	48 8b 70 08          	mov    0x8(%rax),%rsi
    a485:	48 2b 30             	sub    (%rax),%rsi
    a488:	48 c1 fe 02          	sar    $0x2,%rsi
      { return _M_insert(__n); }
    a48c:	48 89 df             	mov    %rbx,%rdi
    a48f:	e8 5c d1 00 00       	callq  175f0 <_ZNSo9_M_insertImEERSoT_@plt>
    a494:	48 89 c3             	mov    %rax,%rbx
	__ostream_insert(__out, __s,
    a497:	48 8d 35 ee 88 ff ff 	lea    -0x7712(%rip),%rsi        # 2d8c <_IO_stdin_used+0x69c>
    a49e:	ba 09 00 00 00       	mov    $0x9,%edx
    a4a3:	48 89 c7             	mov    %rax,%rdi
    a4a6:	e8 55 d2 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    { return flush(__os.put(__os.widen('\n'))); }
    a4ab:	48 8b 03             	mov    (%rbx),%rax
    a4ae:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    a4b2:	4c 8b b4 03 f0 00 00 	mov    0xf0(%rbx,%rax,1),%r14
    a4b9:	00 
      if (!__f)
    a4ba:	4d 85 f6             	test   %r14,%r14
    a4bd:	0f 84 0f 1b 00 00    	je     bfd2 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1de2>
	if (_M_widen_ok)
    a4c3:	41 80 7e 38 00       	cmpb   $0x0,0x38(%r14)
    a4c8:	74 07                	je     a4d1 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2e1>
	  return _M_widen[static_cast<unsigned char>(__c)];
    a4ca:	41 0f b6 46 43       	movzbl 0x43(%r14),%eax
    a4cf:	eb 16                	jmp    a4e7 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f7>
	this->_M_widen_init();
    a4d1:	4c 89 f7             	mov    %r14,%rdi
    a4d4:	e8 57 d2 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    a4d9:	49 8b 06             	mov    (%r14),%rax
    a4dc:	4c 89 f7             	mov    %r14,%rdi
    a4df:	be 0a 00 00 00       	mov    $0xa,%esi
    a4e4:	ff 50 30             	callq  *0x30(%rax)
    a4e7:	0f be f0             	movsbl %al,%esi
    a4ea:	48 89 df             	mov    %rbx,%rdi
    a4ed:	e8 2e d2 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    a4f2:	48 89 c7             	mov    %rax,%rdi
    a4f5:	e8 46 d2 00 00       	callq  17740 <_ZNSo5flushEv@plt>
    a4fa:	48 8d bc 24 20 02 00 	lea    0x220(%rsp),%rdi
    a501:	00 
    a502:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
    a507:	f3 0f 10 05 d5 81 ff 	movss  -0x7e2b(%rip),%xmm0        # 26e4 <_IO_stdin_used-0xc>
    a50e:	ff 
              << std::endl;

    // Split dataset
    auto X_split = utils::train_test_split(X);
    a50f:	e8 ec 26 00 00       	callq  cc00 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f>
    a514:	48 8d bc 24 98 02 00 	lea    0x298(%rsp),%rdi
    a51b:	00 
    a51c:	48 8d b4 24 a0 00 00 	lea    0xa0(%rsp),%rsi
    a523:	00 
    a524:	f3 0f 10 05 b8 81 ff 	movss  -0x7e48(%rip),%xmm0        # 26e4 <_IO_stdin_used-0xc>
    a52b:	ff 
    auto y_split = utils::train_test_split(y);
    a52c:	e8 2f 2d 00 00       	callq  d260 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f>
    a531:	48 8b b4 24 28 02 00 	mov    0x228(%rsp),%rsi
    a538:	00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    a539:	48 8b 84 24 20 02 00 	mov    0x220(%rsp),%rax
    a540:	00 
    a541:	48 89 f3             	mov    %rsi,%rbx
    a544:	48 29 c3             	sub    %rax,%rbx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    a547:	48 c1 fb 03          	sar    $0x3,%rbx
    a54b:	49 0f af dd          	imul   %r13,%rbx
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    a54f:	48 89 f7             	mov    %rsi,%rdi
    a552:	48 29 c7             	sub    %rax,%rdi
    a555:	74 23                	je     a57a <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38a>
	if (__n > this->_M_max_size())
    a557:	4c 39 e3             	cmp    %r12,%rbx
    a55a:	0f 87 aa 1a 00 00    	ja     c00a <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e1a>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    a560:	e8 fb d1 00 00       	callq  17760 <_Znwm@plt>
    a565:	48 8b bc 24 20 02 00 	mov    0x220(%rsp),%rdi
    a56c:	00 
    a56d:	48 8b b4 24 28 02 00 	mov    0x228(%rsp),%rsi
    a574:	00 
    a575:	48 89 c2             	mov    %rax,%rdx
    a578:	eb 05                	jmp    a57f <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38f>
    a57a:	31 d2                	xor    %edx,%edx
    a57c:	48 89 f7             	mov    %rsi,%rdi
	this->_M_impl._M_start = this->_M_allocate(__n);
    a57f:	48 89 94 24 80 02 00 	mov    %rdx,0x280(%rsp)
    a586:	00 
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    a587:	48 8d 04 5b          	lea    (%rbx,%rbx,2),%rax
    a58b:	48 8d 04 c2          	lea    (%rdx,%rax,8),%rax
    a58f:	48 89 84 24 90 02 00 	mov    %rax,0x290(%rsp)
    a596:	00 
    a597:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
    a59c:	e8 1f 25 00 00       	callq  cac0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    a5a1:	48 8b b4 24 40 02 00 	mov    0x240(%rsp),%rsi
    a5a8:	00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    a5a9:	48 8b 8c 24 38 02 00 	mov    0x238(%rsp),%rcx
    a5b0:	00 
    a5b1:	48 89 f3             	mov    %rsi,%rbx
    a5b4:	48 29 cb             	sub    %rcx,%rbx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    a5b7:	48 c1 fb 03          	sar    $0x3,%rbx
    a5bb:	49 0f af dd          	imul   %r13,%rbx
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    a5bf:	48 89 f7             	mov    %rsi,%rdi
    a5c2:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
	this->_M_impl._M_finish =
    a5c7:	48 89 84 24 88 02 00 	mov    %rax,0x288(%rsp)
    a5ce:	00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    a5cf:	48 29 cf             	sub    %rcx,%rdi
    a5d2:	74 23                	je     a5f7 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x407>
	if (__n > this->_M_max_size())
    a5d4:	4c 39 e3             	cmp    %r12,%rbx
    a5d7:	0f 87 32 1a 00 00    	ja     c00f <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e1f>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    a5dd:	e8 7e d1 00 00       	callq  17760 <_Znwm@plt>
    a5e2:	49 89 c4             	mov    %rax,%r12
    a5e5:	48 8b bc 24 38 02 00 	mov    0x238(%rsp),%rdi
    a5ec:	00 
    a5ed:	48 8b b4 24 40 02 00 	mov    0x240(%rsp),%rsi
    a5f4:	00 
    a5f5:	eb 06                	jmp    a5fd <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x40d>
    a5f7:	45 31 e4             	xor    %r12d,%r12d
    a5fa:	48 89 f7             	mov    %rsi,%rdi
	this->_M_impl._M_start = this->_M_allocate(__n);
    a5fd:	4c 89 a4 24 b8 00 00 	mov    %r12,0xb8(%rsp)
    a604:	00 
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    a605:	48 8d 04 5b          	lea    (%rbx,%rbx,2),%rax
    a609:	49 8d 04 c4          	lea    (%r12,%rax,8),%rax
    a60d:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
    a614:	00 
    a615:	4c 89 e2             	mov    %r12,%rdx
    a618:	e8 a3 24 00 00       	callq  cac0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_>
    a61d:	49 89 c6             	mov    %rax,%r14
	this->_M_impl._M_finish =
    a620:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
    a627:	00 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    a628:	48 8b bc 24 a0 02 00 	mov    0x2a0(%rsp),%rdi
    a62f:	00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    a630:	48 2b bc 24 98 02 00 	sub    0x298(%rsp),%rdi
    a637:	00 
    a638:	74 49                	je     a683 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x493>
	if (__n > this->_M_max_size())
    a63a:	48 b8 fc ff ff ff ff 	movabs $0x7ffffffffffffffc,%rax
    a641:	ff ff 7f 
    a644:	48 39 c7             	cmp    %rax,%rdi
    a647:	0f 87 c7 19 00 00    	ja     c014 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e24>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    a64d:	e8 0e d1 00 00       	callq  17760 <_Znwm@plt>
    a652:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
    a657:	48 8b b4 24 98 02 00 	mov    0x298(%rsp),%rsi
    a65e:	00 
    a65f:	4c 8b bc 24 a0 02 00 	mov    0x2a0(%rsp),%r15
    a666:	00 
	  if (_Num)
    a667:	49 29 f7             	sub    %rsi,%r15
    a66a:	74 29                	je     a695 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4a5>
    a66c:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    a671:	4c 89 fa             	mov    %r15,%rdx
    a674:	e8 e7 d2 00 00       	callq  17960 <memmove@plt>
    a679:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%rsp)
    a680:	00 
    a681:	eb 18                	jmp    a69b <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4ab>
    a683:	b0 01                	mov    $0x1,%al
    a685:	89 44 24 20          	mov    %eax,0x20(%rsp)
    a689:	45 31 ff             	xor    %r15d,%r15d
    a68c:	31 c0                	xor    %eax,%eax
    a68e:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
    a693:	eb 06                	jmp    a69b <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4ab>
    a695:	b0 01                	mov    $0x1,%al
    a697:	89 44 24 20          	mov    %eax,0x20(%rsp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    a69b:	48 8b 9c 24 b8 02 00 	mov    0x2b8(%rsp),%rbx
    a6a2:	00 
	: _M_start(), _M_finish(), _M_end_of_storage()
    a6a3:	0f 57 c0             	xorps  %xmm0,%xmm0
    a6a6:	0f 29 84 24 80 00 00 	movaps %xmm0,0x80(%rsp)
    a6ad:	00 
    a6ae:	48 c7 84 24 90 00 00 	movq   $0x0,0x90(%rsp)
    a6b5:	00 00 00 00 00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    a6ba:	48 2b 9c 24 b0 02 00 	sub    0x2b0(%rsp),%rbx
    a6c1:	00 
    a6c2:	4c 89 bc 24 98 00 00 	mov    %r15,0x98(%rsp)
    a6c9:	00 
    a6ca:	74 5b                	je     a727 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x537>
	if (__n > this->_M_max_size())
    a6cc:	48 b8 fc ff ff ff ff 	movabs $0x7ffffffffffffffc,%rax
    a6d3:	ff ff 7f 
    a6d6:	48 39 c3             	cmp    %rax,%rbx
    a6d9:	0f 87 3a 19 00 00    	ja     c019 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e29>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    a6df:	48 89 df             	mov    %rbx,%rdi
    a6e2:	e8 79 d0 00 00       	callq  17760 <_Znwm@plt>
    a6e7:	48 89 c5             	mov    %rax,%rbp
    a6ea:	48 8b b4 24 b0 02 00 	mov    0x2b0(%rsp),%rsi
    a6f1:	00 
    a6f2:	4c 8b bc 24 b8 02 00 	mov    0x2b8(%rsp),%r15
    a6f9:	00 
	this->_M_impl._M_start = this->_M_allocate(__n);
    a6fa:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
    a701:	00 
	this->_M_impl._M_finish = this->_M_impl._M_start;
    a702:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
    a709:	00 
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    a70a:	48 01 c3             	add    %rax,%rbx
    a70d:	48 89 9c 24 90 00 00 	mov    %rbx,0x90(%rsp)
    a714:	00 
	  if (_Num)
    a715:	49 29 f7             	sub    %rsi,%r15
    a718:	74 22                	je     a73c <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x54c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    a71a:	48 89 ef             	mov    %rbp,%rdi
    a71d:	4c 89 fa             	mov    %r15,%rdx
    a720:	e8 3b d2 00 00       	callq  17960 <memmove@plt>
    a725:	eb 15                	jmp    a73c <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x54c>
	this->_M_impl._M_finish = this->_M_impl._M_start;
    a727:	0f 29 84 24 80 00 00 	movaps %xmm0,0x80(%rsp)
    a72e:	00 
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    a72f:	48 89 9c 24 90 00 00 	mov    %rbx,0x90(%rsp)
    a736:	00 
    a737:	45 31 ff             	xor    %r15d,%r15d
    a73a:	31 ed                	xor    %ebp,%ebp
	  return __result + _Num;
    a73c:	49 01 ef             	add    %rbp,%r15
    a73f:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    a746:	ff ff 1f 
	this->_M_impl._M_finish =
    a749:	4c 89 bc 24 88 00 00 	mov    %r15,0x88(%rsp)
    a750:	00 
    a751:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
    a756:	4c 8b 7c 24 78       	mov    0x78(%rsp),%r15
    { return __lhs.base() == __rhs.base(); }
    a75b:	4c 39 f9             	cmp    %r15,%rcx
        if (data.empty())
    a75e:	0f 84 9a 00 00 00    	je     a7fe <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x60e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    a764:	49 29 cf             	sub    %rcx,%r15
    a767:	49 c1 ff 03          	sar    $0x3,%r15
    a76b:	4d 0f af fd          	imul   %r13,%r15
    a76f:	48 8b 11             	mov    (%rcx),%rdx
    a772:	48 8b 49 08          	mov    0x8(%rcx),%rcx
    a776:	48 89 cd             	mov    %rcx,%rbp
    a779:	48 29 d5             	sub    %rdx,%rbp
    a77c:	48 c1 fd 02          	sar    $0x2,%rbp
        std::vector<float> flattened(rows * cols);
    a780:	49 89 ed             	mov    %rbp,%r13
    a783:	4d 0f af ef          	imul   %r15,%r13
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    a787:	49 39 c5             	cmp    %rax,%r13
    a78a:	0f 87 8e 18 00 00    	ja     c01e <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e2e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    a790:	4d 85 ed             	test   %r13,%r13
    a793:	0f 84 e7 00 00 00    	je     a880 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x690>
    a799:	48 89 8c 24 b8 01 00 	mov    %rcx,0x1b8(%rsp)
    a7a0:	00 
    a7a1:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
    a7a6:	4a 8d 1c ad 00 00 00 	lea    0x0(,%r13,4),%rbx
    a7ad:	00 
    a7ae:	48 89 df             	mov    %rbx,%rdi
    a7b1:	e8 aa cf 00 00       	callq  17760 <_Znwm@plt>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
    a7b6:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      if (__n <= 0)
    a7bc:	49 83 fd 01          	cmp    $0x1,%r13
    a7c0:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
    a7c5:	74 15                	je     a7dc <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5ec>
	      ++__first;
    a7c7:	48 89 c7             	mov    %rax,%rdi
    a7ca:	48 83 c7 04          	add    $0x4,%rdi
      for (; __first != __last; ++__first)
    a7ce:	48 83 c3 fc          	add    $0xfffffffffffffffc,%rbx
	*__first = __tmp;
    a7d2:	31 f6                	xor    %esi,%esi
    a7d4:	48 89 da             	mov    %rbx,%rdx
    a7d7:	e8 b4 d1 00 00       	callq  17990 <memset@plt>
    a7dc:	49 bd ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%r13
    a7e3:	aa aa aa 
    a7e6:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
    a7eb:	48 8b 8c 24 b8 01 00 	mov    0x1b8(%rsp),%rcx
    a7f2:	00 
        for (size_t j = 0; j < cols; ++j) {
    a7f3:	48 39 d1             	cmp    %rdx,%rcx
    a7f6:	0f 85 9e 00 00 00    	jne    a89a <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6aa>
    a7fc:	eb 07                	jmp    a805 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x615>
    a7fe:	31 c0                	xor    %eax,%eax
    a800:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
    a805:	4d 39 f4             	cmp    %r14,%r12
        if (data.empty())
    a808:	74 6e                	je     a878 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x688>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    a80a:	4d 29 e6             	sub    %r12,%r14
    a80d:	49 c1 fe 03          	sar    $0x3,%r14
    a811:	4d 0f af f5          	imul   %r13,%r14
    a815:	49 8b 0c 24          	mov    (%r12),%rcx
    a819:	4d 8b 7c 24 08       	mov    0x8(%r12),%r15
    a81e:	4c 89 fd             	mov    %r15,%rbp
    a821:	48 29 cd             	sub    %rcx,%rbp
    a824:	48 c1 fd 02          	sar    $0x2,%rbp
        std::vector<float> flattened(rows * cols);
    a828:	49 89 ed             	mov    %rbp,%r13
    a82b:	4d 0f af ee          	imul   %r14,%r13
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    a82f:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    a836:	ff ff 1f 
    a839:	49 39 c5             	cmp    %rax,%r13
    a83c:	0f 87 e8 17 00 00    	ja     c02a <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e3a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    a842:	4d 85 ed             	test   %r13,%r13
    a845:	0f 84 44 01 00 00    	je     a98f <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x79f>
    a84b:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
    a850:	4a 8d 1c ad 00 00 00 	lea    0x0(,%r13,4),%rbx
    a857:	00 
    a858:	48 89 df             	mov    %rbx,%rdi
    a85b:	e8 00 cf 00 00       	callq  17760 <_Znwm@plt>
    a860:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      if (__n <= 0)
    a866:	49 83 fd 01          	cmp    $0x1,%r13
    a86a:	0f 85 19 16 00 00    	jne    be89 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c99>
    a870:	49 89 c5             	mov    %rax,%r13
    a873:	e9 29 16 00 00       	jmpq   bea1 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1cb1>
    a878:	45 31 ed             	xor    %r13d,%r13d
    a87b:	e9 1b 01 00 00       	jmpq   a99b <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7ab>
    a880:	31 c0                	xor    %eax,%eax
    a882:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
    a887:	49 bd ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%r13
    a88e:	aa aa aa 
        for (size_t j = 0; j < cols; ++j) {
    a891:	48 39 d1             	cmp    %rdx,%rcx
    a894:	0f 84 6b ff ff ff    	je     a805 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x615>
    a89a:	49 83 ff 01          	cmp    $0x1,%r15
    a89e:	4c 89 f8             	mov    %r15,%rax
    a8a1:	48 83 d0 00          	adc    $0x0,%rax
    a8a5:	48 83 fd 01          	cmp    $0x1,%rbp
    a8a9:	48 83 d5 00          	adc    $0x0,%rbp
    a8ad:	89 c1                	mov    %eax,%ecx
    a8af:	83 e1 03             	and    $0x3,%ecx
    a8b2:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
    a8b6:	4c 8b 44 24 50       	mov    0x50(%rsp),%r8
    a8bb:	49 8d 50 0c          	lea    0xc(%r8),%rdx
    a8bf:	4a 8d 34 bd 00 00 00 	lea    0x0(,%r15,4),%rsi
    a8c6:	00 
    a8c7:	31 ff                	xor    %edi,%edi
    a8c9:	eb 17                	jmp    a8e2 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6f2>
    a8cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    a8d0:	48 ff c7             	inc    %rdi
    a8d3:	48 01 f2             	add    %rsi,%rdx
    a8d6:	49 01 f0             	add    %rsi,%r8
    a8d9:	48 39 ef             	cmp    %rbp,%rdi
    a8dc:	0f 84 23 ff ff ff    	je     a805 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x615>
    a8e2:	49 83 ff 04          	cmp    $0x4,%r15
            for (size_t i = 0; i < rows; ++i) {
    a8e6:	73 08                	jae    a8f0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x700>
    a8e8:	45 31 c9             	xor    %r9d,%r9d
    a8eb:	eb 62                	jmp    a94f <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x75f>
    a8ed:	0f 1f 00             	nopl   (%rax)
    a8f0:	4c 8b 54 24 10       	mov    0x10(%rsp),%r10
    a8f5:	45 31 c9             	xor    %r9d,%r9d
    a8f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    a8ff:	00 
	return *(this->_M_impl._M_start + __n);
    a900:	4d 8b 1a             	mov    (%r10),%r11
                flattened[j * rows + i] = data[i][j];
    a903:	f3 41 0f 10 04 bb    	movss  (%r11,%rdi,4),%xmm0
    a909:	f3 42 0f 11 44 8a f4 	movss  %xmm0,-0xc(%rdx,%r9,4)
    a910:	4d 8b 5a 18          	mov    0x18(%r10),%r11
    a914:	f3 41 0f 10 04 bb    	movss  (%r11,%rdi,4),%xmm0
    a91a:	f3 42 0f 11 44 8a f8 	movss  %xmm0,-0x8(%rdx,%r9,4)
    a921:	4d 8b 5a 30          	mov    0x30(%r10),%r11
    a925:	f3 41 0f 10 04 bb    	movss  (%r11,%rdi,4),%xmm0
    a92b:	f3 42 0f 11 44 8a fc 	movss  %xmm0,-0x4(%rdx,%r9,4)
    a932:	4d 8b 5a 48          	mov    0x48(%r10),%r11
    a936:	f3 41 0f 10 04 bb    	movss  (%r11,%rdi,4),%xmm0
    a93c:	f3 42 0f 11 04 8a    	movss  %xmm0,(%rdx,%r9,4)
            for (size_t i = 0; i < rows; ++i) {
    a942:	49 83 c1 04          	add    $0x4,%r9
    a946:	49 83 c2 60          	add    $0x60,%r10
    a94a:	4c 39 c8             	cmp    %r9,%rax
    a94d:	75 b1                	jne    a900 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x710>
    a94f:	48 85 c9             	test   %rcx,%rcx
    a952:	0f 84 78 ff ff ff    	je     a8d0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e0>
    a958:	4f 8d 14 88          	lea    (%r8,%r9,4),%r10
    a95c:	4f 8d 0c 49          	lea    (%r9,%r9,2),%r9
    a960:	4c 8b 5c 24 10       	mov    0x10(%rsp),%r11
    a965:	4f 8d 0c cb          	lea    (%r11,%r9,8),%r9
    a969:	45 31 db             	xor    %r11d,%r11d
    a96c:	0f 1f 40 00          	nopl   0x0(%rax)
    a970:	49 8b 19             	mov    (%r9),%rbx
                flattened[j * rows + i] = data[i][j];
    a973:	f3 0f 10 04 bb       	movss  (%rbx,%rdi,4),%xmm0
    a978:	f3 43 0f 11 04 9a    	movss  %xmm0,(%r10,%r11,4)
            for (size_t i = 0; i < rows; ++i) {
    a97e:	49 ff c3             	inc    %r11
    a981:	49 83 c1 18          	add    $0x18,%r9
    a985:	4c 39 d9             	cmp    %r11,%rcx
    a988:	75 e6                	jne    a970 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x780>
    a98a:	e9 41 ff ff ff       	jmpq   a8d0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e0>
    a98f:	45 31 ed             	xor    %r13d,%r13d
        for (size_t j = 0; j < cols; ++j) {
    a992:	49 39 cf             	cmp    %rcx,%r15
    a995:	0f 85 14 15 00 00    	jne    beaf <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1cbf>
    a99b:	4c 8b bc 24 98 00 00 	mov    0x98(%rsp),%r15
    a9a2:	00 
    a9a3:	4c 89 6c 24 18       	mov    %r13,0x18(%rsp)
    a9a8:	48 bb fc ff ff ff ff 	movabs $0x7ffffffffffffffc,%rbx
    a9af:	ff ff 7f 
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    a9b2:	49 39 df             	cmp    %rbx,%r15
    a9b5:	4c 8b 64 24 58       	mov    0x58(%rsp),%r12
    a9ba:	0f 87 17 16 00 00    	ja     bfd7 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1de7>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    a9c0:	80 7c 24 20 00       	cmpb   $0x0,0x20(%rsp)
    a9c5:	74 09                	je     a9d0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e0>
    a9c7:	31 c0                	xor    %eax,%eax
    a9c9:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    a9ce:	eb 6f                	jmp    aa3f <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x84f>
    a9d0:	4c 89 ff             	mov    %r15,%rdi
    a9d3:	e8 88 cd 00 00       	callq  17760 <_Znwm@plt>
      for (; __first != __last; ++__first)
    a9d8:	49 8d 4f fc          	lea    -0x4(%r15),%rcx
    a9dc:	48 89 c6             	mov    %rax,%rsi
    a9df:	48 83 f9 1c          	cmp    $0x1c,%rcx
    a9e3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    a9e8:	72 3d                	jb     aa27 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x837>
    a9ea:	48 c1 e9 02          	shr    $0x2,%rcx
    a9ee:	48 ff c1             	inc    %rcx
    a9f1:	48 83 c3 fc          	add    $0xfffffffffffffffc,%rbx
    a9f5:	48 21 cb             	and    %rcx,%rbx
    a9f8:	48 8d 34 98          	lea    (%rax,%rbx,4),%rsi
    a9fc:	31 d2                	xor    %edx,%edx
    a9fe:	0f 28 05 0b 7e ff ff 	movaps -0x81f5(%rip),%xmm0        # 2810 <_IO_stdin_used+0x120>
    aa05:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    aa0c:	00 00 00 00 
	*__first = __tmp;
    aa10:	0f 11 04 90          	movups %xmm0,(%rax,%rdx,4)
    aa14:	0f 11 44 90 10       	movups %xmm0,0x10(%rax,%rdx,4)
    aa19:	48 83 c2 08          	add    $0x8,%rdx
    aa1d:	48 39 d3             	cmp    %rdx,%rbx
    aa20:	75 ee                	jne    aa10 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x820>
      for (; __first != __last; ++__first)
    aa22:	48 39 d9             	cmp    %rbx,%rcx
    aa25:	74 18                	je     aa3f <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x84f>
    aa27:	48 89 c1             	mov    %rax,%rcx
    aa2a:	4c 01 f9             	add    %r15,%rcx
    aa2d:	0f 1f 00             	nopl   (%rax)
	*__first = __tmp;
    aa30:	c7 06 00 00 80 3f    	movl   $0x3f800000,(%rsi)
      for (; __first != __last; ++__first)
    aa36:	48 83 c6 04          	add    $0x4,%rsi
    aa3a:	48 39 ce             	cmp    %rcx,%rsi
    aa3d:	75 f1                	jne    aa30 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x840>
        int population_size = 1000;
    aa3f:	0f 28 05 ca 7c ff ff 	movaps -0x8336(%rip),%xmm0        # 2710 <_IO_stdin_used+0x20>
    aa46:	0f 29 84 24 d0 00 00 	movaps %xmm0,0xd0(%rsp)
    aa4d:	00 
        int tournament_size = 20;
    aa4e:	c7 84 24 e0 00 00 00 	movl   $0x14,0xe0(%rsp)
    aa55:	14 00 00 00 
        float stopping_criteria = 0.0f;
    aa59:	f2 0f 10 05 ff 7c ff 	movsd  -0x8301(%rip),%xmm0        # 2760 <_IO_stdin_used+0x70>
    aa60:	ff 
    aa61:	f2 0f 11 84 24 e4 00 	movsd  %xmm0,0xe4(%rsp)
    aa68:	00 00 
        float const_range[2] = {-1.0f, 1.0f};
    aa6a:	0f 28 05 ff 7c ff ff 	movaps -0x8301(%rip),%xmm0        # 2770 <_IO_stdin_used+0x80>
    aa71:	0f 11 84 24 ec 00 00 	movups %xmm0,0xec(%rsp)
    aa78:	00 
	: _M_start(), _M_finish(), _M_end_of_storage()
    aa79:	0f 57 c0             	xorps  %xmm0,%xmm0
    aa7c:	0f 29 84 24 00 01 00 	movaps %xmm0,0x100(%rsp)
    aa83:	00 
    aa84:	48 c7 84 24 10 01 00 	movq   $0x0,0x110(%rsp)
    aa8b:	00 00 00 00 00 
    aa90:	bf 04 00 00 00       	mov    $0x4,%edi
    aa95:	e8 c6 cc 00 00       	callq  17760 <_Znwm@plt>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
    aa9a:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
    aaa1:	00 
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    aaa2:	48 89 c1             	mov    %rax,%rcx
    aaa5:	48 83 c1 04          	add    $0x4,%rcx
    aaa9:	48 89 8c 24 10 01 00 	mov    %rcx,0x110(%rsp)
    aab0:	00 
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    aab1:	c7 00 02 08 04 0a    	movl   $0xa040802,(%rax)
	  this->_M_impl._M_finish =
    aab7:	48 89 8c 24 08 01 00 	mov    %rcx,0x108(%rsp)
    aabe:	00 
	: _M_start(), _M_finish(), _M_end_of_storage()
    aabf:	0f 57 c0             	xorps  %xmm0,%xmm0
    aac2:	0f 11 84 24 18 01 00 	movups %xmm0,0x118(%rsp)
    aac9:	00 
    aaca:	0f 11 84 24 28 01 00 	movups %xmm0,0x128(%rsp)
    aad1:	00 
    aad2:	0f 11 84 24 38 01 00 	movups %xmm0,0x138(%rsp)
    aad9:	00 
    aada:	0f 11 84 24 48 01 00 	movups %xmm0,0x148(%rsp)
    aae1:	00 
    aae2:	48 c7 84 24 58 01 00 	movq   $0x0,0x158(%rsp)
    aae9:	00 00 00 00 00 
    aaee:	bf 04 00 00 00       	mov    $0x4,%edi
    aaf3:	e8 68 cc 00 00       	callq  17760 <_Znwm@plt>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
    aaf8:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
    aaff:	00 
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    ab00:	48 89 c1             	mov    %rax,%rcx
    ab03:	48 83 c1 04          	add    $0x4,%rcx
    ab07:	48 89 8c 24 58 01 00 	mov    %rcx,0x158(%rsp)
    ab0e:	00 
    ab0f:	c7 00 02 08 04 0a    	movl   $0xa040802,(%rax)
	  this->_M_impl._M_finish =
    ab15:	48 89 8c 24 50 01 00 	mov    %rcx,0x150(%rsp)
    ab1c:	00 
        transformer_t transformer = transformer_t::sigmoid;
    ab1d:	48 c7 84 24 60 01 00 	movq   $0x0,0x160(%rsp)
    ab24:	00 00 00 00 00 
        float parsimony_coefficient = 0.001f;
    ab29:	0f 28 05 90 7c ff ff 	movaps -0x8370(%rip),%xmm0        # 27c0 <_IO_stdin_used+0xd0>
    ab30:	0f 11 84 24 68 01 00 	movups %xmm0,0x168(%rsp)
    ab37:	00 
	: _M_start(), _M_finish(), _M_end_of_storage()
    ab38:	0f 57 c0             	xorps  %xmm0,%xmm0
    ab3b:	0f 11 84 24 88 01 00 	movups %xmm0,0x188(%rsp)
    ab42:	00 
    ab43:	48 c7 84 24 98 01 00 	movq   $0x0,0x198(%rsp)
    ab4a:	00 00 00 00 00 
        uint32_t random_state = 0xdead;
    ab4f:	48 c7 84 24 a4 01 00 	movq   $0xdead,0x1a4(%rsp)
    ab56:	00 ad de 00 00 
        bool low_memory = false;
    ab5b:	c6 84 24 ac 01 00 00 	movb   $0x0,0x1ac(%rsp)
    ab62:	00 
    // Create weights (all 1.0)
    std::vector<float> sample_weights(y_train.size(), 1.0f);

    // Set parameters
    genetic::param params;
    params.population_size = 16384;
    ab63:	c7 84 24 d0 00 00 00 	movl   $0x4000,0xd0(%rsp)
    ab6a:	00 40 00 00 
    ab6e:	48 b8 10 00 00 00 10 	movabs $0x1000000010,%rax
    ab75:	00 00 00 
    params.generations     = 16;
    ab78:	48 89 84 24 dc 00 00 	mov    %rax,0xdc(%rsp)
    ab7f:	00 
    ab80:	48 b8 02 00 00 00 06 	movabs $0x600000002,%rax
    ab87:	00 00 00 
    params.tournament_size = 16;
    params.init_depth[0]   = 2;
    ab8a:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
    ab91:	00 
    params.init_depth[1]   = 6;
    params.init_method     = genetic::init_method_t::half_and_half;
    ab92:	c7 84 24 f8 00 00 00 	movl   $0x2,0xf8(%rsp)
    ab99:	02 00 00 00 
    ab9d:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    aba2:	48 8b 41 08          	mov    0x8(%rcx),%rax
    aba6:	48 2b 01             	sub    (%rcx),%rax
    aba9:	48 c1 e8 02          	shr    $0x2,%rax
    params.num_features    = X_train[0].size(); // Number of features
    abad:	89 84 24 a0 01 00 00 	mov    %eax,0x1a0(%rsp)
        float p_point_mutation = 0.01f;
    abb4:	0f 28 05 65 7b ff ff 	movaps -0x849b(%rip),%xmm0        # 2720 <_IO_stdin_used+0x30>
    abbb:	0f 11 84 24 78 01 00 	movups %xmm0,0x178(%rsp)
    abc2:	00 
    abc3:	48 b8 02 0a 08 1c 13 	movabs $0xb1f1e131c080a02,%rax
    abca:	1e 1f 0b 
    params.terminalRatio   = 0.05;

    // Function set for classification
    params.function_set = {node::type::add,  node::type::sub, node::type::mul,
    abcd:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    abd2:	c6 44 24 30 05       	movb   $0x5,0x30(%rsp)
			 - this->_M_impl._M_start); }
    abd7:	48 8b 9c 24 00 01 00 	mov    0x100(%rsp),%rbx
    abde:	00 
      { return size_type(this->_M_impl._M_end_of_storage
    abdf:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
    abe6:	00 
			 - this->_M_impl._M_start); }
    abe7:	48 29 d8             	sub    %rbx,%rax
	if (__len > capacity())
    abea:	48 83 f8 08          	cmp    $0x8,%rax
    abee:	77 4d                	ja     ac3d <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa4d>
    abf0:	bf 09 00 00 00       	mov    $0x9,%edi
    abf5:	e8 66 cb 00 00       	callq  17760 <_Znwm@plt>
    abfa:	48 89 c3             	mov    %rax,%rbx
    abfd:	0f b6 44 24 30       	movzbl 0x30(%rsp),%eax
    ac02:	88 43 08             	mov    %al,0x8(%rbx)
    ac05:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    ac0a:	48 89 03             	mov    %rax,(%rbx)
	    _M_deallocate(this->_M_impl._M_start,
    ac0d:	48 8b bc 24 00 01 00 	mov    0x100(%rsp),%rdi
    ac14:	00 
	if (__p)
    ac15:	48 85 ff             	test   %rdi,%rdi
    ac18:	74 05                	je     ac1f <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa2f>
	::operator delete(__p
    ac1a:	e8 a1 ca 00 00       	callq  176c0 <_ZdlPv@plt>
	    this->_M_impl._M_start = __tmp;
    ac1f:	48 89 9c 24 00 01 00 	mov    %rbx,0x100(%rsp)
    ac26:	00 
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
    ac27:	48 83 c3 09          	add    $0x9,%rbx
    ac2b:	48 89 9c 24 08 01 00 	mov    %rbx,0x108(%rsp)
    ac32:	00 
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
    ac33:	48 89 9c 24 10 01 00 	mov    %rbx,0x110(%rsp)
    ac3a:	00 
    ac3b:	eb 7f                	jmp    acbc <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xacc>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    ac3d:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
    ac44:	00 
    ac45:	49 89 c6             	mov    %rax,%r14
    ac48:	49 29 de             	sub    %rbx,%r14
	else if (size() >= __len)
    ac4b:	49 83 fe 09          	cmp    $0x9,%r14
    ac4f:	73 45                	jae    ac96 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xaa6>
	  if (_Num)
    ac51:	48 39 d8             	cmp    %rbx,%rax
    ac54:	74 18                	je     ac6e <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa7e>
    ac56:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    ac5b:	48 89 df             	mov    %rbx,%rdi
    ac5e:	4c 89 f2             	mov    %r14,%rdx
    ac61:	e8 fa cc 00 00       	callq  17960 <memmove@plt>
    ac66:	48 8b 9c 24 08 01 00 	mov    0x108(%rsp),%rbx
    ac6d:	00 
    ac6e:	bd 09 00 00 00       	mov    $0x9,%ebp
	  const ptrdiff_t _Num = __last - __first;
    ac73:	4c 29 f5             	sub    %r14,%rbp
    ac76:	4a 8d 34 34          	lea    (%rsp,%r14,1),%rsi
    ac7a:	48 83 c6 28          	add    $0x28,%rsi
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    ac7e:	48 89 df             	mov    %rbx,%rdi
    ac81:	48 89 ea             	mov    %rbp,%rdx
    ac84:	e8 d7 cc 00 00       	callq  17960 <memmove@plt>
	  return __result + _Num;
    ac89:	48 01 dd             	add    %rbx,%rbp
	    this->_M_impl._M_finish =
    ac8c:	48 89 ac 24 08 01 00 	mov    %rbp,0x108(%rsp)
    ac93:	00 
    ac94:	eb 26                	jmp    acbc <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xacc>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    ac96:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    ac9b:	0f b6 4c 24 30       	movzbl 0x30(%rsp),%ecx
    aca0:	88 4b 08             	mov    %cl,0x8(%rbx)
    aca3:	48 89 03             	mov    %rax,(%rbx)
	  return __result + _Num;
    aca6:	48 83 c3 09          	add    $0x9,%rbx
	if (size_type __n = this->_M_impl._M_finish - __pos)
    acaa:	48 39 9c 24 08 01 00 	cmp    %rbx,0x108(%rsp)
    acb1:	00 
    acb2:	74 08                	je     acbc <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xacc>
	    this->_M_impl._M_finish = __pos;
    acb4:	48 89 9c 24 08 01 00 	mov    %rbx,0x108(%rsp)
    acbb:	00 
                           node::type::sin,  node::type::cos, node::type::sq,
                           node::type::sqrt, node::type::abs, node::type::fdim};

    // Don't worry if you see stuff like sqrt(-5) -> we consider only the absolute
    // value in that case
    params.arity_set[1] = {node::type::abs, node::type::sin, node::type::cos, node::type::sq,
    acbc:	c7 44 24 28 0b 1c 13 	movl   $0x1e131c0b,0x28(%rsp)
    acc3:	1e 
    acc4:	c6 44 24 2c 1f       	movb   $0x1f,0x2c(%rsp)
			 - this->_M_impl._M_start); }
    acc9:	48 8b 9c 24 30 01 00 	mov    0x130(%rsp),%rbx
    acd0:	00 
      { return size_type(this->_M_impl._M_end_of_storage
    acd1:	48 8b 84 24 40 01 00 	mov    0x140(%rsp),%rax
    acd8:	00 
			 - this->_M_impl._M_start); }
    acd9:	48 29 d8             	sub    %rbx,%rax
	if (__len > capacity())
    acdc:	48 83 f8 04          	cmp    $0x4,%rax
    ace0:	77 4b                	ja     ad2d <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb3d>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    ace2:	bf 05 00 00 00       	mov    $0x5,%edi
    ace7:	e8 74 ca 00 00       	callq  17760 <_Znwm@plt>
    acec:	48 89 c3             	mov    %rax,%rbx
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    acef:	0f b6 44 24 2c       	movzbl 0x2c(%rsp),%eax
    acf4:	88 43 04             	mov    %al,0x4(%rbx)
    acf7:	8b 44 24 28          	mov    0x28(%rsp),%eax
    acfb:	89 03                	mov    %eax,(%rbx)
	    _M_deallocate(this->_M_impl._M_start,
    acfd:	48 8b bc 24 30 01 00 	mov    0x130(%rsp),%rdi
    ad04:	00 
	if (__p)
    ad05:	48 85 ff             	test   %rdi,%rdi
    ad08:	74 05                	je     ad0f <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb1f>
	::operator delete(__p
    ad0a:	e8 b1 c9 00 00       	callq  176c0 <_ZdlPv@plt>
	    this->_M_impl._M_start = __tmp;
    ad0f:	48 89 9c 24 30 01 00 	mov    %rbx,0x130(%rsp)
    ad16:	00 
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
    ad17:	48 83 c3 05          	add    $0x5,%rbx
    ad1b:	48 89 9c 24 38 01 00 	mov    %rbx,0x138(%rsp)
    ad22:	00 
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
    ad23:	48 89 9c 24 40 01 00 	mov    %rbx,0x140(%rsp)
    ad2a:	00 
    ad2b:	eb 7d                	jmp    adaa <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbba>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    ad2d:	48 8b 84 24 38 01 00 	mov    0x138(%rsp),%rax
    ad34:	00 
    ad35:	49 89 c6             	mov    %rax,%r14
    ad38:	49 29 de             	sub    %rbx,%r14
	else if (size() >= __len)
    ad3b:	49 83 fe 05          	cmp    $0x5,%r14
    ad3f:	73 45                	jae    ad86 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb96>
	  if (_Num)
    ad41:	48 39 d8             	cmp    %rbx,%rax
    ad44:	74 18                	je     ad5e <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb6e>
    ad46:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    ad4b:	48 89 df             	mov    %rbx,%rdi
    ad4e:	4c 89 f2             	mov    %r14,%rdx
    ad51:	e8 0a cc 00 00       	callq  17960 <memmove@plt>
    ad56:	48 8b 9c 24 38 01 00 	mov    0x138(%rsp),%rbx
    ad5d:	00 
    ad5e:	bd 05 00 00 00       	mov    $0x5,%ebp
	  const ptrdiff_t _Num = __last - __first;
    ad63:	4c 29 f5             	sub    %r14,%rbp
    ad66:	4a 8d 34 34          	lea    (%rsp,%r14,1),%rsi
    ad6a:	48 83 c6 28          	add    $0x28,%rsi
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    ad6e:	48 89 df             	mov    %rbx,%rdi
    ad71:	48 89 ea             	mov    %rbp,%rdx
    ad74:	e8 e7 cb 00 00       	callq  17960 <memmove@plt>
	  return __result + _Num;
    ad79:	48 01 dd             	add    %rbx,%rbp
	    this->_M_impl._M_finish =
    ad7c:	48 89 ac 24 38 01 00 	mov    %rbp,0x138(%rsp)
    ad83:	00 
    ad84:	eb 24                	jmp    adaa <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbba>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    ad86:	8b 44 24 28          	mov    0x28(%rsp),%eax
    ad8a:	0f b6 4c 24 2c       	movzbl 0x2c(%rsp),%ecx
    ad8f:	88 4b 04             	mov    %cl,0x4(%rbx)
    ad92:	89 03                	mov    %eax,(%rbx)
	  return __result + _Num;
    ad94:	48 83 c3 05          	add    $0x5,%rbx
	if (size_type __n = this->_M_impl._M_finish - __pos)
    ad98:	48 39 9c 24 38 01 00 	cmp    %rbx,0x138(%rsp)
    ad9f:	00 
    ada0:	74 08                	je     adaa <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbba>
	    this->_M_impl._M_finish = __pos;
    ada2:	48 89 9c 24 38 01 00 	mov    %rbx,0x138(%rsp)
    ada9:	00 
                           node::type::sqrt};
    params.arity_set[2] = {node::type::add, node::type::sub, node::type::mul, node::type::fdim};
    adaa:	c7 44 24 28 02 0a 08 	movl   $0x5080a02,0x28(%rsp)
    adb1:	05 
			 - this->_M_impl._M_start); }
    adb2:	48 8b 9c 24 48 01 00 	mov    0x148(%rsp),%rbx
    adb9:	00 
      { return size_type(this->_M_impl._M_end_of_storage
    adba:	48 8b 84 24 58 01 00 	mov    0x158(%rsp),%rax
    adc1:	00 
			 - this->_M_impl._M_start); }
    adc2:	48 29 d8             	sub    %rbx,%rax
	if (__len > capacity())
    adc5:	48 83 f8 03          	cmp    $0x3,%rax
    adc9:	77 43                	ja     ae0e <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc1e>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    adcb:	bf 04 00 00 00       	mov    $0x4,%edi
    add0:	e8 8b c9 00 00       	callq  17760 <_Znwm@plt>
    add5:	48 89 c3             	mov    %rax,%rbx
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    add8:	8b 44 24 28          	mov    0x28(%rsp),%eax
    addc:	89 03                	mov    %eax,(%rbx)
	    _M_deallocate(this->_M_impl._M_start,
    adde:	48 8b bc 24 48 01 00 	mov    0x148(%rsp),%rdi
    ade5:	00 
	if (__p)
    ade6:	48 85 ff             	test   %rdi,%rdi
    ade9:	74 05                	je     adf0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc00>
	::operator delete(__p
    adeb:	e8 d0 c8 00 00       	callq  176c0 <_ZdlPv@plt>
	    this->_M_impl._M_start = __tmp;
    adf0:	48 89 9c 24 48 01 00 	mov    %rbx,0x148(%rsp)
    adf7:	00 
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
    adf8:	48 83 c3 04          	add    $0x4,%rbx
    adfc:	48 89 9c 24 50 01 00 	mov    %rbx,0x150(%rsp)
    ae03:	00 
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
    ae04:	48 89 9c 24 58 01 00 	mov    %rbx,0x158(%rsp)
    ae0b:	00 
    ae0c:	eb 75                	jmp    ae83 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc93>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    ae0e:	48 8b 84 24 50 01 00 	mov    0x150(%rsp),%rax
    ae15:	00 
    ae16:	49 89 c6             	mov    %rax,%r14
    ae19:	49 29 de             	sub    %rbx,%r14
	else if (size() >= __len)
    ae1c:	49 83 fe 04          	cmp    $0x4,%r14
    ae20:	73 45                	jae    ae67 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc77>
	  if (_Num)
    ae22:	48 39 d8             	cmp    %rbx,%rax
    ae25:	74 18                	je     ae3f <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc4f>
    ae27:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    ae2c:	48 89 df             	mov    %rbx,%rdi
    ae2f:	4c 89 f2             	mov    %r14,%rdx
    ae32:	e8 29 cb 00 00       	callq  17960 <memmove@plt>
    ae37:	48 8b 9c 24 50 01 00 	mov    0x150(%rsp),%rbx
    ae3e:	00 
    ae3f:	bd 04 00 00 00       	mov    $0x4,%ebp
	  const ptrdiff_t _Num = __last - __first;
    ae44:	4c 29 f5             	sub    %r14,%rbp
    ae47:	4a 8d 34 34          	lea    (%rsp,%r14,1),%rsi
    ae4b:	48 83 c6 28          	add    $0x28,%rsi
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    ae4f:	48 89 df             	mov    %rbx,%rdi
    ae52:	48 89 ea             	mov    %rbp,%rdx
    ae55:	e8 06 cb 00 00       	callq  17960 <memmove@plt>
	  return __result + _Num;
    ae5a:	48 01 dd             	add    %rbx,%rbp
	    this->_M_impl._M_finish =
    ae5d:	48 89 ac 24 50 01 00 	mov    %rbp,0x150(%rsp)
    ae64:	00 
    ae65:	eb 1c                	jmp    ae83 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc93>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    ae67:	8b 44 24 28          	mov    0x28(%rsp),%eax
    ae6b:	89 03                	mov    %eax,(%rbx)
	  return __result + _Num;
    ae6d:	48 83 c3 04          	add    $0x4,%rbx
	if (size_type __n = this->_M_impl._M_finish - __pos)
    ae71:	48 39 9c 24 50 01 00 	cmp    %rbx,0x150(%rsp)
    ae78:	00 
    ae79:	74 08                	je     ae83 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc93>
	    this->_M_impl._M_finish = __pos;
    ae7b:	48 89 9c 24 50 01 00 	mov    %rbx,0x150(%rsp)
    ae82:	00 
    ae83:	48 b8 00 00 00 00 05 	movabs $0x500000000,%rax
    ae8a:	00 00 00 

    params.metric      = genetic::metric_t::logloss;      // Use log loss forclassification
    params.transformer = genetic::transformer_t::sigmoid; // Use sigmoid for binary classification
    ae8d:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
    ae94:	00 
    params.parsimony_coefficient = 0.01f;
    ae95:	0f 28 05 f4 78 ff ff 	movaps -0x870c(%rip),%xmm0        # 2790 <_IO_stdin_used+0xa0>
    ae9c:	0f 11 84 24 68 01 00 	movups %xmm0,0x168(%rsp)
    aea3:	00 
    params.p_crossover           = 0.80f; // High crossover probability
    params.p_subtree_mutation    = 0.05f;
    params.p_hoist_mutation      = 0.01f;
    params.p_point_mutation      = 0.01f;
    aea4:	c7 84 24 78 01 00 00 	movl   $0x3c23d70a,0x178(%rsp)
    aeab:	0a d7 23 3c 
    params.max_samples           = 1.0f; // Use all samples
    aeaf:	c7 84 24 80 01 00 00 	movl   $0x3f800000,0x180(%rsp)
    aeb6:	00 00 80 3f 
    params.random_state          = 2025; // For reproducibility
    aeba:	c7 84 24 a4 01 00 00 	movl   $0x7e9,0x1a4(%rsp)
    aec1:	e9 07 00 00 
	__ostream_insert(__out, __s,
    aec5:	48 8b 3d 1c df 00 00 	mov    0xdf1c(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    aecc:	48 8d 35 fe 7d ff ff 	lea    -0x8202(%rip),%rsi        # 2cd1 <_IO_stdin_used+0x5e1>
    aed3:	ba 22 00 00 00       	mov    $0x22,%edx
    aed8:	e8 23 c8 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>

    // Running the symbolic classification
    std::cout << "Training symbolic classifier with " << params.population_size
    aedd:	8b b4 24 d0 00 00 00 	mov    0xd0(%rsp),%esi
    aee4:	48 8b 3d fd de 00 00 	mov    0xdefd(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    aeeb:	e8 c0 c6 00 00       	callq  175b0 <_ZNSolsEi@plt>
    aef0:	48 89 c3             	mov    %rax,%rbx
    aef3:	48 8d 35 f8 7b ff ff 	lea    -0x8408(%rip),%rsi        # 2af2 <_IO_stdin_used+0x402>
    aefa:	ba 15 00 00 00       	mov    $0x15,%edx
    aeff:	48 89 c7             	mov    %rax,%rdi
    af02:	e8 f9 c7 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
              << " population size and " << params.generations << " generations " << std::endl;
    af07:	8b b4 24 dc 00 00 00 	mov    0xdc(%rsp),%esi
    af0e:	48 89 df             	mov    %rbx,%rdi
    af11:	e8 9a c6 00 00       	callq  175b0 <_ZNSolsEi@plt>
    af16:	48 89 c3             	mov    %rax,%rbx
    af19:	48 8d 35 ff 7e ff ff 	lea    -0x8101(%rip),%rsi        # 2e1f <_IO_stdin_used+0x72f>
    af20:	ba 0d 00 00 00       	mov    $0xd,%edx
    af25:	48 89 c7             	mov    %rax,%rdi
    af28:	e8 d3 c7 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    { return flush(__os.put(__os.widen('\n'))); }
    af2d:	48 8b 03             	mov    (%rbx),%rax
    af30:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    af34:	4c 8b b4 03 f0 00 00 	mov    0xf0(%rbx,%rax,1),%r14
    af3b:	00 
      if (!__f)
    af3c:	4d 85 f6             	test   %r14,%r14
    af3f:	0f 84 9e 10 00 00    	je     bfe3 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1df3>
	if (_M_widen_ok)
    af45:	41 80 7e 38 00       	cmpb   $0x0,0x38(%r14)
    af4a:	74 07                	je     af53 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd63>
	  return _M_widen[static_cast<unsigned char>(__c)];
    af4c:	41 0f b6 46 43       	movzbl 0x43(%r14),%eax
    af51:	eb 16                	jmp    af69 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd79>
	this->_M_widen_init();
    af53:	4c 89 f7             	mov    %r14,%rdi
    af56:	e8 d5 c7 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    af5b:	49 8b 06             	mov    (%r14),%rax
    af5e:	4c 89 f7             	mov    %r14,%rdi
    af61:	be 0a 00 00 00       	mov    $0xa,%esi
    af66:	ff 50 30             	callq  *0x30(%rax)
    af69:	0f be f0             	movsbl %al,%esi
    af6c:	48 89 df             	mov    %rbx,%rdi
    af6f:	e8 ac c7 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    af74:	48 89 c7             	mov    %rax,%rdi
    af77:	e8 c4 c7 00 00       	callq  17740 <_ZNSo5flushEv@plt>

    // Create history vector to store programs
    genetic::program_t final_programs;
    final_programs = new genetic::program[params.population_size]();
    af7c:	48 63 9c 24 d0 00 00 	movslq 0xd0(%rsp),%rbx
    af83:	00 
    af84:	49 89 df             	mov    %rbx,%r15
    af87:	49 c1 e7 05          	shl    $0x5,%r15
    af8b:	49 8d 47 08          	lea    0x8(%r15),%rax
    af8f:	48 85 db             	test   %rbx,%rbx
    af92:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
    af99:	48 0f 49 f8          	cmovns %rax,%rdi
    af9d:	e8 be c6 00 00       	callq  17660 <_Znam@plt>
    afa2:	49 89 c6             	mov    %rax,%r14
    afa5:	48 89 18             	mov    %rbx,(%rax)
    afa8:	48 8d 68 08          	lea    0x8(%rax),%rbp
    afac:	85 db                	test   %ebx,%ebx
    afae:	74 25                	je     afd5 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xde5>
    afb0:	49 f7 df             	neg    %r15
    afb3:	45 31 ed             	xor    %r13d,%r13d
    afb6:	48 89 eb             	mov    %rbp,%rbx
    afb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    afc0:	48 89 df             	mov    %rbx,%rdi
    afc3:	e8 38 2d 00 00       	callq  dd00 <_ZN7genetic7programC1Ev>
    afc8:	49 83 c5 e0          	add    $0xffffffffffffffe0,%r13
    afcc:	48 83 c3 20          	add    $0x20,%rbx
    afd0:	4d 39 ef             	cmp    %r13,%r15
    afd3:	75 eb                	jne    afc0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdd0>
    afd5:	48 89 6c 24 48       	mov    %rbp,0x48(%rsp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    afda:	0f 57 c0             	xorps  %xmm0,%xmm0
    afdd:	0f 29 84 24 00 02 00 	movaps %xmm0,0x200(%rsp)
    afe4:	00 
    afe5:	48 c7 84 24 10 02 00 	movq   $0x0,0x210(%rsp)
    afec:	00 00 00 00 00 
    aff1:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    aff6:	48 2b 44 24 10       	sub    0x10(%rsp),%rax
    affb:	48 c1 e8 03          	shr    $0x3,%rax
    afff:	69 c8 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%ecx
    b005:	48 8d 84 24 00 02 00 	lea    0x200(%rsp),%rax
    b00c:	00 

    std::vector<std::vector<genetic::program>> history;

    // Train the model
    genetic::symFit(X_train_flat.data(), y_train.data(), sample_weights.data(),
    b00d:	48 89 04 24          	mov    %rax,(%rsp)
    b011:	4c 8d 84 24 d0 00 00 	lea    0xd0(%rsp),%r8
    b018:	00 
    b019:	4c 8d 4c 24 48       	lea    0x48(%rsp),%r9
    b01e:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
    b023:	4c 89 e6             	mov    %r12,%rsi
    b026:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
    b02b:	e8 a0 a4 00 00       	callq  154d0 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE>
    //             << std::endl;
    // }

    // Predict classes for best 2 programs acc to training
    // insertionSortPrograms(final_programs, params.population_size);
    auto [idx1, idx2] = selectTop2(final_programs, params.population_size);
    b030:	8b 8c 24 d0 00 00 00 	mov    0xd0(%rsp),%ecx
    for (int i = 1; i < size; i++) {
    b037:	83 f9 02             	cmp    $0x2,%ecx
    b03a:	49 bb ff ff ff ff ff 	movabs $0x1fffffffffffffff,%r11
    b041:	ff ff 1f 
    b044:	7c 4c                	jl     b092 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xea2>
    auto [idx1, idx2] = selectTop2(final_programs, params.population_size);
    b046:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
    float   rf1 = programs[0].raw_fitness_;
    b04b:	f3 0f 10 40 10       	movss  0x10(%rax),%xmm0
    for (int i = 1; i < size; i++) {
    b050:	48 8d 51 ff          	lea    -0x1(%rcx),%rdx
    b054:	48 83 f9 02          	cmp    $0x2,%rcx
    b058:	0f 85 96 02 00 00    	jne    b2f4 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1104>
    b05e:	b9 01 00 00 00       	mov    $0x1,%ecx
    b063:	45 31 ed             	xor    %r13d,%r13d
    b066:	0f 28 c8             	movaps %xmm0,%xmm1
    b069:	45 31 c0             	xor    %r8d,%r8d
    b06c:	4c 89 c5             	mov    %r8,%rbp
        if (rf < rf1) {
    b06f:	f6 c2 01             	test   $0x1,%dl
    b072:	74 23                	je     b097 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xea7>
        float rf = programs[i].raw_fitness_;
    b074:	48 89 ca             	mov    %rcx,%rdx
    b077:	48 c1 e2 05          	shl    $0x5,%rdx
    b07b:	f3 0f 10 54 10 10    	movss  0x10(%rax,%rdx,1),%xmm2
        if (rf < rf1) {
    b081:	0f 2e c2             	ucomiss %xmm2,%xmm0
    b084:	0f 86 25 0f 00 00    	jbe    bfaf <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1dbf>
    b08a:	48 89 cd             	mov    %rcx,%rbp
    b08d:	4d 89 c5             	mov    %r8,%r13
    b090:	eb 05                	jmp    b097 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xea7>
    b092:	31 ed                	xor    %ebp,%ebp
    b094:	45 31 ed             	xor    %r13d,%r13d
    b097:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
    b09e:	00 
    b09f:	48 8b 8c 24 c0 00 00 	mov    0xc0(%rsp),%rcx
    b0a6:	00 
    b0a7:	49 89 cf             	mov    %rcx,%r15
    b0aa:	49 29 c7             	sub    %rax,%r15
    b0ad:	4c 89 fb             	mov    %r15,%rbx
    b0b0:	48 c1 fb 03          	sar    $0x3,%rbx
    b0b4:	48 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdx
    b0bb:	aa aa aa 
    b0be:	48 0f af da          	imul   %rdx,%rbx
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    b0c2:	4c 39 db             	cmp    %r11,%rbx
    b0c5:	0f 87 1d 0f 00 00    	ja     bfe8 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1df8>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    b0cb:	48 39 c1             	cmp    %rax,%rcx
    b0ce:	74 3f                	je     b10f <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf1f>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    b0d0:	4c 8d 34 9d 00 00 00 	lea    0x0(,%rbx,4),%r14
    b0d7:	00 
    b0d8:	4c 89 f7             	mov    %r14,%rdi
    b0db:	e8 80 c6 00 00       	callq  17760 <_Znwm@plt>
	this->_M_impl._M_start = this->_M_allocate(__n);
    b0e0:	49 89 c0             	mov    %rax,%r8
    b0e3:	48 89 84 24 e0 01 00 	mov    %rax,0x1e0(%rsp)
    b0ea:	00 
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    b0eb:	4c 8d 24 98          	lea    (%rax,%rbx,4),%r12
    b0ef:	4c 89 a4 24 f0 01 00 	mov    %r12,0x1f0(%rsp)
    b0f6:	00 
    b0f7:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    b0fd:	48 89 c7             	mov    %rax,%rdi
    b100:	48 83 c7 04          	add    $0x4,%rdi
      if (__n <= 0)
    b104:	49 83 ff 18          	cmp    $0x18,%r15
    b108:	75 24                	jne    b12e <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf3e>
    b10a:	49 89 fc             	mov    %rdi,%r12
    b10d:	eb 33                	jmp    b142 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf52>
	this->_M_impl._M_finish = this->_M_impl._M_start;
    b10f:	0f 57 c0             	xorps  %xmm0,%xmm0
    b112:	0f 29 84 24 e0 01 00 	movaps %xmm0,0x1e0(%rsp)
    b119:	00 
    b11a:	48 c7 84 24 f0 01 00 	movq   $0x0,0x1f0(%rsp)
    b121:	00 00 00 00 00 
    b126:	45 31 c0             	xor    %r8d,%r8d
    b129:	45 31 e4             	xor    %r12d,%r12d
    b12c:	eb 14                	jmp    b142 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf52>
      for (; __first != __last; ++__first)
    b12e:	49 83 c6 fc          	add    $0xfffffffffffffffc,%r14
	*__first = __tmp;
    b132:	31 f6                	xor    %esi,%esi
    b134:	4c 89 f2             	mov    %r14,%rdx
    b137:	4d 89 c6             	mov    %r8,%r14
    b13a:	e8 51 c8 00 00       	callq  17990 <memset@plt>
    b13f:	4d 89 f0             	mov    %r14,%r8
	this->_M_impl._M_finish =
    b142:	4c 89 a4 24 e8 01 00 	mov    %r12,0x1e8(%rsp)
    b149:	00 

    std::vector<float> y_pred1(X_test.size());
    genetic::symClfPredict(X_test_flat.data(), X_test.size(), params, &final_programs[idx1],
    b14a:	48 c1 e5 05          	shl    $0x5,%rbp
    b14e:	48 03 6c 24 48       	add    0x48(%rsp),%rbp
    b153:	48 89 6c 24 28       	mov    %rbp,0x28(%rsp)
    b158:	48 8d 94 24 d0 00 00 	lea    0xd0(%rsp),%rdx
    b15f:	00 
    b160:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
    b165:	48 8b 6c 24 18       	mov    0x18(%rsp),%rbp
    b16a:	48 89 ef             	mov    %rbp,%rdi
    b16d:	89 de                	mov    %ebx,%esi
    b16f:	e8 9c aa 00 00       	callq  15c10 <_ZN7genetic13symClfPredictEPKfiRKNS_5paramERKPNS_7programEPf>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    b174:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
    b17b:	00 
    b17c:	48 8b 8c 24 c0 00 00 	mov    0xc0(%rsp),%rcx
    b183:	00 
    b184:	49 89 cf             	mov    %rcx,%r15
    b187:	49 29 c7             	sub    %rax,%r15
    b18a:	4c 89 fb             	mov    %r15,%rbx
    b18d:	48 c1 fb 03          	sar    $0x3,%rbx
    b191:	48 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdx
    b198:	aa aa aa 
    b19b:	48 0f af da          	imul   %rdx,%rbx
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    b19f:	48 ba ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rdx
    b1a6:	ff ff 1f 
    b1a9:	48 39 d3             	cmp    %rdx,%rbx
    b1ac:	0f 87 42 0e 00 00    	ja     bff4 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e04>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    b1b2:	48 39 c1             	cmp    %rax,%rcx
    b1b5:	74 3f                	je     b1f6 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1006>
    b1b7:	4c 8d 34 9d 00 00 00 	lea    0x0(,%rbx,4),%r14
    b1be:	00 
    b1bf:	4c 89 f7             	mov    %r14,%rdi
    b1c2:	e8 99 c5 00 00       	callq  17760 <_Znwm@plt>
	this->_M_impl._M_start = this->_M_allocate(__n);
    b1c7:	49 89 c0             	mov    %rax,%r8
    b1ca:	48 89 84 24 c0 01 00 	mov    %rax,0x1c0(%rsp)
    b1d1:	00 
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    b1d2:	4c 8d 24 98          	lea    (%rax,%rbx,4),%r12
    b1d6:	4c 89 a4 24 d0 01 00 	mov    %r12,0x1d0(%rsp)
    b1dd:	00 
    b1de:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    b1e4:	48 89 c7             	mov    %rax,%rdi
    b1e7:	48 83 c7 04          	add    $0x4,%rdi
      if (__n <= 0)
    b1eb:	49 83 ff 18          	cmp    $0x18,%r15
    b1ef:	75 24                	jne    b215 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1025>
    b1f1:	49 89 fc             	mov    %rdi,%r12
    b1f4:	eb 33                	jmp    b229 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1039>
	this->_M_impl._M_finish = this->_M_impl._M_start;
    b1f6:	0f 57 c0             	xorps  %xmm0,%xmm0
    b1f9:	0f 29 84 24 c0 01 00 	movaps %xmm0,0x1c0(%rsp)
    b200:	00 
    b201:	48 c7 84 24 d0 01 00 	movq   $0x0,0x1d0(%rsp)
    b208:	00 00 00 00 00 
    b20d:	45 31 c0             	xor    %r8d,%r8d
    b210:	45 31 e4             	xor    %r12d,%r12d
    b213:	eb 14                	jmp    b229 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1039>
      for (; __first != __last; ++__first)
    b215:	49 83 c6 fc          	add    $0xfffffffffffffffc,%r14
	*__first = __tmp;
    b219:	31 f6                	xor    %esi,%esi
    b21b:	4c 89 f2             	mov    %r14,%rdx
    b21e:	4d 89 c6             	mov    %r8,%r14
    b221:	e8 6a c7 00 00       	callq  17990 <memset@plt>
    b226:	4d 89 f0             	mov    %r14,%r8
	this->_M_impl._M_finish =
    b229:	4c 89 a4 24 c8 01 00 	mov    %r12,0x1c8(%rsp)
    b230:	00 
                           y_pred1.data());

    std::vector<float> y_pred2(X_test.size());
    genetic::symClfPredict(X_test_flat.data(), X_test.size(), params, &final_programs[idx2],
    b231:	49 c1 e5 05          	shl    $0x5,%r13
    b235:	4c 03 6c 24 48       	add    0x48(%rsp),%r13
    b23a:	4c 89 6c 24 28       	mov    %r13,0x28(%rsp)
    b23f:	48 8d 94 24 d0 00 00 	lea    0xd0(%rsp),%rdx
    b246:	00 
    b247:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
    b24c:	48 89 ef             	mov    %rbp,%rdi
    b24f:	89 de                	mov    %ebx,%esi
    b251:	e8 ba a9 00 00       	callq  15c10 <_ZN7genetic13symClfPredictEPKfiRKNS_5paramERKPNS_7programEPf>
    b256:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
    b25d:	00 
    b25e:	48 8d b4 24 e0 01 00 	lea    0x1e0(%rsp),%rsi
    b265:	00 
    b266:	4c 8b 64 24 58       	mov    0x58(%rsp),%r12
                           y_pred2.data());

    float acc  = utils::accuracy(y_test, y_pred1);
    b26b:	e8 00 c9 ff ff       	callq  7b70 <_ZN5utils8accuracyERKSt6vectorIfSaIfEES4_>
    b270:	f3 0f 11 44 24 10    	movss  %xmm0,0x10(%rsp)
    b276:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
    b27d:	00 
    b27e:	48 8d b4 24 c0 01 00 	lea    0x1c0(%rsp),%rsi
    b285:	00 
    float acc2 = utils::accuracy(y_test, y_pred2);
    b286:	e8 e5 c8 ff ff       	callq  7b70 <_ZN5utils8accuracyERKSt6vectorIfSaIfEES4_>
    b28b:	f3 0f 11 44 24 78    	movss  %xmm0,0x78(%rsp)
      : _M_current(__i) { }
    b291:	48 8b 84 24 08 02 00 	mov    0x208(%rsp),%rax
    b298:	00 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    b299:	48 8b 48 f0          	mov    -0x10(%rax),%rcx

    // Extract the best programs and print some stats
    if (history.back().size() > 0) {
    b29d:	48 3b 48 e8          	cmp    -0x18(%rax),%rcx
    b2a1:	0f 84 05 07 00 00    	je     b9ac <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17bc>
        genetic::program_t best_program1 = &final_programs[0];
    b2a7:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
	__ostream_insert(__out, __s,
    b2ac:	4c 8b 35 35 db 00 00 	mov    0xdb35(%rip),%r14        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    b2b3:	48 8d 35 66 75 ff ff 	lea    -0x8a9a(%rip),%rsi        # 2820 <_IO_stdin_used+0x130>
    b2ba:	ba 17 00 00 00       	mov    $0x17,%edx
    b2bf:	4c 89 f7             	mov    %r14,%rdi
    b2c2:	e8 39 c4 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    { return flush(__os.put(__os.widen('\n'))); }
    b2c7:	49 8b 06             	mov    (%r14),%rax
    b2ca:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    b2ce:	4d 8b b4 06 f0 00 00 	mov    0xf0(%r14,%rax,1),%r14
    b2d5:	00 
      if (!__f)
    b2d6:	4d 85 f6             	test   %r14,%r14
    b2d9:	0f 84 e4 0c 00 00    	je     bfc3 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1dd3>
	if (_M_widen_ok)
    b2df:	41 80 7e 38 00       	cmpb   $0x0,0x38(%r14)
    b2e4:	0f 84 bb 00 00 00    	je     b3a5 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11b5>
	  return _M_widen[static_cast<unsigned char>(__c)];
    b2ea:	41 0f b6 46 43       	movzbl 0x43(%r14),%eax
    b2ef:	e9 c7 00 00 00       	jmpq   b3bb <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11cb>
    for (int i = 1; i < size; i++) {
    b2f4:	48 8d 70 50          	lea    0x50(%rax),%rsi
    b2f8:	48 89 d7             	mov    %rdx,%rdi
    b2fb:	48 83 e7 fe          	and    $0xfffffffffffffffe,%rdi
    b2ff:	48 f7 df             	neg    %rdi
    b302:	b9 01 00 00 00       	mov    $0x1,%ecx
    b307:	45 31 c9             	xor    %r9d,%r9d
    b30a:	0f 28 c8             	movaps %xmm0,%xmm1
    b30d:	45 31 c0             	xor    %r8d,%r8d
    b310:	eb 37                	jmp    b349 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1159>
    b312:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    b319:	1f 84 00 00 00 00 00 
    b320:	4d 89 e8             	mov    %r13,%r8
    b323:	4d 89 d5             	mov    %r10,%r13
    b326:	0f 28 c8             	movaps %xmm0,%xmm1
    b329:	0f 28 c2             	movaps %xmm2,%xmm0
    b32c:	48 83 c6 40          	add    $0x40,%rsi
    b330:	4c 8d 14 0f          	lea    (%rdi,%rcx,1),%r10
    b334:	49 83 c2 02          	add    $0x2,%r10
    b338:	48 83 c1 02          	add    $0x2,%rcx
    b33c:	4d 89 e9             	mov    %r13,%r9
    b33f:	49 83 fa 01          	cmp    $0x1,%r10
    b343:	0f 84 23 fd ff ff    	je     b06c <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe7c>
        float rf = programs[i].raw_fitness_;
    b349:	f3 0f 10 56 e0       	movss  -0x20(%rsi),%xmm2
        if (rf < rf1) {
    b34e:	0f 2e c2             	ucomiss %xmm2,%xmm0
    b351:	76 1d                	jbe    b370 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1180>
    b353:	49 89 ca             	mov    %rcx,%r10
    b356:	4d 89 c1             	mov    %r8,%r9
    b359:	0f 28 c8             	movaps %xmm0,%xmm1
    b35c:	0f 28 c2             	movaps %xmm2,%xmm0
    b35f:	eb 1d                	jmp    b37e <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x118e>
    b361:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    b368:	0f 1f 84 00 00 00 00 
    b36f:	00 
    b370:	4d 89 c2             	mov    %r8,%r10
        } else if (rf < rf2) {
    b373:	0f 2e ca             	ucomiss %xmm2,%xmm1
    b376:	76 06                	jbe    b37e <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x118e>
    b378:	49 89 c9             	mov    %rcx,%r9
    b37b:	0f 28 ca             	movaps %xmm2,%xmm1
        float rf = programs[i].raw_fitness_;
    b37e:	4c 8d 69 01          	lea    0x1(%rcx),%r13
    b382:	f3 0f 10 16          	movss  (%rsi),%xmm2
        if (rf < rf1) {
    b386:	0f 2e c2             	ucomiss %xmm2,%xmm0
    b389:	77 95                	ja     b320 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1130>
    b38b:	4d 89 d0             	mov    %r10,%r8
        } else if (rf < rf2) {
    b38e:	0f 2e ca             	ucomiss %xmm2,%xmm1
    b391:	76 0d                	jbe    b3a0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11b0>
    b393:	0f 28 ca             	movaps %xmm2,%xmm1
    b396:	eb 94                	jmp    b32c <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x113c>
    b398:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    b39f:	00 
    b3a0:	4d 89 cd             	mov    %r9,%r13
    b3a3:	eb 87                	jmp    b32c <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x113c>
	this->_M_widen_init();
    b3a5:	4c 89 f7             	mov    %r14,%rdi
    b3a8:	e8 83 c3 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    b3ad:	49 8b 06             	mov    (%r14),%rax
    b3b0:	4c 89 f7             	mov    %r14,%rdi
    b3b3:	be 0a 00 00 00       	mov    $0xa,%esi
    b3b8:	ff 50 30             	callq  *0x30(%rax)
    b3bb:	0f be f0             	movsbl %al,%esi
    b3be:	48 8b 3d 23 da 00 00 	mov    0xda23(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    b3c5:	e8 56 c3 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    b3ca:	48 89 c7             	mov    %rax,%rdi
    b3cd:	e8 6e c3 00 00       	callq  17740 <_ZNSo5flushEv@plt>
	__ostream_insert(__out, __s,
    b3d2:	48 8b 3d 0f da 00 00 	mov    0xda0f(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    b3d9:	48 8d 35 30 77 ff ff 	lea    -0x88d0(%rip),%rsi        # 2b10 <_IO_stdin_used+0x420>
    b3e0:	ba 0a 00 00 00       	mov    $0xa,%edx
    b3e5:	e8 16 c3 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
        std::cout << "Best program 1 details:" << std::endl;
        std::cout << "- Length: " << best_program1->len << " nodes" << std::endl;
    b3ea:	8b 73 08             	mov    0x8(%rbx),%esi
    b3ed:	48 8b 3d f4 d9 00 00 	mov    0xd9f4(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    b3f4:	e8 b7 c1 00 00       	callq  175b0 <_ZNSolsEi@plt>
    b3f9:	49 89 c6             	mov    %rax,%r14
    b3fc:	48 8d 35 5a 78 ff ff 	lea    -0x87a6(%rip),%rsi        # 2c5d <_IO_stdin_used+0x56d>
    b403:	ba 06 00 00 00       	mov    $0x6,%edx
    b408:	48 89 c7             	mov    %rax,%rdi
    b40b:	e8 f0 c2 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    { return flush(__os.put(__os.widen('\n'))); }
    b410:	49 8b 06             	mov    (%r14),%rax
    b413:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    b417:	4d 8b ac 06 f0 00 00 	mov    0xf0(%r14,%rax,1),%r13
    b41e:	00 
      if (!__f)
    b41f:	4d 85 ed             	test   %r13,%r13
    b422:	0f 84 9b 0b 00 00    	je     bfc3 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1dd3>
	if (_M_widen_ok)
    b428:	41 80 7d 38 00       	cmpb   $0x0,0x38(%r13)
    b42d:	74 07                	je     b436 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1246>
	  return _M_widen[static_cast<unsigned char>(__c)];
    b42f:	41 0f b6 45 43       	movzbl 0x43(%r13),%eax
    b434:	eb 17                	jmp    b44d <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x125d>
	this->_M_widen_init();
    b436:	4c 89 ef             	mov    %r13,%rdi
    b439:	e8 f2 c2 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    b43e:	49 8b 45 00          	mov    0x0(%r13),%rax
    b442:	4c 89 ef             	mov    %r13,%rdi
    b445:	be 0a 00 00 00       	mov    $0xa,%esi
    b44a:	ff 50 30             	callq  *0x30(%rax)
    b44d:	0f be f0             	movsbl %al,%esi
    b450:	4c 89 f7             	mov    %r14,%rdi
    b453:	e8 c8 c2 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    b458:	48 89 c7             	mov    %rax,%rdi
    b45b:	e8 e0 c2 00 00       	callq  17740 <_ZNSo5flushEv@plt>
	__ostream_insert(__out, __s,
    b460:	48 8b 3d 81 d9 00 00 	mov    0xd981(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    b467:	48 8d 35 97 77 ff ff 	lea    -0x8869(%rip),%rsi        # 2c05 <_IO_stdin_used+0x515>
    b46e:	ba 09 00 00 00       	mov    $0x9,%edx
    b473:	e8 88 c2 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
        std::cout << "- Depth: " << best_program1->depth << std::endl;
    b478:	8b 73 0c             	mov    0xc(%rbx),%esi
    b47b:	48 8b 3d 66 d9 00 00 	mov    0xd966(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    b482:	e8 29 c1 00 00       	callq  175b0 <_ZNSolsEi@plt>
    b487:	49 89 c6             	mov    %rax,%r14
    { return flush(__os.put(__os.widen('\n'))); }
    b48a:	48 8b 00             	mov    (%rax),%rax
    b48d:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    b491:	4d 8b ac 06 f0 00 00 	mov    0xf0(%r14,%rax,1),%r13
    b498:	00 
      if (!__f)
    b499:	4d 85 ed             	test   %r13,%r13
    b49c:	0f 84 21 0b 00 00    	je     bfc3 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1dd3>
	if (_M_widen_ok)
    b4a2:	41 80 7d 38 00       	cmpb   $0x0,0x38(%r13)
    b4a7:	74 07                	je     b4b0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x12c0>
	  return _M_widen[static_cast<unsigned char>(__c)];
    b4a9:	41 0f b6 45 43       	movzbl 0x43(%r13),%eax
    b4ae:	eb 17                	jmp    b4c7 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x12d7>
	this->_M_widen_init();
    b4b0:	4c 89 ef             	mov    %r13,%rdi
    b4b3:	e8 78 c2 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    b4b8:	49 8b 45 00          	mov    0x0(%r13),%rax
    b4bc:	4c 89 ef             	mov    %r13,%rdi
    b4bf:	be 0a 00 00 00       	mov    $0xa,%esi
    b4c4:	ff 50 30             	callq  *0x30(%rax)
    b4c7:	0f be f0             	movsbl %al,%esi
    b4ca:	4c 89 f7             	mov    %r14,%rdi
    b4cd:	e8 4e c2 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    b4d2:	48 89 c7             	mov    %rax,%rdi
    b4d5:	e8 66 c2 00 00       	callq  17740 <_ZNSo5flushEv@plt>
	__ostream_insert(__out, __s,
    b4da:	48 8b 3d 07 d9 00 00 	mov    0xd907(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    b4e1:	48 8d 35 75 78 ff ff 	lea    -0x878b(%rip),%rsi        # 2d5d <_IO_stdin_used+0x66d>
    b4e8:	ba 0f 00 00 00       	mov    $0xf,%edx
    b4ed:	e8 0e c2 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
        std::cout << "- Raw fitness: " << best_program1->raw_fitness_ << std::endl;
    b4f2:	f3 0f 10 43 10       	movss  0x10(%rbx),%xmm0
	return _M_insert(static_cast<double>(__f));
    b4f7:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
    b4fb:	48 8b 3d e6 d8 00 00 	mov    0xd8e6(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    b502:	e8 09 c1 00 00       	callq  17610 <_ZNSo9_M_insertIdEERSoT_@plt>
    b507:	49 89 c6             	mov    %rax,%r14
    { return flush(__os.put(__os.widen('\n'))); }
    b50a:	48 8b 00             	mov    (%rax),%rax
    b50d:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    b511:	4d 8b ac 06 f0 00 00 	mov    0xf0(%r14,%rax,1),%r13
    b518:	00 
      if (!__f)
    b519:	4d 85 ed             	test   %r13,%r13
    b51c:	0f 84 a1 0a 00 00    	je     bfc3 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1dd3>
	if (_M_widen_ok)
    b522:	41 80 7d 38 00       	cmpb   $0x0,0x38(%r13)
    b527:	74 07                	je     b530 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1340>
	  return _M_widen[static_cast<unsigned char>(__c)];
    b529:	41 0f b6 45 43       	movzbl 0x43(%r13),%eax
    b52e:	eb 17                	jmp    b547 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1357>
	this->_M_widen_init();
    b530:	4c 89 ef             	mov    %r13,%rdi
    b533:	e8 f8 c1 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    b538:	49 8b 45 00          	mov    0x0(%r13),%rax
    b53c:	4c 89 ef             	mov    %r13,%rdi
    b53f:	be 0a 00 00 00       	mov    $0xa,%esi
    b544:	ff 50 30             	callq  *0x30(%rax)
    b547:	0f be f0             	movsbl %al,%esi
    b54a:	4c 89 f7             	mov    %r14,%rdi
    b54d:	e8 ce c1 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    b552:	48 89 c7             	mov    %rax,%rdi
    b555:	e8 e6 c1 00 00       	callq  17740 <_ZNSo5flushEv@plt>
	__ostream_insert(__out, __s,
    b55a:	48 8b 3d 87 d8 00 00 	mov    0xd887(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    b561:	48 8d 35 fb 72 ff ff 	lea    -0x8d05(%rip),%rsi        # 2863 <_IO_stdin_used+0x173>
    b568:	ba 11 00 00 00       	mov    $0x11,%edx
    b56d:	e8 8e c1 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    b572:	f3 0f 10 44 24 10    	movss  0x10(%rsp),%xmm0
	return _M_insert(static_cast<double>(__f));
    b578:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
    b57c:	48 8b 3d 65 d8 00 00 	mov    0xd865(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    b583:	e8 88 c0 00 00       	callq  17610 <_ZNSo9_M_insertIdEERSoT_@plt>
        std::cout << "- Test accuracy: " << acc << std::endl;
    b588:	49 89 c6             	mov    %rax,%r14
    { return flush(__os.put(__os.widen('\n'))); }
    b58b:	48 8b 00             	mov    (%rax),%rax
    b58e:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    b592:	4d 8b ac 06 f0 00 00 	mov    0xf0(%r14,%rax,1),%r13
    b599:	00 
      if (!__f)
    b59a:	4d 85 ed             	test   %r13,%r13
    b59d:	0f 84 20 0a 00 00    	je     bfc3 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1dd3>
	if (_M_widen_ok)
    b5a3:	41 80 7d 38 00       	cmpb   $0x0,0x38(%r13)
    b5a8:	74 07                	je     b5b1 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x13c1>
	  return _M_widen[static_cast<unsigned char>(__c)];
    b5aa:	41 0f b6 45 43       	movzbl 0x43(%r13),%eax
    b5af:	eb 17                	jmp    b5c8 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x13d8>
	this->_M_widen_init();
    b5b1:	4c 89 ef             	mov    %r13,%rdi
    b5b4:	e8 77 c1 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    b5b9:	49 8b 45 00          	mov    0x0(%r13),%rax
    b5bd:	4c 89 ef             	mov    %r13,%rdi
    b5c0:	be 0a 00 00 00       	mov    $0xa,%esi
    b5c5:	ff 50 30             	callq  *0x30(%rax)
    b5c8:	0f be f0             	movsbl %al,%esi
    b5cb:	4c 89 f7             	mov    %r14,%rdi
    b5ce:	e8 4d c1 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    b5d3:	48 89 c7             	mov    %rax,%rdi
    b5d6:	e8 65 c1 00 00       	callq  17740 <_ZNSo5flushEv@plt>
    b5db:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi

        // Convert to string representation
        std::string program_str = genetic::stringify(*best_program1);
    b5e0:	48 89 de             	mov    %rbx,%rsi
    b5e3:	e8 f8 92 00 00       	callq  148e0 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE>
	__ostream_insert(__out, __s,
    b5e8:	48 8b 3d f9 d7 00 00 	mov    0xd7f9(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    b5ef:	48 8d 35 4b 77 ff ff 	lea    -0x88b5(%rip),%rsi        # 2d41 <_IO_stdin_used+0x651>
    b5f6:	ba 0b 00 00 00       	mov    $0xb,%edx
    b5fb:	e8 00 c1 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
      { return _M_dataplus._M_p; }
    b600:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
      { return _M_string_length; }
    b605:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
      return __ostream_insert(__os, __str.data(), __str.size());
    b60a:	48 8b 3d d7 d7 00 00 	mov    0xd7d7(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    b611:	e8 ea c0 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
        std::cout << "- Program: " << program_str << std::endl;
    b616:	48 89 c3             	mov    %rax,%rbx
    { return flush(__os.put(__os.widen('\n'))); }
    b619:	48 8b 00             	mov    (%rax),%rax
    b61c:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    b620:	4c 8b b4 03 f0 00 00 	mov    0xf0(%rbx,%rax,1),%r14
    b627:	00 
      if (!__f)
    b628:	4d 85 f6             	test   %r14,%r14
    b62b:	0f 84 05 0a 00 00    	je     c036 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e46>
	if (_M_widen_ok)
    b631:	41 80 7e 38 00       	cmpb   $0x0,0x38(%r14)
    b636:	74 07                	je     b63f <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x144f>
	  return _M_widen[static_cast<unsigned char>(__c)];
    b638:	41 0f b6 46 43       	movzbl 0x43(%r14),%eax
    b63d:	eb 16                	jmp    b655 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1465>
	this->_M_widen_init();
    b63f:	4c 89 f7             	mov    %r14,%rdi
    b642:	e8 e9 c0 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    b647:	49 8b 06             	mov    (%r14),%rax
    b64a:	4c 89 f7             	mov    %r14,%rdi
    b64d:	be 0a 00 00 00       	mov    $0xa,%esi
    b652:	ff 50 30             	callq  *0x30(%rax)
    b655:	0f be f0             	movsbl %al,%esi
    b658:	48 89 df             	mov    %rbx,%rdi
    b65b:	e8 c0 c0 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    b660:	48 89 c7             	mov    %rax,%rdi
    b663:	e8 d8 c0 00 00       	callq  17740 <_ZNSo5flushEv@plt>

        genetic::program_t best_program2 = &final_programs[1];
    b668:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
	__ostream_insert(__out, __s,
    b66d:	4c 8b 35 74 d7 00 00 	mov    0xd774(%rip),%r14        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    b674:	48 8d 35 83 73 ff ff 	lea    -0x8c7d(%rip),%rsi        # 29fe <_IO_stdin_used+0x30e>
    b67b:	ba 17 00 00 00       	mov    $0x17,%edx
    b680:	4c 89 f7             	mov    %r14,%rdi
    b683:	e8 78 c0 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    { return flush(__os.put(__os.widen('\n'))); }
    b688:	49 8b 06             	mov    (%r14),%rax
    b68b:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    b68f:	4d 8b b4 06 f0 00 00 	mov    0xf0(%r14,%rax,1),%r14
    b696:	00 
      if (!__f)
    b697:	4d 85 f6             	test   %r14,%r14
    b69a:	0f 84 28 09 00 00    	je     bfc8 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1dd8>
	if (_M_widen_ok)
    b6a0:	41 80 7e 38 00       	cmpb   $0x0,0x38(%r14)
    b6a5:	74 07                	je     b6ae <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x14be>
	  return _M_widen[static_cast<unsigned char>(__c)];
    b6a7:	41 0f b6 46 43       	movzbl 0x43(%r14),%eax
    b6ac:	eb 16                	jmp    b6c4 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x14d4>
	this->_M_widen_init();
    b6ae:	4c 89 f7             	mov    %r14,%rdi
    b6b1:	e8 7a c0 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    b6b6:	49 8b 06             	mov    (%r14),%rax
    b6b9:	4c 89 f7             	mov    %r14,%rdi
    b6bc:	be 0a 00 00 00       	mov    $0xa,%esi
    b6c1:	ff 50 30             	callq  *0x30(%rax)
    b6c4:	0f be f0             	movsbl %al,%esi
    b6c7:	48 8b 3d 1a d7 00 00 	mov    0xd71a(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    b6ce:	e8 4d c0 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    b6d3:	48 89 c7             	mov    %rax,%rdi
    b6d6:	e8 65 c0 00 00       	callq  17740 <_ZNSo5flushEv@plt>
	__ostream_insert(__out, __s,
    b6db:	48 8b 3d 06 d7 00 00 	mov    0xd706(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    b6e2:	48 8d 35 27 74 ff ff 	lea    -0x8bd9(%rip),%rsi        # 2b10 <_IO_stdin_used+0x420>
    b6e9:	ba 0a 00 00 00       	mov    $0xa,%edx
    b6ee:	e8 0d c0 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
        std::cout << "Best program 2 details:" << std::endl;
        std::cout << "- Length: " << best_program2->len << " nodes" << std::endl;
    b6f3:	8b 73 28             	mov    0x28(%rbx),%esi
    b6f6:	48 8b 3d eb d6 00 00 	mov    0xd6eb(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    b6fd:	e8 ae be 00 00       	callq  175b0 <_ZNSolsEi@plt>
    b702:	49 89 c6             	mov    %rax,%r14
    b705:	48 8d 35 51 75 ff ff 	lea    -0x8aaf(%rip),%rsi        # 2c5d <_IO_stdin_used+0x56d>
    b70c:	ba 06 00 00 00       	mov    $0x6,%edx
    b711:	48 89 c7             	mov    %rax,%rdi
    b714:	e8 e7 bf 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    { return flush(__os.put(__os.widen('\n'))); }
    b719:	49 8b 06             	mov    (%r14),%rax
    b71c:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    b720:	4d 8b ac 06 f0 00 00 	mov    0xf0(%r14,%rax,1),%r13
    b727:	00 
      if (!__f)
    b728:	4d 85 ed             	test   %r13,%r13
    b72b:	0f 84 97 08 00 00    	je     bfc8 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1dd8>
	if (_M_widen_ok)
    b731:	41 80 7d 38 00       	cmpb   $0x0,0x38(%r13)
    b736:	74 07                	je     b73f <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x154f>
	  return _M_widen[static_cast<unsigned char>(__c)];
    b738:	41 0f b6 45 43       	movzbl 0x43(%r13),%eax
    b73d:	eb 17                	jmp    b756 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1566>
	this->_M_widen_init();
    b73f:	4c 89 ef             	mov    %r13,%rdi
    b742:	e8 e9 bf 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    b747:	49 8b 45 00          	mov    0x0(%r13),%rax
    b74b:	4c 89 ef             	mov    %r13,%rdi
    b74e:	be 0a 00 00 00       	mov    $0xa,%esi
    b753:	ff 50 30             	callq  *0x30(%rax)
    b756:	0f be f0             	movsbl %al,%esi
    b759:	4c 89 f7             	mov    %r14,%rdi
    b75c:	e8 bf bf 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    b761:	48 89 c7             	mov    %rax,%rdi
    b764:	e8 d7 bf 00 00       	callq  17740 <_ZNSo5flushEv@plt>
	__ostream_insert(__out, __s,
    b769:	48 8b 3d 78 d6 00 00 	mov    0xd678(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    b770:	48 8d 35 8e 74 ff ff 	lea    -0x8b72(%rip),%rsi        # 2c05 <_IO_stdin_used+0x515>
    b777:	ba 09 00 00 00       	mov    $0x9,%edx
    b77c:	e8 7f bf 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
        std::cout << "- Depth: " << best_program2->depth << std::endl;
    b781:	8b 73 2c             	mov    0x2c(%rbx),%esi
    b784:	48 8b 3d 5d d6 00 00 	mov    0xd65d(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    b78b:	e8 20 be 00 00       	callq  175b0 <_ZNSolsEi@plt>
    b790:	49 89 c6             	mov    %rax,%r14
    { return flush(__os.put(__os.widen('\n'))); }
    b793:	48 8b 00             	mov    (%rax),%rax
    b796:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    b79a:	4d 8b ac 06 f0 00 00 	mov    0xf0(%r14,%rax,1),%r13
    b7a1:	00 
      if (!__f)
    b7a2:	4d 85 ed             	test   %r13,%r13
    b7a5:	0f 84 1d 08 00 00    	je     bfc8 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1dd8>
	if (_M_widen_ok)
    b7ab:	41 80 7d 38 00       	cmpb   $0x0,0x38(%r13)
    b7b0:	74 07                	je     b7b9 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x15c9>
	  return _M_widen[static_cast<unsigned char>(__c)];
    b7b2:	41 0f b6 45 43       	movzbl 0x43(%r13),%eax
    b7b7:	eb 17                	jmp    b7d0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x15e0>
	this->_M_widen_init();
    b7b9:	4c 89 ef             	mov    %r13,%rdi
    b7bc:	e8 6f bf 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    b7c1:	49 8b 45 00          	mov    0x0(%r13),%rax
    b7c5:	4c 89 ef             	mov    %r13,%rdi
    b7c8:	be 0a 00 00 00       	mov    $0xa,%esi
    b7cd:	ff 50 30             	callq  *0x30(%rax)
    b7d0:	0f be f0             	movsbl %al,%esi
    b7d3:	4c 89 f7             	mov    %r14,%rdi
    b7d6:	e8 45 bf 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    b7db:	48 89 c7             	mov    %rax,%rdi
    b7de:	e8 5d bf 00 00       	callq  17740 <_ZNSo5flushEv@plt>
	__ostream_insert(__out, __s,
    b7e3:	48 8b 3d fe d5 00 00 	mov    0xd5fe(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    b7ea:	48 8d 35 6c 75 ff ff 	lea    -0x8a94(%rip),%rsi        # 2d5d <_IO_stdin_used+0x66d>
    b7f1:	ba 0f 00 00 00       	mov    $0xf,%edx
    b7f6:	e8 05 bf 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
        std::cout << "- Raw fitness: " << best_program2->raw_fitness_ << std::endl;
    b7fb:	f3 0f 10 43 30       	movss  0x30(%rbx),%xmm0
	return _M_insert(static_cast<double>(__f));
    b800:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
    b804:	48 8b 3d dd d5 00 00 	mov    0xd5dd(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    b80b:	e8 00 be 00 00       	callq  17610 <_ZNSo9_M_insertIdEERSoT_@plt>
    b810:	49 89 c6             	mov    %rax,%r14
    { return flush(__os.put(__os.widen('\n'))); }
    b813:	48 8b 00             	mov    (%rax),%rax
    b816:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    b81a:	4d 8b ac 06 f0 00 00 	mov    0xf0(%r14,%rax,1),%r13
    b821:	00 
      if (!__f)
    b822:	4d 85 ed             	test   %r13,%r13
    b825:	0f 84 9d 07 00 00    	je     bfc8 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1dd8>
	if (_M_widen_ok)
    b82b:	41 80 7d 38 00       	cmpb   $0x0,0x38(%r13)
    b830:	74 07                	je     b839 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1649>
	  return _M_widen[static_cast<unsigned char>(__c)];
    b832:	41 0f b6 45 43       	movzbl 0x43(%r13),%eax
    b837:	eb 17                	jmp    b850 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1660>
	this->_M_widen_init();
    b839:	4c 89 ef             	mov    %r13,%rdi
    b83c:	e8 ef be 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    b841:	49 8b 45 00          	mov    0x0(%r13),%rax
    b845:	4c 89 ef             	mov    %r13,%rdi
    b848:	be 0a 00 00 00       	mov    $0xa,%esi
    b84d:	ff 50 30             	callq  *0x30(%rax)
    b850:	0f be f0             	movsbl %al,%esi
    b853:	4c 89 f7             	mov    %r14,%rdi
    b856:	e8 c5 be 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    b85b:	48 89 c7             	mov    %rax,%rdi
    b85e:	e8 dd be 00 00       	callq  17740 <_ZNSo5flushEv@plt>
	__ostream_insert(__out, __s,
    b863:	48 8b 3d 7e d5 00 00 	mov    0xd57e(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    b86a:	48 8d 35 f2 6f ff ff 	lea    -0x900e(%rip),%rsi        # 2863 <_IO_stdin_used+0x173>
    b871:	ba 11 00 00 00       	mov    $0x11,%edx
    b876:	e8 85 be 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    b87b:	f3 0f 10 44 24 78    	movss  0x78(%rsp),%xmm0
	return _M_insert(static_cast<double>(__f));
    b881:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
    b885:	48 8b 3d 5c d5 00 00 	mov    0xd55c(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    b88c:	e8 7f bd 00 00       	callq  17610 <_ZNSo9_M_insertIdEERSoT_@plt>
        std::cout << "- Test accuracy: " << acc2 << std::endl;
    b891:	49 89 c6             	mov    %rax,%r14
    { return flush(__os.put(__os.widen('\n'))); }
    b894:	48 8b 00             	mov    (%rax),%rax
    b897:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    b89b:	4d 8b ac 06 f0 00 00 	mov    0xf0(%r14,%rax,1),%r13
    b8a2:	00 
      if (!__f)
    b8a3:	4d 85 ed             	test   %r13,%r13
    b8a6:	0f 84 1c 07 00 00    	je     bfc8 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1dd8>
	if (_M_widen_ok)
    b8ac:	41 80 7d 38 00       	cmpb   $0x0,0x38(%r13)
    b8b1:	74 07                	je     b8ba <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16ca>
	  return _M_widen[static_cast<unsigned char>(__c)];
    b8b3:	41 0f b6 45 43       	movzbl 0x43(%r13),%eax
    b8b8:	eb 17                	jmp    b8d1 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16e1>
	this->_M_widen_init();
    b8ba:	4c 89 ef             	mov    %r13,%rdi
    b8bd:	e8 6e be 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    b8c2:	49 8b 45 00          	mov    0x0(%r13),%rax
    b8c6:	4c 89 ef             	mov    %r13,%rdi
    b8c9:	be 0a 00 00 00       	mov    $0xa,%esi
    b8ce:	ff 50 30             	callq  *0x30(%rax)
    b8d1:	0f be f0             	movsbl %al,%esi
    b8d4:	4c 89 f7             	mov    %r14,%rdi
    b8d7:	e8 44 be 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    b8dc:	48 89 c7             	mov    %rax,%rdi
    b8df:	e8 5c be 00 00       	callq  17740 <_ZNSo5flushEv@plt>
    b8e4:	48 83 c3 20          	add    $0x20,%rbx
    b8e8:	48 8d bc 24 c8 02 00 	lea    0x2c8(%rsp),%rdi
    b8ef:	00 

        // Convert to string representation
        std::string program_str2 = genetic::stringify(*best_program2);
    b8f0:	48 89 de             	mov    %rbx,%rsi
    b8f3:	e8 e8 8f 00 00       	callq  148e0 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE>
	__ostream_insert(__out, __s,
    b8f8:	48 8b 3d e9 d4 00 00 	mov    0xd4e9(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    b8ff:	48 8d 35 3b 74 ff ff 	lea    -0x8bc5(%rip),%rsi        # 2d41 <_IO_stdin_used+0x651>
    b906:	ba 0b 00 00 00       	mov    $0xb,%edx
    b90b:	e8 f0 bd 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
      { return _M_dataplus._M_p; }
    b910:	48 8b b4 24 c8 02 00 	mov    0x2c8(%rsp),%rsi
    b917:	00 
      { return _M_string_length; }
    b918:	48 8b 94 24 d0 02 00 	mov    0x2d0(%rsp),%rdx
    b91f:	00 
      return __ostream_insert(__os, __str.data(), __str.size());
    b920:	48 8b 3d c1 d4 00 00 	mov    0xd4c1(%rip),%rdi        # 18de8 <_ZSt4cout@GLIBCXX_3.4>
    b927:	e8 d4 bd 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
        std::cout << "- Program: " << program_str2 << std::endl;
    b92c:	48 89 c3             	mov    %rax,%rbx
    { return flush(__os.put(__os.widen('\n'))); }
    b92f:	48 8b 00             	mov    (%rax),%rax
    b932:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
    b936:	4c 8b b4 03 f0 00 00 	mov    0xf0(%rbx,%rax,1),%r14
    b93d:	00 
      if (!__f)
    b93e:	4d 85 f6             	test   %r14,%r14
    b941:	0f 84 f4 06 00 00    	je     c03b <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e4b>
	if (_M_widen_ok)
    b947:	41 80 7e 38 00       	cmpb   $0x0,0x38(%r14)
    b94c:	74 07                	je     b955 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1765>
	  return _M_widen[static_cast<unsigned char>(__c)];
    b94e:	41 0f b6 46 43       	movzbl 0x43(%r14),%eax
    b953:	eb 16                	jmp    b96b <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x177b>
	this->_M_widen_init();
    b955:	4c 89 f7             	mov    %r14,%rdi
    b958:	e8 d3 bd 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    b95d:	49 8b 06             	mov    (%r14),%rax
    b960:	4c 89 f7             	mov    %r14,%rdi
    b963:	be 0a 00 00 00       	mov    $0xa,%esi
    b968:	ff 50 30             	callq  *0x30(%rax)
    b96b:	0f be f0             	movsbl %al,%esi
    b96e:	48 89 df             	mov    %rbx,%rdi
    b971:	e8 aa bd 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
    b976:	48 89 c7             	mov    %rax,%rdi
    b979:	e8 c2 bd 00 00       	callq  17740 <_ZNSo5flushEv@plt>
      { return _M_dataplus._M_p; }
    b97e:	48 8b bc 24 c8 02 00 	mov    0x2c8(%rsp),%rdi
    b985:	00 
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    b986:	48 8d 84 24 d8 02 00 	lea    0x2d8(%rsp),%rax
    b98d:	00 
      { return _M_data() == _M_local_data(); }
    b98e:	48 39 c7             	cmp    %rax,%rdi
	if (!_M_is_local())
    b991:	74 05                	je     b998 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17a8>
	::operator delete(__p
    b993:	e8 28 bd 00 00       	callq  176c0 <_ZdlPv@plt>
      { return _M_dataplus._M_p; }
    b998:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    b99d:	48 8d 44 24 38       	lea    0x38(%rsp),%rax
      { return _M_data() == _M_local_data(); }
    b9a2:	48 39 c7             	cmp    %rax,%rdi
	if (!_M_is_local())
    b9a5:	74 05                	je     b9ac <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17bc>
    b9a7:	e8 14 bd 00 00       	callq  176c0 <_ZdlPv@plt>
    clock_gettime(CLOCK_MONOTONIC, &t->end);
    b9ac:	48 8d b4 24 f8 02 00 	lea    0x2f8(%rsp),%rsi
    b9b3:	00 
    b9b4:	bf 01 00 00 00       	mov    $0x1,%edi
    b9b9:	e8 e2 bf 00 00       	callq  179a0 <clock_gettime@plt>
    timespec_sub(&t->elapsed, t->end, t->start);
    b9be:	48 8b 84 24 e8 02 00 	mov    0x2e8(%rsp),%rax
    b9c5:	00 
    b9c6:	48 8b 9c 24 00 03 00 	mov    0x300(%rsp),%rbx
    b9cd:	00 
    t_diff->tv_nsec = t_end.tv_nsec - t_start.tv_nsec;
    b9ce:	48 2b 9c 24 f0 02 00 	sub    0x2f0(%rsp),%rbx
    b9d5:	00 
    timespec_sub(&t->elapsed, t->end, t->start);
    b9d6:	4c 8b b4 24 f8 02 00 	mov    0x2f8(%rsp),%r14
    b9dd:	00 
    t_diff->tv_nsec = t_end.tv_nsec - t_start.tv_nsec;
    b9de:	48 89 9c 24 10 03 00 	mov    %rbx,0x310(%rsp)
    b9e5:	00 
    if ((t_diff->tv_sec > 0) && (t_diff->tv_nsec < 0)) {
    b9e6:	49 29 c6             	sub    %rax,%r14
    t_diff->tv_sec  = t_end.tv_sec - t_start.tv_sec;
    b9e9:	4c 89 b4 24 08 03 00 	mov    %r14,0x308(%rsp)
    b9f0:	00 
    if ((t_diff->tv_sec > 0) && (t_diff->tv_nsec < 0)) {
    b9f1:	7e 13                	jle    ba06 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1816>
    b9f3:	48 85 db             	test   %rbx,%rbx
    b9f6:	79 37                	jns    ba2f <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x183f>
    b9f8:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
    b9ff:	b9 00 ca 9a 3b       	mov    $0x3b9aca00,%ecx
    ba04:	eb 13                	jmp    ba19 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1829>
    } else if ((t_diff->tv_sec < 0) && (t_diff->tv_nsec > 0)) {
    ba06:	74 27                	je     ba2f <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x183f>
    ba08:	48 85 db             	test   %rbx,%rbx
    ba0b:	7e 22                	jle    ba2f <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x183f>
    ba0d:	b8 01 00 00 00       	mov    $0x1,%eax
    ba12:	48 c7 c1 00 36 65 c4 	mov    $0xffffffffc4653600,%rcx
    ba19:	48 01 cb             	add    %rcx,%rbx
    ba1c:	48 89 9c 24 10 03 00 	mov    %rbx,0x310(%rsp)
    ba23:	00 
    ba24:	49 01 c6             	add    %rax,%r14
    ba27:	4c 89 b4 24 08 03 00 	mov    %r14,0x308(%rsp)
    ba2e:	00 
        printf("Time(%s) = ", label);
    ba2f:	48 8d 3d 74 71 ff ff 	lea    -0x8e8c(%rip),%rdi        # 2baa <_IO_stdin_used+0x4ba>
    ba36:	48 8d 35 38 72 ff ff 	lea    -0x8dc8(%rip),%rsi        # 2c75 <_IO_stdin_used+0x585>
    ba3d:	31 c0                	xor    %eax,%eax
    ba3f:	e8 6c bf 00 00       	callq  179b0 <printf@plt>
    printf("%ld.%09ld sec\n", (long)t.elapsed.tv_sec, t.elapsed.tv_nsec);
    ba44:	48 8d 3d c4 71 ff ff 	lea    -0x8e3c(%rip),%rdi        # 2c0f <_IO_stdin_used+0x51f>
    ba4b:	4c 89 f6             	mov    %r14,%rsi
    ba4e:	48 89 da             	mov    %rbx,%rdx
    ba51:	31 c0                	xor    %eax,%eax
    ba53:	e8 58 bf 00 00       	callq  179b0 <printf@plt>
    // Stop end-to-end timer and print results
    ctimer_stop(&end_to_end_timer);
    ctimer_measure(&end_to_end_timer);
    ctimer_print(end_to_end_timer, "Symbolic Classification (End-to-End)");

    delete[] final_programs;
    ba58:	4c 8b 74 24 48       	mov    0x48(%rsp),%r14
    ba5d:	4d 85 f6             	test   %r14,%r14
    ba60:	74 35                	je     ba97 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x18a7>
    ba62:	49 8d 5e f8          	lea    -0x8(%r14),%rbx
    ba66:	4d 8b 7e f8          	mov    -0x8(%r14),%r15
    ba6a:	4d 85 ff             	test   %r15,%r15
    ba6d:	74 20                	je     ba8f <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x189f>
    ba6f:	49 c1 e7 05          	shl    $0x5,%r15
    ba73:	49 83 c6 e0          	add    $0xffffffffffffffe0,%r14
    ba77:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    ba7e:	00 00 
    ba80:	4b 8d 3c 3e          	lea    (%r14,%r15,1),%rdi
    ba84:	e8 97 22 00 00       	callq  dd20 <_ZN7genetic7programD1Ev>
    ba89:	49 83 c7 e0          	add    $0xffffffffffffffe0,%r15
    ba8d:	75 f1                	jne    ba80 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1890>
    ba8f:	48 89 df             	mov    %rbx,%rdi
    ba92:	e8 79 bc 00 00       	callq  17710 <_ZdaPv@plt>
	_M_deallocate(_M_impl._M_start,
    ba97:	48 8b bc 24 c0 01 00 	mov    0x1c0(%rsp),%rdi
    ba9e:	00 
	if (__p)
    ba9f:	48 85 ff             	test   %rdi,%rdi
    baa2:	74 05                	je     baa9 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x18b9>
    baa4:	e8 17 bc 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    baa9:	48 8b bc 24 e0 01 00 	mov    0x1e0(%rsp),%rdi
    bab0:	00 
	if (__p)
    bab1:	48 85 ff             	test   %rdi,%rdi
    bab4:	74 05                	je     babb <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x18cb>
    bab6:	e8 05 bc 00 00       	callq  176c0 <_ZdlPv@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    babb:	48 8b 9c 24 00 02 00 	mov    0x200(%rsp),%rbx
    bac2:	00 
    bac3:	4c 8b bc 24 08 02 00 	mov    0x208(%rsp),%r15
    baca:	00 
	  for (; __first != __last; ++__first)
    bacb:	4c 39 fb             	cmp    %r15,%rbx
    bace:	0f 85 f9 00 00 00    	jne    bbcd <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x19dd>
	if (__p)
    bad4:	48 85 db             	test   %rbx,%rbx
    bad7:	74 08                	je     bae1 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x18f1>
    bad9:	48 89 df             	mov    %rbx,%rdi
    badc:	e8 df bb 00 00       	callq  176c0 <_ZdlPv@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    bae1:	48 8b 9c 24 88 01 00 	mov    0x188(%rsp),%rbx
    bae8:	00 
    bae9:	4c 8b b4 24 90 01 00 	mov    0x190(%rsp),%r14
    baf0:	00 
    baf1:	4c 39 f3             	cmp    %r14,%rbx
    baf4:	0f 85 23 01 00 00    	jne    bc1d <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a2d>
	if (__p)
    bafa:	48 85 db             	test   %rbx,%rbx
    bafd:	74 08                	je     bb07 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1917>
    baff:	48 89 df             	mov    %rbx,%rdi
    bb02:	e8 b9 bb 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    bb07:	48 8b bc 24 48 01 00 	mov    0x148(%rsp),%rdi
    bb0e:	00 
	if (__p)
    bb0f:	48 85 ff             	test   %rdi,%rdi
    bb12:	74 05                	je     bb19 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1929>
    bb14:	e8 a7 bb 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    bb19:	48 8b bc 24 30 01 00 	mov    0x130(%rsp),%rdi
    bb20:	00 
	if (__p)
    bb21:	48 85 ff             	test   %rdi,%rdi
    bb24:	74 05                	je     bb2b <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x193b>
    bb26:	e8 95 bb 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    bb2b:	48 8b bc 24 18 01 00 	mov    0x118(%rsp),%rdi
    bb32:	00 
	if (__p)
    bb33:	48 85 ff             	test   %rdi,%rdi
    bb36:	74 05                	je     bb3d <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x194d>
    bb38:	e8 83 bb 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    bb3d:	48 8b bc 24 00 01 00 	mov    0x100(%rsp),%rdi
    bb44:	00 
	if (__p)
    bb45:	48 85 ff             	test   %rdi,%rdi
    bb48:	74 05                	je     bb4f <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x195f>
    bb4a:	e8 71 bb 00 00       	callq  176c0 <_ZdlPv@plt>
    bb4f:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    bb54:	48 85 ff             	test   %rdi,%rdi
    bb57:	74 05                	je     bb5e <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x196e>
    bb59:	e8 62 bb 00 00       	callq  176c0 <_ZdlPv@plt>
    bb5e:	48 85 ed             	test   %rbp,%rbp
    bb61:	74 08                	je     bb6b <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x197b>
    bb63:	48 89 ef             	mov    %rbp,%rdi
    bb66:	e8 55 bb 00 00       	callq  176c0 <_ZdlPv@plt>
    bb6b:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
    bb70:	48 85 ff             	test   %rdi,%rdi
    bb73:	74 05                	je     bb7a <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x198a>
    bb75:	e8 46 bb 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    bb7a:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
    bb81:	00 
	if (__p)
    bb82:	48 85 ff             	test   %rdi,%rdi
    bb85:	74 05                	je     bb8c <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x199c>
    bb87:	e8 34 bb 00 00       	callq  176c0 <_ZdlPv@plt>
    bb8c:	4d 85 e4             	test   %r12,%r12
    bb8f:	74 08                	je     bb99 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x19a9>
    bb91:	4c 89 e7             	mov    %r12,%rdi
    bb94:	e8 27 bb 00 00       	callq  176c0 <_ZdlPv@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    bb99:	48 8b 9c 24 b8 00 00 	mov    0xb8(%rsp),%rbx
    bba0:	00 
    bba1:	4c 8b b4 24 c0 00 00 	mov    0xc0(%rsp),%r14
    bba8:	00 
    bba9:	4c 39 f3             	cmp    %r14,%rbx
    bbac:	0f 84 96 00 00 00    	je     bc48 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a58>
    bbb2:	49 89 df             	mov    %rbx,%r15
    bbb5:	e9 7f 00 00 00       	jmpq   bc39 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a49>
    bbba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    bbc0:	48 83 c3 18          	add    $0x18,%rbx
    bbc4:	4c 39 fb             	cmp    %r15,%rbx
    bbc7:	0f 84 3b 02 00 00    	je     be08 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c18>
    bbcd:	4c 8b 33             	mov    (%rbx),%r14
    bbd0:	4c 8b 63 08          	mov    0x8(%rbx),%r12
    bbd4:	4d 39 e6             	cmp    %r12,%r14
    bbd7:	74 1b                	je     bbf4 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a04>
    bbd9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      __pointer->~_Tp();
    bbe0:	4c 89 f7             	mov    %r14,%rdi
    bbe3:	e8 38 21 00 00       	callq  dd20 <_ZN7genetic7programD1Ev>
	  for (; __first != __last; ++__first)
    bbe8:	49 83 c6 20          	add    $0x20,%r14
    bbec:	4d 39 e6             	cmp    %r12,%r14
    bbef:	75 ef                	jne    bbe0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x19f0>
	_M_deallocate(_M_impl._M_start,
    bbf1:	4c 8b 33             	mov    (%rbx),%r14
	if (__p)
    bbf4:	4d 85 f6             	test   %r14,%r14
    bbf7:	4c 8b 64 24 58       	mov    0x58(%rsp),%r12
    bbfc:	74 c2                	je     bbc0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x19d0>
    bbfe:	4c 89 f7             	mov    %r14,%rdi
    bc01:	e8 ba ba 00 00       	callq  176c0 <_ZdlPv@plt>
    bc06:	eb b8                	jmp    bbc0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x19d0>
    bc08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    bc0f:	00 
    bc10:	48 83 c3 10          	add    $0x10,%rbx
    bc14:	4c 39 f3             	cmp    %r14,%rbx
    bc17:	0f 84 01 02 00 00    	je     be1e <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c2e>
      { return _M_dataplus._M_p; }
    bc1d:	48 8b 3b             	mov    (%rbx),%rdi
      { return _M_data() == _M_local_data(); }
    bc20:	48 83 c3 10          	add    $0x10,%rbx
    bc24:	48 39 df             	cmp    %rbx,%rdi
	if (!_M_is_local())
    bc27:	74 e7                	je     bc10 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a20>
    bc29:	e8 92 ba 00 00       	callq  176c0 <_ZdlPv@plt>
    bc2e:	eb e0                	jmp    bc10 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a20>
    bc30:	49 83 c7 18          	add    $0x18,%r15
    bc34:	4d 39 f7             	cmp    %r14,%r15
    bc37:	74 0f                	je     bc48 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a58>
	_M_deallocate(_M_impl._M_start,
    bc39:	49 8b 3f             	mov    (%r15),%rdi
	if (__p)
    bc3c:	48 85 ff             	test   %rdi,%rdi
    bc3f:	74 ef                	je     bc30 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a40>
    bc41:	e8 7a ba 00 00       	callq  176c0 <_ZdlPv@plt>
    bc46:	eb e8                	jmp    bc30 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a40>
    bc48:	48 85 db             	test   %rbx,%rbx
    bc4b:	74 08                	je     bc55 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a65>
    bc4d:	48 89 df             	mov    %rbx,%rdi
    bc50:	e8 6b ba 00 00       	callq  176c0 <_ZdlPv@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    bc55:	48 8b 9c 24 80 02 00 	mov    0x280(%rsp),%rbx
    bc5c:	00 
    bc5d:	4c 8b b4 24 88 02 00 	mov    0x288(%rsp),%r14
    bc64:	00 
    bc65:	4c 39 f3             	cmp    %r14,%rbx
    bc68:	74 1e                	je     bc88 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a98>
    bc6a:	49 89 df             	mov    %rbx,%r15
    bc6d:	eb 0a                	jmp    bc79 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a89>
    bc6f:	90                   	nop
    bc70:	49 83 c7 18          	add    $0x18,%r15
    bc74:	4d 39 f7             	cmp    %r14,%r15
    bc77:	74 0f                	je     bc88 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a98>
	_M_deallocate(_M_impl._M_start,
    bc79:	49 8b 3f             	mov    (%r15),%rdi
	if (__p)
    bc7c:	48 85 ff             	test   %rdi,%rdi
    bc7f:	74 ef                	je     bc70 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a80>
    bc81:	e8 3a ba 00 00       	callq  176c0 <_ZdlPv@plt>
    bc86:	eb e8                	jmp    bc70 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a80>
    bc88:	48 85 db             	test   %rbx,%rbx
    bc8b:	74 08                	je     bc95 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1aa5>
    bc8d:	48 89 df             	mov    %rbx,%rdi
    bc90:	e8 2b ba 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    bc95:	48 8b bc 24 b0 02 00 	mov    0x2b0(%rsp),%rdi
    bc9c:	00 
	if (__p)
    bc9d:	48 85 ff             	test   %rdi,%rdi
    bca0:	74 05                	je     bca7 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ab7>
    bca2:	e8 19 ba 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    bca7:	48 8b bc 24 98 02 00 	mov    0x298(%rsp),%rdi
    bcae:	00 
	if (__p)
    bcaf:	48 85 ff             	test   %rdi,%rdi
    bcb2:	74 05                	je     bcb9 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ac9>
    bcb4:	e8 07 ba 00 00       	callq  176c0 <_ZdlPv@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    bcb9:	48 8b 9c 24 38 02 00 	mov    0x238(%rsp),%rbx
    bcc0:	00 
    bcc1:	4c 8b b4 24 40 02 00 	mov    0x240(%rsp),%r14
    bcc8:	00 
    bcc9:	4c 39 f3             	cmp    %r14,%rbx
    bccc:	0f 85 cb 00 00 00    	jne    bd9d <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1bad>
	if (__p)
    bcd2:	48 85 db             	test   %rbx,%rbx
    bcd5:	74 08                	je     bcdf <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1aef>
    bcd7:	48 89 df             	mov    %rbx,%rdi
    bcda:	e8 e1 b9 00 00       	callq  176c0 <_ZdlPv@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    bcdf:	48 8b 9c 24 20 02 00 	mov    0x220(%rsp),%rbx
    bce6:	00 
    bce7:	4c 8b b4 24 28 02 00 	mov    0x228(%rsp),%r14
    bcee:	00 
    bcef:	4c 39 f3             	cmp    %r14,%rbx
    bcf2:	0f 85 c5 00 00 00    	jne    bdbd <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1bcd>
	if (__p)
    bcf8:	48 85 db             	test   %rbx,%rbx
    bcfb:	74 08                	je     bd05 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b15>
    bcfd:	48 89 df             	mov    %rbx,%rdi
    bd00:	e8 bb b9 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    bd05:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
    bd0c:	00 
	if (__p)
    bd0d:	48 85 ff             	test   %rdi,%rdi
    bd10:	74 05                	je     bd17 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b27>
    bd12:	e8 a9 b9 00 00       	callq  176c0 <_ZdlPv@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    bd17:	48 8b 5c 24 60       	mov    0x60(%rsp),%rbx
    bd1c:	4c 8b 74 24 68       	mov    0x68(%rsp),%r14
    bd21:	4c 39 f3             	cmp    %r14,%rbx
    bd24:	0f 85 b3 00 00 00    	jne    bddd <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1bed>
	if (__p)
    bd2a:	48 85 db             	test   %rbx,%rbx
    bd2d:	74 08                	je     bd37 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b47>
    bd2f:	48 89 df             	mov    %rbx,%rdi
    bd32:	e8 89 b9 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    bd37:	48 8b bc 24 68 02 00 	mov    0x268(%rsp),%rdi
    bd3e:	00 
	if (__p)
    bd3f:	48 85 ff             	test   %rdi,%rdi
    bd42:	74 05                	je     bd49 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b59>
    bd44:	e8 77 b9 00 00       	callq  176c0 <_ZdlPv@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    bd49:	48 8b 9c 24 50 02 00 	mov    0x250(%rsp),%rbx
    bd50:	00 
    bd51:	4c 8b b4 24 58 02 00 	mov    0x258(%rsp),%r14
    bd58:	00 
    bd59:	4c 39 f3             	cmp    %r14,%rbx
    bd5c:	0f 85 97 00 00 00    	jne    bdf9 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c09>
	if (__p)
    bd62:	48 85 db             	test   %rbx,%rbx
    bd65:	74 08                	je     bd6f <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b7f>
    bd67:	48 89 df             	mov    %rbx,%rdi
    bd6a:	e8 51 b9 00 00       	callq  176c0 <_ZdlPv@plt>
}
    bd6f:	48 81 c4 18 03 00 00 	add    $0x318,%rsp
    bd76:	5b                   	pop    %rbx
    bd77:	41 5c                	pop    %r12
    bd79:	41 5d                	pop    %r13
    bd7b:	41 5e                	pop    %r14
    bd7d:	41 5f                	pop    %r15
    bd7f:	5d                   	pop    %rbp
    bd80:	c3                   	retq   
    bd81:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    bd88:	0f 1f 84 00 00 00 00 
    bd8f:	00 
    bd90:	48 83 c3 18          	add    $0x18,%rbx
    bd94:	4c 39 f3             	cmp    %r14,%rbx
    bd97:	0f 84 97 00 00 00    	je     be34 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c44>
	_M_deallocate(_M_impl._M_start,
    bd9d:	48 8b 3b             	mov    (%rbx),%rdi
	if (__p)
    bda0:	48 85 ff             	test   %rdi,%rdi
    bda3:	74 eb                	je     bd90 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ba0>
    bda5:	e8 16 b9 00 00       	callq  176c0 <_ZdlPv@plt>
    bdaa:	eb e4                	jmp    bd90 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ba0>
    bdac:	0f 1f 40 00          	nopl   0x0(%rax)
    bdb0:	48 83 c3 18          	add    $0x18,%rbx
    bdb4:	4c 39 f3             	cmp    %r14,%rbx
    bdb7:	0f 84 8d 00 00 00    	je     be4a <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c5a>
	_M_deallocate(_M_impl._M_start,
    bdbd:	48 8b 3b             	mov    (%rbx),%rdi
	if (__p)
    bdc0:	48 85 ff             	test   %rdi,%rdi
    bdc3:	74 eb                	je     bdb0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1bc0>
    bdc5:	e8 f6 b8 00 00       	callq  176c0 <_ZdlPv@plt>
    bdca:	eb e4                	jmp    bdb0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1bc0>
    bdcc:	0f 1f 40 00          	nopl   0x0(%rax)
    bdd0:	48 83 c3 18          	add    $0x18,%rbx
    bdd4:	4c 39 f3             	cmp    %r14,%rbx
    bdd7:	0f 84 83 00 00 00    	je     be60 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c70>
	_M_deallocate(_M_impl._M_start,
    bddd:	48 8b 3b             	mov    (%rbx),%rdi
	if (__p)
    bde0:	48 85 ff             	test   %rdi,%rdi
    bde3:	74 eb                	je     bdd0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1be0>
    bde5:	e8 d6 b8 00 00       	callq  176c0 <_ZdlPv@plt>
    bdea:	eb e4                	jmp    bdd0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1be0>
    bdec:	0f 1f 40 00          	nopl   0x0(%rax)
    bdf0:	48 83 c3 18          	add    $0x18,%rbx
    bdf4:	4c 39 f3             	cmp    %r14,%rbx
    bdf7:	74 7a                	je     be73 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c83>
	_M_deallocate(_M_impl._M_start,
    bdf9:	48 8b 3b             	mov    (%rbx),%rdi
	if (__p)
    bdfc:	48 85 ff             	test   %rdi,%rdi
    bdff:	74 ef                	je     bdf0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c00>
    be01:	e8 ba b8 00 00       	callq  176c0 <_ZdlPv@plt>
    be06:	eb e8                	jmp    bdf0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c00>
	_M_deallocate(_M_impl._M_start,
    be08:	48 8b 9c 24 00 02 00 	mov    0x200(%rsp),%rbx
    be0f:	00 
	if (__p)
    be10:	48 85 db             	test   %rbx,%rbx
    be13:	0f 85 c0 fc ff ff    	jne    bad9 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x18e9>
    be19:	e9 c3 fc ff ff       	jmpq   bae1 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x18f1>
	_M_deallocate(_M_impl._M_start,
    be1e:	48 8b 9c 24 88 01 00 	mov    0x188(%rsp),%rbx
    be25:	00 
	if (__p)
    be26:	48 85 db             	test   %rbx,%rbx
    be29:	0f 85 d0 fc ff ff    	jne    baff <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x190f>
    be2f:	e9 d3 fc ff ff       	jmpq   bb07 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1917>
	_M_deallocate(_M_impl._M_start,
    be34:	48 8b 9c 24 38 02 00 	mov    0x238(%rsp),%rbx
    be3b:	00 
	if (__p)
    be3c:	48 85 db             	test   %rbx,%rbx
    be3f:	0f 85 92 fe ff ff    	jne    bcd7 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ae7>
    be45:	e9 95 fe ff ff       	jmpq   bcdf <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1aef>
	_M_deallocate(_M_impl._M_start,
    be4a:	48 8b 9c 24 20 02 00 	mov    0x220(%rsp),%rbx
    be51:	00 
	if (__p)
    be52:	48 85 db             	test   %rbx,%rbx
    be55:	0f 85 a2 fe ff ff    	jne    bcfd <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b0d>
    be5b:	e9 a5 fe ff ff       	jmpq   bd05 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b15>
	_M_deallocate(_M_impl._M_start,
    be60:	48 8b 5c 24 60       	mov    0x60(%rsp),%rbx
	if (__p)
    be65:	48 85 db             	test   %rbx,%rbx
    be68:	0f 85 c1 fe ff ff    	jne    bd2f <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b3f>
    be6e:	e9 c4 fe ff ff       	jmpq   bd37 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b47>
	_M_deallocate(_M_impl._M_start,
    be73:	48 8b 9c 24 50 02 00 	mov    0x250(%rsp),%rbx
    be7a:	00 
	if (__p)
    be7b:	48 85 db             	test   %rbx,%rbx
    be7e:	0f 85 e3 fe ff ff    	jne    bd67 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b77>
    be84:	e9 e6 fe ff ff       	jmpq   bd6f <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b7f>
    be89:	49 89 c5             	mov    %rax,%r13
    be8c:	48 89 c7             	mov    %rax,%rdi
    be8f:	48 83 c7 04          	add    $0x4,%rdi
      for (; __first != __last; ++__first)
    be93:	48 83 c3 fc          	add    $0xfffffffffffffffc,%rbx
	*__first = __tmp;
    be97:	31 f6                	xor    %esi,%esi
    be99:	48 89 da             	mov    %rbx,%rdx
    be9c:	e8 ef ba 00 00       	callq  17990 <memset@plt>
    bea1:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
        for (size_t j = 0; j < cols; ++j) {
    bea6:	49 39 cf             	cmp    %rcx,%r15
    bea9:	0f 84 ec ea ff ff    	je     a99b <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7ab>
    beaf:	49 83 fe 01          	cmp    $0x1,%r14
    beb3:	4c 89 f0             	mov    %r14,%rax
    beb6:	48 83 d0 00          	adc    $0x0,%rax
    beba:	48 83 fd 01          	cmp    $0x1,%rbp
    bebe:	48 83 d5 00          	adc    $0x0,%rbp
    bec2:	89 c1                	mov    %eax,%ecx
    bec4:	83 e1 03             	and    $0x3,%ecx
    bec7:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
    becb:	4d 89 e8             	mov    %r13,%r8
    bece:	49 8d 55 0c          	lea    0xc(%r13),%rdx
    bed2:	4a 8d 34 b5 00 00 00 	lea    0x0(,%r14,4),%rsi
    bed9:	00 
    beda:	31 ff                	xor    %edi,%edi
    bedc:	4c 8b bc 24 98 00 00 	mov    0x98(%rsp),%r15
    bee3:	00 
    bee4:	eb 1c                	jmp    bf02 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d12>
    bee6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    beed:	00 00 00 
    bef0:	48 ff c7             	inc    %rdi
    bef3:	48 01 f2             	add    %rsi,%rdx
    bef6:	49 01 f0             	add    %rsi,%r8
    bef9:	48 39 ef             	cmp    %rbp,%rdi
    befc:	0f 84 a1 ea ff ff    	je     a9a3 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7b3>
    bf02:	49 83 fe 04          	cmp    $0x4,%r14
            for (size_t i = 0; i < rows; ++i) {
    bf06:	73 08                	jae    bf10 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d20>
    bf08:	45 31 c9             	xor    %r9d,%r9d
    bf0b:	eb 62                	jmp    bf6f <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d7f>
    bf0d:	0f 1f 00             	nopl   (%rax)
    bf10:	4d 89 e2             	mov    %r12,%r10
    bf13:	45 31 c9             	xor    %r9d,%r9d
    bf16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    bf1d:	00 00 00 
	return *(this->_M_impl._M_start + __n);
    bf20:	4d 8b 1a             	mov    (%r10),%r11
                flattened[j * rows + i] = data[i][j];
    bf23:	f3 41 0f 10 04 bb    	movss  (%r11,%rdi,4),%xmm0
    bf29:	f3 42 0f 11 44 8a f4 	movss  %xmm0,-0xc(%rdx,%r9,4)
    bf30:	4d 8b 5a 18          	mov    0x18(%r10),%r11
    bf34:	f3 41 0f 10 04 bb    	movss  (%r11,%rdi,4),%xmm0
    bf3a:	f3 42 0f 11 44 8a f8 	movss  %xmm0,-0x8(%rdx,%r9,4)
    bf41:	4d 8b 5a 30          	mov    0x30(%r10),%r11
    bf45:	f3 41 0f 10 04 bb    	movss  (%r11,%rdi,4),%xmm0
    bf4b:	f3 42 0f 11 44 8a fc 	movss  %xmm0,-0x4(%rdx,%r9,4)
    bf52:	4d 8b 5a 48          	mov    0x48(%r10),%r11
    bf56:	f3 41 0f 10 04 bb    	movss  (%r11,%rdi,4),%xmm0
    bf5c:	f3 42 0f 11 04 8a    	movss  %xmm0,(%rdx,%r9,4)
            for (size_t i = 0; i < rows; ++i) {
    bf62:	49 83 c1 04          	add    $0x4,%r9
    bf66:	49 83 c2 60          	add    $0x60,%r10
    bf6a:	4c 39 c8             	cmp    %r9,%rax
    bf6d:	75 b1                	jne    bf20 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d30>
    bf6f:	48 85 c9             	test   %rcx,%rcx
    bf72:	0f 84 78 ff ff ff    	je     bef0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d00>
    bf78:	4f 8d 14 88          	lea    (%r8,%r9,4),%r10
    bf7c:	4f 8d 0c 49          	lea    (%r9,%r9,2),%r9
    bf80:	4f 8d 0c cc          	lea    (%r12,%r9,8),%r9
    bf84:	45 31 db             	xor    %r11d,%r11d
    bf87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    bf8e:	00 00 
    bf90:	49 8b 19             	mov    (%r9),%rbx
                flattened[j * rows + i] = data[i][j];
    bf93:	f3 0f 10 04 bb       	movss  (%rbx,%rdi,4),%xmm0
    bf98:	f3 43 0f 11 04 9a    	movss  %xmm0,(%r10,%r11,4)
            for (size_t i = 0; i < rows; ++i) {
    bf9e:	49 ff c3             	inc    %r11
    bfa1:	49 83 c1 18          	add    $0x18,%r9
    bfa5:	4c 39 d9             	cmp    %r11,%rcx
    bfa8:	75 e6                	jne    bf90 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1da0>
    bfaa:	e9 41 ff ff ff       	jmpq   bef0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d00>
    bfaf:	4c 89 c5             	mov    %r8,%rbp
        } else if (rf < rf2) {
    bfb2:	0f 2e ca             	ucomiss %xmm2,%xmm1
    bfb5:	0f 86 dc f0 ff ff    	jbe    b097 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xea7>
    bfbb:	49 89 cd             	mov    %rcx,%r13
    bfbe:	e9 d4 f0 ff ff       	jmpq   b097 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xea7>
	__throw_bad_cast();
    bfc3:	e8 08 b7 00 00       	callq  176d0 <_ZSt16__throw_bad_castv@plt>
    bfc8:	e8 03 b7 00 00       	callq  176d0 <_ZSt16__throw_bad_castv@plt>
    bfcd:	e8 fe b6 00 00       	callq  176d0 <_ZSt16__throw_bad_castv@plt>
    bfd2:	e8 f9 b6 00 00       	callq  176d0 <_ZSt16__throw_bad_castv@plt>
	  __throw_length_error(
    bfd7:	48 8d 3d e5 6d ff ff 	lea    -0x921b(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
    bfde:	e8 8d b5 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
    bfe3:	e8 e8 b6 00 00       	callq  176d0 <_ZSt16__throw_bad_castv@plt>
    bfe8:	48 8d 3d d4 6d ff ff 	lea    -0x922c(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
    bfef:	e8 7c b5 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
    bff4:	48 8d 3d c8 6d ff ff 	lea    -0x9238(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
    bffb:	e8 70 b5 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
	  std::__throw_bad_alloc();
    c000:	e8 9b b6 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
    c005:	e8 96 b6 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
    c00a:	e8 91 b6 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
    c00f:	e8 8c b6 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
    c014:	e8 87 b6 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
    c019:	e8 82 b6 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
    c01e:	48 8d 3d 9e 6d ff ff 	lea    -0x9262(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
    c025:	e8 46 b5 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
    c02a:	48 8d 3d 92 6d ff ff 	lea    -0x926e(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
    c031:	e8 3a b5 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
    c036:	e8 95 b6 00 00       	callq  176d0 <_ZSt16__throw_bad_castv@plt>
    c03b:	e8 90 b6 00 00       	callq  176d0 <_ZSt16__throw_bad_castv@plt>
    c040:	48 89 c3             	mov    %rax,%rbx
    c043:	e9 ff 01 00 00       	jmpq   c247 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2057>
    c048:	48 89 c3             	mov    %rax,%rbx
    c04b:	e9 f7 01 00 00       	jmpq   c247 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2057>
    c050:	48 89 c3             	mov    %rax,%rbx
    c053:	e9 ef 01 00 00       	jmpq   c247 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2057>
    c058:	e9 6a 01 00 00       	jmpq   c1c7 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1fd7>
    c05d:	e9 7e 01 00 00       	jmpq   c1e0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ff0>
    c062:	e9 79 01 00 00       	jmpq   c1e0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ff0>
    c067:	e9 74 01 00 00       	jmpq   c1e0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ff0>
    c06c:	e9 6f 01 00 00       	jmpq   c1e0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ff0>
    c071:	48 89 c3             	mov    %rax,%rbx
    c074:	e9 7c 01 00 00       	jmpq   c1f5 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2005>
    c079:	48 89 c3             	mov    %rax,%rbx
    c07c:	e9 86 01 00 00       	jmpq   c207 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2017>
    c081:	48 89 c3             	mov    %rax,%rbx
    c084:	e9 be 01 00 00       	jmpq   c247 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2057>
    c089:	48 89 c3             	mov    %rax,%rbx
	_M_deallocate(_M_impl._M_start,
    c08c:	48 8b bc 24 48 01 00 	mov    0x148(%rsp),%rdi
    c093:	00 
	if (__p)
    c094:	48 85 ff             	test   %rdi,%rdi
    c097:	74 05                	je     c09e <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1eae>
	::operator delete(__p
    c099:	e8 22 b6 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    c09e:	48 8b bc 24 30 01 00 	mov    0x130(%rsp),%rdi
    c0a5:	00 
	if (__p)
    c0a6:	48 85 ff             	test   %rdi,%rdi
    c0a9:	74 05                	je     c0b0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ec0>
    c0ab:	e8 10 b6 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    c0b0:	48 8b bc 24 18 01 00 	mov    0x118(%rsp),%rdi
    c0b7:	00 
	if (__p)
    c0b8:	48 85 ff             	test   %rdi,%rdi
    c0bb:	74 0a                	je     c0c7 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ed7>
    c0bd:	e8 fe b5 00 00       	callq  176c0 <_ZdlPv@plt>
    c0c2:	eb 03                	jmp    c0c7 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ed7>
    c0c4:	48 89 c3             	mov    %rax,%rbx
    c0c7:	48 8b bc 24 00 01 00 	mov    0x100(%rsp),%rdi
    c0ce:	00 
    c0cf:	48 85 ff             	test   %rdi,%rdi
    c0d2:	0f 84 7c 01 00 00    	je     c254 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2064>
    c0d8:	e8 e3 b5 00 00       	callq  176c0 <_ZdlPv@plt>
    c0dd:	e9 72 01 00 00       	jmpq   c254 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2064>
    c0e2:	48 89 c3             	mov    %rax,%rbx
    c0e5:	4d 85 e4             	test   %r12,%r12
    c0e8:	0f 84 c1 01 00 00    	je     c2af <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20bf>
    c0ee:	4c 89 e7             	mov    %r12,%rdi
    c0f1:	e8 ca b5 00 00       	callq  176c0 <_ZdlPv@plt>
    c0f6:	e9 b4 01 00 00       	jmpq   c2af <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20bf>
    c0fb:	48 89 c3             	mov    %rax,%rbx
    c0fe:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
    c104:	0f 84 b2 01 00 00    	je     c2bc <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20cc>
    c10a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    c10f:	e8 ac b5 00 00       	callq  176c0 <_ZdlPv@plt>
    c114:	e9 a3 01 00 00       	jmpq   c2bc <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20cc>
    c119:	48 89 c3             	mov    %rax,%rbx
    c11c:	e9 a8 01 00 00       	jmpq   c2c9 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20d9>
    c121:	48 89 c3             	mov    %rax,%rbx
    c124:	e9 ad 01 00 00       	jmpq   c2d6 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20e6>
    c129:	48 89 c3             	mov    %rax,%rbx
	_M_deallocate(_M_impl._M_start,
    c12c:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
	if (__p)
    c131:	48 85 ff             	test   %rdi,%rdi
    c134:	0f 84 b8 01 00 00    	je     c2f2 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2102>
    c13a:	e8 81 b5 00 00       	callq  176c0 <_ZdlPv@plt>
    c13f:	e9 ae 01 00 00       	jmpq   c2f2 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2102>
    c144:	48 89 c3             	mov    %rax,%rbx
    c147:	e9 26 01 00 00       	jmpq   c272 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2082>
    c14c:	48 89 c3             	mov    %rax,%rbx
    c14f:	e9 2d 01 00 00       	jmpq   c281 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2091>
    c154:	48 89 c3             	mov    %rax,%rbx
    c157:	e9 37 01 00 00       	jmpq   c293 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20a3>
    c15c:	48 89 c3             	mov    %rax,%rbx
    c15f:	e9 3e 01 00 00       	jmpq   c2a2 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20b2>
    c164:	48 89 c3             	mov    %rax,%rbx
    c167:	e9 43 01 00 00       	jmpq   c2af <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20bf>
    c16c:	48 89 c3             	mov    %rax,%rbx
    c16f:	e9 48 01 00 00       	jmpq   c2bc <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20cc>
    c174:	48 89 c3             	mov    %rax,%rbx
    c177:	e9 6c 01 00 00       	jmpq   c2e8 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20f8>
    c17c:	48 89 c3             	mov    %rax,%rbx
    c17f:	e9 6e 01 00 00       	jmpq   c2f2 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2102>
    c184:	48 89 c3             	mov    %rax,%rbx
    c187:	e9 d7 00 00 00       	jmpq   c263 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2073>
    c18c:	48 89 c3             	mov    %rax,%rbx
    c18f:	eb 64                	jmp    c1f5 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2005>
    c191:	48 89 c3             	mov    %rax,%rbx
    c194:	eb 71                	jmp    c207 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2017>
    c196:	48 89 c3             	mov    %rax,%rbx
      { return _M_dataplus._M_p; }
    c199:	48 8b bc 24 c8 02 00 	mov    0x2c8(%rsp),%rdi
    c1a0:	00 
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    c1a1:	48 8d 84 24 d8 02 00 	lea    0x2d8(%rsp),%rax
    c1a8:	00 
      { return _M_data() == _M_local_data(); }
    c1a9:	48 39 c7             	cmp    %rax,%rdi
	if (!_M_is_local())
    c1ac:	74 1c                	je     c1ca <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1fda>
    c1ae:	e8 0d b5 00 00       	callq  176c0 <_ZdlPv@plt>
    c1b3:	eb 15                	jmp    c1ca <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1fda>
    c1b5:	eb 10                	jmp    c1c7 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1fd7>
    c1b7:	48 89 c3             	mov    %rax,%rbx
    c1ba:	e9 88 00 00 00       	jmpq   c247 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2057>
    c1bf:	48 89 c3             	mov    %rax,%rbx
    c1c2:	e9 0f 01 00 00       	jmpq   c2d6 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20e6>
    c1c7:	48 89 c3             	mov    %rax,%rbx
      { return _M_dataplus._M_p; }
    c1ca:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    c1cf:	48 8d 44 24 38       	lea    0x38(%rsp),%rax
      { return _M_data() == _M_local_data(); }
    c1d4:	48 39 c7             	cmp    %rax,%rdi
	if (!_M_is_local())
    c1d7:	74 0a                	je     c1e3 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ff3>
    c1d9:	e8 e2 b4 00 00       	callq  176c0 <_ZdlPv@plt>
    c1de:	eb 03                	jmp    c1e3 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ff3>
    c1e0:	48 89 c3             	mov    %rax,%rbx
	_M_deallocate(_M_impl._M_start,
    c1e3:	48 8b bc 24 c0 01 00 	mov    0x1c0(%rsp),%rdi
    c1ea:	00 
	if (__p)
    c1eb:	48 85 ff             	test   %rdi,%rdi
    c1ee:	74 05                	je     c1f5 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2005>
    c1f0:	e8 cb b4 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    c1f5:	48 8b bc 24 e0 01 00 	mov    0x1e0(%rsp),%rdi
    c1fc:	00 
	if (__p)
    c1fd:	48 85 ff             	test   %rdi,%rdi
    c200:	74 05                	je     c207 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2017>
    c202:	e8 b9 b4 00 00       	callq  176c0 <_ZdlPv@plt>
    c207:	48 8d bc 24 00 02 00 	lea    0x200(%rsp),%rdi
    c20e:	00 
}
    c20f:	e8 dc 15 00 00       	callq  d7f0 <_ZNSt6vectorIS_IN7genetic7programESaIS1_EESaIS3_EED2Ev>
    c214:	eb 31                	jmp    c247 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2057>
    c216:	48 89 c3             	mov    %rax,%rbx
    final_programs = new genetic::program[params.population_size]();
    c219:	4d 85 ed             	test   %r13,%r13
    c21c:	74 21                	je     c23f <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x204f>
    c21e:	49 f7 dd             	neg    %r13
    c221:	4d 89 f7             	mov    %r14,%r15
    c224:	49 83 c7 e8          	add    $0xffffffffffffffe8,%r15
    c228:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    c22f:	00 
    c230:	4b 8d 3c 2f          	lea    (%r15,%r13,1),%rdi
    c234:	e8 e7 1a 00 00       	callq  dd20 <_ZN7genetic7programD1Ev>
    c239:	49 83 c5 e0          	add    $0xffffffffffffffe0,%r13
    c23d:	75 f1                	jne    c230 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2040>
    c23f:	4c 89 f7             	mov    %r14,%rdi
    c242:	e8 c9 b4 00 00       	callq  17710 <_ZdaPv@plt>
    c247:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
    c24e:	00 
}
    c24f:	e8 2c 16 00 00       	callq  d880 <_ZN7genetic5paramD2Ev>
    c254:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    c259:	48 85 ff             	test   %rdi,%rdi
    c25c:	74 05                	je     c263 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2073>
    c25e:	e8 5d b4 00 00       	callq  176c0 <_ZdlPv@plt>
    c263:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    c268:	48 85 ff             	test   %rdi,%rdi
    c26b:	74 05                	je     c272 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2082>
    c26d:	e8 4e b4 00 00       	callq  176c0 <_ZdlPv@plt>
    c272:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
    c277:	48 85 ff             	test   %rdi,%rdi
    c27a:	74 05                	je     c281 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2091>
    c27c:	e8 3f b4 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    c281:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
    c288:	00 
	if (__p)
    c289:	48 85 ff             	test   %rdi,%rdi
    c28c:	74 05                	je     c293 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20a3>
    c28e:	e8 2d b4 00 00       	callq  176c0 <_ZdlPv@plt>
    c293:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
    c298:	48 85 ff             	test   %rdi,%rdi
    c29b:	74 05                	je     c2a2 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20b2>
    c29d:	e8 1e b4 00 00       	callq  176c0 <_ZdlPv@plt>
    c2a2:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
    c2a9:	00 
    c2aa:	e8 71 05 00 00       	callq  c820 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED2Ev>
    c2af:	48 8d bc 24 80 02 00 	lea    0x280(%rsp),%rdi
    c2b6:	00 
    c2b7:	e8 64 05 00 00       	callq  c820 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED2Ev>
    c2bc:	48 8d bc 24 98 02 00 	lea    0x298(%rsp),%rdi
    c2c3:	00 
    c2c4:	e8 57 16 00 00       	callq  d920 <_ZNSt4pairISt6vectorIfSaIfEES2_ED2Ev>
    c2c9:	48 8d bc 24 20 02 00 	lea    0x220(%rsp),%rdi
    c2d0:	00 
    c2d1:	e8 7a 16 00 00       	callq  d950 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_ED2Ev>
	_M_deallocate(_M_impl._M_start,
    c2d6:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
    c2dd:	00 
	if (__p)
    c2de:	48 85 ff             	test   %rdi,%rdi
    c2e1:	74 05                	je     c2e8 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20f8>
    c2e3:	e8 d8 b3 00 00       	callq  176c0 <_ZdlPv@plt>
    c2e8:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
    c2ed:	e8 2e 05 00 00       	callq  c820 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED2Ev>
    c2f2:	48 8d bc 24 50 02 00 	lea    0x250(%rsp),%rdi
    c2f9:	00 
    c2fa:	e8 f1 16 00 00       	callq  d9f0 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES2_ED2Ev>
    c2ff:	48 89 df             	mov    %rbx,%rdi
    c302:	e8 69 b6 00 00       	callq  17970 <_Unwind_Resume@plt>
    c307:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    c30e:	00 00 

000000000000c310 <main>:

int main([[maybe_unused]] int argc, char* argv[]) {
    c310:	55                   	push   %rbp
    c311:	41 57                	push   %r15
    c313:	41 56                	push   %r14
    c315:	41 55                	push   %r13
    c317:	41 54                	push   %r12
    c319:	53                   	push   %rbx
    c31a:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    c321:	49 89 f7             	mov    %rsi,%r15
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    c324:	48 8d 44 24 78       	lea    0x78(%rsp),%rax
	: allocator_type(__a), _M_p(__dat) { }
    c329:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    c32e:	48 c7 44 24 28 16 00 	movq   $0x16,0x28(%rsp)
    c335:	00 00 
    c337:	48 8d 5c 24 68       	lea    0x68(%rsp),%rbx
    c33c:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi

	if (__dnew > size_type(_S_local_capacity))
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
    c341:	48 89 df             	mov    %rbx,%rdi
    c344:	31 d2                	xor    %edx,%edx
    c346:	e8 35 b4 00 00       	callq  17780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
    c34b:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
	    _M_capacity(__dnew);
    c350:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
      { _M_allocated_capacity = __capacity; }
    c355:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
	  return __s1;
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    c35a:	0f 10 05 86 65 ff ff 	movups -0x9a7a(%rip),%xmm0        # 28e7 <_IO_stdin_used+0x1f7>
    c361:	0f 11 00             	movups %xmm0,(%rax)
    c364:	48 ba 65 74 65 73 2e 	movabs $0x7673632e73657465,%rdx
    c36b:	63 73 76 
    c36e:	48 89 50 0e          	mov    %rdx,0xe(%rax)
      { _M_string_length = __length; }
    c372:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
      { return _M_dataplus._M_p; }
    c377:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
      { __c1 = __c2; }
    c37c:	c6 04 08 00          	movb   $0x0,(%rax,%rcx,1)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    c380:	48 8d 44 24 38       	lea    0x38(%rsp),%rax
	: allocator_type(__a), _M_p(__dat) { }
    c385:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    c38a:	48 c7 44 24 48 14 00 	movq   $0x14,0x48(%rsp)
    c391:	00 00 
    c393:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
    c398:	48 8d 74 24 48       	lea    0x48(%rsp),%rsi
	    _M_data(_M_create(__dnew, size_type(0)));
    c39d:	31 d2                	xor    %edx,%edx
    c39f:	e8 dc b3 00 00       	callq  17780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
    c3a4:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
	    _M_capacity(__dnew);
    c3a9:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
      { _M_allocated_capacity = __capacity; }
    c3ae:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    c3b3:	0f 10 05 61 67 ff ff 	movups -0x989f(%rip),%xmm0        # 2b1b <_IO_stdin_used+0x42b>
    c3ba:	0f 11 00             	movups %xmm0,(%rax)
    c3bd:	c7 40 10 2e 63 73 76 	movl   $0x7673632e,0x10(%rax)
      { _M_string_length = __length; }
    c3c4:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
      { return _M_dataplus._M_p; }
    c3c9:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
      { __c1 = __c2; }
    c3ce:	c6 04 08 00          	movb   $0x0,(%rax,%rcx,1)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    c3d2:	4c 8d 6c 24 58       	lea    0x58(%rsp),%r13
	: allocator_type(__a), _M_p(__dat) { }
    c3d7:	4c 89 6c 24 48       	mov    %r13,0x48(%rsp)
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    c3dc:	48 c7 44 24 08 15 00 	movq   $0x15,0x8(%rsp)
    c3e3:	00 00 
    c3e5:	4c 8d 74 24 48       	lea    0x48(%rsp),%r14
    c3ea:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
	    _M_data(_M_create(__dnew, size_type(0)));
    c3ef:	4c 89 f7             	mov    %r14,%rdi
    c3f2:	31 d2                	xor    %edx,%edx
    c3f4:	e8 87 b3 00 00       	callq  17780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
    c3f9:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
	    _M_capacity(__dnew);
    c3fe:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
      { _M_allocated_capacity = __capacity; }
    c403:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    c408:	0f 10 05 e5 69 ff ff 	movups -0x961b(%rip),%xmm0        # 2df4 <_IO_stdin_used+0x704>
    c40f:	0f 11 00             	movups %xmm0,(%rax)
    c412:	48 ba 73 69 6e 67 2e 	movabs $0x7673632e676e6973,%rdx
    c419:	63 73 76 
    c41c:	48 89 50 0d          	mov    %rdx,0xd(%rax)
      { _M_string_length = __length; }
    c420:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
      { return _M_dataplus._M_p; }
    c425:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
      { __c1 = __c2; }
    c42a:	c6 04 08 00          	movb   $0x0,(%rax,%rcx,1)
        // Default datasets
        std::string regression_dataset     = "benchmark/diabetes.csv";
        std::string classification_dataset = "benchmark/cancer.csv";
        std::string housing_dataset        = "benchmark/housing.csv";

        std::string arg_dset(argv[1]);
    c42e:	4d 8b 7f 08          	mov    0x8(%r15),%r15
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    c432:	48 8d 6c 24 18       	lea    0x18(%rsp),%rbp
	: allocator_type(__a), _M_p(__dat) { }
    c437:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
	const _CharT* __end = __s ? __s + traits_type::length(__s)
    c43c:	4d 85 ff             	test   %r15,%r15
    c43f:	0f 84 18 01 00 00    	je     c55d <main+0x24d>
	return __builtin_strlen(__s);
    c445:	4c 89 ff             	mov    %r15,%rdi
    c448:	e8 33 b5 00 00       	callq  17980 <strlen@plt>
    c44d:	49 89 c4             	mov    %rax,%r12
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    c450:	48 89 04 24          	mov    %rax,(%rsp)
    c454:	48 89 e8             	mov    %rbp,%rax
	if (__dnew > size_type(_S_local_capacity))
    c457:	49 83 fc 10          	cmp    $0x10,%r12
    c45b:	72 1d                	jb     c47a <main+0x16a>
    c45d:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
    c462:	48 89 e6             	mov    %rsp,%rsi
	    _M_data(_M_create(__dnew, size_type(0)));
    c465:	31 d2                	xor    %edx,%edx
    c467:	e8 14 b3 00 00       	callq  17780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
    c46c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
	    _M_capacity(__dnew);
    c471:	48 8b 0c 24          	mov    (%rsp),%rcx
      { _M_allocated_capacity = __capacity; }
    c475:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
	if (__n == 1)
    c47a:	4d 85 e4             	test   %r12,%r12
    c47d:	74 1c                	je     c49b <main+0x18b>
    c47f:	49 83 fc 01          	cmp    $0x1,%r12
    c483:	75 08                	jne    c48d <main+0x17d>
      { __c1 = __c2; }
    c485:	41 0f b6 0f          	movzbl (%r15),%ecx
    c489:	88 08                	mov    %cl,(%rax)
    c48b:	eb 0e                	jmp    c49b <main+0x18b>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    c48d:	48 89 c7             	mov    %rax,%rdi
    c490:	4c 89 fe             	mov    %r15,%rsi
    c493:	4c 89 e2             	mov    %r12,%rdx
    c496:	e8 25 b5 00 00       	callq  179c0 <memcpy@plt>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
    c49b:	48 8b 04 24          	mov    (%rsp),%rax
      { _M_string_length = __length; }
    c49f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
      { return _M_dataplus._M_p; }
    c4a4:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
      { __c1 = __c2; }
    c4a9:	c6 04 01 00          	movb   $0x0,(%rcx,%rax,1)
    { return __lhs.compare(__rhs) == 0; }
    c4ad:	48 8d 35 56 69 ff ff 	lea    -0x96aa(%rip),%rsi        # 2e0a <_IO_stdin_used+0x71a>
    c4b4:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
    c4b9:	e8 92 b0 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
    c4be:	85 c0                	test   %eax,%eax

        if (arg_dset == "diabetes") {
    c4c0:	74 2d                	je     c4ef <main+0x1df>
    c4c2:	48 8d 35 ed 66 ff ff 	lea    -0x9913(%rip),%rsi        # 2bb6 <_IO_stdin_used+0x4c6>
    c4c9:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
    c4ce:	e8 7d b0 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
    c4d3:	85 c0                	test   %eax,%eax
            run_symbolic_regression(regression_dataset);
        } else if (arg_dset == "cancer") {
    c4d5:	74 22                	je     c4f9 <main+0x1e9>
    c4d7:	48 8d 35 90 65 ff ff 	lea    -0x9a70(%rip),%rsi        # 2a6e <_IO_stdin_used+0x37e>
    c4de:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
    c4e3:	e8 68 b0 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
    c4e8:	4c 89 f3             	mov    %r14,%rbx
    c4eb:	85 c0                	test   %eax,%eax
            run_symbolic_classification(classification_dataset);
        } else if (arg_dset == "housing") {
    c4ed:	75 14                	jne    c503 <main+0x1f3>
    c4ef:	48 89 df             	mov    %rbx,%rdi
    c4f2:	e8 79 b9 ff ff       	callq  7e70 <_Z23run_symbolic_regressionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
    c4f7:	eb 0a                	jmp    c503 <main+0x1f3>
    c4f9:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
            run_symbolic_classification(classification_dataset);
    c4fe:	e8 ed dc ff ff       	callq  a1f0 <_Z27run_symbolic_classificationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
      { return _M_dataplus._M_p; }
    c503:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
      { return _M_data() == _M_local_data(); }
    c508:	48 39 ef             	cmp    %rbp,%rdi
	if (!_M_is_local())
    c50b:	74 05                	je     c512 <main+0x202>
    c50d:	e8 ae b1 00 00       	callq  176c0 <_ZdlPv@plt>
      { return _M_dataplus._M_p; }
    c512:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
      { return _M_data() == _M_local_data(); }
    c517:	4c 39 ef             	cmp    %r13,%rdi
    c51a:	48 8d 5c 24 38       	lea    0x38(%rsp),%rbx
	if (!_M_is_local())
    c51f:	74 05                	je     c526 <main+0x216>
    c521:	e8 9a b1 00 00       	callq  176c0 <_ZdlPv@plt>
      { return _M_dataplus._M_p; }
    c526:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
      { return _M_data() == _M_local_data(); }
    c52b:	48 39 df             	cmp    %rbx,%rdi
    c52e:	48 8d 5c 24 78       	lea    0x78(%rsp),%rbx
	if (!_M_is_local())
    c533:	74 05                	je     c53a <main+0x22a>
    c535:	e8 86 b1 00 00       	callq  176c0 <_ZdlPv@plt>
      { return _M_dataplus._M_p; }
    c53a:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
      { return _M_data() == _M_local_data(); }
    c53f:	48 39 df             	cmp    %rbx,%rdi
	if (!_M_is_local())
    c542:	74 05                	je     c549 <main+0x239>
    c544:	e8 77 b1 00 00       	callq  176c0 <_ZdlPv@plt>
    c549:	31 c0                	xor    %eax,%eax
        return 0;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
        return 1;
    }
}
    c54b:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
    c552:	5b                   	pop    %rbx
    c553:	41 5c                	pop    %r12
    c555:	41 5d                	pop    %r13
    c557:	41 5e                	pop    %r14
    c559:	41 5f                	pop    %r15
    c55b:	5d                   	pop    %rbp
    c55c:	c3                   	retq   
	  std::__throw_logic_error(__N("basic_string::"
    c55d:	48 8d 3d b3 67 ff ff 	lea    -0x984d(%rip),%rdi        # 2d17 <_IO_stdin_used+0x627>
    c564:	e8 67 b2 00 00       	callq  177d0 <_ZSt19__throw_logic_errorPKc@plt>
    c569:	49 89 d6             	mov    %rdx,%r14
    c56c:	48 89 c3             	mov    %rax,%rbx
      { return _M_dataplus._M_p; }
    c56f:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
      { return _M_data() == _M_local_data(); }
    c574:	48 39 ef             	cmp    %rbp,%rdi
	if (!_M_is_local())
    c577:	74 25                	je     c59e <main+0x28e>
    c579:	e8 42 b1 00 00       	callq  176c0 <_ZdlPv@plt>
    c57e:	eb 1e                	jmp    c59e <main+0x28e>
    c580:	49 89 d6             	mov    %rdx,%r14
    c583:	48 89 c3             	mov    %rax,%rbx
    c586:	eb 25                	jmp    c5ad <main+0x29d>
    c588:	49 89 d6             	mov    %rdx,%r14
    c58b:	48 89 c3             	mov    %rax,%rbx
    c58e:	eb 31                	jmp    c5c1 <main+0x2b1>
    c590:	49 89 d6             	mov    %rdx,%r14
    c593:	48 89 c3             	mov    %rax,%rbx
    c596:	eb 3d                	jmp    c5d5 <main+0x2c5>
    c598:	49 89 d6             	mov    %rdx,%r14
    c59b:	48 89 c3             	mov    %rax,%rbx
      { return _M_dataplus._M_p; }
    c59e:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
      { return _M_data() == _M_local_data(); }
    c5a3:	4c 39 ef             	cmp    %r13,%rdi
	if (!_M_is_local())
    c5a6:	74 05                	je     c5ad <main+0x29d>
    c5a8:	e8 13 b1 00 00       	callq  176c0 <_ZdlPv@plt>
      { return _M_dataplus._M_p; }
    c5ad:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
      { return _M_data() == _M_local_data(); }
    c5b2:	48 8d 44 24 38       	lea    0x38(%rsp),%rax
    c5b7:	48 39 c7             	cmp    %rax,%rdi
	if (!_M_is_local())
    c5ba:	74 05                	je     c5c1 <main+0x2b1>
    c5bc:	e8 ff b0 00 00       	callq  176c0 <_ZdlPv@plt>
      { return _M_dataplus._M_p; }
    c5c1:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
      { return _M_data() == _M_local_data(); }
    c5c6:	48 8d 44 24 78       	lea    0x78(%rsp),%rax
    c5cb:	48 39 c7             	cmp    %rax,%rdi
	if (!_M_is_local())
    c5ce:	74 05                	je     c5d5 <main+0x2c5>
    c5d0:	e8 eb b0 00 00       	callq  176c0 <_ZdlPv@plt>
    } catch (const std::exception& e) {
    c5d5:	41 83 fe 01          	cmp    $0x1,%r14d
    c5d9:	75 5a                	jne    c635 <main+0x325>
    c5db:	48 89 df             	mov    %rbx,%rdi
    c5de:	e8 cd b0 00 00       	callq  176b0 <__cxa_begin_catch@plt>
    c5e3:	48 89 c3             	mov    %rax,%rbx
	__ostream_insert(__out, __s,
    c5e6:	48 8b 3d e3 c7 00 00 	mov    0xc7e3(%rip),%rdi        # 18dd0 <_ZSt4cerr@GLIBCXX_3.4>
    c5ed:	48 8d 35 0a 63 ff ff 	lea    -0x9cf6(%rip),%rsi        # 28fe <_IO_stdin_used+0x20e>
    c5f4:	ba 07 00 00 00       	mov    $0x7,%edx
    c5f9:	e8 02 b1 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
        std::cerr << "Error: " << e.what() << std::endl;
    c5fe:	48 8b 03             	mov    (%rbx),%rax
    c601:	48 89 df             	mov    %rbx,%rdi
    c604:	ff 50 10             	callq  *0x10(%rax)
    c607:	48 8b 3d c2 c7 00 00 	mov    0xc7c2(%rip),%rdi        # 18dd0 <_ZSt4cerr@GLIBCXX_3.4>
    c60e:	48 89 c6             	mov    %rax,%rsi
    c611:	e8 3a b1 00 00       	callq  17750 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
	return __pf(*this);
    c616:	48 89 c7             	mov    %rax,%rdi
    c619:	e8 a2 af 00 00       	callq  175c0 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@plt>
    }
    c61e:	e8 9d b1 00 00       	callq  177c0 <__cxa_end_catch@plt>
    c623:	b8 01 00 00 00       	mov    $0x1,%eax
    c628:	e9 1e ff ff ff       	jmpq   c54b <main+0x23b>
    c62d:	48 89 c3             	mov    %rax,%rbx
    c630:	e8 8b b1 00 00       	callq  177c0 <__cxa_end_catch@plt>
    c635:	48 89 df             	mov    %rbx,%rdi
    c638:	e8 33 b3 00 00       	callq  17970 <_Unwind_Resume@plt>
    c63d:	48 89 c7             	mov    %rax,%rdi
    c640:	e8 3b 02 00 00       	callq  c880 <__clang_call_terminate>
    c645:	cc                   	int3   
    c646:	cc                   	int3   
    c647:	cc                   	int3   
    c648:	cc                   	int3   
    c649:	cc                   	int3   
    c64a:	cc                   	int3   
    c64b:	cc                   	int3   
    c64c:	cc                   	int3   
    c64d:	cc                   	int3   
    c64e:	cc                   	int3   
    c64f:	cc                   	int3   

000000000000c650 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
   
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
    c650:	41 57                	push   %r15
    c652:	41 56                	push   %r14
    c654:	41 55                	push   %r13
    c656:	41 54                	push   %r12
    c658:	53                   	push   %rbx
    c659:	49 89 d6             	mov    %rdx,%r14
    c65c:	49 89 f7             	mov    %rsi,%r15
    c65f:	48 89 fb             	mov    %rdi,%rbx
	return __builtin_strlen(__s);
    c662:	48 89 f7             	mov    %rsi,%rdi
    c665:	e8 16 b3 00 00       	callq  17980 <strlen@plt>
    c66a:	49 89 c4             	mov    %rax,%r12
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    c66d:	4c 8d 6b 10          	lea    0x10(%rbx),%r13
	: allocator_type(__a), _M_p(__dat) { }
    c671:	4c 89 2b             	mov    %r13,(%rbx)
      { _M_string_length = __length; }
    c674:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
    c67b:	00 
      { __c1 = __c2; }
    c67c:	c6 43 10 00          	movb   $0x0,0x10(%rbx)
    c680:	49 8b 76 08          	mov    0x8(%r14),%rsi
	rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str(_Alloc_traits::_S_select_on_copy(
          __rhs.get_allocator()));
      __str.reserve(__len + __rhs.size());
    c684:	48 01 c6             	add    %rax,%rsi
    c687:	48 89 df             	mov    %rbx,%rdi
    c68a:	e8 51 af 00 00       	callq  175e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm@plt>
    c68f:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
    c696:	ff ff 3f 
	if (this->max_size() - (this->size() - __n1) < __n2)
    c699:	48 2b 43 08          	sub    0x8(%rbx),%rax
    c69d:	4c 39 e0             	cmp    %r12,%rax
    c6a0:	72 2a                	jb     c6cc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_+0x7c>
	return _M_append(__s, __n);
    c6a2:	48 89 df             	mov    %rbx,%rdi
    c6a5:	4c 89 fe             	mov    %r15,%rsi
    c6a8:	4c 89 e2             	mov    %r12,%rdx
    c6ab:	e8 d0 ae 00 00       	callq  17580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
      { return _M_dataplus._M_p; }
    c6b0:	49 8b 36             	mov    (%r14),%rsi
      { return _M_string_length; }
    c6b3:	49 8b 56 08          	mov    0x8(%r14),%rdx
      { return _M_append(__str._M_data(), __str.size()); }
    c6b7:	48 89 df             	mov    %rbx,%rdi
    c6ba:	e8 c1 ae 00 00       	callq  17580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }
    c6bf:	48 89 d8             	mov    %rbx,%rax
    c6c2:	5b                   	pop    %rbx
    c6c3:	41 5c                	pop    %r12
    c6c5:	41 5d                	pop    %r13
    c6c7:	41 5e                	pop    %r14
    c6c9:	41 5f                	pop    %r15
    c6cb:	c3                   	retq   
	  __throw_length_error(__N(__s));
    c6cc:	48 8d 3d 75 65 ff ff 	lea    -0x9a8b(%rip),%rdi        # 2c48 <_IO_stdin_used+0x558>
    c6d3:	e8 98 ae 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
    c6d8:	49 89 c6             	mov    %rax,%r14
      { return _M_dataplus._M_p; }
    c6db:	48 8b 3b             	mov    (%rbx),%rdi
      { return _M_data() == _M_local_data(); }
    c6de:	4c 39 ef             	cmp    %r13,%rdi
	if (!_M_is_local())
    c6e1:	74 05                	je     c6e8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_+0x98>
    c6e3:	e8 d8 af 00 00       	callq  176c0 <_ZdlPv@plt>
    c6e8:	4c 89 f7             	mov    %r14,%rdi
    c6eb:	e8 80 b2 00 00       	callq  17970 <_Unwind_Resume@plt>

000000000000c6f0 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES2_EC2IRS4_RS2_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairISA_SB_EEEbE4typeELb1EEEOSA_OSB_>:
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
    c6f0:	41 57                	push   %r15
    c6f2:	41 56                	push   %r14
    c6f4:	41 54                	push   %r12
    c6f6:	53                   	push   %rbx
    c6f7:	50                   	push   %rax
    c6f8:	49 89 d6             	mov    %rdx,%r14
    c6fb:	49 89 f7             	mov    %rsi,%r15
    c6fe:	48 89 fb             	mov    %rdi,%rbx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    c701:	48 8b 7e 08          	mov    0x8(%rsi),%rdi
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c705:	48 8b 06             	mov    (%rsi),%rax
    c708:	48 89 f9             	mov    %rdi,%rcx
    c70b:	48 29 c1             	sub    %rax,%rcx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    c70e:	48 c1 f9 03          	sar    $0x3,%rcx
    c712:	49 bc ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%r12
    c719:	aa aa aa 
    c71c:	4c 0f af e1          	imul   %rcx,%r12
	: _M_start(), _M_finish(), _M_end_of_storage()
    c720:	0f 57 c0             	xorps  %xmm0,%xmm0
    c723:	0f 11 03             	movups %xmm0,(%rbx)
    c726:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
    c72d:	00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c72e:	48 29 c7             	sub    %rax,%rdi
    c731:	74 1d                	je     c750 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES2_EC2IRS4_RS2_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairISA_SB_EEEbE4typeELb1EEEOSA_OSB_+0x60>
    c733:	48 b8 56 55 55 55 55 	movabs $0x555555555555556,%rax
    c73a:	55 55 05 
	if (__n > this->_M_max_size())
    c73d:	49 39 c4             	cmp    %rax,%r12
    c740:	0f 83 a4 00 00 00    	jae    c7ea <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES2_EC2IRS4_RS2_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairISA_SB_EEEbE4typeELb1EEEOSA_OSB_+0xfa>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    c746:	e8 15 b0 00 00       	callq  17760 <_Znwm@plt>
    c74b:	48 89 c2             	mov    %rax,%rdx
    c74e:	eb 02                	jmp    c752 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES2_EC2IRS4_RS2_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairISA_SB_EEEbE4typeELb1EEEOSA_OSB_+0x62>
    c750:	31 d2                	xor    %edx,%edx
	this->_M_impl._M_start = this->_M_allocate(__n);
    c752:	48 89 13             	mov    %rdx,(%rbx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    c755:	48 89 53 08          	mov    %rdx,0x8(%rbx)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    c759:	4b 8d 04 64          	lea    (%r12,%r12,2),%rax
    c75d:	48 8d 04 c2          	lea    (%rdx,%rax,8),%rax
    c761:	48 89 43 10          	mov    %rax,0x10(%rbx)
    c765:	49 8b 3f             	mov    (%r15),%rdi
    c768:	49 8b 77 08          	mov    0x8(%r15),%rsi
      return std::__uninitialized_copy<__is_trivial(_ValueType1)
    c76c:	e8 4f 03 00 00       	callq  cac0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_>
	this->_M_impl._M_finish =
    c771:	48 89 43 08          	mov    %rax,0x8(%rbx)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    c775:	49 8b 7e 08          	mov    0x8(%r14),%rdi
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c779:	49 8b 06             	mov    (%r14),%rax
    c77c:	49 89 fc             	mov    %rdi,%r12
    c77f:	49 29 c4             	sub    %rax,%r12
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    c782:	49 c1 fc 02          	sar    $0x2,%r12
	: _M_start(), _M_finish(), _M_end_of_storage()
    c786:	0f 57 c0             	xorps  %xmm0,%xmm0
    c789:	0f 11 43 18          	movups %xmm0,0x18(%rbx)
    c78d:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
    c794:	00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c795:	48 29 c7             	sub    %rax,%rdi
    c798:	74 13                	je     c7ad <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES2_EC2IRS4_RS2_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairISA_SB_EEEbE4typeELb1EEEOSA_OSB_+0xbd>
	if (__n > this->_M_max_size())
    c79a:	4c 89 e0             	mov    %r12,%rax
    c79d:	48 c1 e8 3d          	shr    $0x3d,%rax
    c7a1:	75 4c                	jne    c7ef <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES2_EC2IRS4_RS2_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairISA_SB_EEEbE4typeELb1EEEOSA_OSB_+0xff>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    c7a3:	e8 b8 af 00 00       	callq  17760 <_Znwm@plt>
    c7a8:	49 89 c7             	mov    %rax,%r15
    c7ab:	eb 03                	jmp    c7b0 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES2_EC2IRS4_RS2_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairISA_SB_EEEbE4typeELb1EEEOSA_OSB_+0xc0>
    c7ad:	45 31 ff             	xor    %r15d,%r15d
	this->_M_impl._M_start = this->_M_allocate(__n);
    c7b0:	4c 89 7b 18          	mov    %r15,0x18(%rbx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    c7b4:	4c 89 7b 20          	mov    %r15,0x20(%rbx)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    c7b8:	4b 8d 04 a7          	lea    (%r15,%r12,4),%rax
    c7bc:	48 89 43 28          	mov    %rax,0x28(%rbx)
    c7c0:	49 8b 36             	mov    (%r14),%rsi
    c7c3:	4d 8b 76 08          	mov    0x8(%r14),%r14
	  if (_Num)
    c7c7:	49 29 f6             	sub    %rsi,%r14
    c7ca:	74 0b                	je     c7d7 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES2_EC2IRS4_RS2_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairISA_SB_EEEbE4typeELb1EEEOSA_OSB_+0xe7>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    c7cc:	4c 89 ff             	mov    %r15,%rdi
    c7cf:	4c 89 f2             	mov    %r14,%rdx
    c7d2:	e8 89 b1 00 00       	callq  17960 <memmove@plt>
	  return __result + _Num;
    c7d7:	4d 01 f7             	add    %r14,%r15
	this->_M_impl._M_finish =
    c7da:	4c 89 7b 20          	mov    %r15,0x20(%rbx)
    c7de:	48 83 c4 08          	add    $0x8,%rsp
    c7e2:	5b                   	pop    %rbx
    c7e3:	41 5c                	pop    %r12
    c7e5:	41 5e                	pop    %r14
    c7e7:	41 5f                	pop    %r15
    c7e9:	c3                   	retq   
	  std::__throw_bad_alloc();
    c7ea:	e8 b1 ae 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
    c7ef:	e8 ac ae 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
    c7f4:	49 89 c6             	mov    %rax,%r14
	_M_deallocate(_M_impl._M_start,
    c7f7:	48 8b 3b             	mov    (%rbx),%rdi
	if (__p)
    c7fa:	48 85 ff             	test   %rdi,%rdi
    c7fd:	74 05                	je     c804 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES2_EC2IRS4_RS2_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairISA_SB_EEEbE4typeELb1EEEOSA_OSB_+0x114>
	::operator delete(__p
    c7ff:	e8 bc ae 00 00       	callq  176c0 <_ZdlPv@plt>
    c804:	4c 89 f7             	mov    %r14,%rdi
    c807:	e8 64 b1 00 00       	callq  17970 <_Unwind_Resume@plt>
    c80c:	49 89 c6             	mov    %rax,%r14
    c80f:	48 89 df             	mov    %rbx,%rdi
    c812:	e8 09 00 00 00       	callq  c820 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED2Ev>
    c817:	4c 89 f7             	mov    %r14,%rdi
    c81a:	e8 51 b1 00 00       	callq  17970 <_Unwind_Resume@plt>
    c81f:	cc                   	int3   

000000000000c820 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED2Ev>:
      {
    c820:	41 57                	push   %r15
    c822:	41 56                	push   %r14
    c824:	53                   	push   %rbx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    c825:	48 8b 1f             	mov    (%rdi),%rbx
    c828:	4c 8b 7f 08          	mov    0x8(%rdi),%r15
    c82c:	4c 39 fb             	cmp    %r15,%rbx
    c82f:	74 2a                	je     c85b <_ZNSt6vectorIS_IfSaIfEESaIS1_EED2Ev+0x3b>
    c831:	49 89 fe             	mov    %rdi,%r14
    c834:	eb 13                	jmp    c849 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED2Ev+0x29>
    c836:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    c83d:	00 00 00 
    c840:	48 83 c3 18          	add    $0x18,%rbx
    c844:	4c 39 fb             	cmp    %r15,%rbx
    c847:	74 0f                	je     c858 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED2Ev+0x38>
	_M_deallocate(_M_impl._M_start,
    c849:	48 8b 3b             	mov    (%rbx),%rdi
	if (__p)
    c84c:	48 85 ff             	test   %rdi,%rdi
    c84f:	74 ef                	je     c840 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED2Ev+0x20>
    c851:	e8 6a ae 00 00       	callq  176c0 <_ZdlPv@plt>
    c856:	eb e8                	jmp    c840 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED2Ev+0x20>
	_M_deallocate(_M_impl._M_start,
    c858:	49 8b 1e             	mov    (%r14),%rbx
	if (__p)
    c85b:	48 85 db             	test   %rbx,%rbx
    c85e:	74 0d                	je     c86d <_ZNSt6vectorIS_IfSaIfEESaIS1_EED2Ev+0x4d>
    c860:	48 89 df             	mov    %rbx,%rdi
    c863:	5b                   	pop    %rbx
    c864:	41 5e                	pop    %r14
    c866:	41 5f                	pop    %r15
    c868:	e9 53 ae 00 00       	jmpq   176c0 <_ZdlPv@plt>
      }
    c86d:	5b                   	pop    %rbx
    c86e:	41 5e                	pop    %r14
    c870:	41 5f                	pop    %r15
    c872:	c3                   	retq   
    c873:	cc                   	int3   
    c874:	cc                   	int3   
    c875:	cc                   	int3   
    c876:	cc                   	int3   
    c877:	cc                   	int3   
    c878:	cc                   	int3   
    c879:	cc                   	int3   
    c87a:	cc                   	int3   
    c87b:	cc                   	int3   
    c87c:	cc                   	int3   
    c87d:	cc                   	int3   
    c87e:	cc                   	int3   
    c87f:	cc                   	int3   

000000000000c880 <__clang_call_terminate>:
    c880:	50                   	push   %rax
    c881:	e8 2a ae 00 00       	callq  176b0 <__cxa_begin_catch@plt>
    c886:	e8 05 ad 00 00       	callq  17590 <_ZSt9terminatev@plt>
    c88b:	cc                   	int3   
    c88c:	cc                   	int3   
    c88d:	cc                   	int3   
    c88e:	cc                   	int3   
    c88f:	cc                   	int3   

000000000000c890 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
    {
    c890:	55                   	push   %rbp
    c891:	41 57                	push   %r15
    c893:	41 56                	push   %r14
    c895:	41 55                	push   %r13
    c897:	41 54                	push   %r12
    c899:	53                   	push   %rbx
    c89a:	48 83 ec 28          	sub    $0x28,%rsp
    c89e:	48 bd f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%rbp
    c8a5:	ff ff 7f 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    c8a8:	4c 8b 07             	mov    (%rdi),%r8
    c8ab:	4c 8b 67 08          	mov    0x8(%rdi),%r12
    c8af:	4c 89 e0             	mov    %r12,%rax
    c8b2:	4c 29 c0             	sub    %r8,%rax
	if (max_size() - size() < __n)
    c8b5:	48 39 e8             	cmp    %rbp,%rax
    c8b8:	0f 84 c2 01 00 00    	je     ca80 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x1f0>
    c8be:	49 89 d5             	mov    %rdx,%r13
    c8c1:	49 89 f7             	mov    %rsi,%r15
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    c8c4:	48 c1 f8 03          	sar    $0x3,%rax
    c8c8:	48 b9 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rcx
    c8cf:	aa aa aa 
    c8d2:	48 0f af c1          	imul   %rcx,%rax
	const size_type __len = size() + (std::max)(size(), __n);
    c8d6:	48 83 f8 01          	cmp    $0x1,%rax
    c8da:	48 89 c2             	mov    %rax,%rdx
    c8dd:	48 83 d2 00          	adc    $0x0,%rdx
    c8e1:	4c 8d 0c 02          	lea    (%rdx,%rax,1),%r9
    c8e5:	48 be 55 55 55 55 55 	movabs $0x555555555555555,%rsi
    c8ec:	55 55 05 
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    c8ef:	49 39 f1             	cmp    %rsi,%r9
    c8f2:	4c 0f 43 ce          	cmovae %rsi,%r9
	const size_type __len = size() + (std::max)(size(), __n);
    c8f6:	48 01 c2             	add    %rax,%rdx
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    c8f9:	4c 0f 42 ce          	cmovb  %rsi,%r9
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
    c8fd:	4c 89 fb             	mov    %r15,%rbx
    c900:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
    c905:	4c 29 c3             	sub    %r8,%rbx
    c908:	48 c1 fb 03          	sar    $0x3,%rbx
    c90c:	48 0f af d9          	imul   %rcx,%rbx
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c910:	4d 85 c9             	test   %r9,%r9
    c913:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    c918:	4c 89 4c 24 18       	mov    %r9,0x18(%rsp)
    c91d:	74 13                	je     c932 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa2>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    c91f:	4a 8d 04 cd 00 00 00 	lea    0x0(,%r9,8),%rax
    c926:	00 
    c927:	48 8d 3c 40          	lea    (%rax,%rax,2),%rdi
    c92b:	e8 30 ae 00 00       	callq  17760 <_Znwm@plt>
    c930:	eb 02                	jmp    c934 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>
    c932:	31 c0                	xor    %eax,%eax
				   __new_start + __elems_before,
    c934:	48 8d 0c 5b          	lea    (%rbx,%rbx,2),%rcx
    c938:	4c 8d 34 c8          	lea    (%rax,%rcx,8),%r14
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    c93c:	49 8b 5d 08          	mov    0x8(%r13),%rbx
	: _M_start(), _M_finish(), _M_end_of_storage()
    c940:	0f 57 c0             	xorps  %xmm0,%xmm0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c943:	49 2b 5d 00          	sub    0x0(%r13),%rbx
	: _M_start(), _M_finish(), _M_end_of_storage()
    c947:	0f 11 04 c8          	movups %xmm0,(%rax,%rcx,8)
    c94b:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    c950:	48 c7 44 c8 10 00 00 	movq   $0x0,0x10(%rax,%rcx,8)
    c957:	00 00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c959:	74 4a                	je     c9a5 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x115>
	if (__n > this->_M_max_size())
    c95b:	48 83 c5 04          	add    $0x4,%rbp
    c95f:	48 39 eb             	cmp    %rbp,%rbx
    c962:	0f 87 24 01 00 00    	ja     ca8c <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x1fc>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    c968:	48 89 df             	mov    %rbx,%rdi
    c96b:	e8 f0 ad 00 00       	callq  17760 <_Znwm@plt>
    c970:	48 89 c5             	mov    %rax,%rbp
      : _M_current(__i) { }
    c973:	49 8b 75 00          	mov    0x0(%r13),%rsi
    c977:	4d 8b 6d 08          	mov    0x8(%r13),%r13
	this->_M_impl._M_start = this->_M_allocate(__n);
    c97b:	49 89 06             	mov    %rax,(%r14)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    c97e:	49 8d 46 08          	lea    0x8(%r14),%rax
    c982:	49 89 6e 08          	mov    %rbp,0x8(%r14)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    c986:	48 01 eb             	add    %rbp,%rbx
    c989:	49 89 5e 10          	mov    %rbx,0x10(%r14)
	  if (_Num)
    c98d:	49 29 f5             	sub    %rsi,%r13
    c990:	74 24                	je     c9b6 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x126>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    c992:	48 89 ef             	mov    %rbp,%rdi
    c995:	4c 89 ea             	mov    %r13,%rdx
    c998:	48 89 c3             	mov    %rax,%rbx
    c99b:	e8 c0 af 00 00       	callq  17960 <memmove@plt>
    c9a0:	48 89 d8             	mov    %rbx,%rax
    c9a3:	eb 11                	jmp    c9b6 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x126>
	this->_M_impl._M_finish = this->_M_impl._M_start;
    c9a5:	49 8d 46 08          	lea    0x8(%r14),%rax
    c9a9:	41 0f 11 06          	movups %xmm0,(%r14)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    c9ad:	49 89 5e 10          	mov    %rbx,0x10(%r14)
    c9b1:	45 31 ed             	xor    %r13d,%r13d
    c9b4:	31 ed                	xor    %ebp,%ebp
    c9b6:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
	  return __result + _Num;
    c9bb:	49 01 ed             	add    %rbp,%r13
	this->_M_impl._M_finish =
    c9be:	4c 89 28             	mov    %r13,(%rax)
    c9c1:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
    c9c6:	4c 89 eb             	mov    %r13,%rbx
    c9c9:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
    c9ce:	4c 39 ff             	cmp    %r15,%rdi
    c9d1:	74 33                	je     ca06 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x176>
    c9d3:	0f 57 c0             	xorps  %xmm0,%xmm0
    c9d6:	4c 89 eb             	mov    %r13,%rbx
    c9d9:	48 89 f8             	mov    %rdi,%rax
    c9dc:	0f 1f 40 00          	nopl   0x0(%rax)
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
    c9e0:	0f 10 08             	movups (%rax),%xmm1
    c9e3:	0f 11 0b             	movups %xmm1,(%rbx)
	  _M_end_of_storage(__x._M_end_of_storage)
    c9e6:	48 8b 48 10          	mov    0x10(%rax),%rcx
    c9ea:	48 89 4b 10          	mov    %rcx,0x10(%rbx)
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
    c9ee:	0f 11 00             	movups %xmm0,(%rax)
    c9f1:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    c9f8:	00 
    c9f9:	48 83 c3 18          	add    $0x18,%rbx
    c9fd:	48 83 c0 18          	add    $0x18,%rax
    ca01:	4c 39 f8             	cmp    %r15,%rax
    ca04:	75 da                	jne    c9e0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x150>
	      ++__new_finish;
    ca06:	48 83 c3 18          	add    $0x18,%rbx
    ca0a:	4d 39 fc             	cmp    %r15,%r12
    ca0d:	74 39                	je     ca48 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x1b8>
    ca0f:	0f 57 c0             	xorps  %xmm0,%xmm0
    ca12:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    ca19:	1f 84 00 00 00 00 00 
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
    ca20:	41 0f 10 0f          	movups (%r15),%xmm1
    ca24:	0f 11 0b             	movups %xmm1,(%rbx)
	  _M_end_of_storage(__x._M_end_of_storage)
    ca27:	49 8b 47 10          	mov    0x10(%r15),%rax
    ca2b:	48 89 43 10          	mov    %rax,0x10(%rbx)
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
    ca2f:	41 0f 11 07          	movups %xmm0,(%r15)
    ca33:	49 c7 47 10 00 00 00 	movq   $0x0,0x10(%r15)
    ca3a:	00 
    ca3b:	48 83 c3 18          	add    $0x18,%rbx
    ca3f:	49 83 c7 18          	add    $0x18,%r15
    ca43:	4d 39 e7             	cmp    %r12,%r15
    ca46:	75 d8                	jne    ca20 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x190>
	if (__p)
    ca48:	48 85 ff             	test   %rdi,%rdi
    ca4b:	74 05                	je     ca52 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x1c2>
	::operator delete(__p
    ca4d:	e8 6e ac 00 00       	callq  176c0 <_ZdlPv@plt>
      this->_M_impl._M_start = __new_start;
    ca52:	4d 89 2e             	mov    %r13,(%r14)
      this->_M_impl._M_finish = __new_finish;
    ca55:	49 89 5e 08          	mov    %rbx,0x8(%r14)
    ca59:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
      this->_M_impl._M_end_of_storage = __new_start + __len;
    ca5e:	48 8d 04 40          	lea    (%rax,%rax,2),%rax
    ca62:	48 8d 04 c5 00 00 00 	lea    0x0(,%rax,8),%rax
    ca69:	00 
    ca6a:	4c 01 e8             	add    %r13,%rax
    ca6d:	49 89 46 10          	mov    %rax,0x10(%r14)
    }
    ca71:	48 83 c4 28          	add    $0x28,%rsp
    ca75:	5b                   	pop    %rbx
    ca76:	41 5c                	pop    %r12
    ca78:	41 5d                	pop    %r13
    ca7a:	41 5e                	pop    %r14
    ca7c:	41 5f                	pop    %r15
    ca7e:	5d                   	pop    %rbp
    ca7f:	c3                   	retq   
	  __throw_length_error(__N(__s));
    ca80:	48 8d 3d 2b 60 ff ff 	lea    -0x9fd5(%rip),%rdi        # 2ab2 <_IO_stdin_used+0x3c2>
    ca87:	e8 e4 aa 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
	  std::__throw_bad_alloc();
    ca8c:	e8 0f ac 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
	}
    ca91:	48 89 c7             	mov    %rax,%rdi
    ca94:	e8 17 ac 00 00       	callq  176b0 <__cxa_begin_catch@plt>
    ca99:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
	::operator delete(__p
    ca9e:	e8 1d ac 00 00       	callq  176c0 <_ZdlPv@plt>
	  __throw_exception_again;
    caa3:	e8 e8 ac 00 00       	callq  17790 <__cxa_rethrow@plt>
    caa8:	48 89 c3             	mov    %rax,%rbx
	}
    caab:	e8 10 ad 00 00       	callq  177c0 <__cxa_end_catch@plt>
    cab0:	48 89 df             	mov    %rbx,%rdi
    cab3:	e8 b8 ae 00 00       	callq  17970 <_Unwind_Resume@plt>
    cab8:	48 89 c7             	mov    %rax,%rdi
    cabb:	e8 c0 fd ff ff       	callq  c880 <__clang_call_terminate>

000000000000cac0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_>:
        {
    cac0:	55                   	push   %rbp
    cac1:	41 57                	push   %r15
    cac3:	41 56                	push   %r14
    cac5:	41 55                	push   %r13
    cac7:	41 54                	push   %r12
    cac9:	53                   	push   %rbx
    caca:	50                   	push   %rax
    cacb:	48 89 d3             	mov    %rdx,%rbx
    { return __lhs.base() != __rhs.base(); }
    cace:	48 39 f7             	cmp    %rsi,%rdi
	      for (; __first != __last; ++__first, (void)++__cur)
    cad1:	0f 84 b3 00 00 00    	je     cb8a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_+0xca>
    cad7:	49 89 f6             	mov    %rsi,%r14
    cada:	49 89 ff             	mov    %rdi,%r15
    cadd:	31 ed                	xor    %ebp,%ebp
    cadf:	eb 28                	jmp    cb09 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_+0x49>
    cae1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    cae8:	0f 1f 84 00 00 00 00 
    caef:	00 
    caf0:	4d 01 ec             	add    %r13,%r12
	this->_M_impl._M_finish =
    caf3:	4c 89 64 2b 08       	mov    %r12,0x8(%rbx,%rbp,1)
    caf8:	49 8d 04 2f          	lea    (%r15,%rbp,1),%rax
    cafc:	48 83 c0 18          	add    $0x18,%rax
    cb00:	48 83 c5 18          	add    $0x18,%rbp
    cb04:	4c 39 f0             	cmp    %r14,%rax
    cb07:	74 7e                	je     cb87 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_+0xc7>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    cb09:	49 8b 7c 2f 08       	mov    0x8(%r15,%rbp,1),%rdi
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    cb0e:	49 8b 04 2f          	mov    (%r15,%rbp,1),%rax
    cb12:	49 89 fd             	mov    %rdi,%r13
    cb15:	49 29 c5             	sub    %rax,%r13
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    cb18:	49 c1 fd 02          	sar    $0x2,%r13
	: _M_start(), _M_finish(), _M_end_of_storage()
    cb1c:	0f 57 c0             	xorps  %xmm0,%xmm0
    cb1f:	0f 11 04 2b          	movups %xmm0,(%rbx,%rbp,1)
    cb23:	48 c7 44 2b 10 00 00 	movq   $0x0,0x10(%rbx,%rbp,1)
    cb2a:	00 00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    cb2c:	48 29 c7             	sub    %rax,%rdi
    cb2f:	74 1f                	je     cb50 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_+0x90>
	if (__n > this->_M_max_size())
    cb31:	4c 89 e8             	mov    %r13,%rax
    cb34:	48 c1 e8 3d          	shr    $0x3d,%rax
    cb38:	75 62                	jne    cb9c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_+0xdc>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    cb3a:	e8 21 ac 00 00       	callq  17760 <_Znwm@plt>
    cb3f:	49 89 c4             	mov    %rax,%r12
    cb42:	eb 0f                	jmp    cb53 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_+0x93>
    cb44:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
    cb4b:	00 00 00 00 00 
    cb50:	45 31 e4             	xor    %r12d,%r12d
	this->_M_impl._M_start = this->_M_allocate(__n);
    cb53:	4c 89 24 2b          	mov    %r12,(%rbx,%rbp,1)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    cb57:	4c 89 64 2b 08       	mov    %r12,0x8(%rbx,%rbp,1)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    cb5c:	4b 8d 04 ac          	lea    (%r12,%r13,4),%rax
    cb60:	48 89 44 2b 10       	mov    %rax,0x10(%rbx,%rbp,1)
      : _M_current(__i) { }
    cb65:	49 8b 34 2f          	mov    (%r15,%rbp,1),%rsi
    cb69:	4d 8b 6c 2f 08       	mov    0x8(%r15,%rbp,1),%r13
	  if (_Num)
    cb6e:	49 29 f5             	sub    %rsi,%r13
    cb71:	0f 84 79 ff ff ff    	je     caf0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_+0x30>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    cb77:	4c 89 e7             	mov    %r12,%rdi
    cb7a:	4c 89 ea             	mov    %r13,%rdx
    cb7d:	e8 de ad 00 00       	callq  17960 <memmove@plt>
    cb82:	e9 69 ff ff ff       	jmpq   caf0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_+0x30>
	      return __cur;
    cb87:	48 01 eb             	add    %rbp,%rbx
    cb8a:	48 89 d8             	mov    %rbx,%rax
    cb8d:	48 83 c4 08          	add    $0x8,%rsp
    cb91:	5b                   	pop    %rbx
    cb92:	41 5c                	pop    %r12
    cb94:	41 5d                	pop    %r13
    cb96:	41 5e                	pop    %r14
    cb98:	41 5f                	pop    %r15
    cb9a:	5d                   	pop    %rbp
    cb9b:	c3                   	retq   
	  std::__throw_bad_alloc();
    cb9c:	e8 ff aa 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
    cba1:	eb 00                	jmp    cba3 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_+0xe3>
	    }
    cba3:	48 89 c7             	mov    %rax,%rdi
    cba6:	e8 05 ab 00 00       	callq  176b0 <__cxa_begin_catch@plt>
    cbab:	48 85 ed             	test   %rbp,%rbp
    cbae:	75 1a                	jne    cbca <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_+0x10a>
	      __throw_exception_again;
    cbb0:	e8 db ab 00 00       	callq  17790 <__cxa_rethrow@plt>
    cbb5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    cbbc:	00 00 00 00 
    cbc0:	48 83 c3 18          	add    $0x18,%rbx
    cbc4:	48 83 c5 e8          	add    $0xffffffffffffffe8,%rbp
    cbc8:	74 e6                	je     cbb0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_+0xf0>
	_M_deallocate(_M_impl._M_start,
    cbca:	48 8b 3b             	mov    (%rbx),%rdi
	if (__p)
    cbcd:	48 85 ff             	test   %rdi,%rdi
    cbd0:	74 ee                	je     cbc0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_+0x100>
	::operator delete(__p
    cbd2:	e8 e9 aa 00 00       	callq  176c0 <_ZdlPv@plt>
    cbd7:	eb e7                	jmp    cbc0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_+0x100>
    cbd9:	48 89 c3             	mov    %rax,%rbx
	    }
    cbdc:	e8 df ab 00 00       	callq  177c0 <__cxa_end_catch@plt>
    cbe1:	48 89 df             	mov    %rbx,%rdi
    cbe4:	e8 87 ad 00 00       	callq  17970 <_Unwind_Resume@plt>
    cbe9:	48 89 c7             	mov    %rax,%rdi
    cbec:	e8 8f fc ff ff       	callq  c880 <__clang_call_terminate>
    cbf1:	cc                   	int3   
    cbf2:	cc                   	int3   
    cbf3:	cc                   	int3   
    cbf4:	cc                   	int3   
    cbf5:	cc                   	int3   
    cbf6:	cc                   	int3   
    cbf7:	cc                   	int3   
    cbf8:	cc                   	int3   
    cbf9:	cc                   	int3   
    cbfa:	cc                   	int3   
    cbfb:	cc                   	int3   
    cbfc:	cc                   	int3   
    cbfd:	cc                   	int3   
    cbfe:	cc                   	int3   
    cbff:	cc                   	int3   

000000000000cc00 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f>:
    template <typename T> std::pair<T, T> train_test_split(const T& data, float test_size = 0.2) {
    cc00:	55                   	push   %rbp
    cc01:	41 57                	push   %r15
    cc03:	41 56                	push   %r14
    cc05:	41 55                	push   %r13
    cc07:	41 54                	push   %r12
    cc09:	53                   	push   %rbx
    cc0a:	48 83 ec 78          	sub    $0x78,%rsp
    cc0e:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    cc13:	66 0f ef c9          	pxor   %xmm1,%xmm1
    cc17:	66 0f 7f 4c 24 30    	movdqa %xmm1,0x30(%rsp)
    cc1d:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
    cc24:	00 00 
    cc26:	66 0f 7f 4c 24 10    	movdqa %xmm1,0x10(%rsp)
    cc2c:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
    cc33:	00 00 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    cc35:	48 8b 06             	mov    (%rsi),%rax
    cc38:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
    cc3d:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
    cc41:	49 89 cc             	mov    %rcx,%r12
    cc44:	49 29 c4             	sub    %rax,%r12
    cc47:	4d 89 e7             	mov    %r12,%r15
    cc4a:	49 c1 ff 03          	sar    $0x3,%r15
    cc4e:	48 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdx
    cc55:	aa aa aa 
    cc58:	4c 0f af fa          	imul   %rdx,%r15
        size_t test_count  = static_cast<size_t>(data.size() * test_size);
    cc5c:	4d 85 ff             	test   %r15,%r15
    cc5f:	78 07                	js     cc68 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x68>
    cc61:	f3 49 0f 2a ef       	cvtsi2ss %r15,%xmm5
    cc66:	eb 18                	jmp    cc80 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x80>
    cc68:	4c 89 fa             	mov    %r15,%rdx
    cc6b:	48 d1 ea             	shr    %rdx
    cc6e:	44 89 fe             	mov    %r15d,%esi
    cc71:	83 e6 01             	and    $0x1,%esi
    cc74:	48 09 d6             	or     %rdx,%rsi
    cc77:	f3 48 0f 2a ee       	cvtsi2ss %rsi,%xmm5
    cc7c:	f3 0f 58 ed          	addss  %xmm5,%xmm5
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    cc80:	4c 89 fa             	mov    %r15,%rdx
    cc83:	48 c1 ea 3c          	shr    $0x3c,%rdx
    cc87:	0f 85 7d 05 00 00    	jne    d20a <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x60a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    cc8d:	48 39 c1             	cmp    %rax,%rcx
    cc90:	74 31                	je     ccc3 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0xc3>
    cc92:	0f 29 6c 24 60       	movaps %xmm5,0x60(%rsp)
    cc97:	f3 0f 11 44 24 08    	movss  %xmm0,0x8(%rsp)
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    cc9d:	4a 8d 1c fd 00 00 00 	lea    0x0(,%r15,8),%rbx
    cca4:	00 
    cca5:	48 89 df             	mov    %rbx,%rdi
    cca8:	e8 b3 aa 00 00       	callq  17760 <_Znwm@plt>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
    ccad:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	      ++__first;
    ccb4:	48 8d 78 08          	lea    0x8(%rax),%rdi
      if (__n <= 0)
    ccb8:	49 83 fc 18          	cmp    $0x18,%r12
    ccbc:	75 0d                	jne    cccb <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0xcb>
    ccbe:	49 89 c0             	mov    %rax,%r8
    ccc1:	eb 23                	jmp    cce6 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0xe6>
    ccc3:	45 31 c0             	xor    %r8d,%r8d
    ccc6:	e9 b4 00 00 00       	jmpq   cd7f <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x17f>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    cccb:	4e 8d 34 f8          	lea    (%rax,%r15,8),%r14
      for (; __first != __last; ++__first)
    cccf:	48 83 c3 f8          	add    $0xfffffffffffffff8,%rbx
	*__first = __tmp;
    ccd3:	31 f6                	xor    %esi,%esi
    ccd5:	48 89 da             	mov    %rbx,%rdx
    ccd8:	48 89 c3             	mov    %rax,%rbx
    ccdb:	e8 b0 ac 00 00       	callq  17990 <memset@plt>
    cce0:	4c 89 f7             	mov    %r14,%rdi
    cce3:	49 89 d8             	mov    %rbx,%r8
    cce6:	f3 0f 10 44 24 08    	movss  0x8(%rsp),%xmm0
    ccec:	0f 28 6c 24 60       	movaps 0x60(%rsp),%xmm5
				  _ForwardIterator>)
      __glibcxx_function_requires(_ConvertibleConcept<_Tp,
	    typename iterator_traits<_ForwardIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      for (; __first != __last; ++__first)
    ccf1:	48 89 fa             	mov    %rdi,%rdx
    ccf4:	4c 29 c2             	sub    %r8,%rdx
    ccf7:	48 83 c2 f8          	add    $0xfffffffffffffff8,%rdx
    ccfb:	48 83 fa 18          	cmp    $0x18,%rdx
    ccff:	73 07                	jae    cd08 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x108>
    cd01:	31 c0                	xor    %eax,%eax
    cd03:	4c 89 c1             	mov    %r8,%rcx
    cd06:	eb 68                	jmp    cd70 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x170>
    cd08:	48 c1 ea 03          	shr    $0x3,%rdx
    cd0c:	48 ff c2             	inc    %rdx
    cd0f:	48 89 d0             	mov    %rdx,%rax
    cd12:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
    cd16:	49 8d 0c c0          	lea    (%r8,%rax,8),%rcx
    cd1a:	66 0f 6f 25 2e 5a ff 	movdqa -0xa5d2(%rip),%xmm4        # 2750 <_IO_stdin_used+0x60>
    cd21:	ff 
    cd22:	31 f6                	xor    %esi,%esi
    cd24:	66 0f 6f 0d 14 5a ff 	movdqa -0xa5ec(%rip),%xmm1        # 2740 <_IO_stdin_used+0x50>
    cd2b:	ff 
    cd2c:	66 0f 6f 15 ac 5a ff 	movdqa -0xa554(%rip),%xmm2        # 27e0 <_IO_stdin_used+0xf0>
    cd33:	ff 
    cd34:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
    cd3b:	00 00 00 00 00 
    cd40:	66 0f 6f dc          	movdqa %xmm4,%xmm3
    cd44:	66 0f d4 d9          	paddq  %xmm1,%xmm3
	{
	  *__first = __value;
    cd48:	f3 41 0f 7f 24 f0    	movdqu %xmm4,(%r8,%rsi,8)
    cd4e:	f3 41 0f 7f 5c f0 10 	movdqu %xmm3,0x10(%r8,%rsi,8)
	  ++__value;
    cd55:	48 83 c6 04          	add    $0x4,%rsi
    cd59:	66 0f d4 e2          	paddq  %xmm2,%xmm4
    cd5d:	48 39 f0             	cmp    %rsi,%rax
    cd60:	75 de                	jne    cd40 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x140>
      for (; __first != __last; ++__first)
    cd62:	48 39 c2             	cmp    %rax,%rdx
    cd65:	74 18                	je     cd7f <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x17f>
    cd67:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    cd6e:	00 00 
	  *__first = __value;
    cd70:	48 89 01             	mov    %rax,(%rcx)
	  ++__value;
    cd73:	48 ff c0             	inc    %rax
	++_M_current;
    cd76:	48 83 c1 08          	add    $0x8,%rcx
    { return __lhs.base() != __rhs.base(); }
    cd7a:	48 39 f9             	cmp    %rdi,%rcx
      for (; __first != __last; ++__first)
    cd7d:	75 f1                	jne    cd70 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x170>
    cd7f:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
    cd84:	f3 0f 59 e8          	mulss  %xmm0,%xmm5
    cd88:	f3 48 0f 2c c5       	cvttss2si %xmm5,%rax
    cd8d:	48 89 c1             	mov    %rax,%rcx
    cd90:	f3 0f 5c 2d 44 59 ff 	subss  -0xa6bc(%rip),%xmm5        # 26dc <_IO_stdin_used-0x14>
    cd97:	ff 
    cd98:	48 c1 f9 3f          	sar    $0x3f,%rcx
    cd9c:	f3 48 0f 2c dd       	cvttss2si %xmm5,%rbx
    cda1:	48 21 cb             	and    %rcx,%rbx
    cda4:	48 09 c3             	or     %rax,%rbx
    cda7:	49 29 df             	sub    %rbx,%r15
    cdaa:	49 be 55 55 55 55 55 	movabs $0x555555555555555,%r14
    cdb1:	55 55 05 
      if (__n > this->max_size())
    cdb4:	4d 39 f7             	cmp    %r14,%r15
    cdb7:	0f 87 41 04 00 00    	ja     d1fe <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x5fe>
			 - this->_M_impl._M_start); }
    cdbd:	4c 8b 6c 24 30       	mov    0x30(%rsp),%r13
      { return size_type(this->_M_impl._M_end_of_storage
    cdc2:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
			 - this->_M_impl._M_start); }
    cdc7:	4c 29 e8             	sub    %r13,%rax
    cdca:	48 c1 f8 03          	sar    $0x3,%rax
    cdce:	48 b9 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rcx
    cdd5:	aa aa aa 
    cdd8:	48 0f af c1          	imul   %rcx,%rax
      if (this->capacity() < __n)
    cddc:	4c 39 f8             	cmp    %r15,%rax
    cddf:	0f 83 95 00 00 00    	jae    ce7a <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x27a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    cde5:	48 8b 6c 24 38       	mov    0x38(%rsp),%rbp
    cdea:	4a 8d 04 fd 00 00 00 	lea    0x0(,%r15,8),%rax
    cdf1:	00 
    cdf2:	48 8d 3c 40          	lea    (%rax,%rax,2),%rdi
    cdf6:	e8 65 a9 00 00       	callq  17760 <_Znwm@plt>
    cdfb:	49 89 c4             	mov    %rax,%r12
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
    cdfe:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
    ce03:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
      for (; __first != __last; ++__first, (void)++__cur)
    ce08:	48 39 c7             	cmp    %rax,%rdi
    ce0b:	74 46                	je     ce53 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x253>
    ce0d:	31 c9                	xor    %ecx,%ecx
    ce0f:	0f 57 c0             	xorps  %xmm0,%xmm0
    ce12:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    ce19:	1f 84 00 00 00 00 00 
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
    ce20:	f3 0f 6f 0c 0f       	movdqu (%rdi,%rcx,1),%xmm1
    ce25:	f3 41 0f 7f 0c 0c    	movdqu %xmm1,(%r12,%rcx,1)
	  _M_end_of_storage(__x._M_end_of_storage)
    ce2b:	48 8b 54 0f 10       	mov    0x10(%rdi,%rcx,1),%rdx
    ce30:	49 89 54 0c 10       	mov    %rdx,0x10(%r12,%rcx,1)
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
    ce35:	0f 11 04 0f          	movups %xmm0,(%rdi,%rcx,1)
    ce39:	48 c7 44 0f 10 00 00 	movq   $0x0,0x10(%rdi,%rcx,1)
    ce40:	00 00 
    ce42:	48 8d 14 0f          	lea    (%rdi,%rcx,1),%rdx
    ce46:	48 83 c2 18          	add    $0x18,%rdx
    ce4a:	48 83 c1 18          	add    $0x18,%rcx
    ce4e:	48 39 c2             	cmp    %rax,%rdx
    ce51:	75 cd                	jne    ce20 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x220>
    ce53:	4c 29 ed             	sub    %r13,%rbp
	if (__p)
    ce56:	48 85 ff             	test   %rdi,%rdi
    ce59:	74 05                	je     ce60 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x260>
	::operator delete(__p
    ce5b:	e8 60 a8 00 00       	callq  176c0 <_ZdlPv@plt>
	  this->_M_impl._M_start = __tmp;
    ce60:	4c 89 64 24 30       	mov    %r12,0x30(%rsp)
	  this->_M_impl._M_finish = __tmp + __old_size;
    ce65:	4c 01 e5             	add    %r12,%rbp
    ce68:	48 89 6c 24 38       	mov    %rbp,0x38(%rsp)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    ce6d:	4b 8d 04 7f          	lea    (%r15,%r15,2),%rax
    ce71:	49 8d 04 c4          	lea    (%r12,%rax,8),%rax
    ce75:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
      if (__n > this->max_size())
    ce7a:	4c 39 f3             	cmp    %r14,%rbx
    ce7d:	0f 87 7b 03 00 00    	ja     d1fe <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x5fe>
			 - this->_M_impl._M_start); }
    ce83:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
      { return size_type(this->_M_impl._M_end_of_storage
    ce88:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
			 - this->_M_impl._M_start); }
    ce8d:	48 29 e8             	sub    %rbp,%rax
    ce90:	48 c1 f8 03          	sar    $0x3,%rax
    ce94:	48 b9 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rcx
    ce9b:	aa aa aa 
    ce9e:	48 0f af c1          	imul   %rcx,%rax
      if (this->capacity() < __n)
    cea2:	48 39 d8             	cmp    %rbx,%rax
    cea5:	0f 83 8f 00 00 00    	jae    cf3a <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x33a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    ceab:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    ceb0:	48 8d 04 dd 00 00 00 	lea    0x0(,%rbx,8),%rax
    ceb7:	00 
    ceb8:	48 8d 3c 40          	lea    (%rax,%rax,2),%rdi
    cebc:	e8 9f a8 00 00       	callq  17760 <_Znwm@plt>
    cec1:	49 89 c4             	mov    %rax,%r12
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
    cec4:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    cec9:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    cece:	48 39 c7             	cmp    %rax,%rdi
    ced1:	74 40                	je     cf13 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x313>
    ced3:	31 c9                	xor    %ecx,%ecx
    ced5:	0f 57 c0             	xorps  %xmm0,%xmm0
    ced8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    cedf:	00 
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
    cee0:	f3 0f 6f 0c 0f       	movdqu (%rdi,%rcx,1),%xmm1
    cee5:	f3 41 0f 7f 0c 0c    	movdqu %xmm1,(%r12,%rcx,1)
	  _M_end_of_storage(__x._M_end_of_storage)
    ceeb:	48 8b 54 0f 10       	mov    0x10(%rdi,%rcx,1),%rdx
    cef0:	49 89 54 0c 10       	mov    %rdx,0x10(%r12,%rcx,1)
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
    cef5:	0f 11 04 0f          	movups %xmm0,(%rdi,%rcx,1)
    cef9:	48 c7 44 0f 10 00 00 	movq   $0x0,0x10(%rdi,%rcx,1)
    cf00:	00 00 
    cf02:	48 8d 14 0f          	lea    (%rdi,%rcx,1),%rdx
    cf06:	48 83 c2 18          	add    $0x18,%rdx
    cf0a:	48 83 c1 18          	add    $0x18,%rcx
    cf0e:	48 39 c2             	cmp    %rax,%rdx
    cf11:	75 cd                	jne    cee0 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x2e0>
    cf13:	49 29 ed             	sub    %rbp,%r13
	if (__p)
    cf16:	48 85 ff             	test   %rdi,%rdi
    cf19:	74 05                	je     cf20 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x320>
	::operator delete(__p
    cf1b:	e8 a0 a7 00 00       	callq  176c0 <_ZdlPv@plt>
	  this->_M_impl._M_start = __tmp;
    cf20:	4c 89 64 24 10       	mov    %r12,0x10(%rsp)
	  this->_M_impl._M_finish = __tmp + __old_size;
    cf25:	4d 01 e5             	add    %r12,%r13
    cf28:	4c 89 6c 24 18       	mov    %r13,0x18(%rsp)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    cf2d:	48 8d 04 5b          	lea    (%rbx,%rbx,2),%rax
    cf31:	49 8d 04 c4          	lea    (%r12,%rax,8),%rax
    cf35:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
        for (size_t i = 0; i < train_count; ++i) {
    cf3a:	4d 85 ff             	test   %r15,%r15
    cf3d:	0f 84 d9 00 00 00    	je     d01c <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x41c>
    cf43:	45 31 e4             	xor    %r12d,%r12d
    cf46:	eb 24                	jmp    cf6c <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x36c>
    cf48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    cf4f:	00 
	  _M_realloc_insert(end(), __x);
    cf50:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
    cf55:	4c 89 ee             	mov    %r13,%rsi
    cf58:	48 89 ea             	mov    %rbp,%rdx
    cf5b:	e8 30 f9 ff ff       	callq  c890 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
    cf60:	49 ff c4             	inc    %r12
    cf63:	4d 39 e7             	cmp    %r12,%r15
    cf66:	0f 84 b0 00 00 00    	je     d01c <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x41c>
    cf6c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            train.push_back(data[indices[i]]);
    cf71:	4a 8b 04 e0          	mov    (%rax,%r12,8),%rax
	return *(this->_M_impl._M_start + __n);
    cf75:	48 8d 2c 40          	lea    (%rax,%rax,2),%rbp
    cf79:	48 c1 e5 03          	shl    $0x3,%rbp
    cf7d:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
    cf82:	48 03 28             	add    (%rax),%rbp
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    cf85:	4c 8b 6c 24 38       	mov    0x38(%rsp),%r13
    cf8a:	4c 3b 6c 24 40       	cmp    0x40(%rsp),%r13
    cf8f:	74 bf                	je     cf50 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x350>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    cf91:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    cf95:	48 8b 45 00          	mov    0x0(%rbp),%rax
    cf99:	49 89 fe             	mov    %rdi,%r14
    cf9c:	49 29 c6             	sub    %rax,%r14
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    cf9f:	49 c1 fe 02          	sar    $0x2,%r14
	: _M_start(), _M_finish(), _M_end_of_storage()
    cfa3:	0f 57 c0             	xorps  %xmm0,%xmm0
    cfa6:	41 0f 11 45 00       	movups %xmm0,0x0(%r13)
    cfab:	49 c7 45 10 00 00 00 	movq   $0x0,0x10(%r13)
    cfb2:	00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    cfb3:	48 29 c7             	sub    %rax,%rdi
    cfb6:	74 28                	je     cfe0 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x3e0>
	if (__n > this->_M_max_size())
    cfb8:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    cfbf:	ff ff 1f 
    cfc2:	49 39 c6             	cmp    %rax,%r14
    cfc5:	0f 87 29 02 00 00    	ja     d1f4 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x5f4>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    cfcb:	e8 90 a7 00 00       	callq  17760 <_Znwm@plt>
    cfd0:	48 89 c3             	mov    %rax,%rbx
    cfd3:	eb 0d                	jmp    cfe2 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x3e2>
    cfd5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    cfdc:	00 00 00 00 
    cfe0:	31 db                	xor    %ebx,%ebx
	this->_M_impl._M_start = this->_M_allocate(__n);
    cfe2:	49 89 5d 00          	mov    %rbx,0x0(%r13)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    cfe6:	49 89 5d 08          	mov    %rbx,0x8(%r13)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    cfea:	4a 8d 04 b3          	lea    (%rbx,%r14,4),%rax
    cfee:	49 89 45 10          	mov    %rax,0x10(%r13)
      : _M_current(__i) { }
    cff2:	48 8b 75 00          	mov    0x0(%rbp),%rsi
    cff6:	48 8b 6d 08          	mov    0x8(%rbp),%rbp
	  if (_Num)
    cffa:	48 29 f5             	sub    %rsi,%rbp
    cffd:	74 0b                	je     d00a <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x40a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    cfff:	48 89 df             	mov    %rbx,%rdi
    d002:	48 89 ea             	mov    %rbp,%rdx
    d005:	e8 56 a9 00 00       	callq  17960 <memmove@plt>
	  return __result + _Num;
    d00a:	48 01 eb             	add    %rbp,%rbx
	this->_M_impl._M_finish =
    d00d:	49 89 5d 08          	mov    %rbx,0x8(%r13)
	    ++this->_M_impl._M_finish;
    d011:	48 83 44 24 38 18    	addq   $0x18,0x38(%rsp)
    d017:	e9 44 ff ff ff       	jmpq   cf60 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x360>
    d01c:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    d021:	48 8b 01             	mov    (%rcx),%rax
    d024:	48 8b 49 08          	mov    0x8(%rcx),%rcx
    d028:	48 29 c1             	sub    %rax,%rcx
    d02b:	48 c1 f9 03          	sar    $0x3,%rcx
    d02f:	48 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdx
    d036:	aa aa aa 
    d039:	48 0f af ca          	imul   %rdx,%rcx
        for (size_t i = train_count; i < data.size(); ++i) {
    d03d:	49 39 cf             	cmp    %rcx,%r15
    d040:	0f 83 e6 00 00 00    	jae    d12c <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x52c>
    d046:	4c 8d 64 24 10       	lea    0x10(%rsp),%r12
    d04b:	eb 3e                	jmp    d08b <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x48b>
    d04d:	0f 1f 00             	nopl   (%rax)
	  _M_realloc_insert(end(), __x);
    d050:	4c 89 e7             	mov    %r12,%rdi
    d053:	4c 89 ee             	mov    %r13,%rsi
    d056:	48 89 ea             	mov    %rbp,%rdx
    d059:	e8 32 f8 ff ff       	callq  c890 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
    d05e:	49 ff c7             	inc    %r15
    d061:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    d066:	48 8b 01             	mov    (%rcx),%rax
    d069:	48 8b 49 08          	mov    0x8(%rcx),%rcx
    d06d:	48 29 c1             	sub    %rax,%rcx
    d070:	48 c1 f9 03          	sar    $0x3,%rcx
    d074:	48 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdx
    d07b:	aa aa aa 
    d07e:	48 0f af ca          	imul   %rdx,%rcx
    d082:	49 39 cf             	cmp    %rcx,%r15
    d085:	0f 83 a1 00 00 00    	jae    d12c <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x52c>
    d08b:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            test.push_back(data[indices[i]]);
    d090:	4a 8b 0c f9          	mov    (%rcx,%r15,8),%rcx
	return *(this->_M_impl._M_start + __n);
    d094:	48 8d 0c 49          	lea    (%rcx,%rcx,2),%rcx
    d098:	48 8d 2c c8          	lea    (%rax,%rcx,8),%rbp
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    d09c:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
    d0a1:	4c 3b 6c 24 20       	cmp    0x20(%rsp),%r13
    d0a6:	74 a8                	je     d050 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x450>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    d0a8:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    d0ac:	48 8b 45 00          	mov    0x0(%rbp),%rax
    d0b0:	49 89 fe             	mov    %rdi,%r14
    d0b3:	49 29 c6             	sub    %rax,%r14
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    d0b6:	49 c1 fe 02          	sar    $0x2,%r14
	: _M_start(), _M_finish(), _M_end_of_storage()
    d0ba:	0f 57 c0             	xorps  %xmm0,%xmm0
    d0bd:	41 0f 11 45 00       	movups %xmm0,0x0(%r13)
    d0c2:	49 c7 45 10 00 00 00 	movq   $0x0,0x10(%r13)
    d0c9:	00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    d0ca:	48 29 c7             	sub    %rax,%rdi
    d0cd:	74 21                	je     d0f0 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x4f0>
	if (__n > this->_M_max_size())
    d0cf:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    d0d6:	ff ff 1f 
    d0d9:	49 39 c6             	cmp    %rax,%r14
    d0dc:	0f 87 17 01 00 00    	ja     d1f9 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x5f9>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    d0e2:	e8 79 a6 00 00       	callq  17760 <_Znwm@plt>
    d0e7:	48 89 c3             	mov    %rax,%rbx
    d0ea:	eb 06                	jmp    d0f2 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x4f2>
    d0ec:	0f 1f 40 00          	nopl   0x0(%rax)
    d0f0:	31 db                	xor    %ebx,%ebx
	this->_M_impl._M_start = this->_M_allocate(__n);
    d0f2:	49 89 5d 00          	mov    %rbx,0x0(%r13)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    d0f6:	49 89 5d 08          	mov    %rbx,0x8(%r13)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    d0fa:	4a 8d 04 b3          	lea    (%rbx,%r14,4),%rax
    d0fe:	49 89 45 10          	mov    %rax,0x10(%r13)
    d102:	48 8b 75 00          	mov    0x0(%rbp),%rsi
    d106:	48 8b 6d 08          	mov    0x8(%rbp),%rbp
	  if (_Num)
    d10a:	48 29 f5             	sub    %rsi,%rbp
    d10d:	74 0b                	je     d11a <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x51a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    d10f:	48 89 df             	mov    %rbx,%rdi
    d112:	48 89 ea             	mov    %rbp,%rdx
    d115:	e8 46 a8 00 00       	callq  17960 <memmove@plt>
	  return __result + _Num;
    d11a:	48 01 eb             	add    %rbp,%rbx
	this->_M_impl._M_finish =
    d11d:	49 89 5d 08          	mov    %rbx,0x8(%r13)
	    ++this->_M_impl._M_finish;
    d121:	48 83 44 24 18 18    	addq   $0x18,0x18(%rsp)
    d127:	e9 32 ff ff ff       	jmpq   d05e <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x45e>
    d12c:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
    d131:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
    d136:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
        return {train, test};
    d13b:	e8 20 09 00 00       	callq  da60 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_EC2IRS4_S7_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairIS9_SA_EEEbE4typeELb1EEEOS9_OSA_>
    d140:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
	if (__p)
    d145:	48 85 ff             	test   %rdi,%rdi
    d148:	74 05                	je     d14f <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x54f>
	::operator delete(__p
    d14a:	e8 71 a5 00 00       	callq  176c0 <_ZdlPv@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    d14f:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
    d154:	48 8b 5c 24 18       	mov    0x18(%rsp),%rbx
	  for (; __first != __last; ++__first)
    d159:	49 39 de             	cmp    %rbx,%r14
    d15c:	75 4b                	jne    d1a9 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x5a9>
	if (__p)
    d15e:	4d 85 f6             	test   %r14,%r14
    d161:	74 08                	je     d16b <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x56b>
    d163:	4c 89 f7             	mov    %r14,%rdi
    d166:	e8 55 a5 00 00       	callq  176c0 <_ZdlPv@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    d16b:	4c 8b 74 24 30       	mov    0x30(%rsp),%r14
    d170:	48 8b 5c 24 38       	mov    0x38(%rsp),%rbx
    d175:	49 39 de             	cmp    %rbx,%r14
    d178:	75 4f                	jne    d1c9 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x5c9>
	if (__p)
    d17a:	4d 85 f6             	test   %r14,%r14
    d17d:	74 08                	je     d187 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x587>
    d17f:	4c 89 f7             	mov    %r14,%rdi
    d182:	e8 39 a5 00 00       	callq  176c0 <_ZdlPv@plt>
    d187:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
    }
    d18c:	48 83 c4 78          	add    $0x78,%rsp
    d190:	5b                   	pop    %rbx
    d191:	41 5c                	pop    %r12
    d193:	41 5d                	pop    %r13
    d195:	41 5e                	pop    %r14
    d197:	41 5f                	pop    %r15
    d199:	5d                   	pop    %rbp
    d19a:	c3                   	retq   
    d19b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    d1a0:	49 83 c6 18          	add    $0x18,%r14
    d1a4:	49 39 de             	cmp    %rbx,%r14
    d1a7:	74 2f                	je     d1d8 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x5d8>
	_M_deallocate(_M_impl._M_start,
    d1a9:	49 8b 3e             	mov    (%r14),%rdi
	if (__p)
    d1ac:	48 85 ff             	test   %rdi,%rdi
    d1af:	74 ef                	je     d1a0 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x5a0>
    d1b1:	e8 0a a5 00 00       	callq  176c0 <_ZdlPv@plt>
    d1b6:	eb e8                	jmp    d1a0 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x5a0>
    d1b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    d1bf:	00 
    d1c0:	49 83 c6 18          	add    $0x18,%r14
    d1c4:	49 39 de             	cmp    %rbx,%r14
    d1c7:	74 1f                	je     d1e8 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x5e8>
	_M_deallocate(_M_impl._M_start,
    d1c9:	49 8b 3e             	mov    (%r14),%rdi
	if (__p)
    d1cc:	48 85 ff             	test   %rdi,%rdi
    d1cf:	74 ef                	je     d1c0 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x5c0>
    d1d1:	e8 ea a4 00 00       	callq  176c0 <_ZdlPv@plt>
    d1d6:	eb e8                	jmp    d1c0 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x5c0>
	_M_deallocate(_M_impl._M_start,
    d1d8:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
	if (__p)
    d1dd:	4d 85 f6             	test   %r14,%r14
    d1e0:	0f 85 7d ff ff ff    	jne    d163 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x563>
    d1e6:	eb 83                	jmp    d16b <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x56b>
	_M_deallocate(_M_impl._M_start,
    d1e8:	4c 8b 74 24 30       	mov    0x30(%rsp),%r14
	if (__p)
    d1ed:	4d 85 f6             	test   %r14,%r14
    d1f0:	75 8d                	jne    d17f <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x57f>
    d1f2:	eb 93                	jmp    d187 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x587>
	  std::__throw_bad_alloc();
    d1f4:	e8 a7 a4 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
    d1f9:	e8 a2 a4 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
	__throw_length_error(__N("vector::reserve"));
    d1fe:	48 8d 3d bc 5a ff ff 	lea    -0xa544(%rip),%rdi        # 2cc1 <_IO_stdin_used+0x5d1>
    d205:	e8 66 a3 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
	  __throw_length_error(
    d20a:	48 8d 3d b2 5b ff ff 	lea    -0xa44e(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
    d211:	e8 5a a3 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
    d216:	48 89 c3             	mov    %rax,%rbx
    d219:	eb 20                	jmp    d23b <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x63b>
    d21b:	48 89 c3             	mov    %rax,%rbx
	if (__p)
    d21e:	48 83 7c 24 08 00    	cmpq   $0x0,0x8(%rsp)
    d224:	75 0b                	jne    d231 <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x631>
    d226:	eb 13                	jmp    d23b <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x63b>
    d228:	eb 04                	jmp    d22e <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x62e>
    d22a:	eb 02                	jmp    d22e <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x62e>
    d22c:	eb 00                	jmp    d22e <_ZN5utils16train_test_splitISt6vectorIS1_IfSaIfEESaIS3_EEEESt4pairIT_S7_ERKS7_f+0x62e>
    d22e:	48 89 c3             	mov    %rax,%rbx
    d231:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
	::operator delete(__p
    d236:	e8 85 a4 00 00       	callq  176c0 <_ZdlPv@plt>
    d23b:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
    d240:	e8 db f5 ff ff       	callq  c820 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED2Ev>
    d245:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
    d24a:	e8 d1 f5 ff ff       	callq  c820 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED2Ev>
    d24f:	48 89 df             	mov    %rbx,%rdi
    d252:	e8 19 a7 00 00       	callq  17970 <_Unwind_Resume@plt>
    d257:	cc                   	int3   
    d258:	cc                   	int3   
    d259:	cc                   	int3   
    d25a:	cc                   	int3   
    d25b:	cc                   	int3   
    d25c:	cc                   	int3   
    d25d:	cc                   	int3   
    d25e:	cc                   	int3   
    d25f:	cc                   	int3   

000000000000d260 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f>:
    template <typename T> std::pair<T, T> train_test_split(const T& data, float test_size = 0.2) {
    d260:	55                   	push   %rbp
    d261:	41 57                	push   %r15
    d263:	41 56                	push   %r14
    d265:	41 55                	push   %r13
    d267:	41 54                	push   %r12
    d269:	53                   	push   %rbx
    d26a:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    d271:	49 89 fd             	mov    %rdi,%r13
	: _M_start(), _M_finish(), _M_end_of_storage()
    d274:	66 0f ef c9          	pxor   %xmm1,%xmm1
    d278:	66 0f 7f 4c 24 40    	movdqa %xmm1,0x40(%rsp)
    d27e:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
    d285:	00 00 
    d287:	66 0f 7f 4c 24 20    	movdqa %xmm1,0x20(%rsp)
    d28d:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
    d294:	00 00 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    d296:	48 8b 06             	mov    (%rsi),%rax
    d299:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
    d29e:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
    d2a2:	49 89 ce             	mov    %rcx,%r14
    d2a5:	49 29 c6             	sub    %rax,%r14
    d2a8:	4d 89 f0             	mov    %r14,%r8
    d2ab:	49 c1 f8 02          	sar    $0x2,%r8
        size_t test_count  = static_cast<size_t>(data.size() * test_size);
    d2af:	78 07                	js     d2b8 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x58>
    d2b1:	f3 49 0f 2a e8       	cvtsi2ss %r8,%xmm5
    d2b6:	eb 18                	jmp    d2d0 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x70>
    d2b8:	4c 89 c2             	mov    %r8,%rdx
    d2bb:	48 d1 ea             	shr    %rdx
    d2be:	44 89 c6             	mov    %r8d,%esi
    d2c1:	83 e6 01             	and    $0x1,%esi
    d2c4:	48 09 d6             	or     %rdx,%rsi
    d2c7:	f3 48 0f 2a ee       	cvtsi2ss %rsi,%xmm5
    d2cc:	f3 0f 58 ed          	addss  %xmm5,%xmm5
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    d2d0:	4c 89 c2             	mov    %r8,%rdx
    d2d3:	48 c1 ea 3c          	shr    $0x3c,%rdx
    d2d7:	0f 85 b8 04 00 00    	jne    d795 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x535>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    d2dd:	48 39 c1             	cmp    %rax,%rcx
    d2e0:	74 72                	je     d354 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0xf4>
    d2e2:	0f 29 6c 24 10       	movaps %xmm5,0x10(%rsp)
    d2e7:	f3 0f 11 44 24 08    	movss  %xmm0,0x8(%rsp)
    d2ed:	4d 89 c7             	mov    %r8,%r15
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    d2f0:	4b 8d 1c 36          	lea    (%r14,%r14,1),%rbx
    d2f4:	48 89 df             	mov    %rbx,%rdi
    d2f7:	e8 64 a4 00 00       	callq  17760 <_Znwm@plt>
    d2fc:	48 89 c5             	mov    %rax,%rbp
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
    d2ff:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	      ++__first;
    d306:	48 8d 78 08          	lea    0x8(%rax),%rdi
      if (__n <= 0)
    d30a:	49 83 fe 04          	cmp    $0x4,%r14
    d30e:	4d 89 f8             	mov    %r15,%r8
    d311:	74 1f                	je     d332 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0xd2>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    d313:	4e 8d 34 c5 00 00 00 	lea    0x0(,%r8,8),%r14
    d31a:	00 
    d31b:	49 01 ee             	add    %rbp,%r14
      for (; __first != __last; ++__first)
    d31e:	48 83 c3 f8          	add    $0xfffffffffffffff8,%rbx
	*__first = __tmp;
    d322:	31 f6                	xor    %esi,%esi
    d324:	48 89 da             	mov    %rbx,%rdx
    d327:	e8 64 a6 00 00       	callq  17990 <memset@plt>
    d32c:	4d 89 f8             	mov    %r15,%r8
    d32f:	4c 89 f7             	mov    %r14,%rdi
    d332:	f3 0f 10 44 24 08    	movss  0x8(%rsp),%xmm0
    d338:	0f 28 6c 24 10       	movaps 0x10(%rsp),%xmm5
    d33d:	48 89 fa             	mov    %rdi,%rdx
    d340:	48 29 ea             	sub    %rbp,%rdx
    d343:	48 83 c2 f8          	add    $0xfffffffffffffff8,%rdx
    d347:	48 83 fa 18          	cmp    $0x18,%rdx
    d34b:	73 0b                	jae    d358 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0xf8>
    d34d:	31 c0                	xor    %eax,%eax
    d34f:	48 89 e9             	mov    %rbp,%rcx
    d352:	eb 6c                	jmp    d3c0 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x160>
    d354:	31 ed                	xor    %ebp,%ebp
    d356:	eb 77                	jmp    d3cf <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x16f>
    d358:	48 c1 ea 03          	shr    $0x3,%rdx
    d35c:	48 ff c2             	inc    %rdx
    d35f:	48 89 d0             	mov    %rdx,%rax
    d362:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
    d366:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
    d36d:	00 
    d36e:	48 01 e9             	add    %rbp,%rcx
    d371:	66 0f 6f 25 d7 53 ff 	movdqa -0xac29(%rip),%xmm4        # 2750 <_IO_stdin_used+0x60>
    d378:	ff 
    d379:	31 f6                	xor    %esi,%esi
    d37b:	66 0f 6f 0d bd 53 ff 	movdqa -0xac43(%rip),%xmm1        # 2740 <_IO_stdin_used+0x50>
    d382:	ff 
    d383:	66 0f 6f 15 55 54 ff 	movdqa -0xabab(%rip),%xmm2        # 27e0 <_IO_stdin_used+0xf0>
    d38a:	ff 
    d38b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    d390:	66 0f 6f dc          	movdqa %xmm4,%xmm3
    d394:	66 0f d4 d9          	paddq  %xmm1,%xmm3
	  *__first = __value;
    d398:	f3 0f 7f 64 f5 00    	movdqu %xmm4,0x0(%rbp,%rsi,8)
    d39e:	f3 0f 7f 5c f5 10    	movdqu %xmm3,0x10(%rbp,%rsi,8)
	  ++__value;
    d3a4:	48 83 c6 04          	add    $0x4,%rsi
    d3a8:	66 0f d4 e2          	paddq  %xmm2,%xmm4
    d3ac:	48 39 f0             	cmp    %rsi,%rax
    d3af:	75 df                	jne    d390 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x130>
      for (; __first != __last; ++__first)
    d3b1:	48 39 c2             	cmp    %rax,%rdx
    d3b4:	74 19                	je     d3cf <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x16f>
    d3b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    d3bd:	00 00 00 
	  *__first = __value;
    d3c0:	48 89 01             	mov    %rax,(%rcx)
	  ++__value;
    d3c3:	48 ff c0             	inc    %rax
	++_M_current;
    d3c6:	48 83 c1 08          	add    $0x8,%rcx
    { return __lhs.base() != __rhs.base(); }
    d3ca:	48 39 f9             	cmp    %rdi,%rcx
      for (; __first != __last; ++__first)
    d3cd:	75 f1                	jne    d3c0 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x160>
    d3cf:	f3 0f 59 e8          	mulss  %xmm0,%xmm5
    d3d3:	f3 48 0f 2c c5       	cvttss2si %xmm5,%rax
    d3d8:	48 89 c1             	mov    %rax,%rcx
    d3db:	f3 0f 5c 2d f9 52 ff 	subss  -0xad07(%rip),%xmm5        # 26dc <_IO_stdin_used-0x14>
    d3e2:	ff 
    d3e3:	48 c1 f9 3f          	sar    $0x3f,%rcx
    d3e7:	f3 4c 0f 2c fd       	cvttss2si %xmm5,%r15
    d3ec:	49 21 cf             	and    %rcx,%r15
    d3ef:	49 09 c7             	or     %rax,%r15
    d3f2:	4d 29 f8             	sub    %r15,%r8
      if (__n > this->max_size())
    d3f5:	4c 89 c0             	mov    %r8,%rax
    d3f8:	48 c1 e8 3d          	shr    $0x3d,%rax
    d3fc:	48 89 6c 24 58       	mov    %rbp,0x58(%rsp)
    d401:	0f 85 82 03 00 00    	jne    d789 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x529>
      if (this->capacity() < __n)
    d407:	4d 85 c0             	test   %r8,%r8
    d40a:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
    d40f:	74 2a                	je     d43b <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x1db>
    d411:	4a 8d 3c 85 00 00 00 	lea    0x0(,%r8,4),%rdi
    d418:	00 
    d419:	e8 42 a3 00 00       	callq  17760 <_Znwm@plt>
    d41e:	48 89 c3             	mov    %rax,%rbx
	  this->_M_impl._M_start = __tmp;
    d421:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
	  this->_M_impl._M_finish = __tmp + __old_size;
    d426:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    d42b:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    d430:	4e 8d 24 80          	lea    (%rax,%r8,4),%r12
    d434:	4c 89 64 24 50       	mov    %r12,0x50(%rsp)
    d439:	eb 05                	jmp    d440 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x1e0>
    d43b:	45 31 e4             	xor    %r12d,%r12d
    d43e:	31 db                	xor    %ebx,%ebx
    d440:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    d447:	ff ff 1f 
      if (__n > this->max_size())
    d44a:	49 39 c7             	cmp    %rax,%r15
    d44d:	0f 87 36 03 00 00    	ja     d789 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x529>
      if (this->capacity() < __n)
    d453:	4d 85 ff             	test   %r15,%r15
    d456:	74 37                	je     d48f <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x22f>
    d458:	4a 8d 3c bd 00 00 00 	lea    0x0(,%r15,4),%rdi
    d45f:	00 
    d460:	e8 fb a2 00 00       	callq  17760 <_Znwm@plt>
	  this->_M_impl._M_start = __tmp;
    d465:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
	  this->_M_impl._M_finish = __tmp + __old_size;
    d46a:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    d46f:	48 89 c1             	mov    %rax,%rcx
    d472:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    d477:	4a 8d 0c b8          	lea    (%rax,%r15,4),%rcx
    d47b:	48 89 c8             	mov    %rcx,%rax
    d47e:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    d483:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
    d488:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
    d48d:	eb 0e                	jmp    d49d <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x23d>
    d48f:	31 c0                	xor    %eax,%eax
    d491:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    d496:	31 c0                	xor    %eax,%eax
    d498:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
    d49d:	4c 89 6c 24 70       	mov    %r13,0x70(%rsp)
        for (size_t i = 0; i < train_count; ++i) {
    d4a2:	4d 85 c0             	test   %r8,%r8
    d4a5:	0f 84 18 01 00 00    	je     d5c3 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x363>
    d4ab:	45 31 ed             	xor    %r13d,%r13d
    d4ae:	eb 1f                	jmp    d4cf <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x26f>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    d4b0:	f3 42 0f 10 04 b7    	movss  (%rdi,%r14,4),%xmm0
    d4b6:	f3 0f 11 03          	movss  %xmm0,(%rbx)
	    ++this->_M_impl._M_finish;
    d4ba:	48 83 c3 04          	add    $0x4,%rbx
    d4be:	48 89 5c 24 48       	mov    %rbx,0x48(%rsp)
    d4c3:	49 ff c5             	inc    %r13
    d4c6:	4d 39 e8             	cmp    %r13,%r8
    d4c9:	0f 84 f4 00 00 00    	je     d5c3 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x363>
            train.push_back(data[indices[i]]);
    d4cf:	4e 8b 74 ed 00       	mov    0x0(%rbp,%r13,8),%r14
    d4d4:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
	return *(this->_M_impl._M_start + __n);
    d4d9:	48 8b 38             	mov    (%rax),%rdi
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    d4dc:	4c 39 e3             	cmp    %r12,%rbx
    d4df:	75 cf                	jne    d4b0 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x250>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    d4e1:	48 8b 5c 24 40       	mov    0x40(%rsp),%rbx
    d4e6:	49 29 dc             	sub    %rbx,%r12
	if (max_size() - size() < __n)
    d4e9:	48 b8 fc ff ff ff ff 	movabs $0x7ffffffffffffffc,%rax
    d4f0:	ff ff 7f 
    d4f3:	49 39 c4             	cmp    %rax,%r12
    d4f6:	0f 84 75 02 00 00    	je     d771 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x511>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    d4fc:	4c 89 e5             	mov    %r12,%rbp
    d4ff:	48 c1 fd 02          	sar    $0x2,%rbp
	const size_type __len = size() + (std::max)(size(), __n);
    d503:	48 83 fd 01          	cmp    $0x1,%rbp
    d507:	48 89 e8             	mov    %rbp,%rax
    d50a:	48 83 d0 00          	adc    $0x0,%rax
    d50e:	48 8d 0c 28          	lea    (%rax,%rbp,1),%rcx
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    d512:	48 ba ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rdx
    d519:	ff ff 1f 
    d51c:	48 39 d1             	cmp    %rdx,%rcx
    d51f:	72 0a                	jb     d52b <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x2cb>
    d521:	48 b9 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rcx
    d528:	ff ff 1f 
	const size_type __len = size() + (std::max)(size(), __n);
    d52b:	48 01 e8             	add    %rbp,%rax
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    d52e:	72 03                	jb     d533 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x2d3>
    d530:	48 89 ca             	mov    %rcx,%rdx
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    d533:	48 85 d2             	test   %rdx,%rdx
    d536:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
    d53d:	00 
    d53e:	74 22                	je     d562 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x302>
    d540:	48 89 5c 24 78       	mov    %rbx,0x78(%rsp)
    d545:	48 89 fb             	mov    %rdi,%rbx
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    d548:	48 8d 3c 95 00 00 00 	lea    0x0(,%rdx,4),%rdi
    d54f:	00 
    d550:	e8 0b a2 00 00       	callq  17760 <_Znwm@plt>
    d555:	49 89 c7             	mov    %rax,%r15
    d558:	48 89 df             	mov    %rbx,%rdi
    d55b:	48 8b 5c 24 78       	mov    0x78(%rsp),%rbx
    d560:	eb 03                	jmp    d565 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x305>
    d562:	45 31 ff             	xor    %r15d,%r15d
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    d565:	f3 42 0f 10 04 b7    	movss  (%rdi,%r14,4),%xmm0
    d56b:	f3 41 0f 11 04 af    	movss  %xmm0,(%r15,%rbp,4)
      if (__count > 0)
    d571:	4d 85 e4             	test   %r12,%r12
    d574:	7e 0e                	jle    d584 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x324>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    d576:	4c 89 ff             	mov    %r15,%rdi
    d579:	48 89 de             	mov    %rbx,%rsi
    d57c:	4c 89 e2             	mov    %r12,%rdx
    d57f:	e8 dc a3 00 00       	callq  17960 <memmove@plt>
	if (__p)
    d584:	48 85 db             	test   %rbx,%rbx
    d587:	48 8b 6c 24 58       	mov    0x58(%rsp),%rbp
    d58c:	74 08                	je     d596 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x336>
	::operator delete(__p
    d58e:	48 89 df             	mov    %rbx,%rdi
    d591:	e8 2a a1 00 00       	callq  176c0 <_ZdlPv@plt>
    d596:	4b 8d 1c 27          	lea    (%r15,%r12,1),%rbx
    d59a:	48 83 c3 04          	add    $0x4,%rbx
      this->_M_impl._M_start = __new_start;
    d59e:	4c 89 7c 24 40       	mov    %r15,0x40(%rsp)
      this->_M_impl._M_finish = __new_finish;
    d5a3:	48 89 5c 24 48       	mov    %rbx,0x48(%rsp)
    d5a8:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
    d5af:	00 
      this->_M_impl._M_end_of_storage = __new_start + __len;
    d5b0:	4d 8d 24 87          	lea    (%r15,%rax,4),%r12
    d5b4:	4c 89 64 24 50       	mov    %r12,0x50(%rsp)
    d5b9:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
    d5be:	e9 00 ff ff ff       	jmpq   d4c3 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x263>
    d5c3:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    d5c8:	4c 8b 28             	mov    (%rax),%r13
    d5cb:	48 8b 40 08          	mov    0x8(%rax),%rax
    d5cf:	48 89 c1             	mov    %rax,%rcx
    d5d2:	4c 29 e9             	sub    %r13,%rcx
    d5d5:	48 c1 f9 02          	sar    $0x2,%rcx
        for (size_t i = train_count; i < data.size(); ++i) {
    d5d9:	49 39 c8             	cmp    %rcx,%r8
    d5dc:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
    d5e1:	48 8b 74 24 68       	mov    0x68(%rsp),%rsi
    d5e6:	0f 82 8e 00 00 00    	jb     d67a <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x41a>
    d5ec:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
    d5f1:	48 8d 54 24 20       	lea    0x20(%rsp),%rdx
    d5f6:	48 8b 5c 24 70       	mov    0x70(%rsp),%rbx
        return {train, test};
    d5fb:	48 89 df             	mov    %rbx,%rdi
    d5fe:	e8 ad 05 00 00       	callq  dbb0 <_ZNSt4pairISt6vectorIfSaIfEES2_EC2IRS2_S5_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairIS7_S8_EEEbE4typeELb1EEEOS7_OS8_>
	if (__p)
    d603:	48 85 ed             	test   %rbp,%rbp
    d606:	74 08                	je     d610 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x3b0>
    d608:	48 89 ef             	mov    %rbp,%rdi
    d60b:	e8 b0 a0 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    d610:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (__p)
    d615:	48 85 ff             	test   %rdi,%rdi
    d618:	74 05                	je     d61f <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x3bf>
    d61a:	e8 a1 a0 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    d61f:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
	if (__p)
    d624:	48 85 ff             	test   %rdi,%rdi
    d627:	74 05                	je     d62e <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x3ce>
    d629:	e8 92 a0 00 00       	callq  176c0 <_ZdlPv@plt>
    }
    d62e:	48 89 d8             	mov    %rbx,%rax
    d631:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
    d638:	5b                   	pop    %rbx
    d639:	41 5c                	pop    %r12
    d63b:	41 5d                	pop    %r13
    d63d:	41 5e                	pop    %r14
    d63f:	41 5f                	pop    %r15
    d641:	5d                   	pop    %rbp
    d642:	c3                   	retq   
    d643:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    d64a:	84 00 00 00 00 00 
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    d650:	f3 43 0f 10 44 b5 00 	movss  0x0(%r13,%r14,4),%xmm0
    d657:	f3 0f 11 06          	movss  %xmm0,(%rsi)
	    ++this->_M_impl._M_finish;
    d65b:	48 83 c6 04          	add    $0x4,%rsi
    d65f:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        for (size_t i = train_count; i < data.size(); ++i) {
    d664:	49 ff c0             	inc    %r8
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    d667:	48 89 c1             	mov    %rax,%rcx
    d66a:	4c 29 e9             	sub    %r13,%rcx
    d66d:	48 c1 f9 02          	sar    $0x2,%rcx
    d671:	49 39 c8             	cmp    %rcx,%r8
    d674:	0f 83 72 ff ff ff    	jae    d5ec <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x38c>
            test.push_back(data[indices[i]]);
    d67a:	4e 8b 74 c5 00       	mov    0x0(%rbp,%r8,8),%r14
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    d67f:	48 39 d6             	cmp    %rdx,%rsi
    d682:	75 cc                	jne    d650 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x3f0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    d684:	48 8b 5c 24 20       	mov    0x20(%rsp),%rbx
    d689:	48 29 da             	sub    %rbx,%rdx
	if (max_size() - size() < __n)
    d68c:	48 b8 fc ff ff ff ff 	movabs $0x7ffffffffffffffc,%rax
    d693:	ff ff 7f 
    d696:	48 39 c2             	cmp    %rax,%rdx
    d699:	0f 84 de 00 00 00    	je     d77d <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x51d>
    d69f:	48 89 d0             	mov    %rdx,%rax
    d6a2:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    d6a7:	48 89 d5             	mov    %rdx,%rbp
    d6aa:	48 c1 fd 02          	sar    $0x2,%rbp
	const size_type __len = size() + (std::max)(size(), __n);
    d6ae:	48 83 fd 01          	cmp    $0x1,%rbp
    d6b2:	48 89 e8             	mov    %rbp,%rax
    d6b5:	48 83 d0 00          	adc    $0x0,%rax
    d6b9:	48 8d 0c 28          	lea    (%rax,%rbp,1),%rcx
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    d6bd:	48 ba ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rdx
    d6c4:	ff ff 1f 
    d6c7:	48 39 d1             	cmp    %rdx,%rcx
    d6ca:	72 0a                	jb     d6d6 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x476>
    d6cc:	48 b9 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rcx
    d6d3:	ff ff 1f 
    d6d6:	49 bc ff ff ff ff ff 	movabs $0x1fffffffffffffff,%r12
    d6dd:	ff ff 1f 
	const size_type __len = size() + (std::max)(size(), __n);
    d6e0:	48 01 e8             	add    %rbp,%rax
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    d6e3:	72 03                	jb     d6e8 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x488>
    d6e5:	49 89 cc             	mov    %rcx,%r12
    d6e8:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    d6ed:	4d 85 e4             	test   %r12,%r12
    d6f0:	74 12                	je     d704 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x4a4>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    d6f2:	4a 8d 3c a5 00 00 00 	lea    0x0(,%r12,4),%rdi
    d6f9:	00 
    d6fa:	e8 61 a0 00 00       	callq  17760 <_Znwm@plt>
    d6ff:	49 89 c7             	mov    %rax,%r15
    d702:	eb 03                	jmp    d707 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x4a7>
    d704:	45 31 ff             	xor    %r15d,%r15d
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    d707:	f3 43 0f 10 44 b5 00 	movss  0x0(%r13,%r14,4),%xmm0
    d70e:	f3 41 0f 11 04 af    	movss  %xmm0,(%r15,%rbp,4)
    d714:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
      if (__count > 0)
    d719:	48 85 d2             	test   %rdx,%rdx
    d71c:	7e 0b                	jle    d729 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x4c9>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    d71e:	4c 89 ff             	mov    %r15,%rdi
    d721:	48 89 de             	mov    %rbx,%rsi
    d724:	e8 37 a2 00 00       	callq  17960 <memmove@plt>
	if (__p)
    d729:	48 85 db             	test   %rbx,%rbx
    d72c:	48 8b 6c 24 58       	mov    0x58(%rsp),%rbp
    d731:	74 08                	je     d73b <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x4db>
	::operator delete(__p
    d733:	48 89 df             	mov    %rbx,%rdi
    d736:	e8 85 9f 00 00       	callq  176c0 <_ZdlPv@plt>
    d73b:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    d740:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
    d744:	48 83 c6 04          	add    $0x4,%rsi
      this->_M_impl._M_start = __new_start;
    d748:	4c 89 7c 24 20       	mov    %r15,0x20(%rsp)
      this->_M_impl._M_finish = __new_finish;
    d74d:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
      this->_M_impl._M_end_of_storage = __new_start + __len;
    d752:	4b 8d 14 a7          	lea    (%r15,%r12,4),%rdx
    d756:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
    d75b:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    d760:	4c 8b 28             	mov    (%rax),%r13
    d763:	48 8b 40 08          	mov    0x8(%rax),%rax
    d767:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
    d76c:	e9 f3 fe ff ff       	jmpq   d664 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x404>
	  __throw_length_error(__N(__s));
    d771:	48 8d 3d 3a 53 ff ff 	lea    -0xacc6(%rip),%rdi        # 2ab2 <_IO_stdin_used+0x3c2>
    d778:	e8 f3 9d 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
    d77d:	48 8d 3d 2e 53 ff ff 	lea    -0xacd2(%rip),%rdi        # 2ab2 <_IO_stdin_used+0x3c2>
    d784:	e8 e7 9d 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
	__throw_length_error(__N("vector::reserve"));
    d789:	48 8d 3d 31 55 ff ff 	lea    -0xaacf(%rip),%rdi        # 2cc1 <_IO_stdin_used+0x5d1>
    d790:	e8 db 9d 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
	  __throw_length_error(
    d795:	48 8d 3d 27 56 ff ff 	lea    -0xa9d9(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
    d79c:	e8 cf 9d 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
    d7a1:	48 89 c3             	mov    %rax,%rbx
    d7a4:	eb 1d                	jmp    d7c3 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x563>
    d7a6:	eb 0e                	jmp    d7b6 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x556>
    d7a8:	48 89 c3             	mov    %rax,%rbx
	if (__p)
    d7ab:	48 85 ed             	test   %rbp,%rbp
    d7ae:	75 09                	jne    d7b9 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x559>
    d7b0:	eb 11                	jmp    d7c3 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x563>
    d7b2:	eb 02                	jmp    d7b6 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x556>
    d7b4:	eb 00                	jmp    d7b6 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x556>
    d7b6:	48 89 c3             	mov    %rax,%rbx
    d7b9:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
    d7be:	e8 fd 9e 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    d7c3:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (__p)
    d7c8:	48 85 ff             	test   %rdi,%rdi
    d7cb:	74 05                	je     d7d2 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x572>
    d7cd:	e8 ee 9e 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    d7d2:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
	if (__p)
    d7d7:	48 85 ff             	test   %rdi,%rdi
    d7da:	74 05                	je     d7e1 <_ZN5utils16train_test_splitISt6vectorIfSaIfEEEESt4pairIT_S5_ERKS5_f+0x581>
    d7dc:	e8 df 9e 00 00       	callq  176c0 <_ZdlPv@plt>
    d7e1:	48 89 df             	mov    %rbx,%rdi
    d7e4:	e8 87 a1 00 00       	callq  17970 <_Unwind_Resume@plt>
    d7e9:	cc                   	int3   
    d7ea:	cc                   	int3   
    d7eb:	cc                   	int3   
    d7ec:	cc                   	int3   
    d7ed:	cc                   	int3   
    d7ee:	cc                   	int3   
    d7ef:	cc                   	int3   

000000000000d7f0 <_ZNSt6vectorIS_IN7genetic7programESaIS1_EESaIS3_EED2Ev>:
      {
    d7f0:	41 57                	push   %r15
    d7f2:	41 56                	push   %r14
    d7f4:	41 55                	push   %r13
    d7f6:	41 54                	push   %r12
    d7f8:	53                   	push   %rbx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    d7f9:	48 8b 1f             	mov    (%rdi),%rbx
    d7fc:	4c 8b 67 08          	mov    0x8(%rdi),%r12
	  for (; __first != __last; ++__first)
    d800:	4c 39 e3             	cmp    %r12,%rbx
    d803:	74 51                	je     d856 <_ZNSt6vectorIS_IN7genetic7programESaIS1_EESaIS3_EED2Ev+0x66>
    d805:	49 89 fe             	mov    %rdi,%r14
    d808:	eb 0f                	jmp    d819 <_ZNSt6vectorIS_IN7genetic7programESaIS1_EESaIS3_EED2Ev+0x29>
    d80a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    d810:	48 83 c3 18          	add    $0x18,%rbx
    d814:	4c 39 e3             	cmp    %r12,%rbx
    d817:	74 3a                	je     d853 <_ZNSt6vectorIS_IN7genetic7programESaIS1_EESaIS3_EED2Ev+0x63>
    d819:	4c 8b 3b             	mov    (%rbx),%r15
    d81c:	4c 8b 6b 08          	mov    0x8(%rbx),%r13
    d820:	4d 39 ef             	cmp    %r13,%r15
    d823:	74 1f                	je     d844 <_ZNSt6vectorIS_IN7genetic7programESaIS1_EESaIS3_EED2Ev+0x54>
    d825:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    d82c:	00 00 00 00 
      __pointer->~_Tp();
    d830:	4c 89 ff             	mov    %r15,%rdi
    d833:	e8 e8 04 00 00       	callq  dd20 <_ZN7genetic7programD1Ev>
	  for (; __first != __last; ++__first)
    d838:	49 83 c7 20          	add    $0x20,%r15
    d83c:	4d 39 ef             	cmp    %r13,%r15
    d83f:	75 ef                	jne    d830 <_ZNSt6vectorIS_IN7genetic7programESaIS1_EESaIS3_EED2Ev+0x40>
	_M_deallocate(_M_impl._M_start,
    d841:	4c 8b 3b             	mov    (%rbx),%r15
	if (__p)
    d844:	4d 85 ff             	test   %r15,%r15
    d847:	74 c7                	je     d810 <_ZNSt6vectorIS_IN7genetic7programESaIS1_EESaIS3_EED2Ev+0x20>
    d849:	4c 89 ff             	mov    %r15,%rdi
    d84c:	e8 6f 9e 00 00       	callq  176c0 <_ZdlPv@plt>
    d851:	eb bd                	jmp    d810 <_ZNSt6vectorIS_IN7genetic7programESaIS1_EESaIS3_EED2Ev+0x20>
	_M_deallocate(_M_impl._M_start,
    d853:	49 8b 1e             	mov    (%r14),%rbx
	if (__p)
    d856:	48 85 db             	test   %rbx,%rbx
    d859:	74 11                	je     d86c <_ZNSt6vectorIS_IN7genetic7programESaIS1_EESaIS3_EED2Ev+0x7c>
    d85b:	48 89 df             	mov    %rbx,%rdi
    d85e:	5b                   	pop    %rbx
    d85f:	41 5c                	pop    %r12
    d861:	41 5d                	pop    %r13
    d863:	41 5e                	pop    %r14
    d865:	41 5f                	pop    %r15
    d867:	e9 54 9e 00 00       	jmpq   176c0 <_ZdlPv@plt>
      }
    d86c:	5b                   	pop    %rbx
    d86d:	41 5c                	pop    %r12
    d86f:	41 5d                	pop    %r13
    d871:	41 5e                	pop    %r14
    d873:	41 5f                	pop    %r15
    d875:	c3                   	retq   
    d876:	cc                   	int3   
    d877:	cc                   	int3   
    d878:	cc                   	int3   
    d879:	cc                   	int3   
    d87a:	cc                   	int3   
    d87b:	cc                   	int3   
    d87c:	cc                   	int3   
    d87d:	cc                   	int3   
    d87e:	cc                   	int3   
    d87f:	cc                   	int3   

000000000000d880 <_ZN7genetic5paramD2Ev>:
    struct param {
    d880:	41 57                	push   %r15
    d882:	41 56                	push   %r14
    d884:	53                   	push   %rbx
    d885:	48 89 fb             	mov    %rdi,%rbx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    d888:	4c 8b b7 b8 00 00 00 	mov    0xb8(%rdi),%r14
    d88f:	4c 8b bf c0 00 00 00 	mov    0xc0(%rdi),%r15
    d896:	4d 39 fe             	cmp    %r15,%r14
    d899:	75 5e                	jne    d8f9 <_ZN7genetic5paramD2Ev+0x79>
	if (__p)
    d89b:	4d 85 f6             	test   %r14,%r14
    d89e:	74 08                	je     d8a8 <_ZN7genetic5paramD2Ev+0x28>
    d8a0:	4c 89 f7             	mov    %r14,%rdi
    d8a3:	e8 18 9e 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    d8a8:	48 8b 7b 78          	mov    0x78(%rbx),%rdi
	if (__p)
    d8ac:	48 85 ff             	test   %rdi,%rdi
    d8af:	74 05                	je     d8b6 <_ZN7genetic5paramD2Ev+0x36>
    d8b1:	e8 0a 9e 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    d8b6:	48 8b 7b 60          	mov    0x60(%rbx),%rdi
	if (__p)
    d8ba:	48 85 ff             	test   %rdi,%rdi
    d8bd:	74 05                	je     d8c4 <_ZN7genetic5paramD2Ev+0x44>
    d8bf:	e8 fc 9d 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    d8c4:	48 8b 7b 48          	mov    0x48(%rbx),%rdi
	if (__p)
    d8c8:	48 85 ff             	test   %rdi,%rdi
    d8cb:	74 05                	je     d8d2 <_ZN7genetic5paramD2Ev+0x52>
    d8cd:	e8 ee 9d 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    d8d2:	48 8b 7b 30          	mov    0x30(%rbx),%rdi
	if (__p)
    d8d6:	48 85 ff             	test   %rdi,%rdi
    d8d9:	74 3f                	je     d91a <_ZN7genetic5paramD2Ev+0x9a>
    d8db:	5b                   	pop    %rbx
    d8dc:	41 5e                	pop    %r14
    d8de:	41 5f                	pop    %r15
    d8e0:	e9 db 9d 00 00       	jmpq   176c0 <_ZdlPv@plt>
    d8e5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    d8ec:	00 00 00 00 
    d8f0:	49 83 c6 10          	add    $0x10,%r14
    d8f4:	4d 39 fe             	cmp    %r15,%r14
    d8f7:	74 13                	je     d90c <_ZN7genetic5paramD2Ev+0x8c>
      { return _M_dataplus._M_p; }
    d8f9:	49 8b 3e             	mov    (%r14),%rdi
      { return _M_data() == _M_local_data(); }
    d8fc:	49 83 c6 10          	add    $0x10,%r14
    d900:	4c 39 f7             	cmp    %r14,%rdi
	if (!_M_is_local())
    d903:	74 eb                	je     d8f0 <_ZN7genetic5paramD2Ev+0x70>
    d905:	e8 b6 9d 00 00       	callq  176c0 <_ZdlPv@plt>
    d90a:	eb e4                	jmp    d8f0 <_ZN7genetic5paramD2Ev+0x70>
	_M_deallocate(_M_impl._M_start,
    d90c:	4c 8b b3 b8 00 00 00 	mov    0xb8(%rbx),%r14
	if (__p)
    d913:	4d 85 f6             	test   %r14,%r14
    d916:	75 88                	jne    d8a0 <_ZN7genetic5paramD2Ev+0x20>
    d918:	eb 8e                	jmp    d8a8 <_ZN7genetic5paramD2Ev+0x28>
    d91a:	5b                   	pop    %rbx
    d91b:	41 5e                	pop    %r14
    d91d:	41 5f                	pop    %r15
    d91f:	c3                   	retq   

000000000000d920 <_ZNSt4pairISt6vectorIfSaIfEES2_ED2Ev>:
  template<typename _InputIterator>
    using __iter_val_t =
    typename iterator_traits<_InputIterator>::value_type::second_type;

  template<typename _T1, typename _T2>
    struct pair;
    d920:	53                   	push   %rbx
    d921:	48 89 fb             	mov    %rdi,%rbx
	_M_deallocate(_M_impl._M_start,
    d924:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
	if (__p)
    d928:	48 85 ff             	test   %rdi,%rdi
    d92b:	74 05                	je     d932 <_ZNSt4pairISt6vectorIfSaIfEES2_ED2Ev+0x12>
    d92d:	e8 8e 9d 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
    d932:	48 8b 3b             	mov    (%rbx),%rdi
	if (__p)
    d935:	48 85 ff             	test   %rdi,%rdi
    d938:	74 06                	je     d940 <_ZNSt4pairISt6vectorIfSaIfEES2_ED2Ev+0x20>
    d93a:	5b                   	pop    %rbx
    d93b:	e9 80 9d 00 00       	jmpq   176c0 <_ZdlPv@plt>
    d940:	5b                   	pop    %rbx
    d941:	c3                   	retq   
    d942:	cc                   	int3   
    d943:	cc                   	int3   
    d944:	cc                   	int3   
    d945:	cc                   	int3   
    d946:	cc                   	int3   
    d947:	cc                   	int3   
    d948:	cc                   	int3   
    d949:	cc                   	int3   
    d94a:	cc                   	int3   
    d94b:	cc                   	int3   
    d94c:	cc                   	int3   
    d94d:	cc                   	int3   
    d94e:	cc                   	int3   
    d94f:	cc                   	int3   

000000000000d950 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_ED2Ev>:
    d950:	41 57                	push   %r15
    d952:	41 56                	push   %r14
    d954:	53                   	push   %rbx
    d955:	48 89 fb             	mov    %rdi,%rbx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    d958:	4c 8b 77 18          	mov    0x18(%rdi),%r14
    d95c:	4c 8b 7f 20          	mov    0x20(%rdi),%r15
    d960:	4d 39 fe             	cmp    %r15,%r14
    d963:	75 34                	jne    d999 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_ED2Ev+0x49>
	if (__p)
    d965:	4d 85 f6             	test   %r14,%r14
    d968:	74 08                	je     d972 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_ED2Ev+0x22>
    d96a:	4c 89 f7             	mov    %r14,%rdi
    d96d:	e8 4e 9d 00 00       	callq  176c0 <_ZdlPv@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    d972:	4c 8b 33             	mov    (%rbx),%r14
    d975:	4c 8b 7b 08          	mov    0x8(%rbx),%r15
    d979:	4d 39 fe             	cmp    %r15,%r14
    d97c:	75 3b                	jne    d9b9 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_ED2Ev+0x69>
	if (__p)
    d97e:	4d 85 f6             	test   %r14,%r14
    d981:	74 58                	je     d9db <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_ED2Ev+0x8b>
    d983:	4c 89 f7             	mov    %r14,%rdi
    d986:	5b                   	pop    %rbx
    d987:	41 5e                	pop    %r14
    d989:	41 5f                	pop    %r15
    d98b:	e9 30 9d 00 00       	jmpq   176c0 <_ZdlPv@plt>
    d990:	49 83 c6 18          	add    $0x18,%r14
    d994:	4d 39 fe             	cmp    %r15,%r14
    d997:	74 2f                	je     d9c8 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_ED2Ev+0x78>
	_M_deallocate(_M_impl._M_start,
    d999:	49 8b 3e             	mov    (%r14),%rdi
	if (__p)
    d99c:	48 85 ff             	test   %rdi,%rdi
    d99f:	74 ef                	je     d990 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_ED2Ev+0x40>
    d9a1:	e8 1a 9d 00 00       	callq  176c0 <_ZdlPv@plt>
    d9a6:	eb e8                	jmp    d990 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_ED2Ev+0x40>
    d9a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    d9af:	00 
    d9b0:	49 83 c6 18          	add    $0x18,%r14
    d9b4:	4d 39 fe             	cmp    %r15,%r14
    d9b7:	74 1a                	je     d9d3 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_ED2Ev+0x83>
	_M_deallocate(_M_impl._M_start,
    d9b9:	49 8b 3e             	mov    (%r14),%rdi
	if (__p)
    d9bc:	48 85 ff             	test   %rdi,%rdi
    d9bf:	74 ef                	je     d9b0 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_ED2Ev+0x60>
    d9c1:	e8 fa 9c 00 00       	callq  176c0 <_ZdlPv@plt>
    d9c6:	eb e8                	jmp    d9b0 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_ED2Ev+0x60>
	_M_deallocate(_M_impl._M_start,
    d9c8:	4c 8b 73 18          	mov    0x18(%rbx),%r14
	if (__p)
    d9cc:	4d 85 f6             	test   %r14,%r14
    d9cf:	75 99                	jne    d96a <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_ED2Ev+0x1a>
    d9d1:	eb 9f                	jmp    d972 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_ED2Ev+0x22>
	_M_deallocate(_M_impl._M_start,
    d9d3:	4c 8b 33             	mov    (%rbx),%r14
	if (__p)
    d9d6:	4d 85 f6             	test   %r14,%r14
    d9d9:	75 a8                	jne    d983 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_ED2Ev+0x33>
    d9db:	5b                   	pop    %rbx
    d9dc:	41 5e                	pop    %r14
    d9de:	41 5f                	pop    %r15
    d9e0:	c3                   	retq   
    d9e1:	cc                   	int3   
    d9e2:	cc                   	int3   
    d9e3:	cc                   	int3   
    d9e4:	cc                   	int3   
    d9e5:	cc                   	int3   
    d9e6:	cc                   	int3   
    d9e7:	cc                   	int3   
    d9e8:	cc                   	int3   
    d9e9:	cc                   	int3   
    d9ea:	cc                   	int3   
    d9eb:	cc                   	int3   
    d9ec:	cc                   	int3   
    d9ed:	cc                   	int3   
    d9ee:	cc                   	int3   
    d9ef:	cc                   	int3   

000000000000d9f0 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES2_ED2Ev>:
    d9f0:	41 57                	push   %r15
    d9f2:	41 56                	push   %r14
    d9f4:	53                   	push   %rbx
    d9f5:	48 89 fb             	mov    %rdi,%rbx
	_M_deallocate(_M_impl._M_start,
    d9f8:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
	if (__p)
    d9fc:	48 85 ff             	test   %rdi,%rdi
    d9ff:	74 05                	je     da06 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES2_ED2Ev+0x16>
    da01:	e8 ba 9c 00 00       	callq  176c0 <_ZdlPv@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    da06:	4c 8b 33             	mov    (%rbx),%r14
    da09:	4c 8b 7b 08          	mov    0x8(%rbx),%r15
    da0d:	4d 39 fe             	cmp    %r15,%r14
    da10:	75 27                	jne    da39 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES2_ED2Ev+0x49>
	if (__p)
    da12:	4d 85 f6             	test   %r14,%r14
    da15:	74 39                	je     da50 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES2_ED2Ev+0x60>
    da17:	4c 89 f7             	mov    %r14,%rdi
    da1a:	5b                   	pop    %rbx
    da1b:	41 5e                	pop    %r14
    da1d:	41 5f                	pop    %r15
    da1f:	e9 9c 9c 00 00       	jmpq   176c0 <_ZdlPv@plt>
    da24:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
    da2b:	00 00 00 00 00 
    da30:	49 83 c6 18          	add    $0x18,%r14
    da34:	4d 39 fe             	cmp    %r15,%r14
    da37:	74 0f                	je     da48 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES2_ED2Ev+0x58>
	_M_deallocate(_M_impl._M_start,
    da39:	49 8b 3e             	mov    (%r14),%rdi
	if (__p)
    da3c:	48 85 ff             	test   %rdi,%rdi
    da3f:	74 ef                	je     da30 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES2_ED2Ev+0x40>
    da41:	e8 7a 9c 00 00       	callq  176c0 <_ZdlPv@plt>
    da46:	eb e8                	jmp    da30 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES2_ED2Ev+0x40>
	_M_deallocate(_M_impl._M_start,
    da48:	4c 8b 33             	mov    (%rbx),%r14
	if (__p)
    da4b:	4d 85 f6             	test   %r14,%r14
    da4e:	75 c7                	jne    da17 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES2_ED2Ev+0x27>
    da50:	5b                   	pop    %rbx
    da51:	41 5e                	pop    %r14
    da53:	41 5f                	pop    %r15
    da55:	c3                   	retq   
    da56:	cc                   	int3   
    da57:	cc                   	int3   
    da58:	cc                   	int3   
    da59:	cc                   	int3   
    da5a:	cc                   	int3   
    da5b:	cc                   	int3   
    da5c:	cc                   	int3   
    da5d:	cc                   	int3   
    da5e:	cc                   	int3   
    da5f:	cc                   	int3   

000000000000da60 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_EC2IRS4_S7_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairIS9_SA_EEEbE4typeELb1EEEOS9_OSA_>:
    da60:	55                   	push   %rbp
    da61:	41 57                	push   %r15
    da63:	41 56                	push   %r14
    da65:	41 55                	push   %r13
    da67:	41 54                	push   %r12
    da69:	53                   	push   %rbx
    da6a:	50                   	push   %rax
    da6b:	49 89 d6             	mov    %rdx,%r14
    da6e:	49 89 f7             	mov    %rsi,%r15
    da71:	48 89 fb             	mov    %rdi,%rbx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    da74:	48 8b 7e 08          	mov    0x8(%rsi),%rdi
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    da78:	48 8b 06             	mov    (%rsi),%rax
    da7b:	48 89 fd             	mov    %rdi,%rbp
    da7e:	48 29 c5             	sub    %rax,%rbp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    da81:	48 c1 fd 03          	sar    $0x3,%rbp
    da85:	49 bd ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%r13
    da8c:	aa aa aa 
    da8f:	49 0f af ed          	imul   %r13,%rbp
    da93:	49 bc 55 55 55 55 55 	movabs $0x555555555555555,%r12
    da9a:	55 55 05 
	: _M_start(), _M_finish(), _M_end_of_storage()
    da9d:	0f 57 c0             	xorps  %xmm0,%xmm0
    daa0:	0f 11 03             	movups %xmm0,(%rbx)
    daa3:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
    daaa:	00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    daab:	48 29 c7             	sub    %rax,%rdi
    daae:	74 13                	je     dac3 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_EC2IRS4_S7_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairIS9_SA_EEEbE4typeELb1EEEOS9_OSA_+0x63>
	if (__n > this->_M_max_size())
    dab0:	4c 39 e5             	cmp    %r12,%rbp
    dab3:	0f 87 a7 00 00 00    	ja     db60 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_EC2IRS4_S7_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairIS9_SA_EEEbE4typeELb1EEEOS9_OSA_+0x100>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    dab9:	e8 a2 9c 00 00       	callq  17760 <_Znwm@plt>
    dabe:	48 89 c2             	mov    %rax,%rdx
    dac1:	eb 02                	jmp    dac5 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_EC2IRS4_S7_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairIS9_SA_EEEbE4typeELb1EEEOS9_OSA_+0x65>
    dac3:	31 d2                	xor    %edx,%edx
	this->_M_impl._M_start = this->_M_allocate(__n);
    dac5:	48 89 13             	mov    %rdx,(%rbx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    dac8:	48 89 53 08          	mov    %rdx,0x8(%rbx)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    dacc:	48 8d 04 6d 00 00 00 	lea    0x0(,%rbp,2),%rax
    dad3:	00 
    dad4:	48 01 e8             	add    %rbp,%rax
    dad7:	48 8d 04 c2          	lea    (%rdx,%rax,8),%rax
    dadb:	48 89 43 10          	mov    %rax,0x10(%rbx)
      : _M_current(__i) { }
    dadf:	49 8b 3f             	mov    (%r15),%rdi
    dae2:	49 8b 77 08          	mov    0x8(%r15),%rsi
      return std::__uninitialized_copy<__is_trivial(_ValueType1)
    dae6:	e8 d5 ef ff ff       	callq  cac0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_>
	this->_M_impl._M_finish =
    daeb:	48 89 43 08          	mov    %rax,0x8(%rbx)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    daef:	49 8b 7e 08          	mov    0x8(%r14),%rdi
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    daf3:	49 8b 06             	mov    (%r14),%rax
    daf6:	49 89 ff             	mov    %rdi,%r15
    daf9:	49 29 c7             	sub    %rax,%r15
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    dafc:	49 c1 ff 03          	sar    $0x3,%r15
    db00:	4d 0f af fd          	imul   %r13,%r15
	: _M_start(), _M_finish(), _M_end_of_storage()
    db04:	0f 57 c0             	xorps  %xmm0,%xmm0
    db07:	0f 11 43 18          	movups %xmm0,0x18(%rbx)
    db0b:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
    db12:	00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    db13:	48 29 c7             	sub    %rax,%rdi
    db16:	74 0f                	je     db27 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_EC2IRS4_S7_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairIS9_SA_EEEbE4typeELb1EEEOS9_OSA_+0xc7>
	if (__n > this->_M_max_size())
    db18:	4d 39 e7             	cmp    %r12,%r15
    db1b:	77 48                	ja     db65 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_EC2IRS4_S7_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairIS9_SA_EEEbE4typeELb1EEEOS9_OSA_+0x105>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    db1d:	e8 3e 9c 00 00       	callq  17760 <_Znwm@plt>
    db22:	48 89 c2             	mov    %rax,%rdx
    db25:	eb 02                	jmp    db29 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_EC2IRS4_S7_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairIS9_SA_EEEbE4typeELb1EEEOS9_OSA_+0xc9>
    db27:	31 d2                	xor    %edx,%edx
    db29:	4c 8d 63 18          	lea    0x18(%rbx),%r12
	this->_M_impl._M_start = this->_M_allocate(__n);
    db2d:	48 89 53 18          	mov    %rdx,0x18(%rbx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    db31:	48 89 53 20          	mov    %rdx,0x20(%rbx)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    db35:	4b 8d 04 7f          	lea    (%r15,%r15,2),%rax
    db39:	48 8d 04 c2          	lea    (%rdx,%rax,8),%rax
    db3d:	48 89 43 28          	mov    %rax,0x28(%rbx)
    db41:	49 8b 3e             	mov    (%r14),%rdi
    db44:	49 8b 76 08          	mov    0x8(%r14),%rsi
    db48:	e8 73 ef ff ff       	callq  cac0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_>
	this->_M_impl._M_finish =
    db4d:	48 89 43 20          	mov    %rax,0x20(%rbx)
    db51:	48 83 c4 08          	add    $0x8,%rsp
    db55:	5b                   	pop    %rbx
    db56:	41 5c                	pop    %r12
    db58:	41 5d                	pop    %r13
    db5a:	41 5e                	pop    %r14
    db5c:	41 5f                	pop    %r15
    db5e:	5d                   	pop    %rbp
    db5f:	c3                   	retq   
	  std::__throw_bad_alloc();
    db60:	e8 3b 9b 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
    db65:	e8 36 9b 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
    db6a:	49 89 c6             	mov    %rax,%r14
	_M_deallocate(_M_impl._M_start,
    db6d:	49 8b 3c 24          	mov    (%r12),%rdi
	if (__p)
    db71:	48 85 ff             	test   %rdi,%rdi
    db74:	74 22                	je     db98 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_EC2IRS4_S7_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairIS9_SA_EEEbE4typeELb1EEEOS9_OSA_+0x138>
	::operator delete(__p
    db76:	e8 45 9b 00 00       	callq  176c0 <_ZdlPv@plt>
    db7b:	eb 1b                	jmp    db98 <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_EC2IRS4_S7_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairIS9_SA_EEEbE4typeELb1EEEOS9_OSA_+0x138>
    db7d:	49 89 c6             	mov    %rax,%r14
	_M_deallocate(_M_impl._M_start,
    db80:	48 8b 3b             	mov    (%rbx),%rdi
	if (__p)
    db83:	48 85 ff             	test   %rdi,%rdi
    db86:	74 05                	je     db8d <_ZNSt4pairISt6vectorIS0_IfSaIfEESaIS2_EES4_EC2IRS4_S7_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairIS9_SA_EEEbE4typeELb1EEEOS9_OSA_+0x12d>
    db88:	e8 33 9b 00 00       	callq  176c0 <_ZdlPv@plt>
    db8d:	4c 89 f7             	mov    %r14,%rdi
    db90:	e8 db 9d 00 00       	callq  17970 <_Unwind_Resume@plt>
    db95:	49 89 c6             	mov    %rax,%r14
    db98:	48 89 df             	mov    %rbx,%rdi
    db9b:	e8 80 ec ff ff       	callq  c820 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED2Ev>
    dba0:	4c 89 f7             	mov    %r14,%rdi
    dba3:	e8 c8 9d 00 00       	callq  17970 <_Unwind_Resume@plt>
    dba8:	cc                   	int3   
    dba9:	cc                   	int3   
    dbaa:	cc                   	int3   
    dbab:	cc                   	int3   
    dbac:	cc                   	int3   
    dbad:	cc                   	int3   
    dbae:	cc                   	int3   
    dbaf:	cc                   	int3   

000000000000dbb0 <_ZNSt4pairISt6vectorIfSaIfEES2_EC2IRS2_S5_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairIS7_S8_EEEbE4typeELb1EEEOS7_OS8_>:
    dbb0:	55                   	push   %rbp
    dbb1:	41 57                	push   %r15
    dbb3:	41 56                	push   %r14
    dbb5:	41 55                	push   %r13
    dbb7:	41 54                	push   %r12
    dbb9:	53                   	push   %rbx
    dbba:	50                   	push   %rax
    dbbb:	49 89 d6             	mov    %rdx,%r14
    dbbe:	49 89 f7             	mov    %rsi,%r15
    dbc1:	48 89 fb             	mov    %rdi,%rbx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    dbc4:	48 8b 7e 08          	mov    0x8(%rsi),%rdi
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    dbc8:	48 8b 06             	mov    (%rsi),%rax
    dbcb:	48 89 fd             	mov    %rdi,%rbp
    dbce:	48 29 c5             	sub    %rax,%rbp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    dbd1:	48 c1 fd 02          	sar    $0x2,%rbp
    dbd5:	49 bd ff ff ff ff ff 	movabs $0x1fffffffffffffff,%r13
    dbdc:	ff ff 1f 
	: _M_start(), _M_finish(), _M_end_of_storage()
    dbdf:	0f 57 c0             	xorps  %xmm0,%xmm0
    dbe2:	0f 11 03             	movups %xmm0,(%rbx)
    dbe5:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
    dbec:	00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    dbed:	48 29 c7             	sub    %rax,%rdi
    dbf0:	74 13                	je     dc05 <_ZNSt4pairISt6vectorIfSaIfEES2_EC2IRS2_S5_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairIS7_S8_EEEbE4typeELb1EEEOS7_OS8_+0x55>
	if (__n > this->_M_max_size())
    dbf2:	4c 39 ed             	cmp    %r13,%rbp
    dbf5:	0f 87 ae 00 00 00    	ja     dca9 <_ZNSt4pairISt6vectorIfSaIfEES2_EC2IRS2_S5_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairIS7_S8_EEEbE4typeELb1EEEOS7_OS8_+0xf9>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    dbfb:	e8 60 9b 00 00       	callq  17760 <_Znwm@plt>
    dc00:	49 89 c4             	mov    %rax,%r12
    dc03:	eb 03                	jmp    dc08 <_ZNSt4pairISt6vectorIfSaIfEES2_EC2IRS2_S5_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairIS7_S8_EEEbE4typeELb1EEEOS7_OS8_+0x58>
    dc05:	45 31 e4             	xor    %r12d,%r12d
	this->_M_impl._M_start = this->_M_allocate(__n);
    dc08:	4c 89 23             	mov    %r12,(%rbx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    dc0b:	4c 89 63 08          	mov    %r12,0x8(%rbx)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    dc0f:	49 8d 04 ac          	lea    (%r12,%rbp,4),%rax
    dc13:	48 89 43 10          	mov    %rax,0x10(%rbx)
    dc17:	49 8b 37             	mov    (%r15),%rsi
    dc1a:	4d 8b 7f 08          	mov    0x8(%r15),%r15
	  if (_Num)
    dc1e:	49 29 f7             	sub    %rsi,%r15
    dc21:	74 0b                	je     dc2e <_ZNSt4pairISt6vectorIfSaIfEES2_EC2IRS2_S5_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairIS7_S8_EEEbE4typeELb1EEEOS7_OS8_+0x7e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    dc23:	4c 89 e7             	mov    %r12,%rdi
    dc26:	4c 89 fa             	mov    %r15,%rdx
    dc29:	e8 32 9d 00 00       	callq  17960 <memmove@plt>
	  return __result + _Num;
    dc2e:	4d 01 fc             	add    %r15,%r12
	this->_M_impl._M_finish =
    dc31:	4c 89 63 08          	mov    %r12,0x8(%rbx)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    dc35:	49 8b 7e 08          	mov    0x8(%r14),%rdi
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    dc39:	49 8b 06             	mov    (%r14),%rax
    dc3c:	49 89 fc             	mov    %rdi,%r12
    dc3f:	49 29 c4             	sub    %rax,%r12
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    dc42:	49 c1 fc 02          	sar    $0x2,%r12
	: _M_start(), _M_finish(), _M_end_of_storage()
    dc46:	0f 57 c0             	xorps  %xmm0,%xmm0
    dc49:	0f 11 43 18          	movups %xmm0,0x18(%rbx)
    dc4d:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
    dc54:	00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    dc55:	48 29 c7             	sub    %rax,%rdi
    dc58:	74 0f                	je     dc69 <_ZNSt4pairISt6vectorIfSaIfEES2_EC2IRS2_S5_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairIS7_S8_EEEbE4typeELb1EEEOS7_OS8_+0xb9>
	if (__n > this->_M_max_size())
    dc5a:	4d 39 ec             	cmp    %r13,%r12
    dc5d:	77 4f                	ja     dcae <_ZNSt4pairISt6vectorIfSaIfEES2_EC2IRS2_S5_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairIS7_S8_EEEbE4typeELb1EEEOS7_OS8_+0xfe>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    dc5f:	e8 fc 9a 00 00       	callq  17760 <_Znwm@plt>
    dc64:	49 89 c7             	mov    %rax,%r15
    dc67:	eb 03                	jmp    dc6c <_ZNSt4pairISt6vectorIfSaIfEES2_EC2IRS2_S5_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairIS7_S8_EEEbE4typeELb1EEEOS7_OS8_+0xbc>
    dc69:	45 31 ff             	xor    %r15d,%r15d
	this->_M_impl._M_start = this->_M_allocate(__n);
    dc6c:	4c 89 7b 18          	mov    %r15,0x18(%rbx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    dc70:	4c 89 7b 20          	mov    %r15,0x20(%rbx)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    dc74:	4b 8d 04 a7          	lea    (%r15,%r12,4),%rax
    dc78:	48 89 43 28          	mov    %rax,0x28(%rbx)
    dc7c:	49 8b 36             	mov    (%r14),%rsi
    dc7f:	4d 8b 76 08          	mov    0x8(%r14),%r14
	  if (_Num)
    dc83:	49 29 f6             	sub    %rsi,%r14
    dc86:	74 0b                	je     dc93 <_ZNSt4pairISt6vectorIfSaIfEES2_EC2IRS2_S5_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairIS7_S8_EEEbE4typeELb1EEEOS7_OS8_+0xe3>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    dc88:	4c 89 ff             	mov    %r15,%rdi
    dc8b:	4c 89 f2             	mov    %r14,%rdx
    dc8e:	e8 cd 9c 00 00       	callq  17960 <memmove@plt>
	  return __result + _Num;
    dc93:	4d 01 f7             	add    %r14,%r15
	this->_M_impl._M_finish =
    dc96:	4c 89 7b 20          	mov    %r15,0x20(%rbx)
    dc9a:	48 83 c4 08          	add    $0x8,%rsp
    dc9e:	5b                   	pop    %rbx
    dc9f:	41 5c                	pop    %r12
    dca1:	41 5d                	pop    %r13
    dca3:	41 5e                	pop    %r14
    dca5:	41 5f                	pop    %r15
    dca7:	5d                   	pop    %rbp
    dca8:	c3                   	retq   
	  std::__throw_bad_alloc();
    dca9:	e8 f2 99 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
    dcae:	e8 ed 99 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
    dcb3:	49 89 c6             	mov    %rax,%r14
	_M_deallocate(_M_impl._M_start,
    dcb6:	48 8b 3b             	mov    (%rbx),%rdi
	if (__p)
    dcb9:	48 85 ff             	test   %rdi,%rdi
    dcbc:	74 05                	je     dcc3 <_ZNSt4pairISt6vectorIfSaIfEES2_EC2IRS2_S5_TnNSt9enable_ifIXaaclsr5_PCCPE22_MoveConstructiblePairIT_T0_EEclsr5_PCCPE30_ImplicitlyMoveConvertiblePairIS7_S8_EEEbE4typeELb1EEEOS7_OS8_+0x113>
	::operator delete(__p
    dcbe:	e8 fd 99 00 00       	callq  176c0 <_ZdlPv@plt>
    dcc3:	4c 89 f7             	mov    %r14,%rdi
    dcc6:	e8 a5 9c 00 00       	callq  17970 <_Unwind_Resume@plt>
    dccb:	cc                   	int3   
    dccc:	cc                   	int3   
    dccd:	cc                   	int3   
    dcce:	cc                   	int3   
    dccf:	cc                   	int3   

000000000000dcd0 <_GLOBAL__sub_I_genetic_benchmark.cpp>:
    dcd0:	53                   	push   %rbx
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  ///@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
    dcd1:	48 8d 1d f9 c3 00 00 	lea    0xc3f9(%rip),%rbx        # 1a0d1 <_ZStL8__ioinit>
    dcd8:	48 89 df             	mov    %rbx,%rdi
    dcdb:	e8 90 9a 00 00       	callq  17770 <_ZNSt8ios_base4InitC1Ev@plt>
    dce0:	48 8b 3d c9 b0 00 00 	mov    0xb0c9(%rip),%rdi        # 18db0 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    dce7:	48 8d 15 1a c1 00 00 	lea    0xc11a(%rip),%rdx        # 19e08 <__dso_handle>
    dcee:	48 89 de             	mov    %rbx,%rsi
    dcf1:	5b                   	pop    %rbx
    dcf2:	e9 d9 9c 00 00       	jmpq   179d0 <__cxa_atexit@plt>
    dcf7:	cc                   	int3   
    dcf8:	cc                   	int3   
    dcf9:	cc                   	int3   
    dcfa:	cc                   	int3   
    dcfb:	cc                   	int3   
    dcfc:	cc                   	int3   
    dcfd:	cc                   	int3   
    dcfe:	cc                   	int3   
    dcff:	cc                   	int3   

000000000000dd00 <_ZN7genetic7programC1Ev>:
            }
        }
    }

    program::program()
        : nodes(nullptr), len(0), depth(0), raw_fitness_(0.0f), metric(metric_t::mse),
    dd00:	0f 57 c0             	xorps  %xmm0,%xmm0
    dd03:	0f 11 07             	movups %xmm0,(%rdi)
    dd06:	48 b8 00 00 00 00 01 	movabs $0x100000000,%rax
    dd0d:	00 00 00 
    dd10:	48 89 47 10          	mov    %rax,0x10(%rdi)
          mut_type(mutation_t::none) {
    dd14:	c7 47 18 00 00 00 00 	movl   $0x0,0x18(%rdi)
    }
    dd1b:	c3                   	retq   
    dd1c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000dd20 <_ZN7genetic7programD1Ev>:

    program::~program() {
    dd20:	53                   	push   %rbx
    dd21:	48 89 fb             	mov    %rdi,%rbx

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
    dd24:	48 8b 3f             	mov    (%rdi),%rdi
    dd27:	48 85 ff             	test   %rdi,%rdi
    dd2a:	74 05                	je     dd31 <_ZN7genetic7programD1Ev+0x11>
	  delete [] __ptr;
    dd2c:	e8 df 99 00 00       	callq  17710 <_ZdaPv@plt>
	  get_deleter()(__ptr);
	__ptr = pointer();
    dd31:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
        // delete[] nodes;
        // delete[] nodes;
    }
    dd38:	5b                   	pop    %rbx
    dd39:	c3                   	retq   
    dd3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000dd40 <_ZN7genetic7programC1ERKS0_>:

    program::program(const program& src)
        : len(src.len), depth(src.depth), raw_fitness_(src.raw_fitness_), metric(src.metric),
          mut_type(src.mut_type) {
    dd40:	41 57                	push   %r15
    dd42:	41 56                	push   %r14
    dd44:	41 55                	push   %r13
    dd46:	41 54                	push   %r12
    dd48:	53                   	push   %rbx
    dd49:	49 89 f7             	mov    %rsi,%r15
    dd4c:	48 89 fb             	mov    %rdi,%rbx

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
    dd4f:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
        : len(src.len), depth(src.depth), raw_fitness_(src.raw_fitness_), metric(src.metric),
    dd56:	4c 8b 6e 08          	mov    0x8(%rsi),%r13
    dd5a:	4c 89 6f 08          	mov    %r13,0x8(%rdi)
    dd5e:	f3 0f 10 46 10       	movss  0x10(%rsi),%xmm0
    dd63:	f3 0f 11 47 10       	movss  %xmm0,0x10(%rdi)
    dd68:	48 8b 46 14          	mov    0x14(%rsi),%rax
    dd6c:	48 89 47 14          	mov    %rax,0x14(%rdi)
        nodes = std::make_unique<node[]>(len);
    dd70:	49 63 c5             	movslq %r13d,%rax

  /// std::make_unique for arrays of unknown bound
  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
    dd73:	49 89 c4             	mov    %rax,%r12
    dd76:	49 c1 e4 04          	shl    $0x4,%r12
    dd7a:	85 c0                	test   %eax,%eax
    dd7c:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
    dd83:	49 0f 49 fc          	cmovns %r12,%rdi
    dd87:	e8 d4 98 00 00       	callq  17660 <_Znam@plt>
    dd8c:	49 89 c6             	mov    %rax,%r14
    dd8f:	45 85 ed             	test   %r13d,%r13d
    dd92:	74 33                	je     ddc7 <_ZN7genetic7programC1ERKS0_+0x87>
    dd94:	45 31 ed             	xor    %r13d,%r13d
    dd97:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    dd9e:	00 00 
    dda0:	4b 8d 3c 2e          	lea    (%r14,%r13,1),%rdi
    dda4:	e8 07 8e 00 00       	callq  16bb0 <_ZN7genetic4nodeC1Ev>
    dda9:	49 83 c5 10          	add    $0x10,%r13
    ddad:	4d 39 ec             	cmp    %r13,%r12
    ddb0:	75 ee                	jne    dda0 <_ZN7genetic7programC1ERKS0_+0x60>
	const pointer __old_p = _M_ptr();
    ddb2:	48 8b 3b             	mov    (%rbx),%rdi
	_M_ptr() = __p;
    ddb5:	4c 89 33             	mov    %r14,(%rbx)
	if (__old_p)
    ddb8:	48 85 ff             	test   %rdi,%rdi
    ddbb:	74 0d                	je     ddca <_ZN7genetic7programC1ERKS0_+0x8a>
	  delete [] __ptr;
    ddbd:	e8 4e 99 00 00       	callq  17710 <_ZdaPv@plt>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    ddc2:	4c 8b 33             	mov    (%rbx),%r14
    ddc5:	eb 03                	jmp    ddca <_ZN7genetic7programC1ERKS0_+0x8a>
	_M_ptr() = __p;
    ddc7:	4c 89 33             	mov    %r14,(%rbx)

        std::copy(src.nodes.get(), src.nodes.get() + src.len, nodes.get());
    ddca:	45 8b 67 08          	mov    0x8(%r15),%r12d
	  for(_Distance __n = __last - __first; __n > 0; --__n)
    ddce:	45 85 e4             	test   %r12d,%r12d
    ddd1:	7e 29                	jle    ddfc <_ZN7genetic7programC1ERKS0_+0xbc>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    ddd3:	4d 8b 3f             	mov    (%r15),%r15
    ddd6:	49 ff c4             	inc    %r12
    ddd9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	      *__result = *__first;
    dde0:	4c 89 f7             	mov    %r14,%rdi
    dde3:	4c 89 fe             	mov    %r15,%rsi
    dde6:	e8 25 90 00 00       	callq  16e10 <_ZN7genetic4nodeaSERKS0_>
	      ++__first;
    ddeb:	49 83 c7 10          	add    $0x10,%r15
	      ++__result;
    ddef:	49 83 c6 10          	add    $0x10,%r14
	  for(_Distance __n = __last - __first; __n > 0; --__n)
    ddf3:	49 ff cc             	dec    %r12
    ddf6:	49 83 fc 01          	cmp    $0x1,%r12
    ddfa:	77 e4                	ja     dde0 <_ZN7genetic7programC1ERKS0_+0xa0>
    }
    ddfc:	5b                   	pop    %rbx
    ddfd:	41 5c                	pop    %r12
    ddff:	41 5d                	pop    %r13
    de01:	41 5e                	pop    %r14
    de03:	41 5f                	pop    %r15
    de05:	c3                   	retq   
    de06:	eb 00                	jmp    de08 <_ZN7genetic7programC1ERKS0_+0xc8>
    de08:	49 89 c7             	mov    %rax,%r15
    de0b:	eb 0b                	jmp    de18 <_ZN7genetic7programC1ERKS0_+0xd8>
    de0d:	49 89 c7             	mov    %rax,%r15
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
    de10:	4c 89 f7             	mov    %r14,%rdi
    de13:	e8 f8 98 00 00       	callq  17710 <_ZdaPv@plt>
	if (__ptr != nullptr)
    de18:	48 8b 3b             	mov    (%rbx),%rdi
    de1b:	48 85 ff             	test   %rdi,%rdi
    de1e:	74 05                	je     de25 <_ZN7genetic7programC1ERKS0_+0xe5>
	  delete [] __ptr;
    de20:	e8 eb 98 00 00       	callq  17710 <_ZdaPv@plt>
	__ptr = pointer();
    de25:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
    de2c:	4c 89 ff             	mov    %r15,%rdi
    de2f:	e8 3c 9b 00 00       	callq  17970 <_Unwind_Resume@plt>
    de34:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
    de3b:	00 00 00 00 00 

000000000000de40 <_ZN7genetic7programaSERKS0_>:

    program& program::operator=(const program& src) {
    de40:	41 57                	push   %r15
    de42:	41 56                	push   %r14
    de44:	41 55                	push   %r13
    de46:	41 54                	push   %r12
    de48:	53                   	push   %rbx
    de49:	49 89 f7             	mov    %rsi,%r15
    de4c:	48 89 fb             	mov    %rdi,%rbx
        len          = src.len;
    de4f:	48 8b 46 08          	mov    0x8(%rsi),%rax
    de53:	48 89 47 08          	mov    %rax,0x8(%rdi)
        depth        = src.depth;
        raw_fitness_ = src.raw_fitness_;
    de57:	f3 0f 10 46 10       	movss  0x10(%rsi),%xmm0
    de5c:	f3 0f 11 47 10       	movss  %xmm0,0x10(%rdi)
        metric       = src.metric;
    de61:	48 8b 4e 14          	mov    0x14(%rsi),%rcx
    de65:	48 89 4f 14          	mov    %rcx,0x14(%rdi)
        mut_type     = src.mut_type;

        // Copy nodes
        // delete[] nodes;
        // delete[] nodes;
        nodes = std::make_unique<node[]>(len);
    de69:	4c 63 e8             	movslq %eax,%r13
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
    de6c:	4d 89 ec             	mov    %r13,%r12
    de6f:	49 c1 e4 04          	shl    $0x4,%r12
    de73:	45 85 ed             	test   %r13d,%r13d
    de76:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
    de7d:	49 0f 49 fc          	cmovns %r12,%rdi
    de81:	e8 da 97 00 00       	callq  17660 <_Znam@plt>
    de86:	49 89 c6             	mov    %rax,%r14
    de89:	45 85 ed             	test   %r13d,%r13d
    de8c:	74 24                	je     deb2 <_ZN7genetic7programaSERKS0_+0x72>
    de8e:	45 31 ed             	xor    %r13d,%r13d
    de91:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    de98:	0f 1f 84 00 00 00 00 
    de9f:	00 
    dea0:	4b 8d 3c 2e          	lea    (%r14,%r13,1),%rdi
    dea4:	e8 07 8d 00 00       	callq  16bb0 <_ZN7genetic4nodeC1Ev>
    dea9:	49 83 c5 10          	add    $0x10,%r13
    dead:	4d 39 ec             	cmp    %r13,%r12
    deb0:	75 ee                	jne    dea0 <_ZN7genetic7programaSERKS0_+0x60>
	const pointer __old_p = _M_ptr();
    deb2:	48 8b 3b             	mov    (%rbx),%rdi
	_M_ptr() = __p;
    deb5:	4c 89 33             	mov    %r14,(%rbx)
	if (__old_p)
    deb8:	48 85 ff             	test   %rdi,%rdi
    debb:	74 08                	je     dec5 <_ZN7genetic7programaSERKS0_+0x85>
	  delete [] __ptr;
    debd:	e8 4e 98 00 00       	callq  17710 <_ZdaPv@plt>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    dec2:	4c 8b 33             	mov    (%rbx),%r14
        std::copy(src.nodes.get(), src.nodes.get() + src.len, nodes.get());
    dec5:	45 8b 67 08          	mov    0x8(%r15),%r12d
    dec9:	45 85 e4             	test   %r12d,%r12d
    decc:	7e 2e                	jle    defc <_ZN7genetic7programaSERKS0_+0xbc>
    dece:	4d 8b 3f             	mov    (%r15),%r15
    ded1:	49 ff c4             	inc    %r12
    ded4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
    dedb:	00 00 00 00 00 
	      *__result = *__first;
    dee0:	4c 89 f7             	mov    %r14,%rdi
    dee3:	4c 89 fe             	mov    %r15,%rsi
    dee6:	e8 25 8f 00 00       	callq  16e10 <_ZN7genetic4nodeaSERKS0_>
	      ++__first;
    deeb:	49 83 c7 10          	add    $0x10,%r15
	      ++__result;
    deef:	49 83 c6 10          	add    $0x10,%r14
	  for(_Distance __n = __last - __first; __n > 0; --__n)
    def3:	49 ff cc             	dec    %r12
    def6:	49 83 fc 01          	cmp    $0x1,%r12
    defa:	77 e4                	ja     dee0 <_ZN7genetic7programaSERKS0_+0xa0>

        return *this;
    defc:	48 89 d8             	mov    %rbx,%rax
    deff:	5b                   	pop    %rbx
    df00:	41 5c                	pop    %r12
    df02:	41 5d                	pop    %r13
    df04:	41 5e                	pop    %r14
    df06:	41 5f                	pop    %r15
    df08:	c3                   	retq   
    df09:	48 89 c3             	mov    %rax,%rbx
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
    df0c:	4c 89 f7             	mov    %r14,%rdi
    df0f:	e8 fc 97 00 00       	callq  17710 <_ZdaPv@plt>
    df14:	48 89 df             	mov    %rbx,%rdi
    df17:	e8 54 9a 00 00       	callq  17970 <_Unwind_Resume@plt>
    df1c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000df20 <_ZN7genetic14compute_metricEiiPKfS1_S1_PfRKNS_5paramE>:
    }

    void compute_metric(int n_rows, int n_progs, const float* y, const float* y_pred,
                        const float* w, float* score, const param& params) {
    df20:	55                   	push   %rbp
    df21:	41 57                	push   %r15
    df23:	41 56                	push   %r14
    df25:	41 54                	push   %r12
    df27:	53                   	push   %rbx
    df28:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
        // Call appropriate metric function based on metric defined in params
        if (params.metric == metric_t::pearson) {
    df2d:	8b 80 94 00 00 00    	mov    0x94(%rax),%eax
    df33:	48 83 f8 05          	cmp    $0x5,%rax
    df37:	0f 87 aa 00 00 00    	ja     dfe7 <_ZN7genetic14compute_metricEiiPKfS1_S1_PfRKNS_5paramE+0xc7>
    df3d:	4c 89 cb             	mov    %r9,%rbx
    df40:	4c 8d 0d 29 4f ff ff 	lea    -0xb0d7(%rip),%r9        # 2e70 <_IO_stdin_used+0x780>
    df47:	49 63 04 81          	movslq (%r9,%rax,4),%rax
    df4b:	4c 01 c8             	add    %r9,%rax
    df4e:	ff e0                	jmpq   *%rax
            weightedPearson(n_rows, n_progs, y, y_pred, w, score);
        } else if (params.metric == metric_t::spearman) {
            weightedSpearman(n_rows, n_progs, y, y_pred, w, score);
        } else if (params.metric == metric_t::mae) {
            meanAbsoluteError(n_rows, n_progs, y, y_pred, w, score);
    df50:	48 63 ff             	movslq %edi,%rdi
    df53:	48 63 f6             	movslq %esi,%rsi
    df56:	49 89 d9             	mov    %rbx,%r9
    df59:	5b                   	pop    %rbx
    df5a:	41 5c                	pop    %r12
    df5c:	41 5e                	pop    %r14
    df5e:	41 5f                	pop    %r15
    df60:	5d                   	pop    %rbp
    df61:	e9 ea 46 00 00       	jmpq   12650 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_>
            weightedSpearman(n_rows, n_progs, y, y_pred, w, score);
    df66:	48 63 ff             	movslq %edi,%rdi
    df69:	48 63 f6             	movslq %esi,%rsi
    df6c:	49 89 d9             	mov    %rbx,%r9
    df6f:	5b                   	pop    %rbx
    df70:	41 5c                	pop    %r12
    df72:	41 5e                	pop    %r14
    df74:	41 5f                	pop    %r15
    df76:	5d                   	pop    %rbp
    df77:	e9 14 38 00 00       	jmpq   11790 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_>
        } else if (params.metric == metric_t::mse) {
            meanSquareError(n_rows, n_progs, y, y_pred, w, score);
        } else if (params.metric == metric_t::rmse) {
            rootMeanSquareError(n_rows, n_progs, y, y_pred, w, score);
    df7c:	48 63 ff             	movslq %edi,%rdi
    df7f:	4c 63 f6             	movslq %esi,%r14
    df82:	89 f5                	mov    %esi,%ebp

    template <typename math_t = float>
    void rootMeanSquareError(const uint64_t n_samples, const uint64_t n_progs, const math_t* Y,
                             const math_t* Y_pred, const math_t* W, math_t* out) {
        // Find MSE
        meanSquareError(n_samples, n_progs, Y, Y_pred, W, out);
    df84:	4c 89 f6             	mov    %r14,%rsi
    df87:	49 89 d9             	mov    %rbx,%r9
    df8a:	e8 f1 49 00 00       	callq  12980 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_>

        // Take sqrt on all entries
        for (uint64_t pid = 0; pid < n_progs; ++pid) {
    df8f:	85 ed                	test   %ebp,%ebp
    df91:	74 54                	je     dfe7 <_ZN7genetic14compute_metricEiiPKfS1_S1_PfRKNS_5paramE+0xc7>
    df93:	89 e8                	mov    %ebp,%eax
    df95:	41 89 ef             	mov    %ebp,%r15d
    df98:	41 83 e7 03          	and    $0x3,%r15d
    df9c:	83 fd 04             	cmp    $0x4,%ebp
    df9f:	0f 83 8d 00 00 00    	jae    e032 <_ZN7genetic14compute_metricEiiPKfS1_S1_PfRKNS_5paramE+0x112>
    dfa5:	45 31 e4             	xor    %r12d,%r12d
    dfa8:	4d 85 ff             	test   %r15,%r15
    dfab:	74 3a                	je     dfe7 <_ZN7genetic14compute_metricEiiPKfS1_S1_PfRKNS_5paramE+0xc7>
    dfad:	4a 8d 1c a3          	lea    (%rbx,%r12,4),%rbx
    dfb1:	45 31 f6             	xor    %r14d,%r14d
    dfb4:	0f 57 c9             	xorps  %xmm1,%xmm1
    dfb7:	eb 1d                	jmp    dfd6 <_ZN7genetic14compute_metricEiiPKfS1_S1_PfRKNS_5paramE+0xb6>
    dfb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            out[pid] = sqrt(out[pid]);
    dfc0:	e8 cb 98 00 00       	callq  17890 <sqrtf@plt>
    dfc5:	0f 57 c9             	xorps  %xmm1,%xmm1
    dfc8:	f3 42 0f 11 04 b3    	movss  %xmm0,(%rbx,%r14,4)
        for (uint64_t pid = 0; pid < n_progs; ++pid) {
    dfce:	49 ff c6             	inc    %r14
    dfd1:	4d 39 f7             	cmp    %r14,%r15
    dfd4:	74 11                	je     dfe7 <_ZN7genetic14compute_metricEiiPKfS1_S1_PfRKNS_5paramE+0xc7>
            out[pid] = sqrt(out[pid]);
    dfd6:	f3 42 0f 10 04 b3    	movss  (%rbx,%r14,4),%xmm0
    dfdc:	0f 2e c1             	ucomiss %xmm1,%xmm0
    dfdf:	72 df                	jb     dfc0 <_ZN7genetic14compute_metricEiiPKfS1_S1_PfRKNS_5paramE+0xa0>
    dfe1:	f3 0f 51 c0          	sqrtss %xmm0,%xmm0
    dfe5:	eb e1                	jmp    dfc8 <_ZN7genetic14compute_metricEiiPKfS1_S1_PfRKNS_5paramE+0xa8>
        } else if (params.metric == metric_t::logloss) {
            logLoss(n_rows, n_progs, y, y_pred, w, score);
        } else {
            // This should not be reachable
        }
    }
    dfe7:	5b                   	pop    %rbx
    dfe8:	41 5c                	pop    %r12
    dfea:	41 5e                	pop    %r14
    dfec:	41 5f                	pop    %r15
    dfee:	5d                   	pop    %rbp
    dfef:	c3                   	retq   
            weightedPearson(n_rows, n_progs, y, y_pred, w, score);
    dff0:	48 63 ff             	movslq %edi,%rdi
    dff3:	48 63 f6             	movslq %esi,%rsi
    dff6:	49 89 d9             	mov    %rbx,%r9
    dff9:	5b                   	pop    %rbx
    dffa:	41 5c                	pop    %r12
    dffc:	41 5e                	pop    %r14
    dffe:	41 5f                	pop    %r15
    e000:	5d                   	pop    %rbp
    e001:	e9 5a 2a 00 00       	jmpq   10a60 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_>
            meanSquareError(n_rows, n_progs, y, y_pred, w, score);
    e006:	48 63 ff             	movslq %edi,%rdi
    e009:	48 63 f6             	movslq %esi,%rsi
    e00c:	49 89 d9             	mov    %rbx,%r9
    e00f:	5b                   	pop    %rbx
    e010:	41 5c                	pop    %r12
    e012:	41 5e                	pop    %r14
    e014:	41 5f                	pop    %r15
    e016:	5d                   	pop    %rbp
    e017:	e9 64 49 00 00       	jmpq   12980 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_>
            logLoss(n_rows, n_progs, y, y_pred, w, score);
    e01c:	48 63 ff             	movslq %edi,%rdi
    e01f:	48 63 f6             	movslq %esi,%rsi
    e022:	49 89 d9             	mov    %rbx,%r9
    e025:	5b                   	pop    %rbx
    e026:	41 5c                	pop    %r12
    e028:	41 5e                	pop    %r14
    e02a:	41 5f                	pop    %r15
    e02c:	5d                   	pop    %rbp
    e02d:	e9 6e 4c 00 00       	jmpq   12ca0 <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_>
        for (uint64_t pid = 0; pid < n_progs; ++pid) {
    e032:	49 83 e6 fc          	and    $0xfffffffffffffffc,%r14
    e036:	45 31 e4             	xor    %r12d,%r12d
    e039:	0f 57 c9             	xorps  %xmm1,%xmm1
    e03c:	eb 1e                	jmp    e05c <_ZN7genetic14compute_metricEiiPKfS1_S1_PfRKNS_5paramE+0x13c>
    e03e:	66 90                	xchg   %ax,%ax
            out[pid] = sqrt(out[pid]);
    e040:	e8 4b 98 00 00       	callq  17890 <sqrtf@plt>
    e045:	0f 57 c9             	xorps  %xmm1,%xmm1
    e048:	f3 42 0f 11 44 a3 0c 	movss  %xmm0,0xc(%rbx,%r12,4)
        for (uint64_t pid = 0; pid < n_progs; ++pid) {
    e04f:	49 83 c4 04          	add    $0x4,%r12
    e053:	4d 39 e6             	cmp    %r12,%r14
    e056:	0f 84 4c ff ff ff    	je     dfa8 <_ZN7genetic14compute_metricEiiPKfS1_S1_PfRKNS_5paramE+0x88>
            out[pid] = sqrt(out[pid]);
    e05c:	f3 42 0f 10 04 a3    	movss  (%rbx,%r12,4),%xmm0
    e062:	0f 2e c1             	ucomiss %xmm1,%xmm0
    e065:	72 09                	jb     e070 <_ZN7genetic14compute_metricEiiPKfS1_S1_PfRKNS_5paramE+0x150>
    e067:	f3 0f 51 c0          	sqrtss %xmm0,%xmm0
    e06b:	eb 0b                	jmp    e078 <_ZN7genetic14compute_metricEiiPKfS1_S1_PfRKNS_5paramE+0x158>
    e06d:	0f 1f 00             	nopl   (%rax)
    e070:	e8 1b 98 00 00       	callq  17890 <sqrtf@plt>
    e075:	0f 57 c9             	xorps  %xmm1,%xmm1
    e078:	f3 42 0f 11 04 a3    	movss  %xmm0,(%rbx,%r12,4)
    e07e:	f3 42 0f 10 44 a3 04 	movss  0x4(%rbx,%r12,4),%xmm0
    e085:	0f 2e c1             	ucomiss %xmm1,%xmm0
    e088:	72 06                	jb     e090 <_ZN7genetic14compute_metricEiiPKfS1_S1_PfRKNS_5paramE+0x170>
    e08a:	f3 0f 51 c0          	sqrtss %xmm0,%xmm0
    e08e:	eb 08                	jmp    e098 <_ZN7genetic14compute_metricEiiPKfS1_S1_PfRKNS_5paramE+0x178>
    e090:	e8 fb 97 00 00       	callq  17890 <sqrtf@plt>
    e095:	0f 57 c9             	xorps  %xmm1,%xmm1
    e098:	f3 42 0f 11 44 a3 04 	movss  %xmm0,0x4(%rbx,%r12,4)
    e09f:	f3 42 0f 10 44 a3 08 	movss  0x8(%rbx,%r12,4),%xmm0
    e0a6:	0f 2e c1             	ucomiss %xmm1,%xmm0
    e0a9:	72 15                	jb     e0c0 <_ZN7genetic14compute_metricEiiPKfS1_S1_PfRKNS_5paramE+0x1a0>
    e0ab:	f3 0f 51 c0          	sqrtss %xmm0,%xmm0
    e0af:	eb 17                	jmp    e0c8 <_ZN7genetic14compute_metricEiiPKfS1_S1_PfRKNS_5paramE+0x1a8>
    e0b1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    e0b8:	0f 1f 84 00 00 00 00 
    e0bf:	00 
    e0c0:	e8 cb 97 00 00       	callq  17890 <sqrtf@plt>
    e0c5:	0f 57 c9             	xorps  %xmm1,%xmm1
    e0c8:	f3 42 0f 11 44 a3 08 	movss  %xmm0,0x8(%rbx,%r12,4)
    e0cf:	f3 42 0f 10 44 a3 0c 	movss  0xc(%rbx,%r12,4),%xmm0
    e0d6:	0f 2e c1             	ucomiss %xmm1,%xmm0
    e0d9:	0f 82 61 ff ff ff    	jb     e040 <_ZN7genetic14compute_metricEiiPKfS1_S1_PfRKNS_5paramE+0x120>
    e0df:	f3 0f 51 c0          	sqrtss %xmm0,%xmm0
    e0e3:	e9 60 ff ff ff       	jmpq   e048 <_ZN7genetic14compute_metricEiiPKfS1_S1_PfRKNS_5paramE+0x128>
    e0e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    e0ef:	00 

000000000000e0f0 <_ZN7genetic7executeERKPNS_7programEiiPKfPf>:

    void execute(const program_t& d_progs, const int n_rows, const int n_progs, const float* data,
                 float* y_pred) {
    e0f0:	48 83 ec 28          	sub    $0x28,%rsp
        execute_kernel(d_progs, data, y_pred, static_cast<uint64_t>(n_rows),
    e0f4:	48 8b 07             	mov    (%rdi),%rax
    e0f7:	48 63 f6             	movslq %esi,%rsi
                       static_cast<uint64_t>(n_progs));
    e0fa:	48 63 d2             	movslq %edx,%rdx
    e0fd:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    e102:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
    e107:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
    e10c:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    e111:	48 89 14 24          	mov    %rdx,(%rsp)
    e115:	4c 8d 54 24 10       	lea    0x10(%rsp),%r10
    e11a:	4c 8d 5c 24 18       	lea    0x18(%rsp),%r11
#pragma omp parallel for schedule(dynamic) private(eval_stack)
    e11f:	48 8d 3d 2a a9 00 00 	lea    0xa92a(%rip),%rdi        # 18a50 <__init_array_end>
    e126:	48 8d 15 23 00 00 00 	lea    0x23(%rip),%rdx        # e150 <_ZN7genetic14execute_kernelILi20EEEvPNS_7programEPKfPfmm.omp_outlined>
    e12d:	48 89 e1             	mov    %rsp,%rcx
    e130:	4c 8d 44 24 08       	lea    0x8(%rsp),%r8
    e135:	4c 8d 4c 24 20       	lea    0x20(%rsp),%r9
    e13a:	be 05 00 00 00       	mov    $0x5,%esi
    e13f:	31 c0                	xor    %eax,%eax
    e141:	41 52                	push   %r10
    e143:	41 53                	push   %r11
    e145:	e8 96 98 00 00       	callq  179e0 <__kmpc_fork_call@plt>
    e14a:	48 83 c4 38          	add    $0x38,%rsp
    }
    e14e:	c3                   	retq   
    e14f:	90                   	nop

000000000000e150 <_ZN7genetic14execute_kernelILi20EEEvPNS_7programEPKfPfmm.omp_outlined>:
#pragma omp parallel for schedule(dynamic) private(eval_stack)
    e150:	55                   	push   %rbp
    e151:	48 89 e5             	mov    %rsp,%rbp
    e154:	41 57                	push   %r15
    e156:	41 56                	push   %r14
    e158:	41 55                	push   %r13
    e15a:	41 54                	push   %r12
    e15c:	53                   	push   %rbx
    e15d:	48 83 e4 c0          	and    $0xffffffffffffffc0,%rsp
    e161:	48 81 ec 40 01 00 00 	sub    $0x140,%rsp
    e168:	4c 89 4c 24 78       	mov    %r9,0x78(%rsp)
    e16d:	4c 89 44 24 70       	mov    %r8,0x70(%rsp)
        for (uint64_t pid = 0; pid < n_progs; ++pid) {
    e172:	4c 8b 02             	mov    (%rdx),%r8
    e175:	4d 85 c0             	test   %r8,%r8
    e178:	0f 84 59 02 00 00    	je     e3d7 <_ZN7genetic14execute_kernelILi20EEEvPNS_7programEPKfPfmm.omp_outlined+0x287>
    e17e:	49 89 cf             	mov    %rcx,%r15
    e181:	49 ff c8             	dec    %r8
    e184:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
    e18b:	00 00 
    e18d:	4c 89 44 24 48       	mov    %r8,0x48(%rsp)
    e192:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
    e199:	00 00 
    e19b:	c7 44 24 3c 00 00 00 	movl   $0x0,0x3c(%rsp)
    e1a2:	00 
     *
     * @tparam DataT   data type of the stack elements
     * @tparam MaxSize max capacity of the stack
     */
    template <typename DataT, int MaxSize> struct stack {
        explicit stack() : elements_(0) {
    e1a3:	c7 84 24 d0 00 00 00 	movl   $0x0,0xd0(%rsp)
    e1aa:	00 00 00 00 
    e1ae:	8b 1f                	mov    (%rdi),%ebx
    e1b0:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
    e1b7:	00 
    e1b8:	4c 8d 2d 91 a8 00 00 	lea    0xa891(%rip),%r13        # 18a50 <__init_array_end>
    e1bf:	41 b9 01 00 00 00    	mov    $0x1,%r9d
    e1c5:	4c 89 ef             	mov    %r13,%rdi
    e1c8:	89 de                	mov    %ebx,%esi
    e1ca:	ba 23 00 00 40       	mov    $0x40000023,%edx
    e1cf:	31 c9                	xor    %ecx,%ecx
    e1d1:	e8 1a 98 00 00       	callq  179f0 <__kmpc_dispatch_init_8u@plt>
    e1d6:	48 8d 54 24 3c       	lea    0x3c(%rsp),%rdx
    e1db:	48 8d 4c 24 50       	lea    0x50(%rsp),%rcx
    e1e0:	4c 8d 44 24 48       	lea    0x48(%rsp),%r8
    e1e5:	4c 8d 4c 24 60       	lea    0x60(%rsp),%r9
    e1ea:	4c 89 ef             	mov    %r13,%rdi
    e1ed:	89 5c 24 5c          	mov    %ebx,0x5c(%rsp)
    e1f1:	89 de                	mov    %ebx,%esi
    e1f3:	eb 2a                	jmp    e21f <_ZN7genetic14execute_kernelILi20EEEvPNS_7programEPKfPfmm.omp_outlined+0xcf>
    e1f5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    e1fc:	00 00 00 00 
    e200:	48 8d 3d 49 a8 00 00 	lea    0xa849(%rip),%rdi        # 18a50 <__init_array_end>
    e207:	8b 74 24 5c          	mov    0x5c(%rsp),%esi
    e20b:	48 8d 54 24 3c       	lea    0x3c(%rsp),%rdx
    e210:	48 8d 4c 24 50       	lea    0x50(%rsp),%rcx
    e215:	4c 8d 44 24 48       	lea    0x48(%rsp),%r8
    e21a:	4c 8d 4c 24 60       	lea    0x60(%rsp),%r9
    e21f:	e8 dc 97 00 00       	callq  17a00 <__kmpc_dispatch_next_8u@plt>
    e224:	85 c0                	test   %eax,%eax
    e226:	0f 84 ab 01 00 00    	je     e3d7 <_ZN7genetic14execute_kernelILi20EEEvPNS_7programEPKfPfmm.omp_outlined+0x287>
    e22c:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
    e231:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
    e236:	48 8d 41 01          	lea    0x1(%rcx),%rax
    e23a:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
    e23f:	48 39 c2             	cmp    %rax,%rdx
    e242:	73 bc                	jae    e200 <_ZN7genetic14execute_kernelILi20EEEvPNS_7programEPKfPfmm.omp_outlined+0xb0>
            for (uint64_t row_id = 0; row_id < n_rows; ++row_id) {
    e244:	49 8b 07             	mov    (%r15),%rax
    e247:	eb 22                	jmp    e26b <_ZN7genetic14execute_kernelILi20EEEvPNS_7programEPKfPfmm.omp_outlined+0x11b>
    e249:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        for (uint64_t pid = 0; pid < n_progs; ++pid) {
    e250:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
    e255:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
    e25a:	48 ff c6             	inc    %rsi
    e25d:	48 8d 51 01          	lea    0x1(%rcx),%rdx
    e261:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
    e266:	48 39 d6             	cmp    %rdx,%rsi
    e269:	73 95                	jae    e200 <_ZN7genetic14execute_kernelILi20EEEvPNS_7programEPKfPfmm.omp_outlined+0xb0>
            for (uint64_t row_id = 0; row_id < n_rows; ++row_id) {
    e26b:	48 85 c0             	test   %rax,%rax
    e26e:	0f 84 5c 01 00 00    	je     e3d0 <_ZN7genetic14execute_kernelILi20EEEvPNS_7programEPKfPfmm.omp_outlined+0x280>
    e274:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
    e279:	48 c1 e6 05          	shl    $0x5,%rsi
    e27d:	45 31 f6             	xor    %r14d,%r14d
    e280:	48 89 74 24 68       	mov    %rsi,0x68(%rsp)
    e285:	eb 34                	jmp    e2bb <_ZN7genetic14execute_kernelILi20EEEvPNS_7programEPKfPfmm.omp_outlined+0x16b>
    e287:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    e28e:	00 00 
                y_pred[pid * n_rows + row_id] = eval_stack.pop();
    e290:	49 8b 07             	mov    (%r15),%rax
    e293:	48 89 c1             	mov    %rax,%rcx
    e296:	48 0f af 4c 24 40    	imul   0x40(%rsp),%rcx
    e29c:	48 c1 e1 02          	shl    $0x2,%rcx
    e2a0:	48 8b 55 10          	mov    0x10(%rbp),%rdx
    e2a4:	48 03 0a             	add    (%rdx),%rcx
    e2a7:	f3 0f 10 44 24 38    	movss  0x38(%rsp),%xmm0
    e2ad:	f3 42 0f 11 04 b1    	movss  %xmm0,(%rcx,%r14,4)
            for (uint64_t row_id = 0; row_id < n_rows; ++row_id) {
    e2b3:	49 ff c6             	inc    %r14
    e2b6:	49 39 c6             	cmp    %rax,%r14
    e2b9:	73 95                	jae    e250 <_ZN7genetic14execute_kernelILi20EEEvPNS_7programEPKfPfmm.omp_outlined+0x100>

        /** Checks if the stack is empty */
        inline bool empty() const { return elements_ == 0; }

        /** Empties the stack */
        inline void clear() { elements_ = 0; }
    e2bb:	c7 84 24 d0 00 00 00 	movl   $0x0,0xd0(%rsp)
    e2c2:	00 00 00 00 
    e2c6:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
                const program&        curr_p = d_progs[pid]; // Current program
    e2cb:	48 8b 18             	mov    (%rax),%rbx
                for (int i = curr_p.len - 1; i >= 0; --i) {
    e2ce:	44 8b 64 33 08       	mov    0x8(%rbx,%rsi,1),%r12d
    e2d3:	0f 57 c0             	xorps  %xmm0,%xmm0
    e2d6:	f3 0f 11 44 24 38    	movss  %xmm0,0x38(%rsp)
    e2dc:	45 85 e4             	test   %r12d,%r12d
    e2df:	7e af                	jle    e290 <_ZN7genetic14execute_kernelILi20EEEvPNS_7programEPKfPfmm.omp_outlined+0x140>
    e2e1:	48 01 f3             	add    %rsi,%rbx
            return 0;
        }

        inline void evaluate_node_lookup(const node& n, const float* data, const uint64_t stride,
                                          const uint64_t idx, stack<float, MAX_STACK_SIZE>& eval_stack) {
            if (n.t == node::type::constant) {
    e2e4:	4d 8d 6c 24 01       	lea    0x1(%r12),%r13
    e2e9:	49 c1 e4 04          	shl    $0x4,%r12
    e2ed:	49 83 c4 f8          	add    $0xfffffffffffffff8,%r12
    e2f1:	eb 2c                	jmp    e31f <_ZN7genetic14execute_kernelILi20EEEvPNS_7programEPKfPfmm.omp_outlined+0x1cf>
    e2f3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    e2fa:	84 00 00 00 00 00 
                eval_stack.push(n.val);
            } else if (n.t == node::type::variable) {
                eval_stack.push(data[(stride * n.fid) + idx]);
            } else {
                const auto& func = function_table[static_cast<size_t>(n.t)];
                func(eval_stack);
    e300:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
    e307:	00 
    e308:	48 8d 05 61 a7 00 00 	lea    0xa761(%rip),%rax        # 18a70 <_ZL14function_table>
    e30f:	ff 14 c8             	callq  *(%rax,%rcx,8)
    e312:	49 ff cd             	dec    %r13
    e315:	49 83 c4 f0          	add    $0xfffffffffffffff0,%r12
    e319:	49 83 fd 01          	cmp    $0x1,%r13
    e31d:	76 71                	jbe    e390 <_ZN7genetic14execute_kernelILi20EEEvPNS_7programEPKfPfmm.omp_outlined+0x240>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    e31f:	48 8b 03             	mov    (%rbx),%rax
            if (n.t == node::type::constant) {
    e322:	42 0f b6 4c 20 f8    	movzbl -0x8(%rax,%r12,1),%ecx
    e328:	85 c9                	test   %ecx,%ecx
    e32a:	74 24                	je     e350 <_ZN7genetic14execute_kernelILi20EEEvPNS_7programEPKfPfmm.omp_outlined+0x200>
    e32c:	83 f9 01             	cmp    $0x1,%ecx
    e32f:	75 cf                	jne    e300 <_ZN7genetic14execute_kernelILi20EEEvPNS_7programEPKfPfmm.omp_outlined+0x1b0>

        /** Current number of elements in the stack */
        inline int size() const { return elements_; }

        /** Checks if the number of elements in the stack equal its capacity */
        inline bool full() const { return elements_ == MaxSize; }
    e331:	8b 8c 24 d0 00 00 00 	mov    0xd0(%rsp),%ecx
    e338:	83 f9 14             	cmp    $0x14,%ecx
            //   if (elements_ == i) {
            //     ++elements_;
            //     regs_[i] = val;
            //   }
            // }
            if (!full()) {
    e33b:	74 d5                	je     e312 <_ZN7genetic14execute_kernelILi20EEEvPNS_7programEPKfPfmm.omp_outlined+0x1c2>
                regs_[elements_] = val;
                elements_++;
            }
    e33d:	4c 01 e0             	add    %r12,%rax
    e340:	eb 33                	jmp    e375 <_ZN7genetic14execute_kernelILi20EEEvPNS_7programEPKfPfmm.omp_outlined+0x225>
    e342:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    e349:	1f 84 00 00 00 00 00 
        inline bool full() const { return elements_ == MaxSize; }
    e350:	8b 8c 24 d0 00 00 00 	mov    0xd0(%rsp),%ecx
    e357:	83 f9 14             	cmp    $0x14,%ecx
            if (!full()) {
    e35a:	74 b6                	je     e312 <_ZN7genetic14execute_kernelILi20EEEvPNS_7programEPKfPfmm.omp_outlined+0x1c2>
    e35c:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
                    detail::evaluate_node_lookup(curr_node, data, n_rows, row_id, eval_stack);
    e361:	48 8b 12             	mov    (%rdx),%rdx
                eval_stack.push(data[(stride * n.fid) + idx]);
    e364:	4a 63 44 20 fc       	movslq -0x4(%rax,%r12,1),%rax
    e369:	49 0f af 07          	imul   (%r15),%rax
    e36d:	48 8d 04 82          	lea    (%rdx,%rax,4),%rax
    e371:	4a 8d 04 b0          	lea    (%rax,%r14,4),%rax
    e375:	f3 0f 10 00          	movss  (%rax),%xmm0
                regs_[elements_] = val;
    e379:	48 63 c1             	movslq %ecx,%rax
    e37c:	f3 0f 11 84 84 80 00 	movss  %xmm0,0x80(%rsp,%rax,4)
    e383:	00 00 
                elements_++;
    e385:	ff c0                	inc    %eax
    e387:	89 84 24 d0 00 00 00 	mov    %eax,0xd0(%rsp)
    e38e:	eb 82                	jmp    e312 <_ZN7genetic14execute_kernelILi20EEEvPNS_7programEPKfPfmm.omp_outlined+0x1c2>
        inline bool empty() const { return elements_ == 0; }
    e390:	48 63 84 24 d0 00 00 	movslq 0xd0(%rsp),%rax
    e397:	00 
    e398:	48 85 c0             	test   %rax,%rax
    e39b:	48 8b 74 24 68       	mov    0x68(%rsp),%rsi
            //     elements_--;
            //     return regs_[i];
            //   }
            // }

            return empty() ? DataT(0) : regs_[(--elements_)];
    e3a0:	0f 84 ea fe ff ff    	je     e290 <_ZN7genetic14execute_kernelILi20EEEvPNS_7programEPKfPfmm.omp_outlined+0x140>
    e3a6:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    e3aa:	89 8c 24 d0 00 00 00 	mov    %ecx,0xd0(%rsp)
    e3b1:	f3 0f 10 44 84 7c    	movss  0x7c(%rsp,%rax,4),%xmm0
    e3b7:	f3 0f 11 44 24 38    	movss  %xmm0,0x38(%rsp)
    e3bd:	e9 ce fe ff ff       	jmpq   e290 <_ZN7genetic14execute_kernelILi20EEEvPNS_7programEPKfPfmm.omp_outlined+0x140>
    e3c2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    e3c9:	1f 84 00 00 00 00 00 
    e3d0:	31 c0                	xor    %eax,%eax
    e3d2:	e9 7e fe ff ff       	jmpq   e255 <_ZN7genetic14execute_kernelILi20EEEvPNS_7programEPKfPfmm.omp_outlined+0x105>
#pragma omp parallel for schedule(dynamic) private(eval_stack)
    e3d7:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
    e3db:	5b                   	pop    %rbx
    e3dc:	41 5c                	pop    %r12
    e3de:	41 5d                	pop    %r13
    e3e0:	41 5e                	pop    %r14
    e3e2:	41 5f                	pop    %r15
    e3e4:	5d                   	pop    %rbp
    e3e5:	c3                   	retq   
    e3e6:	48 89 c7             	mov    %rax,%rdi
    e3e9:	e8 92 e4 ff ff       	callq  c880 <__clang_call_terminate>
    e3ee:	66 90                	xchg   %ax,%ax

000000000000e3f0 <_ZN3$_08__invokeIRN7genetic5stackIfLi20EEEEEDaT_>:

static constexpr float EPSILON = 0.001f;

static const FnPtr function_table[] = {
    // Skip variable (0) and constant (1)
    [](auto){}, [](auto){},
    e3f0:	c3                   	retq   
    e3f1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    e3f8:	0f 1f 84 00 00 00 00 
    e3ff:	00 

000000000000e400 <_ZN3$_18__invokeIRN7genetic5stackIfLi20EEEEEDaT_>:
    e400:	c3                   	retq   
    e401:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    e408:	0f 1f 84 00 00 00 00 
    e40f:	00 

000000000000e410 <_ZN3$_38__invokeERN7genetic5stackIfLi20EEE>:
        inline bool empty() const { return elements_ == 0; }
    e410:	48 63 47 50          	movslq 0x50(%rdi),%rax
    e414:	0f 57 c9             	xorps  %xmm1,%xmm1
    e417:	0f 57 c0             	xorps  %xmm0,%xmm0
    e41a:	48 85 c0             	test   %rax,%rax
            return empty() ? DataT(0) : regs_[(--elements_)];
    e41d:	74 21                	je     e440 <_ZN3$_38__invokeERN7genetic5stackIfLi20EEE+0x30>
    e41f:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    e423:	f3 0f 10 44 87 fc    	movss  -0x4(%rdi,%rax,4),%xmm0
        inline bool empty() const { return elements_ == 0; }
    e429:	85 c9                	test   %ecx,%ecx
            return empty() ? DataT(0) : regs_[(--elements_)];
    e42b:	74 13                	je     e440 <_ZN3$_38__invokeERN7genetic5stackIfLi20EEE+0x30>
    e42d:	8d 48 fe             	lea    -0x2(%rax),%ecx
    e430:	89 4f 50             	mov    %ecx,0x50(%rdi)
        inline bool full() const { return elements_ == MaxSize; }
    e433:	83 f9 14             	cmp    $0x14,%ecx
            if (!full()) {
    e436:	74 1b                	je     e453 <_ZN3$_38__invokeERN7genetic5stackIfLi20EEE+0x43>
    e438:	f3 0f 58 44 87 f8    	addss  -0x8(%rdi,%rax,4),%xmm0
    e43e:	eb 06                	jmp    e446 <_ZN3$_38__invokeERN7genetic5stackIfLi20EEE+0x36>
    // Binary functions
    bin_func(a + b),  // add
    e440:	f3 0f 58 c1          	addss  %xmm1,%xmm0
    e444:	31 c9                	xor    %ecx,%ecx
                regs_[elements_] = val;
    e446:	48 63 c1             	movslq %ecx,%rax
    e449:	f3 0f 11 04 87       	movss  %xmm0,(%rdi,%rax,4)
                elements_++;
    e44e:	ff c0                	inc    %eax
    e450:	89 47 50             	mov    %eax,0x50(%rdi)
    e453:	c3                   	retq   
    e454:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
    e45b:	00 00 00 00 00 

000000000000e460 <_ZN3$_48__invokeERN7genetic5stackIfLi20EEE>:
    bin_func(std::atan2(a, b)),                     // atan2
    e460:	53                   	push   %rbx
    e461:	48 89 fb             	mov    %rdi,%rbx
        inline bool empty() const { return elements_ == 0; }
    e464:	48 63 47 50          	movslq 0x50(%rdi),%rax
    e468:	0f 57 c9             	xorps  %xmm1,%xmm1
    e46b:	48 85 c0             	test   %rax,%rax
            return empty() ? DataT(0) : regs_[(--elements_)];
    e46e:	74 1f                	je     e48f <_ZN3$_48__invokeERN7genetic5stackIfLi20EEE+0x2f>
    e470:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    e474:	89 4b 50             	mov    %ecx,0x50(%rbx)
    e477:	f3 0f 10 44 83 fc    	movss  -0x4(%rbx,%rax,4),%xmm0
        inline bool empty() const { return elements_ == 0; }
    e47d:	85 c9                	test   %ecx,%ecx
            return empty() ? DataT(0) : regs_[(--elements_)];
    e47f:	74 11                	je     e492 <_ZN3$_48__invokeERN7genetic5stackIfLi20EEE+0x32>
    e481:	8d 48 fe             	lea    -0x2(%rax),%ecx
    e484:	89 4b 50             	mov    %ecx,0x50(%rbx)
    e487:	f3 0f 10 4c 83 f8    	movss  -0x8(%rbx,%rax,4),%xmm1
    e48d:	eb 03                	jmp    e492 <_ZN3$_48__invokeERN7genetic5stackIfLi20EEE+0x32>
    e48f:	0f 57 c0             	xorps  %xmm0,%xmm0
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
    e492:	e8 a9 93 00 00       	callq  17840 <atan2f@plt>
        inline bool full() const { return elements_ == MaxSize; }
    e497:	48 63 43 50          	movslq 0x50(%rbx),%rax
    e49b:	48 83 f8 14          	cmp    $0x14,%rax
            if (!full()) {
    e49f:	74 0a                	je     e4ab <_ZN3$_48__invokeERN7genetic5stackIfLi20EEE+0x4b>
                regs_[elements_] = val;
    e4a1:	f3 0f 11 04 83       	movss  %xmm0,(%rbx,%rax,4)
                elements_++;
    e4a6:	ff c0                	inc    %eax
    e4a8:	89 43 50             	mov    %eax,0x50(%rbx)
    e4ab:	5b                   	pop    %rbx
    e4ac:	c3                   	retq   
    e4ad:	0f 1f 00             	nopl   (%rax)

000000000000e4b0 <_ZN3$_58__invokeERN7genetic5stackIfLi20EEE>:
        inline bool empty() const { return elements_ == 0; }
    e4b0:	48 63 4f 50          	movslq 0x50(%rdi),%rcx
    e4b4:	31 c0                	xor    %eax,%eax
    e4b6:	f3 0f 10 05 12 42 ff 	movss  -0xbdee(%rip),%xmm0        # 26d0 <_IO_stdin_used-0x20>
    e4bd:	ff 
    e4be:	48 85 c9             	test   %rcx,%rcx
            return empty() ? DataT(0) : regs_[(--elements_)];
    e4c1:	74 46                	je     e509 <_ZN3$_58__invokeERN7genetic5stackIfLi20EEE+0x59>
        inline bool empty() const { return elements_ == 0; }
    e4c3:	83 f9 01             	cmp    $0x1,%ecx
            return empty() ? DataT(0) : regs_[(--elements_)];
    e4c6:	74 41                	je     e509 <_ZN3$_58__invokeERN7genetic5stackIfLi20EEE+0x59>
    e4c8:	f3 0f 10 44 8f fc    	movss  -0x4(%rdi,%rcx,4),%xmm0
    e4ce:	8d 41 fe             	lea    -0x2(%rcx),%eax
    e4d1:	89 47 50             	mov    %eax,0x50(%rdi)
    e4d4:	f3 0f 10 4c 8f f8    	movss  -0x8(%rdi,%rcx,4),%xmm1
    e4da:	0f 28 15 cf 42 ff ff 	movaps -0xbd31(%rip),%xmm2        # 27b0 <_IO_stdin_used+0xc0>
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
    e4e1:	0f 54 d1             	andps  %xmm1,%xmm2
    e4e4:	f3 0f 10 1d 0c 42 ff 	movss  -0xbdf4(%rip),%xmm3        # 26f8 <_IO_stdin_used+0x8>
    e4eb:	ff 
    bin_func(std::abs(b) < EPSILON ? 1.0f : a / b), // div
    e4ec:	0f 2e da             	ucomiss %xmm2,%xmm3
    e4ef:	76 0f                	jbe    e500 <_ZN3$_58__invokeERN7genetic5stackIfLi20EEE+0x50>
    e4f1:	f3 0f 10 05 d7 41 ff 	movss  -0xbe29(%rip),%xmm0        # 26d0 <_IO_stdin_used-0x20>
    e4f8:	ff 
        inline bool full() const { return elements_ == MaxSize; }
    e4f9:	83 f8 14             	cmp    $0x14,%eax
            if (!full()) {
    e4fc:	75 0b                	jne    e509 <_ZN3$_58__invokeERN7genetic5stackIfLi20EEE+0x59>
    e4fe:	eb 15                	jmp    e515 <_ZN3$_58__invokeERN7genetic5stackIfLi20EEE+0x65>
    e500:	f3 0f 5e c1          	divss  %xmm1,%xmm0
        inline bool full() const { return elements_ == MaxSize; }
    e504:	83 f8 14             	cmp    $0x14,%eax
            if (!full()) {
    e507:	74 0c                	je     e515 <_ZN3$_58__invokeERN7genetic5stackIfLi20EEE+0x65>
                regs_[elements_] = val;
    e509:	48 98                	cltq   
    e50b:	f3 0f 11 04 87       	movss  %xmm0,(%rdi,%rax,4)
                elements_++;
    e510:	ff c0                	inc    %eax
    e512:	89 47 50             	mov    %eax,0x50(%rdi)
    e515:	c3                   	retq   
    e516:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    e51d:	00 00 00 

000000000000e520 <_ZN3$_68__invokeERN7genetic5stackIfLi20EEE>:
    bin_func(std::fdim(a, b)),                      // fdim
    e520:	53                   	push   %rbx
    e521:	48 89 fb             	mov    %rdi,%rbx
        inline bool empty() const { return elements_ == 0; }
    e524:	48 63 47 50          	movslq 0x50(%rdi),%rax
    e528:	0f 57 c9             	xorps  %xmm1,%xmm1
    e52b:	48 85 c0             	test   %rax,%rax
            return empty() ? DataT(0) : regs_[(--elements_)];
    e52e:	74 1f                	je     e54f <_ZN3$_68__invokeERN7genetic5stackIfLi20EEE+0x2f>
    e530:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    e534:	89 4b 50             	mov    %ecx,0x50(%rbx)
    e537:	f3 0f 10 44 83 fc    	movss  -0x4(%rbx,%rax,4),%xmm0
        inline bool empty() const { return elements_ == 0; }
    e53d:	85 c9                	test   %ecx,%ecx
            return empty() ? DataT(0) : regs_[(--elements_)];
    e53f:	74 11                	je     e552 <_ZN3$_68__invokeERN7genetic5stackIfLi20EEE+0x32>
    e541:	8d 48 fe             	lea    -0x2(%rax),%ecx
    e544:	89 4b 50             	mov    %ecx,0x50(%rbx)
    e547:	f3 0f 10 4c 83 f8    	movss  -0x8(%rbx,%rax,4),%xmm1
    e54d:	eb 03                	jmp    e552 <_ZN3$_68__invokeERN7genetic5stackIfLi20EEE+0x32>
    e54f:	0f 57 c0             	xorps  %xmm0,%xmm0
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }
    e552:	e8 09 93 00 00       	callq  17860 <fdimf@plt>
        inline bool full() const { return elements_ == MaxSize; }
    e557:	48 63 43 50          	movslq 0x50(%rbx),%rax
    e55b:	48 83 f8 14          	cmp    $0x14,%rax
            if (!full()) {
    e55f:	74 0a                	je     e56b <_ZN3$_68__invokeERN7genetic5stackIfLi20EEE+0x4b>
                regs_[elements_] = val;
    e561:	f3 0f 11 04 83       	movss  %xmm0,(%rbx,%rax,4)
                elements_++;
    e566:	ff c0                	inc    %eax
    e568:	89 43 50             	mov    %eax,0x50(%rbx)
    e56b:	5b                   	pop    %rbx
    e56c:	c3                   	retq   
    e56d:	0f 1f 00             	nopl   (%rax)

000000000000e570 <_ZN3$_78__invokeERN7genetic5stackIfLi20EEE>:
        inline bool empty() const { return elements_ == 0; }
    e570:	48 63 47 50          	movslq 0x50(%rdi),%rax
    e574:	0f 57 c0             	xorps  %xmm0,%xmm0
    e577:	0f 57 c9             	xorps  %xmm1,%xmm1
    e57a:	48 85 c0             	test   %rax,%rax
            return empty() ? DataT(0) : regs_[(--elements_)];
    e57d:	74 25                	je     e5a4 <_ZN3$_78__invokeERN7genetic5stackIfLi20EEE+0x34>
    e57f:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    e583:	f3 0f 10 4c 87 fc    	movss  -0x4(%rdi,%rax,4),%xmm1
        inline bool empty() const { return elements_ == 0; }
    e589:	85 c9                	test   %ecx,%ecx
            return empty() ? DataT(0) : regs_[(--elements_)];
    e58b:	74 17                	je     e5a4 <_ZN3$_78__invokeERN7genetic5stackIfLi20EEE+0x34>
    e58d:	8d 48 fe             	lea    -0x2(%rax),%ecx
    e590:	89 4f 50             	mov    %ecx,0x50(%rdi)
        inline bool full() const { return elements_ == MaxSize; }
    e593:	83 f9 14             	cmp    $0x14,%ecx
            if (!full()) {
    e596:	74 1f                	je     e5b7 <_ZN3$_78__invokeERN7genetic5stackIfLi20EEE+0x47>
    e598:	f3 0f 10 44 87 f8    	movss  -0x8(%rdi,%rax,4),%xmm0
    e59e:	f3 0f 5f c1          	maxss  %xmm1,%xmm0
    e5a2:	eb 06                	jmp    e5aa <_ZN3$_78__invokeERN7genetic5stackIfLi20EEE+0x3a>
    bin_func(std::max(a, b)),                       // max
    e5a4:	f3 0f 5f c1          	maxss  %xmm1,%xmm0
    e5a8:	31 c9                	xor    %ecx,%ecx
                regs_[elements_] = val;
    e5aa:	48 63 c1             	movslq %ecx,%rax
    e5ad:	f3 0f 11 04 87       	movss  %xmm0,(%rdi,%rax,4)
                elements_++;
    e5b2:	ff c0                	inc    %eax
    e5b4:	89 47 50             	mov    %eax,0x50(%rdi)
    e5b7:	c3                   	retq   
    e5b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    e5bf:	00 

000000000000e5c0 <_ZN3$_88__invokeERN7genetic5stackIfLi20EEE>:
        inline bool empty() const { return elements_ == 0; }
    e5c0:	48 63 47 50          	movslq 0x50(%rdi),%rax
    e5c4:	0f 57 c0             	xorps  %xmm0,%xmm0
    e5c7:	0f 57 c9             	xorps  %xmm1,%xmm1
    e5ca:	48 85 c0             	test   %rax,%rax
            return empty() ? DataT(0) : regs_[(--elements_)];
    e5cd:	74 25                	je     e5f4 <_ZN3$_88__invokeERN7genetic5stackIfLi20EEE+0x34>
    e5cf:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    e5d3:	f3 0f 10 4c 87 fc    	movss  -0x4(%rdi,%rax,4),%xmm1
        inline bool empty() const { return elements_ == 0; }
    e5d9:	85 c9                	test   %ecx,%ecx
            return empty() ? DataT(0) : regs_[(--elements_)];
    e5db:	74 17                	je     e5f4 <_ZN3$_88__invokeERN7genetic5stackIfLi20EEE+0x34>
    e5dd:	8d 48 fe             	lea    -0x2(%rax),%ecx
    e5e0:	89 4f 50             	mov    %ecx,0x50(%rdi)
        inline bool full() const { return elements_ == MaxSize; }
    e5e3:	83 f9 14             	cmp    $0x14,%ecx
            if (!full()) {
    e5e6:	74 1f                	je     e607 <_ZN3$_88__invokeERN7genetic5stackIfLi20EEE+0x47>
    e5e8:	f3 0f 10 44 87 f8    	movss  -0x8(%rdi,%rax,4),%xmm0
    e5ee:	f3 0f 5d c1          	minss  %xmm1,%xmm0
    e5f2:	eb 06                	jmp    e5fa <_ZN3$_88__invokeERN7genetic5stackIfLi20EEE+0x3a>
    bin_func(std::min(a, b)),                       // min
    e5f4:	f3 0f 5d c1          	minss  %xmm1,%xmm0
    e5f8:	31 c9                	xor    %ecx,%ecx
                regs_[elements_] = val;
    e5fa:	48 63 c1             	movslq %ecx,%rax
    e5fd:	f3 0f 11 04 87       	movss  %xmm0,(%rdi,%rax,4)
                elements_++;
    e602:	ff c0                	inc    %eax
    e604:	89 47 50             	mov    %eax,0x50(%rdi)
    e607:	c3                   	retq   
    e608:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    e60f:	00 

000000000000e610 <_ZN3$_98__invokeERN7genetic5stackIfLi20EEE>:
        inline bool empty() const { return elements_ == 0; }
    e610:	48 63 47 50          	movslq 0x50(%rdi),%rax
    e614:	0f 57 c9             	xorps  %xmm1,%xmm1
    e617:	0f 57 c0             	xorps  %xmm0,%xmm0
    e61a:	48 85 c0             	test   %rax,%rax
            return empty() ? DataT(0) : regs_[(--elements_)];
    e61d:	74 21                	je     e640 <_ZN3$_98__invokeERN7genetic5stackIfLi20EEE+0x30>
    e61f:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    e623:	f3 0f 10 44 87 fc    	movss  -0x4(%rdi,%rax,4),%xmm0
        inline bool empty() const { return elements_ == 0; }
    e629:	85 c9                	test   %ecx,%ecx
            return empty() ? DataT(0) : regs_[(--elements_)];
    e62b:	74 13                	je     e640 <_ZN3$_98__invokeERN7genetic5stackIfLi20EEE+0x30>
    e62d:	8d 48 fe             	lea    -0x2(%rax),%ecx
    e630:	89 4f 50             	mov    %ecx,0x50(%rdi)
        inline bool full() const { return elements_ == MaxSize; }
    e633:	83 f9 14             	cmp    $0x14,%ecx
            if (!full()) {
    e636:	74 1b                	je     e653 <_ZN3$_98__invokeERN7genetic5stackIfLi20EEE+0x43>
    e638:	f3 0f 59 44 87 f8    	mulss  -0x8(%rdi,%rax,4),%xmm0
    e63e:	eb 06                	jmp    e646 <_ZN3$_98__invokeERN7genetic5stackIfLi20EEE+0x36>
    bin_func(a * b),                                // mul
    e640:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
    e644:	31 c9                	xor    %ecx,%ecx
                regs_[elements_] = val;
    e646:	48 63 c1             	movslq %ecx,%rax
    e649:	f3 0f 11 04 87       	movss  %xmm0,(%rdi,%rax,4)
                elements_++;
    e64e:	ff c0                	inc    %eax
    e650:	89 47 50             	mov    %eax,0x50(%rdi)
    e653:	c3                   	retq   
    e654:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
    e65b:	00 00 00 00 00 

000000000000e660 <_ZN4$_108__invokeERN7genetic5stackIfLi20EEE>:
    bin_func(std::pow(a, b)),                       // pow
    e660:	53                   	push   %rbx
    e661:	48 89 fb             	mov    %rdi,%rbx
        inline bool empty() const { return elements_ == 0; }
    e664:	48 63 47 50          	movslq 0x50(%rdi),%rax
    e668:	0f 57 c9             	xorps  %xmm1,%xmm1
    e66b:	48 85 c0             	test   %rax,%rax
            return empty() ? DataT(0) : regs_[(--elements_)];
    e66e:	74 1f                	je     e68f <_ZN4$_108__invokeERN7genetic5stackIfLi20EEE+0x2f>
    e670:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    e674:	89 4b 50             	mov    %ecx,0x50(%rbx)
    e677:	f3 0f 10 44 83 fc    	movss  -0x4(%rbx,%rax,4),%xmm0
        inline bool empty() const { return elements_ == 0; }
    e67d:	85 c9                	test   %ecx,%ecx
            return empty() ? DataT(0) : regs_[(--elements_)];
    e67f:	74 11                	je     e692 <_ZN4$_108__invokeERN7genetic5stackIfLi20EEE+0x32>
    e681:	8d 48 fe             	lea    -0x2(%rax),%ecx
    e684:	89 4b 50             	mov    %ecx,0x50(%rbx)
    e687:	f3 0f 10 4c 83 f8    	movss  -0x8(%rbx,%rax,4),%xmm1
    e68d:	eb 03                	jmp    e692 <_ZN4$_108__invokeERN7genetic5stackIfLi20EEE+0x32>
    e68f:	0f 57 c0             	xorps  %xmm0,%xmm0
  { return __builtin_powf(__x, __y); }
    e692:	e8 99 92 00 00       	callq  17930 <powf@plt>
        inline bool full() const { return elements_ == MaxSize; }
    e697:	48 63 43 50          	movslq 0x50(%rbx),%rax
    e69b:	48 83 f8 14          	cmp    $0x14,%rax
            if (!full()) {
    e69f:	74 0a                	je     e6ab <_ZN4$_108__invokeERN7genetic5stackIfLi20EEE+0x4b>
                regs_[elements_] = val;
    e6a1:	f3 0f 11 04 83       	movss  %xmm0,(%rbx,%rax,4)
                elements_++;
    e6a6:	ff c0                	inc    %eax
    e6a8:	89 43 50             	mov    %eax,0x50(%rbx)
    e6ab:	5b                   	pop    %rbx
    e6ac:	c3                   	retq   
    e6ad:	0f 1f 00             	nopl   (%rax)

000000000000e6b0 <_ZN4$_118__invokeERN7genetic5stackIfLi20EEE>:
        inline bool empty() const { return elements_ == 0; }
    e6b0:	48 63 4f 50          	movslq 0x50(%rdi),%rcx
    e6b4:	31 c0                	xor    %eax,%eax
    e6b6:	48 85 c9             	test   %rcx,%rcx
            return empty() ? DataT(0) : regs_[(--elements_)];
    e6b9:	74 21                	je     e6dc <_ZN4$_118__invokeERN7genetic5stackIfLi20EEE+0x2c>
    e6bb:	48 8d 51 ff          	lea    -0x1(%rcx),%rdx
    e6bf:	f3 0f 10 44 8f fc    	movss  -0x4(%rdi,%rcx,4),%xmm0
        inline bool empty() const { return elements_ == 0; }
    e6c5:	85 d2                	test   %edx,%edx
            return empty() ? DataT(0) : regs_[(--elements_)];
    e6c7:	74 16                	je     e6df <_ZN4$_118__invokeERN7genetic5stackIfLi20EEE+0x2f>
    e6c9:	8d 41 fe             	lea    -0x2(%rcx),%eax
    e6cc:	89 47 50             	mov    %eax,0x50(%rdi)
        inline bool full() const { return elements_ == MaxSize; }
    e6cf:	83 f8 14             	cmp    $0x14,%eax
            if (!full()) {
    e6d2:	74 17                	je     e6eb <_ZN4$_118__invokeERN7genetic5stackIfLi20EEE+0x3b>
    e6d4:	f3 0f 5c 44 8f f8    	subss  -0x8(%rdi,%rcx,4),%xmm0
    e6da:	eb 03                	jmp    e6df <_ZN4$_118__invokeERN7genetic5stackIfLi20EEE+0x2f>
    e6dc:	0f 57 c0             	xorps  %xmm0,%xmm0
                regs_[elements_] = val;
    e6df:	48 98                	cltq   
    e6e1:	f3 0f 11 04 87       	movss  %xmm0,(%rdi,%rax,4)
                elements_++;
    e6e6:	ff c0                	inc    %eax
    e6e8:	89 47 50             	mov    %eax,0x50(%rdi)
    bin_func(a - b),                                // sub
    e6eb:	c3                   	retq   
    e6ec:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000e6f0 <_ZN4$_128__invokeERN7genetic5stackIfLi20EEE>:
        inline bool empty() const { return elements_ == 0; }
    e6f0:	48 63 4f 50          	movslq 0x50(%rdi),%rcx
    e6f4:	48 85 c9             	test   %rcx,%rcx
            return empty() ? DataT(0) : regs_[(--elements_)];
    e6f7:	74 1b                	je     e714 <_ZN4$_128__invokeERN7genetic5stackIfLi20EEE+0x24>
    e6f9:	48 8d 41 ff          	lea    -0x1(%rcx),%rax
    e6fd:	89 47 50             	mov    %eax,0x50(%rdi)
        inline bool full() const { return elements_ == MaxSize; }
    e700:	83 f8 14             	cmp    $0x14,%eax
            if (!full()) {
    e703:	74 20                	je     e725 <_ZN4$_128__invokeERN7genetic5stackIfLi20EEE+0x35>
    e705:	f3 0f 10 44 8f fc    	movss  -0x4(%rdi,%rcx,4),%xmm0
    e70b:	0f 54 05 9e 40 ff ff 	andps  -0xbf62(%rip),%xmm0        # 27b0 <_IO_stdin_used+0xc0>
    e712:	eb 05                	jmp    e719 <_ZN4$_128__invokeERN7genetic5stackIfLi20EEE+0x29>
    e714:	31 c0                	xor    %eax,%eax
    e716:	0f 57 c0             	xorps  %xmm0,%xmm0
                regs_[elements_] = val;
    e719:	48 98                	cltq   
    e71b:	f3 0f 11 04 87       	movss  %xmm0,(%rdi,%rax,4)
                elements_++;
    e720:	ff c0                	inc    %eax
    e722:	89 47 50             	mov    %eax,0x50(%rdi)
    // Unary functions
    un_func(std::abs(a)),                           // abs
    e725:	c3                   	retq   
    e726:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    e72d:	00 00 00 

000000000000e730 <_ZN4$_138__invokeERN7genetic5stackIfLi20EEE>:
    un_func(std::acos(a)),                          // acos
    e730:	53                   	push   %rbx
    e731:	48 89 fb             	mov    %rdi,%rbx
        inline bool empty() const { return elements_ == 0; }
    e734:	48 63 47 50          	movslq 0x50(%rdi),%rax
    e738:	48 85 c0             	test   %rax,%rax
            return empty() ? DataT(0) : regs_[(--elements_)];
    e73b:	74 0f                	je     e74c <_ZN4$_138__invokeERN7genetic5stackIfLi20EEE+0x1c>
    e73d:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    e741:	89 4b 50             	mov    %ecx,0x50(%rbx)
    e744:	f3 0f 10 44 83 fc    	movss  -0x4(%rbx,%rax,4),%xmm0
    e74a:	eb 03                	jmp    e74f <_ZN4$_138__invokeERN7genetic5stackIfLi20EEE+0x1f>
    e74c:	0f 57 c0             	xorps  %xmm0,%xmm0
  { return __builtin_acosf(__x); }
    e74f:	e8 4c 91 00 00       	callq  178a0 <acosf@plt>
        inline bool full() const { return elements_ == MaxSize; }
    e754:	48 63 43 50          	movslq 0x50(%rbx),%rax
    e758:	48 83 f8 14          	cmp    $0x14,%rax
            if (!full()) {
    e75c:	74 0a                	je     e768 <_ZN4$_138__invokeERN7genetic5stackIfLi20EEE+0x38>
                regs_[elements_] = val;
    e75e:	f3 0f 11 04 83       	movss  %xmm0,(%rbx,%rax,4)
                elements_++;
    e763:	ff c0                	inc    %eax
    e765:	89 43 50             	mov    %eax,0x50(%rbx)
    e768:	5b                   	pop    %rbx
    e769:	c3                   	retq   
    e76a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000e770 <_ZN4$_148__invokeERN7genetic5stackIfLi20EEE>:
    un_func(std::acosh(a)),                         // acosh
    e770:	53                   	push   %rbx
    e771:	48 89 fb             	mov    %rdi,%rbx
        inline bool empty() const { return elements_ == 0; }
    e774:	48 63 47 50          	movslq 0x50(%rdi),%rax
    e778:	48 85 c0             	test   %rax,%rax
            return empty() ? DataT(0) : regs_[(--elements_)];
    e77b:	74 0f                	je     e78c <_ZN4$_148__invokeERN7genetic5stackIfLi20EEE+0x1c>
    e77d:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    e781:	89 4b 50             	mov    %ecx,0x50(%rbx)
    e784:	f3 0f 10 44 83 fc    	movss  -0x4(%rbx,%rax,4),%xmm0
    e78a:	eb 03                	jmp    e78f <_ZN4$_148__invokeERN7genetic5stackIfLi20EEE+0x1f>
    e78c:	0f 57 c0             	xorps  %xmm0,%xmm0
  { return __builtin_acoshf(__x); }
    e78f:	e8 dc 90 00 00       	callq  17870 <acoshf@plt>
        inline bool full() const { return elements_ == MaxSize; }
    e794:	48 63 43 50          	movslq 0x50(%rbx),%rax
    e798:	48 83 f8 14          	cmp    $0x14,%rax
            if (!full()) {
    e79c:	74 0a                	je     e7a8 <_ZN4$_148__invokeERN7genetic5stackIfLi20EEE+0x38>
                regs_[elements_] = val;
    e79e:	f3 0f 11 04 83       	movss  %xmm0,(%rbx,%rax,4)
                elements_++;
    e7a3:	ff c0                	inc    %eax
    e7a5:	89 43 50             	mov    %eax,0x50(%rbx)
    e7a8:	5b                   	pop    %rbx
    e7a9:	c3                   	retq   
    e7aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000e7b0 <_ZN4$_158__invokeERN7genetic5stackIfLi20EEE>:
    un_func(std::asin(a)),                          // asin
    e7b0:	53                   	push   %rbx
    e7b1:	48 89 fb             	mov    %rdi,%rbx
        inline bool empty() const { return elements_ == 0; }
    e7b4:	48 63 47 50          	movslq 0x50(%rdi),%rax
    e7b8:	48 85 c0             	test   %rax,%rax
            return empty() ? DataT(0) : regs_[(--elements_)];
    e7bb:	74 0f                	je     e7cc <_ZN4$_158__invokeERN7genetic5stackIfLi20EEE+0x1c>
    e7bd:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    e7c1:	89 4b 50             	mov    %ecx,0x50(%rbx)
    e7c4:	f3 0f 10 44 83 fc    	movss  -0x4(%rbx,%rax,4),%xmm0
    e7ca:	eb 03                	jmp    e7cf <_ZN4$_158__invokeERN7genetic5stackIfLi20EEE+0x1f>
    e7cc:	0f 57 c0             	xorps  %xmm0,%xmm0
  { return __builtin_asinf(__x); }
    e7cf:	e8 5c 90 00 00       	callq  17830 <asinf@plt>
        inline bool full() const { return elements_ == MaxSize; }
    e7d4:	48 63 43 50          	movslq 0x50(%rbx),%rax
    e7d8:	48 83 f8 14          	cmp    $0x14,%rax
            if (!full()) {
    e7dc:	74 0a                	je     e7e8 <_ZN4$_158__invokeERN7genetic5stackIfLi20EEE+0x38>
                regs_[elements_] = val;
    e7de:	f3 0f 11 04 83       	movss  %xmm0,(%rbx,%rax,4)
                elements_++;
    e7e3:	ff c0                	inc    %eax
    e7e5:	89 43 50             	mov    %eax,0x50(%rbx)
    e7e8:	5b                   	pop    %rbx
    e7e9:	c3                   	retq   
    e7ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000e7f0 <_ZN4$_168__invokeERN7genetic5stackIfLi20EEE>:
    un_func(std::asinh(a)),                         // asinh
    e7f0:	53                   	push   %rbx
    e7f1:	48 89 fb             	mov    %rdi,%rbx
        inline bool empty() const { return elements_ == 0; }
    e7f4:	48 63 47 50          	movslq 0x50(%rdi),%rax
    e7f8:	48 85 c0             	test   %rax,%rax
            return empty() ? DataT(0) : regs_[(--elements_)];
    e7fb:	74 0f                	je     e80c <_ZN4$_168__invokeERN7genetic5stackIfLi20EEE+0x1c>
    e7fd:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    e801:	89 4b 50             	mov    %ecx,0x50(%rbx)
    e804:	f3 0f 10 44 83 fc    	movss  -0x4(%rbx,%rax,4),%xmm0
    e80a:	eb 03                	jmp    e80f <_ZN4$_168__invokeERN7genetic5stackIfLi20EEE+0x1f>
    e80c:	0f 57 c0             	xorps  %xmm0,%xmm0
  { return __builtin_asinhf(__x); }
    e80f:	e8 fc 8f 00 00       	callq  17810 <asinhf@plt>
        inline bool full() const { return elements_ == MaxSize; }
    e814:	48 63 43 50          	movslq 0x50(%rbx),%rax
    e818:	48 83 f8 14          	cmp    $0x14,%rax
            if (!full()) {
    e81c:	74 0a                	je     e828 <_ZN4$_168__invokeERN7genetic5stackIfLi20EEE+0x38>
                regs_[elements_] = val;
    e81e:	f3 0f 11 04 83       	movss  %xmm0,(%rbx,%rax,4)
                elements_++;
    e823:	ff c0                	inc    %eax
    e825:	89 43 50             	mov    %eax,0x50(%rbx)
    e828:	5b                   	pop    %rbx
    e829:	c3                   	retq   
    e82a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000e830 <_ZN4$_178__invokeERN7genetic5stackIfLi20EEE>:
    un_func(std::atan(a)),                          // atan
    e830:	53                   	push   %rbx
    e831:	48 89 fb             	mov    %rdi,%rbx
        inline bool empty() const { return elements_ == 0; }
    e834:	48 63 47 50          	movslq 0x50(%rdi),%rax
    e838:	48 85 c0             	test   %rax,%rax
            return empty() ? DataT(0) : regs_[(--elements_)];
    e83b:	74 0f                	je     e84c <_ZN4$_178__invokeERN7genetic5stackIfLi20EEE+0x1c>
    e83d:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    e841:	89 4b 50             	mov    %ecx,0x50(%rbx)
    e844:	f3 0f 10 44 83 fc    	movss  -0x4(%rbx,%rax,4),%xmm0
    e84a:	eb 03                	jmp    e84f <_ZN4$_178__invokeERN7genetic5stackIfLi20EEE+0x1f>
    e84c:	0f 57 c0             	xorps  %xmm0,%xmm0
  { return __builtin_atanf(__x); }
    e84f:	e8 7c 90 00 00       	callq  178d0 <atanf@plt>
        inline bool full() const { return elements_ == MaxSize; }
    e854:	48 63 43 50          	movslq 0x50(%rbx),%rax
    e858:	48 83 f8 14          	cmp    $0x14,%rax
            if (!full()) {
    e85c:	74 0a                	je     e868 <_ZN4$_178__invokeERN7genetic5stackIfLi20EEE+0x38>
                regs_[elements_] = val;
    e85e:	f3 0f 11 04 83       	movss  %xmm0,(%rbx,%rax,4)
                elements_++;
    e863:	ff c0                	inc    %eax
    e865:	89 43 50             	mov    %eax,0x50(%rbx)
    e868:	5b                   	pop    %rbx
    e869:	c3                   	retq   
    e86a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000e870 <_ZN4$_188__invokeERN7genetic5stackIfLi20EEE>:
    un_func(std::atanh(a)),                         // atanh
    e870:	53                   	push   %rbx
    e871:	48 89 fb             	mov    %rdi,%rbx
        inline bool empty() const { return elements_ == 0; }
    e874:	48 63 47 50          	movslq 0x50(%rdi),%rax
    e878:	48 85 c0             	test   %rax,%rax
            return empty() ? DataT(0) : regs_[(--elements_)];
    e87b:	74 0f                	je     e88c <_ZN4$_188__invokeERN7genetic5stackIfLi20EEE+0x1c>
    e87d:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    e881:	89 4b 50             	mov    %ecx,0x50(%rbx)
    e884:	f3 0f 10 44 83 fc    	movss  -0x4(%rbx,%rax,4),%xmm0
    e88a:	eb 03                	jmp    e88f <_ZN4$_188__invokeERN7genetic5stackIfLi20EEE+0x1f>
    e88c:	0f 57 c0             	xorps  %xmm0,%xmm0
  { return __builtin_atanhf(__x); }
    e88f:	e8 6c 8f 00 00       	callq  17800 <atanhf@plt>
        inline bool full() const { return elements_ == MaxSize; }
    e894:	48 63 43 50          	movslq 0x50(%rbx),%rax
    e898:	48 83 f8 14          	cmp    $0x14,%rax
            if (!full()) {
    e89c:	74 0a                	je     e8a8 <_ZN4$_188__invokeERN7genetic5stackIfLi20EEE+0x38>
                regs_[elements_] = val;
    e89e:	f3 0f 11 04 83       	movss  %xmm0,(%rbx,%rax,4)
                elements_++;
    e8a3:	ff c0                	inc    %eax
    e8a5:	89 43 50             	mov    %eax,0x50(%rbx)
    e8a8:	5b                   	pop    %rbx
    e8a9:	c3                   	retq   
    e8aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000e8b0 <_ZN4$_198__invokeERN7genetic5stackIfLi20EEE>:
    un_func(std::cbrt(a)),                          // cbrt
    e8b0:	41 56                	push   %r14
    e8b2:	53                   	push   %rbx
    e8b3:	50                   	push   %rax
    e8b4:	48 89 fb             	mov    %rdi,%rbx
        inline bool empty() const { return elements_ == 0; }
    e8b7:	48 63 47 50          	movslq 0x50(%rdi),%rax
    e8bb:	48 85 c0             	test   %rax,%rax
            return empty() ? DataT(0) : regs_[(--elements_)];
    e8be:	74 1b                	je     e8db <_ZN4$_198__invokeERN7genetic5stackIfLi20EEE+0x2b>
    e8c0:	4c 8d 70 ff          	lea    -0x1(%rax),%r14
    e8c4:	44 89 73 50          	mov    %r14d,0x50(%rbx)
    e8c8:	f3 0f 10 44 83 fc    	movss  -0x4(%rbx,%rax,4),%xmm0
  { return __builtin_cbrtf(__x); }
    e8ce:	e8 2d 90 00 00       	callq  17900 <cbrtf@plt>
        inline bool full() const { return elements_ == MaxSize; }
    e8d3:	41 83 fe 14          	cmp    $0x14,%r14d
            if (!full()) {
    e8d7:	75 0d                	jne    e8e6 <_ZN4$_198__invokeERN7genetic5stackIfLi20EEE+0x36>
    e8d9:	eb 18                	jmp    e8f3 <_ZN4$_198__invokeERN7genetic5stackIfLi20EEE+0x43>
    e8db:	0f 57 c0             	xorps  %xmm0,%xmm0
    e8de:	e8 1d 90 00 00       	callq  17900 <cbrtf@plt>
    e8e3:	45 31 f6             	xor    %r14d,%r14d
                regs_[elements_] = val;
    e8e6:	49 63 c6             	movslq %r14d,%rax
    e8e9:	f3 0f 11 04 83       	movss  %xmm0,(%rbx,%rax,4)
                elements_++;
    e8ee:	ff c0                	inc    %eax
    e8f0:	89 43 50             	mov    %eax,0x50(%rbx)
    e8f3:	48 83 c4 08          	add    $0x8,%rsp
    e8f7:	5b                   	pop    %rbx
    e8f8:	41 5e                	pop    %r14
    e8fa:	c3                   	retq   
    e8fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000e900 <_ZN4$_208__invokeERN7genetic5stackIfLi20EEE>:
    un_func(std::cos(a)),                           // cos
    e900:	53                   	push   %rbx
    e901:	48 89 fb             	mov    %rdi,%rbx
        inline bool empty() const { return elements_ == 0; }
    e904:	48 63 47 50          	movslq 0x50(%rdi),%rax
    e908:	48 85 c0             	test   %rax,%rax
            return empty() ? DataT(0) : regs_[(--elements_)];
    e90b:	74 0f                	je     e91c <_ZN4$_208__invokeERN7genetic5stackIfLi20EEE+0x1c>
    e90d:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    e911:	89 4b 50             	mov    %ecx,0x50(%rbx)
    e914:	f3 0f 10 44 83 fc    	movss  -0x4(%rbx,%rax,4),%xmm0
    e91a:	eb 03                	jmp    e91f <_ZN4$_208__invokeERN7genetic5stackIfLi20EEE+0x1f>
    e91c:	0f 57 c0             	xorps  %xmm0,%xmm0
  { return __builtin_cosf(__x); }
    e91f:	e8 cc 8f 00 00       	callq  178f0 <cosf@plt>
        inline bool full() const { return elements_ == MaxSize; }
    e924:	48 63 43 50          	movslq 0x50(%rbx),%rax
    e928:	48 83 f8 14          	cmp    $0x14,%rax
            if (!full()) {
    e92c:	74 0a                	je     e938 <_ZN4$_208__invokeERN7genetic5stackIfLi20EEE+0x38>
                regs_[elements_] = val;
    e92e:	f3 0f 11 04 83       	movss  %xmm0,(%rbx,%rax,4)
                elements_++;
    e933:	ff c0                	inc    %eax
    e935:	89 43 50             	mov    %eax,0x50(%rbx)
    e938:	5b                   	pop    %rbx
    e939:	c3                   	retq   
    e93a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000e940 <_ZN4$_218__invokeERN7genetic5stackIfLi20EEE>:
    un_func(std::cosh(a)),                          // cosh
    e940:	53                   	push   %rbx
    e941:	48 89 fb             	mov    %rdi,%rbx
        inline bool empty() const { return elements_ == 0; }
    e944:	48 63 47 50          	movslq 0x50(%rdi),%rax
    e948:	48 85 c0             	test   %rax,%rax
            return empty() ? DataT(0) : regs_[(--elements_)];
    e94b:	74 0f                	je     e95c <_ZN4$_218__invokeERN7genetic5stackIfLi20EEE+0x1c>
    e94d:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    e951:	89 4b 50             	mov    %ecx,0x50(%rbx)
    e954:	f3 0f 10 44 83 fc    	movss  -0x4(%rbx,%rax,4),%xmm0
    e95a:	eb 03                	jmp    e95f <_ZN4$_218__invokeERN7genetic5stackIfLi20EEE+0x1f>
    e95c:	0f 57 c0             	xorps  %xmm0,%xmm0
  { return __builtin_coshf(__x); }
    e95f:	e8 4c 8f 00 00       	callq  178b0 <coshf@plt>
        inline bool full() const { return elements_ == MaxSize; }
    e964:	48 63 43 50          	movslq 0x50(%rbx),%rax
    e968:	48 83 f8 14          	cmp    $0x14,%rax
            if (!full()) {
    e96c:	74 0a                	je     e978 <_ZN4$_218__invokeERN7genetic5stackIfLi20EEE+0x38>
                regs_[elements_] = val;
    e96e:	f3 0f 11 04 83       	movss  %xmm0,(%rbx,%rax,4)
                elements_++;
    e973:	ff c0                	inc    %eax
    e975:	89 43 50             	mov    %eax,0x50(%rbx)
    e978:	5b                   	pop    %rbx
    e979:	c3                   	retq   
    e97a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000e980 <_ZN4$_228__invokeERN7genetic5stackIfLi20EEE>:
        inline bool empty() const { return elements_ == 0; }
    e980:	48 63 4f 50          	movslq 0x50(%rdi),%rcx
    e984:	48 85 c9             	test   %rcx,%rcx
            return empty() ? DataT(0) : regs_[(--elements_)];
    e987:	74 1f                	je     e9a8 <_ZN4$_228__invokeERN7genetic5stackIfLi20EEE+0x28>
    e989:	48 8d 41 ff          	lea    -0x1(%rcx),%rax
    e98d:	89 47 50             	mov    %eax,0x50(%rdi)
        inline bool full() const { return elements_ == MaxSize; }
    e990:	83 f8 14             	cmp    $0x14,%eax
            if (!full()) {
    e993:	74 24                	je     e9b9 <_ZN4$_228__invokeERN7genetic5stackIfLi20EEE+0x39>
    e995:	f3 0f 10 4c 8f fc    	movss  -0x4(%rdi,%rcx,4),%xmm1
    e99b:	0f 28 c1             	movaps %xmm1,%xmm0
    e99e:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
    e9a2:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
    e9a6:	eb 05                	jmp    e9ad <_ZN4$_228__invokeERN7genetic5stackIfLi20EEE+0x2d>
    e9a8:	31 c0                	xor    %eax,%eax
    e9aa:	0f 57 c0             	xorps  %xmm0,%xmm0
                regs_[elements_] = val;
    e9ad:	48 98                	cltq   
    e9af:	f3 0f 11 04 87       	movss  %xmm0,(%rdi,%rax,4)
                elements_++;
    e9b4:	ff c0                	inc    %eax
    e9b6:	89 47 50             	mov    %eax,0x50(%rdi)
    un_func(a * a * a),                             // cube
    e9b9:	c3                   	retq   
    e9ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000e9c0 <_ZN4$_238__invokeERN7genetic5stackIfLi20EEE>:
    un_func(std::exp(a)),                           // exp
    e9c0:	53                   	push   %rbx
    e9c1:	48 89 fb             	mov    %rdi,%rbx
        inline bool empty() const { return elements_ == 0; }
    e9c4:	48 63 47 50          	movslq 0x50(%rdi),%rax
    e9c8:	48 85 c0             	test   %rax,%rax
            return empty() ? DataT(0) : regs_[(--elements_)];
    e9cb:	74 0f                	je     e9dc <_ZN4$_238__invokeERN7genetic5stackIfLi20EEE+0x1c>
    e9cd:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    e9d1:	89 4b 50             	mov    %ecx,0x50(%rbx)
    e9d4:	f3 0f 10 44 83 fc    	movss  -0x4(%rbx,%rax,4),%xmm0
    e9da:	eb 03                	jmp    e9df <_ZN4$_238__invokeERN7genetic5stackIfLi20EEE+0x1f>
    e9dc:	0f 57 c0             	xorps  %xmm0,%xmm0
  { return __builtin_expf(__x); }
    e9df:	e8 2c 8f 00 00       	callq  17910 <expf@plt>
        inline bool full() const { return elements_ == MaxSize; }
    e9e4:	48 63 43 50          	movslq 0x50(%rbx),%rax
    e9e8:	48 83 f8 14          	cmp    $0x14,%rax
            if (!full()) {
    e9ec:	74 0a                	je     e9f8 <_ZN4$_238__invokeERN7genetic5stackIfLi20EEE+0x38>
                regs_[elements_] = val;
    e9ee:	f3 0f 11 04 83       	movss  %xmm0,(%rbx,%rax,4)
                elements_++;
    e9f3:	ff c0                	inc    %eax
    e9f5:	89 43 50             	mov    %eax,0x50(%rbx)
    e9f8:	5b                   	pop    %rbx
    e9f9:	c3                   	retq   
    e9fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000ea00 <_ZN4$_248__invokeERN7genetic5stackIfLi20EEE>:
        inline bool empty() const { return elements_ == 0; }
    ea00:	48 63 4f 50          	movslq 0x50(%rdi),%rcx
    ea04:	48 85 c9             	test   %rcx,%rcx
            return empty() ? DataT(0) : regs_[(--elements_)];
    ea07:	74 2d                	je     ea36 <_ZN4$_248__invokeERN7genetic5stackIfLi20EEE+0x36>
    ea09:	48 8d 41 ff          	lea    -0x1(%rcx),%rax
    ea0d:	89 47 50             	mov    %eax,0x50(%rdi)
    ea10:	f3 0f 10 4c 8f fc    	movss  -0x4(%rdi,%rcx,4),%xmm1
    ea16:	0f 28 15 93 3d ff ff 	movaps -0xc26d(%rip),%xmm2        # 27b0 <_IO_stdin_used+0xc0>
    ea1d:	0f 54 d1             	andps  %xmm1,%xmm2
    ea20:	0f 57 c0             	xorps  %xmm0,%xmm0
    ea23:	f3 0f 10 1d cd 3c ff 	movss  -0xc333(%rip),%xmm3        # 26f8 <_IO_stdin_used+0x8>
    ea2a:	ff 
    un_func(std::abs(a) < EPSILON ? 0.f : 1.f / a), // inv
    ea2b:	0f 2e da             	ucomiss %xmm2,%xmm3
    ea2e:	76 0d                	jbe    ea3d <_ZN4$_248__invokeERN7genetic5stackIfLi20EEE+0x3d>
        inline bool full() const { return elements_ == MaxSize; }
    ea30:	83 f8 14             	cmp    $0x14,%eax
            if (!full()) {
    ea33:	75 19                	jne    ea4e <_ZN4$_248__invokeERN7genetic5stackIfLi20EEE+0x4e>
    ea35:	c3                   	retq   
    ea36:	31 c0                	xor    %eax,%eax
    ea38:	0f 57 c0             	xorps  %xmm0,%xmm0
    ea3b:	eb 11                	jmp    ea4e <_ZN4$_248__invokeERN7genetic5stackIfLi20EEE+0x4e>
    ea3d:	f3 0f 10 05 8b 3c ff 	movss  -0xc375(%rip),%xmm0        # 26d0 <_IO_stdin_used-0x20>
    ea44:	ff 
    ea45:	f3 0f 5e c1          	divss  %xmm1,%xmm0
        inline bool full() const { return elements_ == MaxSize; }
    ea49:	83 f8 14             	cmp    $0x14,%eax
            if (!full()) {
    ea4c:	74 e7                	je     ea35 <_ZN4$_248__invokeERN7genetic5stackIfLi20EEE+0x35>
                regs_[elements_] = val;
    ea4e:	48 98                	cltq   
    ea50:	f3 0f 11 04 87       	movss  %xmm0,(%rdi,%rax,4)
                elements_++;
    ea55:	ff c0                	inc    %eax
    ea57:	89 47 50             	mov    %eax,0x50(%rdi)
    ea5a:	c3                   	retq   
    ea5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000ea60 <_ZN4$_258__invokeERN7genetic5stackIfLi20EEE>:
    un_func(std::abs(a) < EPSILON ? 0.f : std::log(std::abs(a))),  // log
    ea60:	53                   	push   %rbx
    ea61:	48 89 fb             	mov    %rdi,%rbx
        inline bool empty() const { return elements_ == 0; }
    ea64:	48 63 4f 50          	movslq 0x50(%rdi),%rcx
    ea68:	0f 57 c0             	xorps  %xmm0,%xmm0
    ea6b:	48 85 c9             	test   %rcx,%rcx
            return empty() ? DataT(0) : regs_[(--elements_)];
    ea6e:	74 0f                	je     ea7f <_ZN4$_258__invokeERN7genetic5stackIfLi20EEE+0x1f>
    ea70:	48 8d 41 ff          	lea    -0x1(%rcx),%rax
    ea74:	89 43 50             	mov    %eax,0x50(%rbx)
    ea77:	f3 0f 10 4c 8b fc    	movss  -0x4(%rbx,%rcx,4),%xmm1
    ea7d:	eb 05                	jmp    ea84 <_ZN4$_258__invokeERN7genetic5stackIfLi20EEE+0x24>
    ea7f:	31 c0                	xor    %eax,%eax
    ea81:	0f 57 c9             	xorps  %xmm1,%xmm1
    ea84:	0f 54 0d 25 3d ff ff 	andps  -0xc2db(%rip),%xmm1        # 27b0 <_IO_stdin_used+0xc0>
    ea8b:	f3 0f 10 15 65 3c ff 	movss  -0xc39b(%rip),%xmm2        # 26f8 <_IO_stdin_used+0x8>
    ea92:	ff 
    ea93:	0f 2e d1             	ucomiss %xmm1,%xmm2
    ea96:	76 07                	jbe    ea9f <_ZN4$_258__invokeERN7genetic5stackIfLi20EEE+0x3f>
        inline bool full() const { return elements_ == MaxSize; }
    ea98:	83 f8 14             	cmp    $0x14,%eax
            if (!full()) {
    ea9b:	75 12                	jne    eaaf <_ZN4$_258__invokeERN7genetic5stackIfLi20EEE+0x4f>
    ea9d:	5b                   	pop    %rbx
    ea9e:	c3                   	retq   
  { return __builtin_logf(__x); }
    ea9f:	0f 28 c1             	movaps %xmm1,%xmm0
    eaa2:	e8 39 8e 00 00       	callq  178e0 <logf@plt>
        inline bool full() const { return elements_ == MaxSize; }
    eaa7:	8b 43 50             	mov    0x50(%rbx),%eax
    eaaa:	83 f8 14             	cmp    $0x14,%eax
            if (!full()) {
    eaad:	74 ee                	je     ea9d <_ZN4$_258__invokeERN7genetic5stackIfLi20EEE+0x3d>
                regs_[elements_] = val;
    eaaf:	48 63 c8             	movslq %eax,%rcx
    eab2:	f3 0f 11 04 8b       	movss  %xmm0,(%rbx,%rcx,4)
                elements_++;
    eab7:	ff c0                	inc    %eax
    eab9:	89 43 50             	mov    %eax,0x50(%rbx)
    eabc:	5b                   	pop    %rbx
    eabd:	c3                   	retq   
    eabe:	66 90                	xchg   %ax,%ax

000000000000eac0 <_ZN4$_268__invokeERN7genetic5stackIfLi20EEE>:
        inline bool empty() const { return elements_ == 0; }
    eac0:	48 63 4f 50          	movslq 0x50(%rdi),%rcx
    eac4:	48 85 c9             	test   %rcx,%rcx
            return empty() ? DataT(0) : regs_[(--elements_)];
    eac7:	74 1b                	je     eae4 <_ZN4$_268__invokeERN7genetic5stackIfLi20EEE+0x24>
    eac9:	48 8d 41 ff          	lea    -0x1(%rcx),%rax
    eacd:	89 47 50             	mov    %eax,0x50(%rdi)
        inline bool full() const { return elements_ == MaxSize; }
    ead0:	83 f8 14             	cmp    $0x14,%eax
            if (!full()) {
    ead3:	74 25                	je     eafa <_ZN4$_268__invokeERN7genetic5stackIfLi20EEE+0x3a>
    ead5:	f3 0f 10 44 8f fc    	movss  -0x4(%rdi,%rcx,4),%xmm0
    eadb:	0f 57 05 1e 3d ff ff 	xorps  -0xc2e2(%rip),%xmm0        # 2800 <_IO_stdin_used+0x110>
    eae2:	eb 0a                	jmp    eaee <_ZN4$_268__invokeERN7genetic5stackIfLi20EEE+0x2e>
    eae4:	31 c0                	xor    %eax,%eax
    eae6:	f3 0f 10 05 fa 3b ff 	movss  -0xc406(%rip),%xmm0        # 26e8 <_IO_stdin_used-0x8>
    eaed:	ff 
                regs_[elements_] = val;
    eaee:	48 98                	cltq   
    eaf0:	f3 0f 11 04 87       	movss  %xmm0,(%rdi,%rax,4)
                elements_++;
    eaf5:	ff c0                	inc    %eax
    eaf7:	89 47 50             	mov    %eax,0x50(%rdi)
    un_func(-a),                            // neg
    eafa:	c3                   	retq   
    eafb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000eb00 <_ZN4$_278__invokeERN7genetic5stackIfLi20EEE>:
    un_func(1.0f / std::cbrt(a)),           // rcbrt
    eb00:	41 56                	push   %r14
    eb02:	53                   	push   %rbx
    eb03:	50                   	push   %rax
    eb04:	48 89 fb             	mov    %rdi,%rbx
        inline bool empty() const { return elements_ == 0; }
    eb07:	48 63 47 50          	movslq 0x50(%rdi),%rax
    eb0b:	48 85 c0             	test   %rax,%rax
            return empty() ? DataT(0) : regs_[(--elements_)];
    eb0e:	74 1b                	je     eb2b <_ZN4$_278__invokeERN7genetic5stackIfLi20EEE+0x2b>
    eb10:	4c 8d 70 ff          	lea    -0x1(%rax),%r14
    eb14:	44 89 73 50          	mov    %r14d,0x50(%rbx)
    eb18:	f3 0f 10 44 83 fc    	movss  -0x4(%rbx,%rax,4),%xmm0
  { return __builtin_cbrtf(__x); }
    eb1e:	e8 dd 8d 00 00       	callq  17900 <cbrtf@plt>
        inline bool full() const { return elements_ == MaxSize; }
    eb23:	41 83 fe 14          	cmp    $0x14,%r14d
            if (!full()) {
    eb27:	75 0d                	jne    eb36 <_ZN4$_278__invokeERN7genetic5stackIfLi20EEE+0x36>
    eb29:	eb 24                	jmp    eb4f <_ZN4$_278__invokeERN7genetic5stackIfLi20EEE+0x4f>
    eb2b:	0f 57 c0             	xorps  %xmm0,%xmm0
    eb2e:	e8 cd 8d 00 00       	callq  17900 <cbrtf@plt>
    eb33:	45 31 f6             	xor    %r14d,%r14d
    eb36:	f3 0f 10 0d 92 3b ff 	movss  -0xc46e(%rip),%xmm1        # 26d0 <_IO_stdin_used-0x20>
    eb3d:	ff 
    eb3e:	f3 0f 5e c8          	divss  %xmm0,%xmm1
                regs_[elements_] = val;
    eb42:	49 63 c6             	movslq %r14d,%rax
    eb45:	f3 0f 11 0c 83       	movss  %xmm1,(%rbx,%rax,4)
                elements_++;
    eb4a:	ff c0                	inc    %eax
    eb4c:	89 43 50             	mov    %eax,0x50(%rbx)
    eb4f:	48 83 c4 08          	add    $0x8,%rsp
    eb53:	5b                   	pop    %rbx
    eb54:	41 5e                	pop    %r14
    eb56:	c3                   	retq   
    eb57:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    eb5e:	00 00 

000000000000eb60 <_ZN4$_288__invokeERN7genetic5stackIfLi20EEE>:
        inline bool empty() const { return elements_ == 0; }
    eb60:	48 63 4f 50          	movslq 0x50(%rdi),%rcx
    eb64:	48 85 c9             	test   %rcx,%rcx
            return empty() ? DataT(0) : regs_[(--elements_)];
    eb67:	74 14                	je     eb7d <_ZN4$_288__invokeERN7genetic5stackIfLi20EEE+0x1d>
    eb69:	48 8d 41 ff          	lea    -0x1(%rcx),%rax
    eb6d:	89 47 50             	mov    %eax,0x50(%rdi)
        inline bool full() const { return elements_ == MaxSize; }
    eb70:	83 f8 14             	cmp    $0x14,%eax
            if (!full()) {
    eb73:	74 30                	je     eba5 <_ZN4$_288__invokeERN7genetic5stackIfLi20EEE+0x45>
    eb75:	f3 0f 10 44 8f fc    	movss  -0x4(%rdi,%rcx,4),%xmm0
    eb7b:	eb 05                	jmp    eb82 <_ZN4$_288__invokeERN7genetic5stackIfLi20EEE+0x22>
    eb7d:	31 c0                	xor    %eax,%eax
    eb7f:	0f 57 c0             	xorps  %xmm0,%xmm0
    eb82:	0f 54 05 27 3c ff ff 	andps  -0xc3d9(%rip),%xmm0        # 27b0 <_IO_stdin_used+0xc0>
  { return __builtin_sqrtf(__x); }
    eb89:	f3 0f 51 c0          	sqrtss %xmm0,%xmm0
    eb8d:	f3 0f 10 0d 3b 3b ff 	movss  -0xc4c5(%rip),%xmm1        # 26d0 <_IO_stdin_used-0x20>
    eb94:	ff 
    un_func(1.0f / std::sqrt(std::abs(a))), // rsqrt
    eb95:	f3 0f 5e c8          	divss  %xmm0,%xmm1
                regs_[elements_] = val;
    eb99:	48 98                	cltq   
    eb9b:	f3 0f 11 0c 87       	movss  %xmm1,(%rdi,%rax,4)
                elements_++;
    eba0:	ff c0                	inc    %eax
    eba2:	89 47 50             	mov    %eax,0x50(%rdi)
    eba5:	c3                   	retq   
    eba6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    ebad:	00 00 00 

000000000000ebb0 <_ZN4$_298__invokeERN7genetic5stackIfLi20EEE>:
    un_func(std::sin(a)),                   // sin
    ebb0:	53                   	push   %rbx
    ebb1:	48 89 fb             	mov    %rdi,%rbx
        inline bool empty() const { return elements_ == 0; }
    ebb4:	48 63 47 50          	movslq 0x50(%rdi),%rax
    ebb8:	48 85 c0             	test   %rax,%rax
            return empty() ? DataT(0) : regs_[(--elements_)];
    ebbb:	74 0f                	je     ebcc <_ZN4$_298__invokeERN7genetic5stackIfLi20EEE+0x1c>
    ebbd:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    ebc1:	89 4b 50             	mov    %ecx,0x50(%rbx)
    ebc4:	f3 0f 10 44 83 fc    	movss  -0x4(%rbx,%rax,4),%xmm0
    ebca:	eb 03                	jmp    ebcf <_ZN4$_298__invokeERN7genetic5stackIfLi20EEE+0x1f>
    ebcc:	0f 57 c0             	xorps  %xmm0,%xmm0
  { return __builtin_sinf(__x); }
    ebcf:	e8 ec 8c 00 00       	callq  178c0 <sinf@plt>
        inline bool full() const { return elements_ == MaxSize; }
    ebd4:	48 63 43 50          	movslq 0x50(%rbx),%rax
    ebd8:	48 83 f8 14          	cmp    $0x14,%rax
            if (!full()) {
    ebdc:	74 0a                	je     ebe8 <_ZN4$_298__invokeERN7genetic5stackIfLi20EEE+0x38>
                regs_[elements_] = val;
    ebde:	f3 0f 11 04 83       	movss  %xmm0,(%rbx,%rax,4)
                elements_++;
    ebe3:	ff c0                	inc    %eax
    ebe5:	89 43 50             	mov    %eax,0x50(%rbx)
    ebe8:	5b                   	pop    %rbx
    ebe9:	c3                   	retq   
    ebea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000ebf0 <_ZN4$_308__invokeERN7genetic5stackIfLi20EEE>:
    un_func(std::sinh(a)),                  // sinh
    ebf0:	53                   	push   %rbx
    ebf1:	48 89 fb             	mov    %rdi,%rbx
        inline bool empty() const { return elements_ == 0; }
    ebf4:	48 63 47 50          	movslq 0x50(%rdi),%rax
    ebf8:	48 85 c0             	test   %rax,%rax
            return empty() ? DataT(0) : regs_[(--elements_)];
    ebfb:	74 0f                	je     ec0c <_ZN4$_308__invokeERN7genetic5stackIfLi20EEE+0x1c>
    ebfd:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    ec01:	89 4b 50             	mov    %ecx,0x50(%rbx)
    ec04:	f3 0f 10 44 83 fc    	movss  -0x4(%rbx,%rax,4),%xmm0
    ec0a:	eb 03                	jmp    ec0f <_ZN4$_308__invokeERN7genetic5stackIfLi20EEE+0x1f>
    ec0c:	0f 57 c0             	xorps  %xmm0,%xmm0
  { return __builtin_sinhf(__x); }
    ec0f:	e8 6c 8c 00 00       	callq  17880 <sinhf@plt>
        inline bool full() const { return elements_ == MaxSize; }
    ec14:	48 63 43 50          	movslq 0x50(%rbx),%rax
    ec18:	48 83 f8 14          	cmp    $0x14,%rax
            if (!full()) {
    ec1c:	74 0a                	je     ec28 <_ZN4$_308__invokeERN7genetic5stackIfLi20EEE+0x38>
                regs_[elements_] = val;
    ec1e:	f3 0f 11 04 83       	movss  %xmm0,(%rbx,%rax,4)
                elements_++;
    ec23:	ff c0                	inc    %eax
    ec25:	89 43 50             	mov    %eax,0x50(%rbx)
    ec28:	5b                   	pop    %rbx
    ec29:	c3                   	retq   
    ec2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000ec30 <_ZN4$_318__invokeERN7genetic5stackIfLi20EEE>:
        inline bool empty() const { return elements_ == 0; }
    ec30:	48 63 4f 50          	movslq 0x50(%rdi),%rcx
    ec34:	48 85 c9             	test   %rcx,%rcx
            return empty() ? DataT(0) : regs_[(--elements_)];
    ec37:	74 18                	je     ec51 <_ZN4$_318__invokeERN7genetic5stackIfLi20EEE+0x21>
    ec39:	48 8d 41 ff          	lea    -0x1(%rcx),%rax
    ec3d:	89 47 50             	mov    %eax,0x50(%rdi)
        inline bool full() const { return elements_ == MaxSize; }
    ec40:	83 f8 14             	cmp    $0x14,%eax
            if (!full()) {
    ec43:	74 1d                	je     ec62 <_ZN4$_318__invokeERN7genetic5stackIfLi20EEE+0x32>
    ec45:	f3 0f 10 44 8f fc    	movss  -0x4(%rdi,%rcx,4),%xmm0
    ec4b:	f3 0f 59 c0          	mulss  %xmm0,%xmm0
    ec4f:	eb 05                	jmp    ec56 <_ZN4$_318__invokeERN7genetic5stackIfLi20EEE+0x26>
    ec51:	31 c0                	xor    %eax,%eax
    ec53:	0f 57 c0             	xorps  %xmm0,%xmm0
                regs_[elements_] = val;
    ec56:	48 98                	cltq   
    ec58:	f3 0f 11 04 87       	movss  %xmm0,(%rdi,%rax,4)
                elements_++;
    ec5d:	ff c0                	inc    %eax
    ec5f:	89 47 50             	mov    %eax,0x50(%rdi)
    un_func(a * a),                         // sq
    ec62:	c3                   	retq   
    ec63:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    ec6a:	84 00 00 00 00 00 

000000000000ec70 <_ZN4$_328__invokeERN7genetic5stackIfLi20EEE>:
        inline bool empty() const { return elements_ == 0; }
    ec70:	48 63 4f 50          	movslq 0x50(%rdi),%rcx
    ec74:	48 85 c9             	test   %rcx,%rcx
            return empty() ? DataT(0) : regs_[(--elements_)];
    ec77:	74 14                	je     ec8d <_ZN4$_328__invokeERN7genetic5stackIfLi20EEE+0x1d>
    ec79:	48 8d 41 ff          	lea    -0x1(%rcx),%rax
    ec7d:	89 47 50             	mov    %eax,0x50(%rdi)
        inline bool full() const { return elements_ == MaxSize; }
    ec80:	83 f8 14             	cmp    $0x14,%eax
            if (!full()) {
    ec83:	74 24                	je     eca9 <_ZN4$_328__invokeERN7genetic5stackIfLi20EEE+0x39>
    ec85:	f3 0f 10 44 8f fc    	movss  -0x4(%rdi,%rcx,4),%xmm0
    ec8b:	eb 05                	jmp    ec92 <_ZN4$_328__invokeERN7genetic5stackIfLi20EEE+0x22>
    ec8d:	31 c0                	xor    %eax,%eax
    ec8f:	0f 57 c0             	xorps  %xmm0,%xmm0
    ec92:	0f 54 05 17 3b ff ff 	andps  -0xc4e9(%rip),%xmm0        # 27b0 <_IO_stdin_used+0xc0>
  { return __builtin_sqrtf(__x); }
    ec99:	f3 0f 51 c0          	sqrtss %xmm0,%xmm0
                regs_[elements_] = val;
    ec9d:	48 98                	cltq   
    ec9f:	f3 0f 11 04 87       	movss  %xmm0,(%rdi,%rax,4)
                elements_++;
    eca4:	ff c0                	inc    %eax
    eca6:	89 47 50             	mov    %eax,0x50(%rdi)
    un_func(std::sqrt(std::abs(a))),        // sqrt
    eca9:	c3                   	retq   
    ecaa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000ecb0 <_ZN4$_338__invokeERN7genetic5stackIfLi20EEE>:
    un_func(std::tan(a)),                   // tan
    ecb0:	53                   	push   %rbx
    ecb1:	48 89 fb             	mov    %rdi,%rbx
        inline bool empty() const { return elements_ == 0; }
    ecb4:	48 63 47 50          	movslq 0x50(%rdi),%rax
    ecb8:	48 85 c0             	test   %rax,%rax
            return empty() ? DataT(0) : regs_[(--elements_)];
    ecbb:	74 0f                	je     eccc <_ZN4$_338__invokeERN7genetic5stackIfLi20EEE+0x1c>
    ecbd:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    ecc1:	89 4b 50             	mov    %ecx,0x50(%rbx)
    ecc4:	f3 0f 10 44 83 fc    	movss  -0x4(%rbx,%rax,4),%xmm0
    ecca:	eb 03                	jmp    eccf <_ZN4$_338__invokeERN7genetic5stackIfLi20EEE+0x1f>
    eccc:	0f 57 c0             	xorps  %xmm0,%xmm0
  { return __builtin_tanf(__x); }
    eccf:	e8 4c 8c 00 00       	callq  17920 <tanf@plt>
        inline bool full() const { return elements_ == MaxSize; }
    ecd4:	48 63 43 50          	movslq 0x50(%rbx),%rax
    ecd8:	48 83 f8 14          	cmp    $0x14,%rax
            if (!full()) {
    ecdc:	74 0a                	je     ece8 <_ZN4$_338__invokeERN7genetic5stackIfLi20EEE+0x38>
                regs_[elements_] = val;
    ecde:	f3 0f 11 04 83       	movss  %xmm0,(%rbx,%rax,4)
                elements_++;
    ece3:	ff c0                	inc    %eax
    ece5:	89 43 50             	mov    %eax,0x50(%rbx)
    ece8:	5b                   	pop    %rbx
    ece9:	c3                   	retq   
    ecea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000ecf0 <_ZN4$_348__invokeERN7genetic5stackIfLi20EEE>:
    un_func(std::tanh(a))                   // tanh
    ecf0:	53                   	push   %rbx
    ecf1:	48 89 fb             	mov    %rdi,%rbx
        inline bool empty() const { return elements_ == 0; }
    ecf4:	48 63 47 50          	movslq 0x50(%rdi),%rax
    ecf8:	48 85 c0             	test   %rax,%rax
            return empty() ? DataT(0) : regs_[(--elements_)];
    ecfb:	74 0f                	je     ed0c <_ZN4$_348__invokeERN7genetic5stackIfLi20EEE+0x1c>
    ecfd:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    ed01:	89 4b 50             	mov    %ecx,0x50(%rbx)
    ed04:	f3 0f 10 44 83 fc    	movss  -0x4(%rbx,%rax,4),%xmm0
    ed0a:	eb 03                	jmp    ed0f <_ZN4$_348__invokeERN7genetic5stackIfLi20EEE+0x1f>
    ed0c:	0f 57 c0             	xorps  %xmm0,%xmm0
  { return __builtin_tanhf(__x); }
    ed0f:	e8 3c 8b 00 00       	callq  17850 <tanhf@plt>
        inline bool full() const { return elements_ == MaxSize; }
    ed14:	48 63 43 50          	movslq 0x50(%rbx),%rax
    ed18:	48 83 f8 14          	cmp    $0x14,%rax
            if (!full()) {
    ed1c:	74 0a                	je     ed28 <_ZN4$_348__invokeERN7genetic5stackIfLi20EEE+0x38>
                regs_[elements_] = val;
    ed1e:	f3 0f 11 04 83       	movss  %xmm0,(%rbx,%rax,4)
                elements_++;
    ed23:	ff c0                	inc    %eax
    ed25:	89 43 50             	mov    %eax,0x50(%rbx)
    ed28:	5b                   	pop    %rbx
    ed29:	c3                   	retq   
    ed2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000ed30 <_ZN7genetic12find_fitnessEPNS_7programEPfRKNS_5paramEiPKfS7_S7_>:

    void find_fitness(program_t d_prog, float* score, const param& params, const int n_rows,
                      const float* data, const float* y, const float* sample_weights) {
    ed30:	55                   	push   %rbp
    ed31:	41 57                	push   %r15
    ed33:	41 56                	push   %r14
    ed35:	41 55                	push   %r13
    ed37:	41 54                	push   %r12
    ed39:	53                   	push   %rbx
    ed3a:	48 83 ec 48          	sub    $0x48,%rsp
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    ed3e:	85 c9                	test   %ecx,%ecx
    ed40:	0f 88 fa 00 00 00    	js     ee40 <_ZN7genetic12find_fitnessEPNS_7programEPfRKNS_5paramEiPKfS7_S7_+0x110>
    ed46:	4d 89 c5             	mov    %r8,%r13
    ed49:	89 cd                	mov    %ecx,%ebp
    ed4b:	49 89 d7             	mov    %rdx,%r15
    ed4e:	49 89 fe             	mov    %rdi,%r14
    ed51:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    ed56:	4c 89 4c 24 18       	mov    %r9,0x18(%rsp)
        // Compute predicted values
        std::vector<float> y_pred(n_rows);
    ed5b:	4c 63 e1             	movslq %ecx,%r12
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    ed5e:	74 3f                	je     ed9f <_ZN7genetic12find_fitnessEPNS_7programEPfRKNS_5paramEiPKfS7_S7_+0x6f>
    ed60:	4c 89 7c 24 08       	mov    %r15,0x8(%rsp)
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    ed65:	4e 8d 3c a5 00 00 00 	lea    0x0(,%r12,4),%r15
    ed6c:	00 
    ed6d:	4c 89 ff             	mov    %r15,%rdi
    ed70:	e8 eb 89 00 00       	callq  17760 <_Znwm@plt>
    ed75:	48 89 c3             	mov    %rax,%rbx
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
    ed78:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      if (__n <= 0)
    ed7e:	83 fd 01             	cmp    $0x1,%ebp
    ed81:	74 15                	je     ed98 <_ZN7genetic12find_fitnessEPNS_7programEPfRKNS_5paramEiPKfS7_S7_+0x68>
	      ++__first;
    ed83:	48 89 df             	mov    %rbx,%rdi
    ed86:	48 83 c7 04          	add    $0x4,%rdi
      for (; __first != __last; ++__first)
    ed8a:	49 83 c7 fc          	add    $0xfffffffffffffffc,%r15
	*__first = __tmp;
    ed8e:	31 f6                	xor    %esi,%esi
    ed90:	4c 89 fa             	mov    %r15,%rdx
    ed93:	e8 f8 8b 00 00       	callq  17990 <memset@plt>
    ed98:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
    ed9d:	eb 02                	jmp    eda1 <_ZN7genetic12find_fitnessEPNS_7programEPfRKNS_5paramEiPKfS7_S7_+0x71>
    ed9f:	31 db                	xor    %ebx,%ebx
    eda1:	4c 89 74 24 40       	mov    %r14,0x40(%rsp)
    eda6:	4c 89 6c 24 38       	mov    %r13,0x38(%rsp)
    edab:	48 89 5c 24 30       	mov    %rbx,0x30(%rsp)
    edb0:	4c 89 64 24 28       	mov    %r12,0x28(%rsp)
    edb5:	48 c7 44 24 20 01 00 	movq   $0x1,0x20(%rsp)
    edbc:	00 00 
    edbe:	4c 8d 54 24 30       	lea    0x30(%rsp),%r10
    edc3:	4c 8d 5c 24 38       	lea    0x38(%rsp),%r11
#pragma omp parallel for schedule(dynamic) private(eval_stack)
    edc8:	48 8d 3d 81 9c 00 00 	lea    0x9c81(%rip),%rdi        # 18a50 <__init_array_end>
    edcf:	48 8d 15 7a f3 ff ff 	lea    -0xc86(%rip),%rdx        # e150 <_ZN7genetic14execute_kernelILi20EEEvPNS_7programEPKfPfmm.omp_outlined>
    edd6:	48 8d 4c 24 20       	lea    0x20(%rsp),%rcx
    eddb:	4c 8d 44 24 28       	lea    0x28(%rsp),%r8
    ede0:	4c 8d 4c 24 40       	lea    0x40(%rsp),%r9
    ede5:	be 05 00 00 00       	mov    $0x5,%esi
    edea:	31 c0                	xor    %eax,%eax
    edec:	41 52                	push   %r10
    edee:	41 53                	push   %r11
    edf0:	e8 eb 8b 00 00       	callq  179e0 <__kmpc_fork_call@plt>
    edf5:	48 83 c4 10          	add    $0x10,%rsp
        execute(d_prog, n_rows, 1, data, y_pred.data());

        // Compute error
        compute_metric(n_rows, 1, y, y_pred.data(), sample_weights, score, params);
    edf9:	48 83 ec 08          	sub    $0x8,%rsp
    edfd:	89 ef                	mov    %ebp,%edi
    edff:	be 01 00 00 00       	mov    $0x1,%esi
    ee04:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
    ee09:	48 89 d9             	mov    %rbx,%rcx
    ee0c:	4c 8b 84 24 88 00 00 	mov    0x88(%rsp),%r8
    ee13:	00 
    ee14:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
    ee19:	41 57                	push   %r15
    ee1b:	e8 00 f1 ff ff       	callq  df20 <_ZN7genetic14compute_metricEiiPKfS1_S1_PfRKNS_5paramE>
    ee20:	48 83 c4 10          	add    $0x10,%rsp
	if (__p)
    ee24:	48 85 db             	test   %rbx,%rbx
    ee27:	74 08                	je     ee31 <_ZN7genetic12find_fitnessEPNS_7programEPfRKNS_5paramEiPKfS7_S7_+0x101>
	::operator delete(__p
    ee29:	48 89 df             	mov    %rbx,%rdi
    ee2c:	e8 8f 88 00 00       	callq  176c0 <_ZdlPv@plt>
    }
    ee31:	48 83 c4 48          	add    $0x48,%rsp
    ee35:	5b                   	pop    %rbx
    ee36:	41 5c                	pop    %r12
    ee38:	41 5d                	pop    %r13
    ee3a:	41 5e                	pop    %r14
    ee3c:	41 5f                	pop    %r15
    ee3e:	5d                   	pop    %rbp
    ee3f:	c3                   	retq   
	  __throw_length_error(
    ee40:	48 8d 3d 7c 3f ff ff 	lea    -0xc084(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
    ee47:	e8 24 87 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
    ee4c:	49 89 c6             	mov    %rax,%r14
	if (__p)
    ee4f:	48 85 db             	test   %rbx,%rbx
    ee52:	74 08                	je     ee5c <_ZN7genetic12find_fitnessEPNS_7programEPfRKNS_5paramEiPKfS7_S7_+0x12c>
    ee54:	48 89 df             	mov    %rbx,%rdi
    ee57:	e8 64 88 00 00       	callq  176c0 <_ZdlPv@plt>
    ee5c:	4c 89 f7             	mov    %r14,%rdi
    ee5f:	e8 0c 8b 00 00       	callq  17970 <_Unwind_Resume@plt>
    ee64:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
    ee6b:	00 00 00 00 00 

000000000000ee70 <_ZN7genetic20find_batched_fitnessEiPNS_7programEPfRKNS_5paramEiPKfS7_S7_>:

    void find_batched_fitness(int n_progs, program_t d_progs, float* score, const param& params,
                              const int n_rows, const float* data, const float* y,
                              const float* sample_weights) {
    ee70:	55                   	push   %rbp
    ee71:	41 57                	push   %r15
    ee73:	41 56                	push   %r14
    ee75:	41 55                	push   %r13
    ee77:	41 54                	push   %r12
    ee79:	53                   	push   %rbx
    ee7a:	48 83 ec 48          	sub    $0x48,%rsp
        std::vector<float> y_pred((uint64_t)n_rows * (uint64_t)n_progs);
    ee7e:	49 63 e8             	movslq %r8d,%rbp
    ee81:	4c 63 e7             	movslq %edi,%r12
    ee84:	49 89 ed             	mov    %rbp,%r13
    ee87:	4d 0f af ec          	imul   %r12,%r13
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    ee8b:	4c 89 e8             	mov    %r13,%rax
    ee8e:	48 c1 e8 3d          	shr    $0x3d,%rax
    ee92:	0f 85 f9 00 00 00    	jne    ef91 <_ZN7genetic20find_batched_fitnessEiPNS_7programEPfRKNS_5paramEiPKfS7_S7_+0x121>
    ee98:	49 89 ce             	mov    %rcx,%r14
    ee9b:	48 89 f3             	mov    %rsi,%rbx
    ee9e:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    eea3:	4d 85 ed             	test   %r13,%r13
    eea6:	74 4a                	je     eef2 <_ZN7genetic20find_batched_fitnessEiPNS_7programEPfRKNS_5paramEiPKfS7_S7_+0x82>
    eea8:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
    eead:	4c 89 74 24 10       	mov    %r14,0x10(%rsp)
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    eeb2:	4e 8d 34 ad 00 00 00 	lea    0x0(,%r13,4),%r14
    eeb9:	00 
    eeba:	4c 89 f7             	mov    %r14,%rdi
    eebd:	e8 9e 88 00 00       	callq  17760 <_Znwm@plt>
    eec2:	49 89 c7             	mov    %rax,%r15
    eec5:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      if (__n <= 0)
    eecb:	49 83 fd 01          	cmp    $0x1,%r13
    eecf:	74 15                	je     eee6 <_ZN7genetic20find_batched_fitnessEiPNS_7programEPfRKNS_5paramEiPKfS7_S7_+0x76>
    eed1:	4c 89 ff             	mov    %r15,%rdi
    eed4:	48 83 c7 04          	add    $0x4,%rdi
      for (; __first != __last; ++__first)
    eed8:	49 83 c6 fc          	add    $0xfffffffffffffffc,%r14
	*__first = __tmp;
    eedc:	31 f6                	xor    %esi,%esi
    eede:	4c 89 f2             	mov    %r14,%rdx
    eee1:	e8 aa 8a 00 00       	callq  17990 <memset@plt>
    eee6:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
    eeeb:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
    eef0:	eb 03                	jmp    eef5 <_ZN7genetic20find_batched_fitnessEiPNS_7programEPfRKNS_5paramEiPKfS7_S7_+0x85>
    eef2:	45 31 ff             	xor    %r15d,%r15d
    eef5:	48 89 5c 24 40       	mov    %rbx,0x40(%rsp)
    eefa:	4c 89 4c 24 38       	mov    %r9,0x38(%rsp)
    eeff:	4c 89 7c 24 30       	mov    %r15,0x30(%rsp)
    ef04:	48 89 6c 24 28       	mov    %rbp,0x28(%rsp)
    ef09:	4c 89 64 24 20       	mov    %r12,0x20(%rsp)
    ef0e:	4c 8d 54 24 30       	lea    0x30(%rsp),%r10
    ef13:	4c 8d 5c 24 38       	lea    0x38(%rsp),%r11
#pragma omp parallel for schedule(dynamic) private(eval_stack)
    ef18:	48 8d 3d 31 9b 00 00 	lea    0x9b31(%rip),%rdi        # 18a50 <__init_array_end>
    ef1f:	48 8d 15 2a f2 ff ff 	lea    -0xdd6(%rip),%rdx        # e150 <_ZN7genetic14execute_kernelILi20EEEvPNS_7programEPKfPfmm.omp_outlined>
    ef26:	48 8d 4c 24 20       	lea    0x20(%rsp),%rcx
    ef2b:	4c 8d 44 24 28       	lea    0x28(%rsp),%r8
    ef30:	4c 8d 4c 24 40       	lea    0x40(%rsp),%r9
    ef35:	be 05 00 00 00       	mov    $0x5,%esi
    ef3a:	31 c0                	xor    %eax,%eax
    ef3c:	41 52                	push   %r10
    ef3e:	41 53                	push   %r11
    ef40:	e8 9b 8a 00 00       	callq  179e0 <__kmpc_fork_call@plt>
    ef45:	48 83 c4 10          	add    $0x10,%rsp
        execute(d_progs, n_rows, n_progs, data, y_pred.data());

        // Compute error
        compute_metric(n_rows, n_progs, y, y_pred.data(), sample_weights, score, params);
    ef49:	48 83 ec 08          	sub    $0x8,%rsp
    ef4d:	89 ef                	mov    %ebp,%edi
    ef4f:	44 89 e6             	mov    %r12d,%esi
    ef52:	48 8b 94 24 88 00 00 	mov    0x88(%rsp),%rdx
    ef59:	00 
    ef5a:	4c 89 f9             	mov    %r15,%rcx
    ef5d:	4c 8b 84 24 90 00 00 	mov    0x90(%rsp),%r8
    ef64:	00 
    ef65:	4c 8b 4c 24 20       	mov    0x20(%rsp),%r9
    ef6a:	41 56                	push   %r14
    ef6c:	e8 af ef ff ff       	callq  df20 <_ZN7genetic14compute_metricEiiPKfS1_S1_PfRKNS_5paramE>
    ef71:	48 83 c4 10          	add    $0x10,%rsp
	if (__p)
    ef75:	4d 85 ff             	test   %r15,%r15
    ef78:	74 08                	je     ef82 <_ZN7genetic20find_batched_fitnessEiPNS_7programEPfRKNS_5paramEiPKfS7_S7_+0x112>
	::operator delete(__p
    ef7a:	4c 89 ff             	mov    %r15,%rdi
    ef7d:	e8 3e 87 00 00       	callq  176c0 <_ZdlPv@plt>
    }
    ef82:	48 83 c4 48          	add    $0x48,%rsp
    ef86:	5b                   	pop    %rbx
    ef87:	41 5c                	pop    %r12
    ef89:	41 5d                	pop    %r13
    ef8b:	41 5e                	pop    %r14
    ef8d:	41 5f                	pop    %r15
    ef8f:	5d                   	pop    %rbp
    ef90:	c3                   	retq   
	  __throw_length_error(
    ef91:	48 8d 3d 2b 3e ff ff 	lea    -0xc1d5(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
    ef98:	e8 d3 85 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
    ef9d:	48 89 c3             	mov    %rax,%rbx
	if (__p)
    efa0:	4d 85 ff             	test   %r15,%r15
    efa3:	74 08                	je     efad <_ZN7genetic20find_batched_fitnessEiPNS_7programEPfRKNS_5paramEiPKfS7_S7_+0x13d>
    efa5:	4c 89 ff             	mov    %r15,%rdi
    efa8:	e8 13 87 00 00       	callq  176c0 <_ZdlPv@plt>
    efad:	48 89 df             	mov    %rbx,%rdi
    efb0:	e8 bb 89 00 00       	callq  17970 <_Unwind_Resume@plt>
    efb5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    efbc:	00 00 00 00 

000000000000efc0 <_ZN7genetic11set_fitnessERNS_7programERKNS_5paramEiPKfS6_S6_>:

    void set_fitness(program& h_prog, const param& params, const int n_rows, const float* data,
                     const float* y, const float* sample_weights) {
    efc0:	55                   	push   %rbp
    efc1:	41 57                	push   %r15
    efc3:	41 56                	push   %r14
    efc5:	41 55                	push   %r13
    efc7:	41 54                	push   %r12
    efc9:	53                   	push   %rbx
    efca:	48 83 ec 18          	sub    $0x18,%rsp
    efce:	4d 89 cf             	mov    %r9,%r15
    efd1:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
    efd6:	49 89 cd             	mov    %rcx,%r13
    efd9:	89 d5                	mov    %edx,%ebp
    efdb:	49 89 f4             	mov    %rsi,%r12
    efde:	49 89 fe             	mov    %rdi,%r14
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    efe1:	bf 04 00 00 00       	mov    $0x4,%edi
    efe6:	e8 75 87 00 00       	callq  17760 <_Znwm@plt>
    efeb:	48 89 c3             	mov    %rax,%rbx
    efee:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
        std::vector<float> score(1);

        find_fitness(&h_prog, score.data(), params, n_rows, data, y, sample_weights);
    eff4:	4c 89 3c 24          	mov    %r15,(%rsp)
    eff8:	4c 89 f7             	mov    %r14,%rdi
    effb:	48 89 c6             	mov    %rax,%rsi
    effe:	4c 89 e2             	mov    %r12,%rdx
    f001:	89 e9                	mov    %ebp,%ecx
    f003:	4d 89 e8             	mov    %r13,%r8
    f006:	4c 8b 4c 24 10       	mov    0x10(%rsp),%r9
    f00b:	e8 20 fd ff ff       	callq  ed30 <_ZN7genetic12find_fitnessEPNS_7programEPfRKNS_5paramEiPKfS7_S7_>

        // Update host and device score for program
        h_prog.raw_fitness_ = score[0];
    f010:	f3 0f 10 03          	movss  (%rbx),%xmm0
    f014:	f3 41 0f 11 46 10    	movss  %xmm0,0x10(%r14)
	::operator delete(__p
    f01a:	48 89 df             	mov    %rbx,%rdi
    f01d:	48 83 c4 18          	add    $0x18,%rsp
    f021:	5b                   	pop    %rbx
    f022:	41 5c                	pop    %r12
    f024:	41 5d                	pop    %r13
    f026:	41 5e                	pop    %r14
    f028:	41 5f                	pop    %r15
    f02a:	5d                   	pop    %rbp
    f02b:	e9 90 86 00 00       	jmpq   176c0 <_ZdlPv@plt>
    f030:	49 89 c6             	mov    %rax,%r14
    f033:	48 89 df             	mov    %rbx,%rdi
    f036:	e8 85 86 00 00       	callq  176c0 <_ZdlPv@plt>
    f03b:	4c 89 f7             	mov    %r14,%rdi
    f03e:	e8 2d 89 00 00       	callq  17970 <_Unwind_Resume@plt>
    f043:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    f04a:	84 00 00 00 00 00 

000000000000f050 <_ZN7genetic19set_batched_fitnessEiRSt6vectorINS_7programESaIS1_EERKNS_5paramEiPKfS9_S9_>:
    }

    void set_batched_fitness(int n_progs, std::vector<program>& h_progs, const param& params,
                             const int n_rows, const float* data, const float* y,
                             const float* sample_weights) {
    f050:	55                   	push   %rbp
    f051:	41 57                	push   %r15
    f053:	41 56                	push   %r14
    f055:	41 55                	push   %r13
    f057:	41 54                	push   %r12
    f059:	53                   	push   %rbx
    f05a:	48 83 ec 18          	sub    $0x18,%rsp
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    f05e:	85 ff                	test   %edi,%edi
    f060:	0f 88 43 01 00 00    	js     f1a9 <_ZN7genetic19set_batched_fitnessEiRSt6vectorINS_7programESaIS1_EERKNS_5paramEiPKfS9_S9_+0x159>
    f066:	4c 89 c8             	mov    %r9,%rax
    f069:	4d 89 c1             	mov    %r8,%r9
    f06c:	41 89 c8             	mov    %ecx,%r8d
    f06f:	49 89 d7             	mov    %rdx,%r15
    f072:	49 89 f6             	mov    %rsi,%r14
    f075:	89 fd                	mov    %edi,%ebp
    f077:	4c 8b 6c 24 50       	mov    0x50(%rsp),%r13
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    f07c:	74 52                	je     f0d0 <_ZN7genetic19set_batched_fitnessEiRSt6vectorINS_7programESaIS1_EERKNS_5paramEiPKfS9_S9_+0x80>
    f07e:	44 89 44 24 04       	mov    %r8d,0x4(%rsp)
    f083:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
    f088:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        std::vector<float> score(n_progs);
    f08d:	4c 63 e5             	movslq %ebp,%r12
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    f090:	49 c1 e4 02          	shl    $0x2,%r12
    f094:	4c 89 e7             	mov    %r12,%rdi
    f097:	e8 c4 86 00 00       	callq  17760 <_Znwm@plt>
    f09c:	48 89 c3             	mov    %rax,%rbx
    f09f:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      if (__n <= 0)
    f0a5:	83 fd 01             	cmp    $0x1,%ebp
    f0a8:	74 15                	je     f0bf <_ZN7genetic19set_batched_fitnessEiRSt6vectorINS_7programESaIS1_EERKNS_5paramEiPKfS9_S9_+0x6f>
    f0aa:	48 89 df             	mov    %rbx,%rdi
    f0ad:	48 83 c7 04          	add    $0x4,%rdi
      for (; __first != __last; ++__first)
    f0b1:	49 83 c4 fc          	add    $0xfffffffffffffffc,%r12
	*__first = __tmp;
    f0b5:	31 f6                	xor    %esi,%esi
    f0b7:	4c 89 e2             	mov    %r12,%rdx
    f0ba:	e8 d1 88 00 00       	callq  17990 <memset@plt>
    f0bf:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    f0c4:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
    f0c9:	44 8b 44 24 04       	mov    0x4(%rsp),%r8d
    f0ce:	eb 02                	jmp    f0d2 <_ZN7genetic19set_batched_fitnessEiRSt6vectorINS_7programESaIS1_EERKNS_5paramEiPKfS9_S9_+0x82>
    f0d0:	31 db                	xor    %ebx,%ebx
      { return _M_data_ptr(this->_M_impl._M_start); }
    f0d2:	49 8b 36             	mov    (%r14),%rsi

        find_batched_fitness(n_progs, h_progs.data(), score.data(), params, n_rows, data, y,
    f0d5:	89 ef                	mov    %ebp,%edi
    f0d7:	48 89 da             	mov    %rbx,%rdx
    f0da:	4c 89 f9             	mov    %r15,%rcx
    f0dd:	41 55                	push   %r13
    f0df:	50                   	push   %rax
    f0e0:	e8 8b fd ff ff       	callq  ee70 <_ZN7genetic20find_batched_fitnessEiPNS_7programEPfRKNS_5paramEiPKfS7_S7_>
    f0e5:	48 83 c4 10          	add    $0x10,%rsp
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    f0e9:	85 ed                	test   %ebp,%ebp
                             sample_weights);

        // Update scores on host and device
        // TODO: Find a way to reduce the number of implicit memory transfers
        for (auto i = 0; i < n_progs; ++i) {
    f0eb:	74 13                	je     f100 <_ZN7genetic19set_batched_fitnessEiRSt6vectorINS_7programESaIS1_EERKNS_5paramEiPKfS9_S9_+0xb0>
    f0ed:	49 8b 0e             	mov    (%r14),%rcx
    f0f0:	89 ea                	mov    %ebp,%edx
    f0f2:	89 d0                	mov    %edx,%eax
    f0f4:	83 e0 03             	and    $0x3,%eax
    f0f7:	83 fd 04             	cmp    $0x4,%ebp
    f0fa:	73 1c                	jae    f118 <_ZN7genetic19set_batched_fitnessEiRSt6vectorINS_7programESaIS1_EERKNS_5paramEiPKfS9_S9_+0xc8>
    f0fc:	31 f6                	xor    %esi,%esi
    f0fe:	eb 67                	jmp    f167 <_ZN7genetic19set_batched_fitnessEiRSt6vectorINS_7programESaIS1_EERKNS_5paramEiPKfS9_S9_+0x117>
	if (__p)
    f100:	48 85 db             	test   %rbx,%rbx
    f103:	0f 85 8a 00 00 00    	jne    f193 <_ZN7genetic19set_batched_fitnessEiRSt6vectorINS_7programESaIS1_EERKNS_5paramEiPKfS9_S9_+0x143>
            h_progs[i].raw_fitness_ = score[i];
        }
    }
    f109:	48 83 c4 18          	add    $0x18,%rsp
    f10d:	5b                   	pop    %rbx
    f10e:	41 5c                	pop    %r12
    f110:	41 5d                	pop    %r13
    f112:	41 5e                	pop    %r14
    f114:	41 5f                	pop    %r15
    f116:	5d                   	pop    %rbp
    f117:	c3                   	retq   
        for (auto i = 0; i < n_progs; ++i) {
    f118:	81 e2 fc ff ff 7f    	and    $0x7ffffffc,%edx
    f11e:	48 8d 79 70          	lea    0x70(%rcx),%rdi
    f122:	31 f6                	xor    %esi,%esi
    f124:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
    f12b:	00 00 00 00 00 
            h_progs[i].raw_fitness_ = score[i];
    f130:	f3 0f 10 04 b3       	movss  (%rbx,%rsi,4),%xmm0
    f135:	f3 0f 11 47 a0       	movss  %xmm0,-0x60(%rdi)
    f13a:	f3 0f 10 44 b3 04    	movss  0x4(%rbx,%rsi,4),%xmm0
    f140:	f3 0f 11 47 c0       	movss  %xmm0,-0x40(%rdi)
    f145:	f3 0f 10 44 b3 08    	movss  0x8(%rbx,%rsi,4),%xmm0
    f14b:	f3 0f 11 47 e0       	movss  %xmm0,-0x20(%rdi)
    f150:	f3 0f 10 44 b3 0c    	movss  0xc(%rbx,%rsi,4),%xmm0
    f156:	f3 0f 11 07          	movss  %xmm0,(%rdi)
        for (auto i = 0; i < n_progs; ++i) {
    f15a:	48 83 c6 04          	add    $0x4,%rsi
    f15e:	48 83 ef 80          	sub    $0xffffffffffffff80,%rdi
    f162:	48 39 f2             	cmp    %rsi,%rdx
    f165:	75 c9                	jne    f130 <_ZN7genetic19set_batched_fitnessEiRSt6vectorINS_7programESaIS1_EERKNS_5paramEiPKfS9_S9_+0xe0>
    f167:	48 85 c0             	test   %rax,%rax
    f16a:	74 27                	je     f193 <_ZN7genetic19set_batched_fitnessEiRSt6vectorINS_7programESaIS1_EERKNS_5paramEiPKfS9_S9_+0x143>
    f16c:	48 8d 14 b3          	lea    (%rbx,%rsi,4),%rdx
    f170:	48 c1 e6 05          	shl    $0x5,%rsi
    f174:	48 01 f1             	add    %rsi,%rcx
    f177:	48 83 c1 10          	add    $0x10,%rcx
    f17b:	c1 e0 02             	shl    $0x2,%eax
    f17e:	31 f6                	xor    %esi,%esi
            h_progs[i].raw_fitness_ = score[i];
    f180:	f3 0f 10 04 32       	movss  (%rdx,%rsi,1),%xmm0
    f185:	f3 0f 11 04 f1       	movss  %xmm0,(%rcx,%rsi,8)
        for (auto i = 0; i < n_progs; ++i) {
    f18a:	48 83 c6 04          	add    $0x4,%rsi
    f18e:	48 39 f0             	cmp    %rsi,%rax
    f191:	75 ed                	jne    f180 <_ZN7genetic19set_batched_fitnessEiRSt6vectorINS_7programESaIS1_EERKNS_5paramEiPKfS9_S9_+0x130>
	::operator delete(__p
    f193:	48 89 df             	mov    %rbx,%rdi
    f196:	48 83 c4 18          	add    $0x18,%rsp
    f19a:	5b                   	pop    %rbx
    f19b:	41 5c                	pop    %r12
    f19d:	41 5d                	pop    %r13
    f19f:	41 5e                	pop    %r14
    f1a1:	41 5f                	pop    %r15
    f1a3:	5d                   	pop    %rbp
    f1a4:	e9 17 85 00 00       	jmpq   176c0 <_ZdlPv@plt>
	  __throw_length_error(
    f1a9:	48 8d 3d 13 3c ff ff 	lea    -0xc3ed(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
    f1b0:	e8 bb 83 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
    f1b5:	49 89 c6             	mov    %rax,%r14
	if (__p)
    f1b8:	48 85 db             	test   %rbx,%rbx
    f1bb:	74 08                	je     f1c5 <_ZN7genetic19set_batched_fitnessEiRSt6vectorINS_7programESaIS1_EERKNS_5paramEiPKfS9_S9_+0x175>
    f1bd:	48 89 df             	mov    %rbx,%rdi
    f1c0:	e8 fb 84 00 00       	callq  176c0 <_ZdlPv@plt>
    f1c5:	4c 89 f7             	mov    %r14,%rdi
    f1c8:	e8 a3 87 00 00       	callq  17970 <_Unwind_Resume@plt>
    f1cd:	0f 1f 00             	nopl   (%rax)

000000000000f1d0 <_ZN7genetic11get_fitnessERKNS_7programERKNS_5paramE>:

    float get_fitness(const program& prog, const param& params) {
    f1d0:	41 56                	push   %r14
    f1d2:	53                   	push   %rbx
    f1d3:	50                   	push   %rax
    f1d4:	48 89 f3             	mov    %rsi,%rbx
    f1d7:	49 89 fe             	mov    %rdi,%r14
        int   crit    = params.criterion();
    f1da:	48 89 f7             	mov    %rsi,%rdi
    f1dd:	e8 8e 56 00 00       	callq  14870 <_ZNK7genetic5param9criterionEv>
        float penalty = params.parsimony_coefficient * prog.len * (2 * crit - 1);
    f1e2:	f3 41 0f 2a 46 08    	cvtsi2ssl 0x8(%r14),%xmm0
    f1e8:	f3 0f 59 83 98 00 00 	mulss  0x98(%rbx),%xmm0
    f1ef:	00 
    f1f0:	8d 04 45 ff ff ff ff 	lea    -0x1(,%rax,2),%eax
    f1f7:	f3 0f 2a c8          	cvtsi2ss %eax,%xmm1
    f1fb:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
        return (prog.raw_fitness_ - penalty);
    f1ff:	f3 41 0f 10 46 10    	movss  0x10(%r14),%xmm0
    f205:	f3 0f 5c c1          	subss  %xmm1,%xmm0
    f209:	48 83 c4 08          	add    $0x8,%rsp
    f20d:	5b                   	pop    %rbx
    f20e:	41 5e                	pop    %r14
    f210:	c3                   	retq   
    f211:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    f218:	0f 1f 84 00 00 00 00 
    f21f:	00 

000000000000f220 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine>:
     * @param pnodes  AST represented as a list of nodes
     * @param len     The total number of nodes in the AST
     * @param rng     Random number generator for subtree selection
     * @return A tuple [first,last) which contains the required subtree
     */
    std::pair<int, int> get_subtree(node* pnodes, int len, PhiloxEngine& rng) {
    f220:	55                   	push   %rbp
    f221:	41 57                	push   %r15
    f223:	41 56                	push   %r14
    f225:	41 55                	push   %r13
    f227:	41 54                	push   %r12
    f229:	53                   	push   %rbx
    f22a:	48 83 ec 38          	sub    $0x38,%rsp
    f22e:	89 f3                	mov    %esi,%ebx
    f230:	49 89 fe             	mov    %rdi,%r14
#include <philox_rng.h>

struct PhiloxEngine {
    using result_type = uint32_t;
    explicit PhiloxEngine(uint32_t seed) { philox_seed(seed); }
    uint32_t                  operator()() { return philox_random_uint32(); }
    f233:	e8 b8 77 00 00       	callq  169f0 <philox_random_uint32>
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    f238:	85 db                	test   %ebx,%ebx
    f23a:	0f 88 b6 02 00 00    	js     f4f6 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x2d6>
    f240:	41 89 c5             	mov    %eax,%r13d
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    f243:	0f 84 2e 01 00 00    	je     f377 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x157>
    f249:	89 5c 24 08          	mov    %ebx,0x8(%rsp)
        // Specify RNG
        uniform_real_distribution_custom<float> dist_uniform(0.0f, 1.0f);
        float                                   bound = dist_uniform(rng);

        // Specify subtree start probs acc to Koza's selection approach
        std::vector<float> node_probs(len, 0.1);
    f24d:	4c 63 fb             	movslq %ebx,%r15
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    f250:	4e 8d 24 bd 00 00 00 	lea    0x0(,%r15,4),%r12
    f257:	00 
    f258:	4c 89 e7             	mov    %r12,%rdi
    f25b:	e8 00 85 00 00       	callq  17760 <_Znwm@plt>
    f260:	48 89 c3             	mov    %rax,%rbx
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    f263:	4a 8d 2c b8          	lea    (%rax,%r15,4),%rbp
      for (; __first != __last; ++__first)
    f267:	49 ff cf             	dec    %r15
    f26a:	48 b9 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rcx
    f271:	ff ff 3f 
    f274:	4c 21 f9             	and    %r15,%rcx
    f277:	48 83 f9 07          	cmp    $0x7,%rcx
    f27b:	72 43                	jb     f2c0 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0xa0>
    f27d:	48 ff c1             	inc    %rcx
    f280:	48 89 ca             	mov    %rcx,%rdx
    f283:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
    f287:	48 8d 04 93          	lea    (%rbx,%rdx,4),%rax
    f28b:	31 f6                	xor    %esi,%esi
    f28d:	0f 28 05 0c 35 ff ff 	movaps -0xcaf4(%rip),%xmm0        # 27a0 <_IO_stdin_used+0xb0>
    f294:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
    f29b:	00 00 00 00 00 
	*__first = __tmp;
    f2a0:	0f 11 04 b3          	movups %xmm0,(%rbx,%rsi,4)
    f2a4:	0f 11 44 b3 10       	movups %xmm0,0x10(%rbx,%rsi,4)
    f2a9:	48 83 c6 08          	add    $0x8,%rsi
    f2ad:	48 39 f2             	cmp    %rsi,%rdx
    f2b0:	75 ee                	jne    f2a0 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x80>
      for (; __first != __last; ++__first)
    f2b2:	48 39 d1             	cmp    %rdx,%rcx
    f2b5:	74 18                	je     f2cf <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0xaf>
    f2b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    f2be:	00 00 
	*__first = __tmp;
    f2c0:	c7 00 cd cc cc 3d    	movl   $0x3dcccccd,(%rax)
      for (; __first != __last; ++__first)
    f2c6:	48 83 c0 04          	add    $0x4,%rax
    f2ca:	48 39 e8             	cmp    %rbp,%rax
    f2cd:	75 f1                	jne    f2c0 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0xa0>
    f2cf:	4c 89 64 24 20       	mov    %r12,0x20(%rsp)
    f2d4:	8b 74 24 08          	mov    0x8(%rsp),%esi
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    f2d8:	85 f6                	test   %esi,%esi
        float              sum = 0.1 * len;

        for (int i = 0; i < len; ++i) {
    f2da:	0f 84 f6 00 00 00    	je     f3d6 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x1b6>
    f2e0:	44 89 6c 24 0c       	mov    %r13d,0xc(%rsp)
        float              sum = 0.1 * len;
    f2e5:	0f 57 c0             	xorps  %xmm0,%xmm0
    f2e8:	f2 0f 2a c6          	cvtsi2sd %esi,%xmm0
    f2ec:	f2 0f 59 05 a4 3b ff 	mulsd  -0xc45c(%rip),%xmm0        # 2e98 <_IO_stdin_used+0x7a8>
    f2f3:	ff 
    f2f4:	f2 0f 5a c0          	cvtsd2ss %xmm0,%xmm0
    f2f8:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
        for (int i = 0; i < len; ++i) {
    f2fd:	83 fe 02             	cmp    $0x2,%esi
    f300:	41 bc 01 00 00 00    	mov    $0x1,%r12d
    f306:	44 0f 4d e6          	cmovge %esi,%r12d
    f30a:	45 31 ff             	xor    %r15d,%r15d
    f30d:	4d 89 f5             	mov    %r14,%r13
    f310:	eb 1a                	jmp    f32c <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x10c>
    f312:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    f319:	1f 84 00 00 00 00 00 
    f320:	49 ff c7             	inc    %r15
    f323:	49 83 c5 10          	add    $0x10,%r13
    f327:	4d 39 fc             	cmp    %r15,%r12
    f32a:	74 30                	je     f35c <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x13c>
            if (pnodes[i].is_nonterminal()) {
    f32c:	4c 89 ef             	mov    %r13,%rdi
    f32f:	e8 4c 7a 00 00       	callq  16d80 <_ZNK7genetic4node14is_nonterminalEv>
    f334:	84 c0                	test   %al,%al
    f336:	74 e8                	je     f320 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x100>
                node_probs[i] = 0.9;
    f338:	42 c7 04 bb 66 66 66 	movl   $0x3f666666,(%rbx,%r15,4)
    f33f:	3f 
    f340:	0f 28 44 24 10       	movaps 0x10(%rsp),%xmm0
                sum += 0.8;
    f345:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
    f349:	f2 0f 58 05 5f 3b ff 	addsd  -0xc4a1(%rip),%xmm0        # 2eb0 <_IO_stdin_used+0x7c0>
    f350:	ff 
    f351:	f2 0f 5a c0          	cvtsd2ss %xmm0,%xmm0
    f355:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
    f35a:	eb c4                	jmp    f320 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x100>
    f35c:	8b 74 24 08          	mov    0x8(%rsp),%esi
    f360:	85 f6                	test   %esi,%esi
    f362:	44 8b 6c 24 0c       	mov    0xc(%rsp),%r13d
            }
        }

        // Normalize vector
        for (int i = 0; i < len; ++i) {
    f367:	74 6d                	je     f3d6 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x1b6>
    f369:	83 fe 04             	cmp    $0x4,%esi
    f36c:	7d 12                	jge    f380 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x160>
    f36e:	31 c0                	xor    %eax,%eax
    f370:	0f 28 4c 24 10       	movaps 0x10(%rsp),%xmm1
    f375:	eb 49                	jmp    f3c0 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x1a0>
    f377:	31 ed                	xor    %ebp,%ebp
    f379:	31 db                	xor    %ebx,%ebx
    f37b:	e9 83 00 00 00       	jmpq   f403 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x1e3>
    f380:	44 89 e0             	mov    %r12d,%eax
    f383:	25 fc ff ff 7f       	and    $0x7ffffffc,%eax
    f388:	0f 28 44 24 10       	movaps 0x10(%rsp),%xmm0
    f38d:	0f c6 c0 00          	shufps $0x0,%xmm0,%xmm0
    f391:	4a 8d 0c a5 00 00 00 	lea    0x0(,%r12,4),%rcx
    f398:	00 
    f399:	48 83 e1 f0          	and    $0xfffffffffffffff0,%rcx
    f39d:	31 d2                	xor    %edx,%edx
    f39f:	90                   	nop
            node_probs[i] /= sum;
    f3a0:	0f 10 0c 13          	movups (%rbx,%rdx,1),%xmm1
    f3a4:	0f 5e c8             	divps  %xmm0,%xmm1
    f3a7:	0f 11 0c 13          	movups %xmm1,(%rbx,%rdx,1)
        for (int i = 0; i < len; ++i) {
    f3ab:	48 83 c2 10          	add    $0x10,%rdx
    f3af:	48 39 d1             	cmp    %rdx,%rcx
    f3b2:	75 ec                	jne    f3a0 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x180>
    f3b4:	4c 39 e0             	cmp    %r12,%rax
    f3b7:	0f 28 4c 24 10       	movaps 0x10(%rsp),%xmm1
    f3bc:	74 18                	je     f3d6 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x1b6>
    f3be:	66 90                	xchg   %ax,%ax
            node_probs[i] /= sum;
    f3c0:	f3 0f 10 04 83       	movss  (%rbx,%rax,4),%xmm0
    f3c5:	f3 0f 5e c1          	divss  %xmm1,%xmm0
    f3c9:	f3 0f 11 04 83       	movss  %xmm0,(%rbx,%rax,4)
        for (int i = 0; i < len; ++i) {
    f3ce:	48 ff c0             	inc    %rax
    f3d1:	49 39 c4             	cmp    %rax,%r12
    f3d4:	75 ea                	jne    f3c0 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x1a0>
    { return __lhs.base() != __rhs.base(); }
    f3d6:	83 fe 01             	cmp    $0x1,%esi
    f3d9:	74 28                	je     f403 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x1e3>
				                         _ValueType>)
      __glibcxx_requires_valid_range(__first, __last);

      if (__first == __last)
	return __result;
      _ValueType __value = *__first;
    f3db:	f3 0f 10 03          	movss  (%rbx),%xmm0
    f3df:	b8 04 00 00 00       	mov    $0x4,%eax
    f3e4:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
    f3e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      *__result = __value;
      while (++__first != __last)
	{
	  __value = _GLIBCXX_MOVE_IF_20(__value) + *__first;
    f3f0:	f3 0f 58 04 03       	addss  (%rbx,%rax,1),%xmm0
	  *++__result = __value;
    f3f5:	f3 0f 11 04 03       	movss  %xmm0,(%rbx,%rax,1)
    f3fa:	48 83 c0 04          	add    $0x4,%rax
    f3fe:	48 39 c1             	cmp    %rax,%rcx
    f401:	75 ed                	jne    f3f0 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x1d0>
    { return __lhs.base() - __rhs.base(); }
    f403:	48 29 dd             	sub    %rbx,%rbp
    f406:	48 c1 fd 02          	sar    $0x2,%rbp
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
    f40a:	48 85 ed             	test   %rbp,%rbp
    f40d:	7e 52                	jle    f461 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x241>
    f40f:	44 89 e8             	mov    %r13d,%eax
    f412:	0f 57 c0             	xorps  %xmm0,%xmm0
    f415:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
    f41a:	f2 0f 59 05 86 3a ff 	mulsd  -0xc57a(%rip),%xmm0        # 2ea8 <_IO_stdin_used+0x7b8>
    f421:	ff 
    f422:	0f 57 c9             	xorps  %xmm1,%xmm1
    f425:	f2 0f 5a c8          	cvtsd2ss %xmm0,%xmm1
    f429:	0f 57 c0             	xorps  %xmm0,%xmm0
    f42c:	f3 0f 58 c1          	addss  %xmm1,%xmm0
    f430:	48 89 d8             	mov    %rbx,%rax
    f433:	48 89 e9             	mov    %rbp,%rcx
    f436:	eb 10                	jmp    f448 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x228>
    f438:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    f43f:	00 
    f440:	48 89 cd             	mov    %rcx,%rbp
    f443:	48 85 c9             	test   %rcx,%rcx
    f446:	7e 1c                	jle    f464 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x244>
    f448:	48 d1 e9             	shr    %rcx

    template<typename _Iterator, typename _Value>
      _GLIBCXX20_CONSTEXPR
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it < __val; }
    f44b:	0f 2e 04 88          	ucomiss (%rax,%rcx,4),%xmm0
	{
	  _DistanceType __half = __len >> 1;
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
    f44f:	76 ef                	jbe    f440 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x220>
    f451:	48 8d 04 88          	lea    (%rax,%rcx,4),%rax
    f455:	48 83 c0 04          	add    $0x4,%rax
    f459:	48 f7 d1             	not    %rcx
    f45c:	48 01 e9             	add    %rbp,%rcx
    f45f:	eb df                	jmp    f440 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x220>
    f461:	48 89 d8             	mov    %rbx,%rax
    f464:	48 29 d8             	sub    %rbx,%rax
    f467:	48 c1 e8 02          	shr    $0x2,%rax
        start = std::lower_bound(node_probs.begin(), node_probs.end(), bound) - node_probs.begin();
        end   = start;

        // Iterate until all function arguments are satisfied in current subtree
        int num_args = 1;
        while (num_args > end - start) {
    f46b:	48 63 c8             	movslq %eax,%rcx
    f46e:	41 89 cf             	mov    %ecx,%r15d
    f471:	48 c1 e1 04          	shl    $0x4,%rcx
    f475:	49 01 ce             	add    %rcx,%r14
    f478:	48 c1 e0 20          	shl    $0x20,%rax
    f47c:	49 09 c7             	or     %rax,%r15
    f47f:	bd 01 00 00 00       	mov    $0x1,%ebp
    f484:	45 31 ed             	xor    %r13d,%r13d
    f487:	4c 8d 64 24 28       	lea    0x28(%rsp),%r12
    f48c:	eb 20                	jmp    f4ae <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x28e>
    f48e:	66 90                	xchg   %ax,%ax
            node curr;
            curr = pnodes[end];
            if (curr.is_nonterminal())
                num_args += curr.arity();
    f490:	01 c5                	add    %eax,%ebp
        while (num_args > end - start) {
    f492:	48 63 c5             	movslq %ebp,%rax
    f495:	49 83 c6 10          	add    $0x10,%r14
    f499:	48 b9 00 00 00 00 01 	movabs $0x100000000,%rcx
    f4a0:	00 00 00 
    f4a3:	49 01 cf             	add    %rcx,%r15
    f4a6:	49 ff c5             	inc    %r13
    f4a9:	49 39 c5             	cmp    %rax,%r13
    f4ac:	7d 29                	jge    f4d7 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x2b7>
            node curr;
    f4ae:	4c 89 e7             	mov    %r12,%rdi
    f4b1:	e8 fa 76 00 00       	callq  16bb0 <_ZN7genetic4nodeC1Ev>
            curr = pnodes[end];
    f4b6:	4c 89 e7             	mov    %r12,%rdi
    f4b9:	4c 89 f6             	mov    %r14,%rsi
    f4bc:	e8 4f 79 00 00       	callq  16e10 <_ZN7genetic4nodeaSERKS0_>
            if (curr.is_nonterminal())
    f4c1:	4c 89 e7             	mov    %r12,%rdi
    f4c4:	e8 b7 78 00 00       	callq  16d80 <_ZNK7genetic4node14is_nonterminalEv>
    f4c9:	84 c0                	test   %al,%al
    f4cb:	74 c5                	je     f492 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x272>
                num_args += curr.arity();
    f4cd:	4c 89 e7             	mov    %r12,%rdi
    f4d0:	e8 8b 79 00 00       	callq  16e60 <_ZNK7genetic4node5arityEv>
    f4d5:	eb b9                	jmp    f490 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x270>
	if (__p)
    f4d7:	48 85 db             	test   %rbx,%rbx
    f4da:	74 08                	je     f4e4 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x2c4>
	::operator delete(__p
    f4dc:	48 89 df             	mov    %rbx,%rdi
    f4df:	e8 dc 81 00 00       	callq  176c0 <_ZdlPv@plt>
            ++end;
        }

        return std::make_pair(start, end);
    }
    f4e4:	4c 89 f8             	mov    %r15,%rax
    f4e7:	48 83 c4 38          	add    $0x38,%rsp
    f4eb:	5b                   	pop    %rbx
    f4ec:	41 5c                	pop    %r12
    f4ee:	41 5d                	pop    %r13
    f4f0:	41 5e                	pop    %r14
    f4f2:	41 5f                	pop    %r15
    f4f4:	5d                   	pop    %rbp
    f4f5:	c3                   	retq   
	  __throw_length_error(
    f4f6:	48 8d 3d c6 38 ff ff 	lea    -0xc73a(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
    f4fd:	e8 6e 80 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
    f502:	49 89 c6             	mov    %rax,%r14
    f505:	eb 08                	jmp    f50f <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x2ef>
    f507:	49 89 c6             	mov    %rax,%r14
	if (__p)
    f50a:	48 85 db             	test   %rbx,%rbx
    f50d:	74 08                	je     f517 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine+0x2f7>
    f50f:	48 89 df             	mov    %rbx,%rdi
    f512:	e8 a9 81 00 00       	callq  176c0 <_ZdlPv@plt>
    f517:	4c 89 f7             	mov    %r14,%rdi
    f51a:	e8 51 84 00 00       	callq  17970 <_Unwind_Resume@plt>
    f51f:	90                   	nop

000000000000f520 <_ZN7genetic9get_depthERKNS_7programE>:

    int get_depth(const program& p_out) {
    f520:	55                   	push   %rbp
    f521:	41 57                	push   %r15
    f523:	41 56                	push   %r14
    f525:	41 55                	push   %r13
    f527:	41 54                	push   %r12
    f529:	53                   	push   %rbx
    f52a:	48 83 ec 78          	sub    $0x78,%rsp
    f52e:	48 89 fd             	mov    %rdi,%rbp
	size_t _M_map_size;
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl_data() _GLIBCXX_NOEXCEPT
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
    f531:	0f 57 c0             	xorps  %xmm0,%xmm0
    f534:	0f 29 44 24 50       	movaps %xmm0,0x50(%rsp)
    f539:	0f 29 44 24 40       	movaps %xmm0,0x40(%rsp)
    f53e:	0f 29 44 24 30       	movaps %xmm0,0x30(%rsp)
    f543:	0f 29 44 24 20       	movaps %xmm0,0x20(%rsp)
    f548:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
    f54d:	45 31 f6             	xor    %r14d,%r14d
    f550:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
      { _M_initialize_map(0); }
    f555:	31 f6                	xor    %esi,%esi
    f557:	e8 74 47 00 00       	callq  13cd0 <_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEm>
        int             depth = 0;
        std::stack<int> arity_stack;
        for (auto i = 0; i < p_out.len; ++i) {
    f55c:	83 7d 08 00          	cmpl   $0x0,0x8(%rbp)
    f560:	0f 8e 95 02 00 00    	jle    f7fb <_ZN7genetic9get_depthERKNS_7programE+0x2db>
    f566:	45 31 ff             	xor    %r15d,%r15d
    f569:	4c 8d 6c 24 68       	lea    0x68(%rsp),%r13
    f56e:	4c 8d 64 24 10       	lea    0x10(%rsp),%r12
    f573:	45 31 f6             	xor    %r14d,%r14d
    f576:	eb 28                	jmp    f5a0 <_ZN7genetic9get_depthERKNS_7programE+0x80>
    f578:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    f57f:	00 
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    f580:	89 01                	mov    %eax,(%rcx)
	    != this->_M_impl._M_finish._M_last - 1)
	  {
	    _Alloc_traits::construct(this->_M_impl,
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish._M_cur;
    f582:	48 83 c1 04          	add    $0x4,%rcx
    f586:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    f58b:	49 ff c7             	inc    %r15
    f58e:	48 63 45 08          	movslq 0x8(%rbp),%rax
    f592:	49 39 c7             	cmp    %rax,%r15
    f595:	4c 8b 74 24 60       	mov    0x60(%rsp),%r14
    f59a:	0f 8d 5b 02 00 00    	jge    f7fb <_ZN7genetic9get_depthERKNS_7programE+0x2db>
    f5a0:	4c 89 e3             	mov    %r12,%rbx
    f5a3:	4c 89 fe             	mov    %r15,%rsi
    f5a6:	45 89 f7             	mov    %r14d,%r15d
    f5a9:	49 89 f6             	mov    %rsi,%r14
	return get()[__i];
    f5ac:	48 c1 e6 04          	shl    $0x4,%rsi
    f5b0:	48 03 75 00          	add    0x0(%rbp),%rsi
    f5b4:	4d 89 ec             	mov    %r13,%r12
            node curr(p_out.nodes[i]);
    f5b7:	4c 89 ef             	mov    %r13,%rdi
    f5ba:	e8 11 78 00 00       	callq  16dd0 <_ZN7genetic4nodeC1ERKS0_>
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
    f5bf:	8b 44 24 58          	mov    0x58(%rsp),%eax
    f5c3:	2b 44 24 38          	sub    0x38(%rsp),%eax
    f5c7:	c1 e0 04             	shl    $0x4,%eax
	  + (__y._M_last - __y._M_cur);
    f5ca:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
    f5cf:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
    f5d4:	48 2b 54 24 48       	sub    0x48(%rsp),%rdx
    f5d9:	48 c1 ea 02          	shr    $0x2,%rdx
    f5dd:	01 c2                	add    %eax,%edx
	  + (__y._M_last - __y._M_cur);
    f5df:	48 2b 4c 24 20       	sub    0x20(%rsp),%rcx
    f5e4:	48 c1 e9 02          	shr    $0x2,%rcx
    f5e8:	8d 04 11             	lea    (%rcx,%rdx,1),%eax
    f5eb:	83 c0 80             	add    $0xffffff80,%eax

            // Update depth
            int sz = arity_stack.size();
            depth  = std::max(depth, sz);
    f5ee:	41 39 c7             	cmp    %eax,%r15d
    f5f1:	41 0f 4f c7          	cmovg  %r15d,%eax
    f5f5:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    f5fa:	4d 89 e5             	mov    %r12,%r13

            // Update stack
            if (curr.is_nonterminal()) {
    f5fd:	4c 89 e7             	mov    %r12,%rdi
    f600:	e8 7b 77 00 00       	callq  16d80 <_ZNK7genetic4node14is_nonterminalEv>
    f605:	84 c0                	test   %al,%al
    f607:	49 89 dc             	mov    %rbx,%r12
    f60a:	74 44                	je     f650 <_ZN7genetic9get_depthERKNS_7programE+0x130>
    f60c:	4d 89 f7             	mov    %r14,%r15
                arity_stack.push(curr.arity());
    f60f:	4c 89 ef             	mov    %r13,%rdi
    f612:	e8 49 78 00 00       	callq  16e60 <_ZNK7genetic4node5arityEv>
    f617:	89 44 24 0c          	mov    %eax,0xc(%rsp)
	if (this->_M_impl._M_finish._M_cur
    f61b:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
	    != this->_M_impl._M_finish._M_last - 1)
    f620:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
    f625:	48 83 c2 fc          	add    $0xfffffffffffffffc,%rdx
    f629:	48 39 d1             	cmp    %rdx,%rcx
	if (this->_M_impl._M_finish._M_cur
    f62c:	0f 85 4e ff ff ff    	jne    f580 <_ZN7genetic9get_depthERKNS_7programE+0x60>
	  }
	else
	  _M_push_back_aux(std::forward<_Args>(__args)...);
    f632:	4c 89 e7             	mov    %r12,%rdi
    f635:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
    f63a:	e8 01 48 00 00       	callq  13e40 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJiEEEvDpOT_>
    f63f:	e9 47 ff ff ff       	jmpq   f58b <_ZN7genetic9get_depthERKNS_7programE+0x6b>
    f644:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
    f64b:	00 00 00 00 00 
      { return __x._M_cur == __y._M_cur; }
    f650:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
    f655:	48 3b 7c 24 20       	cmp    0x20(%rsp),%rdi
            } else {
                // Only triggered for a depth 0 node
                if (arity_stack.empty())
    f65a:	0f 84 96 01 00 00    	je     f7f6 <_ZN7genetic9get_depthERKNS_7programE+0x2d6>
	if (_M_cur == _M_first)
    f660:	48 3b 7c 24 48       	cmp    0x48(%rsp),%rdi
    f665:	74 0f                	je     f676 <_ZN7genetic9get_depthERKNS_7programE+0x156>
                    break;

                int e = arity_stack.top();
    f667:	44 8b 7f fc          	mov    -0x4(%rdi),%r15d
	--_M_cur;
    f66b:	48 83 c7 fc          	add    $0xfffffffffffffffc,%rdi
	    != this->_M_impl._M_finish._M_last - 1)
    f66f:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
    f674:	eb 3f                	jmp    f6b5 <_ZN7genetic9get_depthERKNS_7programE+0x195>
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
    f676:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
	_M_first = *__new_node;
    f67b:	48 8b 40 f8          	mov    -0x8(%rax),%rax
    f67f:	44 8b b8 fc 01 00 00 	mov    0x1fc(%rax),%r15d
	::operator delete(__p
    f686:	e8 35 80 00 00       	callq  176c0 <_ZdlPv@plt>
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
    _M_pop_back_aux()
    {
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
    f68b:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
    f690:	48 8d 48 f8          	lea    -0x8(%rax),%rcx
	_M_node = __new_node;
    f694:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
	_M_first = *__new_node;
    f699:	48 8b 78 f8          	mov    -0x8(%rax),%rdi
    f69d:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
	_M_last = _M_first + difference_type(_S_buffer_size());
    f6a2:	48 8d 87 00 02 00 00 	lea    0x200(%rdi),%rax
    f6a9:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
    f6ae:	48 81 c7 fc 01 00 00 	add    $0x1fc,%rdi
    f6b5:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
                arity_stack.pop();
                arity_stack.push(e - 1);
    f6ba:	41 ff cf             	dec    %r15d
    f6bd:	44 89 7c 24 0c       	mov    %r15d,0xc(%rsp)
	    != this->_M_impl._M_finish._M_last - 1)
    f6c2:	48 83 c0 fc          	add    $0xfffffffffffffffc,%rax
    f6c6:	48 39 c7             	cmp    %rax,%rdi
	if (this->_M_impl._M_finish._M_cur
    f6c9:	0f 84 12 01 00 00    	je     f7e1 <_ZN7genetic9get_depthERKNS_7programE+0x2c1>
    f6cf:	90                   	nop
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    f6d0:	44 89 3f             	mov    %r15d,(%rdi)
	    ++this->_M_impl._M_finish._M_cur;
    f6d3:	48 83 c7 04          	add    $0x4,%rdi
    f6d7:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
    f6dc:	4d 89 f7             	mov    %r14,%r15
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
    f6df:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
    f6e4:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
	if (_M_cur == _M_first)
    f6e9:	48 39 c7             	cmp    %rax,%rdi
    f6ec:	74 12                	je     f700 <_ZN7genetic9get_depthERKNS_7programE+0x1e0>

                while (arity_stack.top() == 0) {
    f6ee:	83 7f fc 00          	cmpl   $0x0,-0x4(%rdi)
    f6f2:	0f 85 93 fe ff ff    	jne    f58b <_ZN7genetic9get_depthERKNS_7programE+0x6b>
    f6f8:	48 83 c7 fc          	add    $0xfffffffffffffffc,%rdi
    f6fc:	eb 47                	jmp    f745 <_ZN7genetic9get_depthERKNS_7programE+0x225>
    f6fe:	66 90                	xchg   %ax,%ax
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
    f700:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
	_M_first = *__new_node;
    f705:	48 8b 40 f8          	mov    -0x8(%rax),%rax
    f709:	83 b8 fc 01 00 00 00 	cmpl   $0x0,0x1fc(%rax)
    f710:	0f 85 75 fe ff ff    	jne    f58b <_ZN7genetic9get_depthERKNS_7programE+0x6b>
	::operator delete(__p
    f716:	e8 a5 7f 00 00       	callq  176c0 <_ZdlPv@plt>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
    f71b:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
    f720:	48 8d 48 f8          	lea    -0x8(%rax),%rcx
	_M_node = __new_node;
    f724:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
	_M_first = *__new_node;
    f729:	48 8b 40 f8          	mov    -0x8(%rax),%rax
    f72d:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
	_M_last = _M_first + difference_type(_S_buffer_size());
    f732:	48 8d 88 00 02 00 00 	lea    0x200(%rax),%rcx
    f739:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
    f73e:	48 8d b8 fc 01 00 00 	lea    0x1fc(%rax),%rdi
    f745:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
      { return __x._M_cur == __y._M_cur; }
    f74a:	48 3b 7c 24 20       	cmp    0x20(%rsp),%rdi
                    arity_stack.pop();
                    if (arity_stack.empty())
    f74f:	0f 84 36 fe ff ff    	je     f58b <_ZN7genetic9get_depthERKNS_7programE+0x6b>
	if (_M_cur == _M_first)
    f755:	48 39 c7             	cmp    %rax,%rdi
    f758:	74 16                	je     f770 <_ZN7genetic9get_depthERKNS_7programE+0x250>
                        break;

                    e = arity_stack.top();
    f75a:	44 8b 7f fc          	mov    -0x4(%rdi),%r15d
	--_M_cur;
    f75e:	48 83 c7 fc          	add    $0xfffffffffffffffc,%rdi
	    != this->_M_impl._M_finish._M_last - 1)
    f762:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
    f767:	eb 49                	jmp    f7b2 <_ZN7genetic9get_depthERKNS_7programE+0x292>
    f769:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
    f770:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
	_M_first = *__new_node;
    f775:	48 8b 49 f8          	mov    -0x8(%rcx),%rcx
    f779:	44 8b b9 fc 01 00 00 	mov    0x1fc(%rcx),%r15d
    f780:	48 89 c7             	mov    %rax,%rdi
    f783:	e8 38 7f 00 00       	callq  176c0 <_ZdlPv@plt>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
    f788:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
    f78d:	48 8d 48 f8          	lea    -0x8(%rax),%rcx
	_M_node = __new_node;
    f791:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
	_M_first = *__new_node;
    f796:	48 8b 78 f8          	mov    -0x8(%rax),%rdi
    f79a:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
	_M_last = _M_first + difference_type(_S_buffer_size());
    f79f:	48 8d 87 00 02 00 00 	lea    0x200(%rdi),%rax
    f7a6:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
    f7ab:	48 81 c7 fc 01 00 00 	add    $0x1fc,%rdi
    f7b2:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
                    arity_stack.pop();
                    arity_stack.push(e - 1);
    f7b7:	41 ff cf             	dec    %r15d
    f7ba:	44 89 7c 24 0c       	mov    %r15d,0xc(%rsp)
	    != this->_M_impl._M_finish._M_last - 1)
    f7bf:	48 83 c0 fc          	add    $0xfffffffffffffffc,%rax
    f7c3:	48 39 c7             	cmp    %rax,%rdi
	if (this->_M_impl._M_finish._M_cur
    f7c6:	0f 85 04 ff ff ff    	jne    f6d0 <_ZN7genetic9get_depthERKNS_7programE+0x1b0>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
    f7cc:	4c 89 e7             	mov    %r12,%rdi
    f7cf:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
    f7d4:	e8 67 46 00 00       	callq  13e40 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJiEEEvDpOT_>
    f7d9:	4d 89 f7             	mov    %r14,%r15
    f7dc:	e9 fe fe ff ff       	jmpq   f6df <_ZN7genetic9get_depthERKNS_7programE+0x1bf>
    f7e1:	4c 89 e7             	mov    %r12,%rdi
    f7e4:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
    f7e9:	e8 52 46 00 00       	callq  13e40 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJiEEEvDpOT_>
    f7ee:	4d 89 f7             	mov    %r14,%r15
    f7f1:	e9 e9 fe ff ff       	jmpq   f6df <_ZN7genetic9get_depthERKNS_7programE+0x1bf>
    f7f6:	4c 8b 74 24 60       	mov    0x60(%rsp),%r14

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
    f7fb:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    f800:	48 85 ff             	test   %rdi,%rdi
    f803:	74 37                	je     f83c <_ZN7genetic9get_depthERKNS_7programE+0x31c>
	{
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
    f805:	48 8b 5c 24 38       	mov    0x38(%rsp),%rbx
			   this->_M_impl._M_finish._M_node + 1);
    f80a:	4c 8b 7c 24 58       	mov    0x58(%rsp),%r15
    f80f:	49 8d 47 08          	lea    0x8(%r15),%rax
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
    f813:	48 39 c3             	cmp    %rax,%rbx
    f816:	73 1f                	jae    f837 <_ZN7genetic9get_depthERKNS_7programE+0x317>
    f818:	48 83 c3 f8          	add    $0xfffffffffffffff8,%rbx
    f81c:	0f 1f 40 00          	nopl   0x0(%rax)
	_M_deallocate_node(*__n);
    f820:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
    f824:	48 83 c3 08          	add    $0x8,%rbx
    f828:	e8 93 7e 00 00       	callq  176c0 <_ZdlPv@plt>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
    f82d:	4c 39 fb             	cmp    %r15,%rbx
    f830:	72 ee                	jb     f820 <_ZN7genetic9get_depthERKNS_7programE+0x300>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
    f832:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    f837:	e8 84 7e 00 00       	callq  176c0 <_ZdlPv@plt>
                }
            }
        }

        return depth;
    }
    f83c:	44 89 f0             	mov    %r14d,%eax
    f83f:	48 83 c4 78          	add    $0x78,%rsp
    f843:	5b                   	pop    %rbx
    f844:	41 5c                	pop    %r12
    f846:	41 5d                	pop    %r13
    f848:	41 5e                	pop    %r14
    f84a:	41 5f                	pop    %r15
    f84c:	5d                   	pop    %rbp
    f84d:	c3                   	retq   
    f84e:	eb 06                	jmp    f856 <_ZN7genetic9get_depthERKNS_7programE+0x336>
    f850:	eb 04                	jmp    f856 <_ZN7genetic9get_depthERKNS_7programE+0x336>
    f852:	eb 02                	jmp    f856 <_ZN7genetic9get_depthERKNS_7programE+0x336>
    f854:	eb 00                	jmp    f856 <_ZN7genetic9get_depthERKNS_7programE+0x336>
    f856:	48 89 c3             	mov    %rax,%rbx
    f859:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
    f85e:	e8 1d 44 00 00       	callq  13c80 <_ZNSt5stackIiSt5dequeIiSaIiEEED2Ev>
    f863:	48 89 df             	mov    %rbx,%rdi
    f866:	e8 05 81 00 00       	callq  17970 <_Unwind_Resume@plt>
    f86b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000f870 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine>:

    void build_program(program& p_out, const param& params, PhiloxEngine& rng) {
    f870:	55                   	push   %rbp
    f871:	41 57                	push   %r15
    f873:	41 56                	push   %r14
    f875:	41 55                	push   %r13
    f877:	41 54                	push   %r12
    f879:	53                   	push   %rbx
    f87a:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
    f881:	49 89 f4             	mov    %rsi,%r12
    f884:	48 89 fb             	mov    %rdi,%rbx
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
    f887:	0f 57 c0             	xorps  %xmm0,%xmm0
    f88a:	0f 29 44 24 70       	movaps %xmm0,0x70(%rsp)
    f88f:	0f 29 44 24 60       	movaps %xmm0,0x60(%rsp)
    f894:	0f 29 44 24 50       	movaps %xmm0,0x50(%rsp)
    f899:	0f 29 44 24 40       	movaps %xmm0,0x40(%rsp)
    f89e:	0f 29 44 24 30       	movaps %xmm0,0x30(%rsp)
    f8a3:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
      { _M_initialize_map(0); }
    f8a8:	31 f6                	xor    %esi,%esi
    f8aa:	e8 21 44 00 00       	callq  13cd0 <_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEm>
	: _M_start(), _M_finish(), _M_end_of_storage()
    f8af:	0f 57 c0             	xorps  %xmm0,%xmm0
    f8b2:	0f 29 04 24          	movaps %xmm0,(%rsp)
    f8b6:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
    f8bd:	00 00 
    f8bf:	48 89 e7             	mov    %rsp,%rdi
	      __tmp = _M_allocate_and_copy(__n,
    f8c2:	be 00 00 10 00       	mov    $0x100000,%esi
    f8c7:	31 d2                	xor    %edx,%edx
    f8c9:	31 c9                	xor    %ecx,%ecx
    f8cb:	e8 80 47 00 00       	callq  14050 <_ZNSt6vectorIN7genetic4nodeESaIS1_EE20_M_allocate_and_copyIPKS1_EEPS1_mT_S8_>
    f8d0:	49 89 c7             	mov    %rax,%r15
	  _M_deallocate(this->_M_impl._M_start,
    f8d3:	48 8b 3c 24          	mov    (%rsp),%rdi
	if (__p)
    f8d7:	48 85 ff             	test   %rdi,%rdi
    f8da:	74 05                	je     f8e1 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x71>
    f8dc:	e8 df 7d 00 00       	callq  176c0 <_ZdlPv@plt>
	  this->_M_impl._M_start = __tmp;
    f8e1:	4c 89 3c 24          	mov    %r15,(%rsp)
	  this->_M_impl._M_finish = __tmp + __old_size;
    f8e5:	4c 89 7c 24 08       	mov    %r15,0x8(%rsp)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    f8ea:	49 81 c7 00 00 00 01 	add    $0x1000000,%r15
    f8f1:	4c 89 7c 24 10       	mov    %r15,0x10(%rsp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    f8f6:	41 8b 44 24 38       	mov    0x38(%r12),%eax
    f8fb:	41 2b 44 24 30       	sub    0x30(%r12),%eax
    f900:	89 44 24 20          	mov    %eax,0x20(%rsp)

    uniform_int_distribution_custom() : a_(0), b_(std::numeric_limits<IntType>::max()) {}

    // Constructor takes inclusive lower and upper bounds.
    uniform_int_distribution_custom(result_type a, result_type b) : a_(a), b_(b) {
        if (b < a) {
    f904:	ff c8                	dec    %eax
    f906:	0f 88 c2 06 00 00    	js     ffce <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x75e>
        std::vector<node> nodelist;
        nodelist.reserve(1 << (MAX_STACK_SIZE));

        // Specify Distributions with parameters
        uniform_int_distribution_custom<int>    dist_function(0, params.function_set.size() - 1);
        uniform_int_distribution_custom<int>    dist_initDepth(params.init_depth[0],
    f90c:	45 8b 74 24 20       	mov    0x20(%r12),%r14d
                                                               params.init_depth[1]);
    f911:	45 8b 7c 24 24       	mov    0x24(%r12),%r15d
    f916:	45 29 f7             	sub    %r14d,%r15d
    f919:	0f 8c e1 06 00 00    	jl     10000 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x790>
        uniform_int_distribution_custom<int>    dist_terminalChoice(0, params.num_features);
    f91f:	41 8b 84 24 d0 00 00 	mov    0xd0(%r12),%eax
    f926:	00 
    f927:	89 44 24 24          	mov    %eax,0x24(%rsp)
    f92b:	85 c0                	test   %eax,%eax
    f92d:	0f 88 ff 06 00 00    	js     10032 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x7c2>
        uniform_real_distribution_custom<float> dist_constVal(params.const_range[0],
    f933:	f3 41 0f 10 44 24 18 	movss  0x18(%r12),%xmm0
                                                              params.const_range[1]);
    f93a:	f3 41 0f 10 4c 24 1c 	movss  0x1c(%r12),%xmm1
    f941:	f3 0f 11 44 24 28    	movss  %xmm0,0x28(%rsp)
    f947:	f3 0f 11 8c 24 88 00 	movss  %xmm1,0x88(%rsp)
    f94e:	00 00 
    // Default constructor: range [0, 1)
    uniform_real_distribution_custom() : a_(0), b_(1) {}

    // Constructor takes lower bound 'a' and upper bound 'b'; b must be > a.
    uniform_real_distribution_custom(result_type a, result_type b) : a_(a), b_(b) {
        if (b <= a) {
    f950:	0f 2e c1             	ucomiss %xmm1,%xmm0
    f953:	0f 83 0b 07 00 00    	jae    10064 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x7f4>
        bernoulli_distribution_custom           dist_nodeChoice(params.terminalRatio);
    f959:	f3 41 0f 10 8c 24 b4 	movss  0xb4(%r12),%xmm1
    f960:	00 00 00 
    f963:	0f 57 c0             	xorps  %xmm0,%xmm0
    // Default constructor: probability 0.5.
    bernoulli_distribution_custom() : p_(0.5) {}

    // Constructor takes a probability p; defaults to 0.5.
    explicit bernoulli_distribution_custom(RealType p = RealType(0.5)) : p_(p) {
        if (p < 0 || p > 1) {
    f966:	0f 2e c1             	ucomiss %xmm1,%xmm0
    f969:	0f 87 27 07 00 00    	ja     10096 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x826>
    f96f:	0f 2e 0d 5a 2d ff ff 	ucomiss -0xd2a6(%rip),%xmm1        # 26d0 <_IO_stdin_used-0x20>
    f976:	0f 87 1a 07 00 00    	ja     10096 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x826>
    f97c:	f3 0f 11 8c 24 90 00 	movss  %xmm1,0x90(%rsp)
    f983:	00 00 
        uint32_t range = static_cast<uint32_t>(b_ - a_ + 1);
    f985:	41 ff c7             	inc    %r15d
            std::numeric_limits<uint32_t>::max() - (std::numeric_limits<uint32_t>::max() % range);
    f988:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    f98d:	31 d2                	xor    %edx,%edx
    f98f:	41 f7 f7             	div    %r15d
    f992:	89 d5                	mov    %edx,%ebp
    f994:	f7 d5                	not    %ebp
    f996:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    f99d:	00 00 00 
    f9a0:	e8 4b 70 00 00       	callq  169f0 <philox_random_uint32>
        } while (x >= limit);
    f9a5:	39 e8                	cmp    %ebp,%eax
    f9a7:	73 f7                	jae    f9a0 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x130>
        return a_ + static_cast<result_type>(x % range);
    f9a9:	31 d2                	xor    %edx,%edx
    f9ab:	41 f7 f7             	div    %r15d
    f9ae:	44 01 f2             	add    %r14d,%edx
    f9b1:	89 94 24 a4 00 00 00 	mov    %edx,0xa4(%rsp)
            std::numeric_limits<uint32_t>::max() - (std::numeric_limits<uint32_t>::max() % range);
    f9b8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    f9bd:	31 d2                	xor    %edx,%edx
    f9bf:	f7 74 24 20          	divl   0x20(%rsp)
    f9c3:	41 89 d7             	mov    %edx,%r15d
    f9c6:	41 f7 d7             	not    %r15d
    f9c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    f9d0:	e8 1b 70 00 00       	callq  169f0 <philox_random_uint32>
        } while (x >= limit);
    f9d5:	44 39 f8             	cmp    %r15d,%eax
    f9d8:	73 f6                	jae    f9d0 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x160>
        return a_ + static_cast<result_type>(x % range);
    f9da:	31 d2                	xor    %edx,%edx
    f9dc:	f7 74 24 20          	divl   0x20(%rsp)
        bernoulli_distribution_custom           dist_coinToss(0.5);

        // Initialize nodes
        int        max_depth = dist_initDepth(rng);
        node::type func      = params.function_set[dist_function(rng)];
    f9e0:	48 63 c2             	movslq %edx,%rax
	return *(this->_M_impl._M_start + __n);
    f9e3:	49 8b 4c 24 30       	mov    0x30(%r12),%rcx
    f9e8:	0f b6 34 01          	movzbl (%rcx,%rax,1),%esi
    f9ec:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
    f9f3:	00 
        node       curr_node(func);
    f9f4:	e8 c7 71 00 00       	callq  16bc0 <_ZN7genetic4nodeC1ENS0_4typeE>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    f9f9:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    f9fe:	48 3b 44 24 10       	cmp    0x10(%rsp),%rax
    fa03:	74 18                	je     fa1d <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x1ad>
    fa05:	48 8d b4 24 b8 00 00 	lea    0xb8(%rsp),%rsi
    fa0c:	00 
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    fa0d:	48 89 c7             	mov    %rax,%rdi
    fa10:	e8 bb 73 00 00       	callq  16dd0 <_ZN7genetic4nodeC1ERKS0_>
	    ++this->_M_impl._M_finish;
    fa15:	48 83 44 24 08 10    	addq   $0x10,0x8(%rsp)
    fa1b:	eb 13                	jmp    fa30 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x1c0>
    fa1d:	48 89 e7             	mov    %rsp,%rdi
    fa20:	48 8d 94 24 b8 00 00 	lea    0xb8(%rsp),%rdx
    fa27:	00 
	  _M_realloc_insert(end(), __x);
    fa28:	48 89 c6             	mov    %rax,%rsi
    fa2b:	e8 e0 46 00 00       	callq  14110 <_ZNSt6vectorIN7genetic4nodeESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
    fa30:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
    fa37:	00 
        nodelist.push_back(curr_node);
        arity_stack.push(curr_node.arity());
    fa38:	e8 23 74 00 00       	callq  16e60 <_ZNK7genetic4node5arityEv>
    fa3d:	89 84 24 a8 00 00 00 	mov    %eax,0xa8(%rsp)
	if (this->_M_impl._M_finish._M_cur
    fa44:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
	    != this->_M_impl._M_finish._M_last - 1)
    fa49:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
    fa4e:	48 83 c2 fc          	add    $0xfffffffffffffffc,%rdx
    fa52:	48 39 d1             	cmp    %rdx,%rcx
	if (this->_M_impl._M_finish._M_cur
    fa55:	74 0d                	je     fa64 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x1f4>
    fa57:	89 01                	mov    %eax,(%rcx)
	    ++this->_M_impl._M_finish._M_cur;
    fa59:	48 83 c1 04          	add    $0x4,%rcx
    fa5d:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
    fa62:	eb 12                	jmp    fa76 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x206>
    fa64:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
    fa69:	48 8d b4 24 a8 00 00 	lea    0xa8(%rsp),%rsi
    fa70:	00 
	  _M_push_back_aux(std::forward<_Args>(__args)...);
    fa71:	e8 ca 43 00 00       	callq  13e40 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJiEEEvDpOT_>

        init_method_t method = params.init_method;
    fa76:	41 8b 44 24 28       	mov    0x28(%r12),%eax
    fa7b:	89 44 24 2c          	mov    %eax,0x2c(%rsp)
        if (method == init_method_t::half_and_half) {
    fa7f:	83 f8 02             	cmp    $0x2,%eax
    fa82:	75 29                	jne    faad <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x23d>
    fa84:	e8 67 6f 00 00       	callq  169f0 <philox_random_uint32>

    // When called with a random engine, returns true with probability p.
    // The engine is expected to provide a uint32_t via operator().
    template <typename Engine> result_type operator()(Engine& eng) {
        uint32_t x = eng();
        double   u = x * (1.0 / (static_cast<double>(std::numeric_limits<uint32_t>::max()) + 1.0));
    fa89:	89 c0                	mov    %eax,%eax
    fa8b:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
    fa90:	f2 0f 59 05 10 34 ff 	mulsd  -0xcbf0(%rip),%xmm0        # 2ea8 <_IO_stdin_used+0x7b8>
    fa97:	ff 
    fa98:	f2 0f 10 0d 00 34 ff 	movsd  -0xcc00(%rip),%xmm1        # 2ea0 <_IO_stdin_used+0x7b0>
    fa9f:	ff 
        return u < p_;
    faa0:	31 c0                	xor    %eax,%eax
    faa2:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
    faa6:	0f 96 c0             	setbe  %al
    faa9:	89 44 24 2c          	mov    %eax,0x2c(%rsp)
    faad:	4c 89 a4 24 98 00 00 	mov    %r12,0x98(%rsp)
    fab4:	00 
      { return __x._M_cur == __y._M_cur; }
    fab5:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
    faba:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
    fabf:	48 39 c7             	cmp    %rax,%rdi
            bool choice = dist_coinToss(rng);
            method      = choice ? init_method_t::grow : init_method_t::full;
        }

        // Fill tree
        while (!arity_stack.empty()) {
    fac2:	0f 84 e7 03 00 00    	je     feaf <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x63f>
    fac8:	f3 0f 10 84 24 90 00 	movss  0x90(%rsp),%xmm0
    facf:	00 00 
    fad1:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
    fad5:	f2 0f 11 84 24 90 00 	movsd  %xmm0,0x90(%rsp)
    fadc:	00 00 
    fade:	ff 44 24 24          	incl   0x24(%rsp)
    fae2:	f3 0f 10 84 24 88 00 	movss  0x88(%rsp),%xmm0
    fae9:	00 00 
    faeb:	f3 0f 5c 44 24 28    	subss  0x28(%rsp),%xmm0
    faf1:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
    faf5:	f2 0f 11 84 24 88 00 	movsd  %xmm0,0x88(%rsp)
    fafc:	00 00 
    fafe:	4c 8d a4 24 a8 00 00 	lea    0xa8(%rsp),%r12
    fb05:	00 
    fb06:	4c 8d ac 24 b8 00 00 	lea    0xb8(%rsp),%r13
    fb0d:	00 
    fb0e:	48 8d 6c 24 30       	lea    0x30(%rsp),%rbp
    fb13:	eb 24                	jmp    fb39 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x2c9>
    fb15:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    fb1c:	00 00 00 00 
    fb20:	89 07                	mov    %eax,(%rdi)
	    ++this->_M_impl._M_finish._M_cur;
    fb22:	48 83 c7 04          	add    $0x4,%rdi
    fb26:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
    fb2b:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
    fb30:	48 39 c7             	cmp    %rax,%rdi
    fb33:	0f 84 76 03 00 00    	je     feaf <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x63f>
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
    fb39:	8b 4c 24 78          	mov    0x78(%rsp),%ecx
    fb3d:	2b 4c 24 58          	sub    0x58(%rsp),%ecx
    fb41:	48 2b 7c 24 68       	sub    0x68(%rsp),%rdi
    fb46:	c1 e1 04             	shl    $0x4,%ecx
    fb49:	48 c1 ef 02          	shr    $0x2,%rdi
    fb4d:	01 cf                	add    %ecx,%edi
	  + (__y._M_last - __y._M_cur);
    fb4f:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
    fb54:	48 29 c1             	sub    %rax,%rcx
    fb57:	48 c1 e9 02          	shr    $0x2,%rcx
    fb5b:	44 8d 34 39          	lea    (%rcx,%rdi,1),%r14d
    fb5f:	41 83 c6 80          	add    $0xffffff80,%r14d
      if (__a < __b)
    fb63:	8b 43 0c             	mov    0xc(%rbx),%eax
            int depth        = arity_stack.size();
            p_out.depth      = std::max(depth, p_out.depth);
    fb66:	44 39 f0             	cmp    %r14d,%eax
    fb69:	41 0f 4e c6          	cmovle %r14d,%eax
    fb6d:	89 43 0c             	mov    %eax,0xc(%rbx)
    fb70:	e8 7b 6e 00 00       	callq  169f0 <philox_random_uint32>
    fb75:	83 7c 24 2c 01       	cmpl   $0x1,0x2c(%rsp)
        double   u = x * (1.0 / (static_cast<double>(std::numeric_limits<uint32_t>::max()) + 1.0));
    fb7a:	89 c0                	mov    %eax,%eax
    fb7c:	0f 57 c0             	xorps  %xmm0,%xmm0
    fb7f:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
    fb84:	0f 95 c0             	setne  %al
    fb87:	f2 0f 59 05 19 33 ff 	mulsd  -0xcce7(%rip),%xmm0        # 2ea8 <_IO_stdin_used+0x7b8>
    fb8e:	ff 
    fb8f:	f2 0f 10 8c 24 90 00 	movsd  0x90(%rsp),%xmm1
    fb96:	00 00 
        return u < p_;
    fb98:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
    fb9c:	0f 97 c1             	seta   %cl
            bool node_choice = dist_nodeChoice(rng);

            if ((node_choice == false || method == init_method_t::full) && depth < max_depth) {
    fb9f:	84 c8                	test   %cl,%al
    fba1:	75 6d                	jne    fc10 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x3a0>
    fba3:	44 39 b4 24 a4 00 00 	cmp    %r14d,0xa4(%rsp)
    fbaa:	00 
    fbab:	7e 63                	jle    fc10 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x3a0>
    fbad:	0f 1f 00             	nopl   (%rax)
    fbb0:	e8 3b 6e 00 00       	callq  169f0 <philox_random_uint32>
        } while (x >= limit);
    fbb5:	44 39 f8             	cmp    %r15d,%eax
    fbb8:	73 f6                	jae    fbb0 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x340>
        return a_ + static_cast<result_type>(x % range);
    fbba:	31 d2                	xor    %edx,%edx
    fbbc:	f7 74 24 20          	divl   0x20(%rsp)
                // Add a function to node list
                curr_node = node(params.function_set[dist_function(rng)]);
    fbc0:	48 63 c2             	movslq %edx,%rax
    fbc3:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
    fbca:	00 
	return *(this->_M_impl._M_start + __n);
    fbcb:	48 8b 49 30          	mov    0x30(%rcx),%rcx
    fbcf:	0f b6 34 01          	movzbl (%rcx,%rax,1),%esi
    fbd3:	4c 89 e7             	mov    %r12,%rdi
    fbd6:	e8 e5 6f 00 00       	callq  16bc0 <_ZN7genetic4nodeC1ENS0_4typeE>
    fbdb:	4c 89 ef             	mov    %r13,%rdi
    fbde:	4c 89 e6             	mov    %r12,%rsi
    fbe1:	e8 2a 72 00 00       	callq  16e10 <_ZN7genetic4nodeaSERKS0_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    fbe6:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    fbeb:	48 3b 74 24 10       	cmp    0x10(%rsp),%rsi
    fbf0:	0f 84 ce 00 00 00    	je     fcc4 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x454>
    fbf6:	48 89 f7             	mov    %rsi,%rdi
    fbf9:	4c 89 ee             	mov    %r13,%rsi
    fbfc:	e8 cf 71 00 00       	callq  16dd0 <_ZN7genetic4nodeC1ERKS0_>
	    ++this->_M_impl._M_finish;
    fc01:	48 83 44 24 08 10    	addq   $0x10,0x8(%rsp)
    fc07:	e9 c3 00 00 00       	jmpq   fccf <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x45f>
    fc0c:	0f 1f 40 00          	nopl   0x0(%rax)
            std::numeric_limits<uint32_t>::max() - (std::numeric_limits<uint32_t>::max() % range);
    fc10:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    fc15:	31 d2                	xor    %edx,%edx
    fc17:	f7 74 24 24          	divl   0x24(%rsp)
    fc1b:	41 89 d6             	mov    %edx,%r14d
    fc1e:	41 f7 d6             	not    %r14d
    fc21:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    fc28:	0f 1f 84 00 00 00 00 
    fc2f:	00 
    fc30:	e8 bb 6d 00 00       	callq  169f0 <philox_random_uint32>
        } while (x >= limit);
    fc35:	44 39 f0             	cmp    %r14d,%eax
    fc38:	73 f6                	jae    fc30 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x3c0>
        return a_ + static_cast<result_type>(x % range);
    fc3a:	31 d2                	xor    %edx,%edx
    fc3c:	f7 74 24 24          	divl   0x24(%rsp)
    fc40:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
    fc47:	00 
                nodelist.push_back(curr_node);
                arity_stack.push(curr_node.arity());
            } else {
                // Add terminal
                int terminal_choice = dist_terminalChoice(rng);
                if (terminal_choice == params.num_features) {
    fc48:	3b 90 d0 00 00 00    	cmp    0xd0(%rax),%edx
    fc4e:	75 40                	jne    fc90 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x420>
    fc50:	e8 9b 6d 00 00       	callq  169f0 <philox_random_uint32>
        double u = x * (1.0 / (static_cast<double>(std::numeric_limits<uint32_t>::max()) + 1.0));
    fc55:	89 c0                	mov    %eax,%eax
    fc57:	0f 57 c0             	xorps  %xmm0,%xmm0
    fc5a:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
    fc5f:	f2 0f 59 05 41 32 ff 	mulsd  -0xcdbf(%rip),%xmm0        # 2ea8 <_IO_stdin_used+0x7b8>
    fc66:	ff 
        return a_ + static_cast<result_type>((b_ - a_) * u);
    fc67:	f2 0f 59 84 24 88 00 	mulsd  0x88(%rsp),%xmm0
    fc6e:	00 00 
    fc70:	f2 0f 5a c0          	cvtsd2ss %xmm0,%xmm0
    fc74:	f3 0f 58 44 24 28    	addss  0x28(%rsp),%xmm0
                    // Add constant
                    float val = dist_constVal(rng);
                    curr_node = node(val);
    fc7a:	4c 89 e7             	mov    %r12,%rdi
    fc7d:	e8 2e 71 00 00       	callq  16db0 <_ZN7genetic4nodeC1Ef>
    fc82:	4c 89 ef             	mov    %r13,%rdi
    fc85:	4c 89 e6             	mov    %r12,%rsi
    fc88:	e8 83 71 00 00       	callq  16e10 <_ZN7genetic4nodeaSERKS0_>
    fc8d:	eb 16                	jmp    fca5 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x435>
    fc8f:	90                   	nop
                } else {
                    // Add variable
                    int fid   = terminal_choice;
                    curr_node = node(fid);
    fc90:	4c 89 e7             	mov    %r12,%rdi
    fc93:	89 d6                	mov    %edx,%esi
    fc95:	e8 f6 70 00 00       	callq  16d90 <_ZN7genetic4nodeC1Ei>
    fc9a:	4c 89 ef             	mov    %r13,%rdi
    fc9d:	4c 89 e6             	mov    %r12,%rsi
    fca0:	e8 6b 71 00 00       	callq  16e10 <_ZN7genetic4nodeaSERKS0_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    fca5:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    fcaa:	48 3b 74 24 10       	cmp    0x10(%rsp),%rsi
    fcaf:	74 59                	je     fd0a <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x49a>
    fcb1:	48 89 f7             	mov    %rsi,%rdi
    fcb4:	4c 89 ee             	mov    %r13,%rsi
    fcb7:	e8 14 71 00 00       	callq  16dd0 <_ZN7genetic4nodeC1ERKS0_>
	    ++this->_M_impl._M_finish;
    fcbc:	48 83 44 24 08 10    	addq   $0x10,0x8(%rsp)
    fcc2:	eb 51                	jmp    fd15 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x4a5>
	  _M_realloc_insert(end(), __x);
    fcc4:	48 89 e7             	mov    %rsp,%rdi
    fcc7:	4c 89 ea             	mov    %r13,%rdx
    fcca:	e8 41 44 00 00       	callq  14110 <_ZNSt6vectorIN7genetic4nodeESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
                arity_stack.push(curr_node.arity());
    fccf:	4c 89 ef             	mov    %r13,%rdi
    fcd2:	e8 89 71 00 00       	callq  16e60 <_ZNK7genetic4node5arityEv>
    fcd7:	89 84 24 a8 00 00 00 	mov    %eax,0xa8(%rsp)
	if (this->_M_impl._M_finish._M_cur
    fcde:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
	    != this->_M_impl._M_finish._M_last - 1)
    fce3:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
    fce8:	48 83 c1 fc          	add    $0xfffffffffffffffc,%rcx
    fcec:	48 39 cf             	cmp    %rcx,%rdi
	if (this->_M_impl._M_finish._M_cur
    fcef:	0f 85 2b fe ff ff    	jne    fb20 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x2b0>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
    fcf5:	48 89 ef             	mov    %rbp,%rdi
    fcf8:	4c 89 e6             	mov    %r12,%rsi
    fcfb:	e8 40 41 00 00       	callq  13e40 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJiEEEvDpOT_>
      { return __x._M_cur == __y._M_cur; }
    fd00:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
    fd05:	e9 21 fe ff ff       	jmpq   fb2b <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x2bb>
    fd0a:	48 89 e7             	mov    %rsp,%rdi
    fd0d:	4c 89 ea             	mov    %r13,%rdx
    fd10:	e8 fb 43 00 00       	callq  14110 <_ZNSt6vectorIN7genetic4nodeESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
    fd15:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
	if (_M_cur == _M_first)
    fd1a:	48 3b 7c 24 68       	cmp    0x68(%rsp),%rdi
    fd1f:	74 0f                	je     fd30 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x4c0>

                // Modify nodelist
                nodelist.push_back(curr_node);

                // Modify stack
                int e = arity_stack.top();
    fd21:	44 8b 77 fc          	mov    -0x4(%rdi),%r14d
	--_M_cur;
    fd25:	48 83 c7 fc          	add    $0xfffffffffffffffc,%rdi
	    != this->_M_impl._M_finish._M_last - 1)
    fd29:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
    fd2e:	eb 3f                	jmp    fd6f <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x4ff>
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
    fd30:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
	_M_first = *__new_node;
    fd35:	48 8b 40 f8          	mov    -0x8(%rax),%rax
    fd39:	44 8b b0 fc 01 00 00 	mov    0x1fc(%rax),%r14d
	::operator delete(__p
    fd40:	e8 7b 79 00 00       	callq  176c0 <_ZdlPv@plt>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
    fd45:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
    fd4a:	48 8d 48 f8          	lea    -0x8(%rax),%rcx
	_M_node = __new_node;
    fd4e:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
	_M_first = *__new_node;
    fd53:	48 8b 78 f8          	mov    -0x8(%rax),%rdi
    fd57:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
	_M_last = _M_first + difference_type(_S_buffer_size());
    fd5c:	48 8d 87 00 02 00 00 	lea    0x200(%rdi),%rax
    fd63:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
    fd68:	48 81 c7 fc 01 00 00 	add    $0x1fc,%rdi
    fd6f:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
                arity_stack.pop();
                arity_stack.push(e - 1);
    fd74:	41 ff ce             	dec    %r14d
    fd77:	44 89 b4 24 a8 00 00 	mov    %r14d,0xa8(%rsp)
    fd7e:	00 
	    != this->_M_impl._M_finish._M_last - 1)
    fd7f:	48 83 c0 fc          	add    $0xfffffffffffffffc,%rax
    fd83:	48 39 c7             	cmp    %rax,%rdi
	if (this->_M_impl._M_finish._M_cur
    fd86:	0f 84 13 01 00 00    	je     fe9f <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x62f>
    fd8c:	0f 1f 40 00          	nopl   0x0(%rax)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    fd90:	44 89 37             	mov    %r14d,(%rdi)
	    ++this->_M_impl._M_finish._M_cur;
    fd93:	48 83 c7 04          	add    $0x4,%rdi
    fd97:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
    fd9c:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
    fda1:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
	if (_M_cur == _M_first)
    fda6:	48 39 c7             	cmp    %rax,%rdi
    fda9:	74 15                	je     fdc0 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x550>
                while (arity_stack.top() == 0) {
    fdab:	83 7f fc 00          	cmpl   $0x0,-0x4(%rdi)
    fdaf:	0f 85 76 fd ff ff    	jne    fb2b <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x2bb>
    fdb5:	48 83 c7 fc          	add    $0xfffffffffffffffc,%rdi
    fdb9:	eb 4a                	jmp    fe05 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x595>
    fdbb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
    fdc0:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
	_M_first = *__new_node;
    fdc5:	48 8b 40 f8          	mov    -0x8(%rax),%rax
    fdc9:	83 b8 fc 01 00 00 00 	cmpl   $0x0,0x1fc(%rax)
    fdd0:	0f 85 55 fd ff ff    	jne    fb2b <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x2bb>
	::operator delete(__p
    fdd6:	e8 e5 78 00 00       	callq  176c0 <_ZdlPv@plt>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
    fddb:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
    fde0:	48 8d 48 f8          	lea    -0x8(%rax),%rcx
	_M_node = __new_node;
    fde4:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
	_M_first = *__new_node;
    fde9:	48 8b 40 f8          	mov    -0x8(%rax),%rax
    fded:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
	_M_last = _M_first + difference_type(_S_buffer_size());
    fdf2:	48 8d 88 00 02 00 00 	lea    0x200(%rax),%rcx
    fdf9:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
    fdfe:	48 8d b8 fc 01 00 00 	lea    0x1fc(%rax),%rdi
    fe05:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
      { return __x._M_cur == __y._M_cur; }
    fe0a:	48 3b 7c 24 40       	cmp    0x40(%rsp),%rdi
                    arity_stack.pop();
                    if (arity_stack.empty()) {
    fe0f:	0f 84 16 fd ff ff    	je     fb2b <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x2bb>
	if (_M_cur == _M_first)
    fe15:	48 39 c7             	cmp    %rax,%rdi
    fe18:	74 16                	je     fe30 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x5c0>
                        break;
                    }

                    e = arity_stack.top();
    fe1a:	44 8b 77 fc          	mov    -0x4(%rdi),%r14d
	--_M_cur;
    fe1e:	48 83 c7 fc          	add    $0xfffffffffffffffc,%rdi
	    != this->_M_impl._M_finish._M_last - 1)
    fe22:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
    fe27:	eb 49                	jmp    fe72 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x602>
    fe29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
    fe30:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
	_M_first = *__new_node;
    fe35:	48 8b 49 f8          	mov    -0x8(%rcx),%rcx
    fe39:	44 8b b1 fc 01 00 00 	mov    0x1fc(%rcx),%r14d
    fe40:	48 89 c7             	mov    %rax,%rdi
    fe43:	e8 78 78 00 00       	callq  176c0 <_ZdlPv@plt>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
    fe48:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
    fe4d:	48 8d 48 f8          	lea    -0x8(%rax),%rcx
	_M_node = __new_node;
    fe51:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
	_M_first = *__new_node;
    fe56:	48 8b 78 f8          	mov    -0x8(%rax),%rdi
    fe5a:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
	_M_last = _M_first + difference_type(_S_buffer_size());
    fe5f:	48 8d 87 00 02 00 00 	lea    0x200(%rdi),%rax
    fe66:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
    fe6b:	48 81 c7 fc 01 00 00 	add    $0x1fc,%rdi
    fe72:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
                    arity_stack.pop();
                    arity_stack.push(e - 1);
    fe77:	41 ff ce             	dec    %r14d
    fe7a:	44 89 b4 24 a8 00 00 	mov    %r14d,0xa8(%rsp)
    fe81:	00 
	    != this->_M_impl._M_finish._M_last - 1)
    fe82:	48 83 c0 fc          	add    $0xfffffffffffffffc,%rax
    fe86:	48 39 c7             	cmp    %rax,%rdi
	if (this->_M_impl._M_finish._M_cur
    fe89:	0f 85 01 ff ff ff    	jne    fd90 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x520>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
    fe8f:	48 89 ef             	mov    %rbp,%rdi
    fe92:	4c 89 e6             	mov    %r12,%rsi
    fe95:	e8 a6 3f 00 00       	callq  13e40 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJiEEEvDpOT_>
    fe9a:	e9 fd fe ff ff       	jmpq   fd9c <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x52c>
    fe9f:	48 89 ef             	mov    %rbp,%rdi
    fea2:	4c 89 e6             	mov    %r12,%rsi
    fea5:	e8 96 3f 00 00       	callq  13e40 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJiEEEvDpOT_>
    feaa:	e9 ed fe ff ff       	jmpq   fd9c <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x52c>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    feaf:	4c 8b 24 24          	mov    (%rsp),%r12
    feb3:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
    feb8:	4d 89 ee             	mov    %r13,%r14
    febb:	4d 29 e6             	sub    %r12,%r14
    febe:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
    fec5:	49 0f 49 fe          	cmovns %r14,%rdi
    fec9:	e8 92 77 00 00       	callq  17660 <_Znam@plt>
    fece:	49 89 c7             	mov    %rax,%r15
    fed1:	4d 39 e5             	cmp    %r12,%r13
    fed4:	74 1c                	je     fef2 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x682>
    fed6:	45 31 e4             	xor    %r12d,%r12d
    fed9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    fee0:	4b 8d 3c 27          	lea    (%r15,%r12,1),%rdi
    fee4:	e8 c7 6c 00 00       	callq  16bb0 <_ZN7genetic4nodeC1Ev>
    fee9:	49 83 c4 10          	add    $0x10,%r12
    feed:	4d 39 e6             	cmp    %r12,%r14
    fef0:	75 ee                	jne    fee0 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x670>
	const pointer __old_p = _M_ptr();
    fef2:	48 8b 3b             	mov    (%rbx),%rdi
	_M_ptr() = __p;
    fef5:	4c 89 3b             	mov    %r15,(%rbx)
	if (__old_p)
    fef8:	48 85 ff             	test   %rdi,%rdi
    fefb:	74 08                	je     ff05 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x695>
	  delete [] __ptr;
    fefd:	e8 0e 78 00 00       	callq  17710 <_ZdaPv@plt>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    ff02:	4c 8b 3b             	mov    (%rbx),%r15
      : _M_current(__i) { }
    ff05:	4c 8b 24 24          	mov    (%rsp),%r12
    ff09:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
	  for(_Distance __n = __last - __first; __n > 0; --__n)
    ff0e:	4c 29 e0             	sub    %r12,%rax
    ff11:	49 89 c6             	mov    %rax,%r14
    ff14:	49 c1 fe 04          	sar    $0x4,%r14
    ff18:	4d 85 f6             	test   %r14,%r14
    ff1b:	7e 2b                	jle    ff48 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x6d8>
    ff1d:	49 ff c6             	inc    %r14
	      *__result = *__first;
    ff20:	4c 89 ff             	mov    %r15,%rdi
    ff23:	4c 89 e6             	mov    %r12,%rsi
    ff26:	e8 e5 6e 00 00       	callq  16e10 <_ZN7genetic4nodeaSERKS0_>
	      ++__first;
    ff2b:	49 83 c4 10          	add    $0x10,%r12
	      ++__result;
    ff2f:	49 83 c7 10          	add    $0x10,%r15
	  for(_Distance __n = __last - __first; __n > 0; --__n)
    ff33:	49 ff ce             	dec    %r14
    ff36:	49 83 fe 01          	cmp    $0x1,%r14
    ff3a:	77 e4                	ja     ff20 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x6b0>
    ff3c:	4c 8b 24 24          	mov    (%rsp),%r12
    ff40:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    ff45:	4c 29 e0             	sub    %r12,%rax
    ff48:	48 c1 e8 04          	shr    $0x4,%rax
        // Set new program parameters - need to do a copy as
        // nodelist will be deleted using RAII semantics
        p_out.nodes = std::make_unique<node[]>(nodelist.size());
        std::copy(nodelist.begin(), nodelist.end(), p_out.nodes.get());

        p_out.len          = nodelist.size();
    ff4c:	89 43 08             	mov    %eax,0x8(%rbx)
    ff4f:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
    ff56:	00 
        p_out.metric       = params.metric;
    ff57:	8b 80 94 00 00 00    	mov    0x94(%rax),%eax
    ff5d:	89 43 14             	mov    %eax,0x14(%rbx)
        p_out.raw_fitness_ = 0.0f;
    ff60:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%rbx)
	if (__p)
    ff67:	4d 85 e4             	test   %r12,%r12
    ff6a:	74 08                	je     ff74 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x704>
    ff6c:	4c 89 e7             	mov    %r12,%rdi
    ff6f:	e8 4c 77 00 00       	callq  176c0 <_ZdlPv@plt>
      if (this->_M_impl._M_map)
    ff74:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
    ff79:	48 85 ff             	test   %rdi,%rdi
    ff7c:	74 3e                	je     ffbc <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x74c>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
    ff7e:	48 8b 5c 24 58       	mov    0x58(%rsp),%rbx
			   this->_M_impl._M_finish._M_node + 1);
    ff83:	4c 8b 74 24 78       	mov    0x78(%rsp),%r14
    ff88:	49 8d 46 08          	lea    0x8(%r14),%rax
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
    ff8c:	48 39 c3             	cmp    %rax,%rbx
    ff8f:	73 26                	jae    ffb7 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x747>
    ff91:	48 83 c3 f8          	add    $0xfffffffffffffff8,%rbx
    ff95:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    ff9c:	00 00 00 00 
	_M_deallocate_node(*__n);
    ffa0:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
    ffa4:	48 83 c3 08          	add    $0x8,%rbx
    ffa8:	e8 13 77 00 00       	callq  176c0 <_ZdlPv@plt>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
    ffad:	4c 39 f3             	cmp    %r14,%rbx
    ffb0:	72 ee                	jb     ffa0 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x730>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
    ffb2:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
    ffb7:	e8 04 77 00 00       	callq  176c0 <_ZdlPv@plt>
    }
    ffbc:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
    ffc3:	5b                   	pop    %rbx
    ffc4:	41 5c                	pop    %r12
    ffc6:	41 5d                	pop    %r13
    ffc8:	41 5e                	pop    %r14
    ffca:	41 5f                	pop    %r15
    ffcc:	5d                   	pop    %rbp
    ffcd:	c3                   	retq   
            throw std::invalid_argument("Range error: b must be >= a");
    ffce:	bf 10 00 00 00       	mov    $0x10,%edi
    ffd3:	e8 08 77 00 00       	callq  176e0 <__cxa_allocate_exception@plt>
    ffd8:	49 89 c6             	mov    %rax,%r14
    ffdb:	48 8d 35 3c 2c ff ff 	lea    -0xd3c4(%rip),%rsi        # 2c1e <_IO_stdin_used+0x52e>
    ffe2:	48 89 c7             	mov    %rax,%rdi
    ffe5:	e8 86 76 00 00       	callq  17670 <_ZNSt16invalid_argumentC1EPKc@plt>
    ffea:	48 8b 35 ef 8d 00 00 	mov    0x8def(%rip),%rsi        # 18de0 <_ZTISt16invalid_argument@GLIBCXX_3.4>
    fff1:	48 8b 15 b0 8d 00 00 	mov    0x8db0(%rip),%rdx        # 18da8 <_ZNSt16invalid_argumentD1Ev@GLIBCXX_3.4>
    fff8:	4c 89 f7             	mov    %r14,%rdi
    fffb:	e8 90 76 00 00       	callq  17690 <__cxa_throw@plt>
   10000:	bf 10 00 00 00       	mov    $0x10,%edi
   10005:	e8 d6 76 00 00       	callq  176e0 <__cxa_allocate_exception@plt>
   1000a:	49 89 c6             	mov    %rax,%r14
   1000d:	48 8d 35 0a 2c ff ff 	lea    -0xd3f6(%rip),%rsi        # 2c1e <_IO_stdin_used+0x52e>
   10014:	48 89 c7             	mov    %rax,%rdi
   10017:	e8 54 76 00 00       	callq  17670 <_ZNSt16invalid_argumentC1EPKc@plt>
   1001c:	48 8b 35 bd 8d 00 00 	mov    0x8dbd(%rip),%rsi        # 18de0 <_ZTISt16invalid_argument@GLIBCXX_3.4>
   10023:	48 8b 15 7e 8d 00 00 	mov    0x8d7e(%rip),%rdx        # 18da8 <_ZNSt16invalid_argumentD1Ev@GLIBCXX_3.4>
   1002a:	4c 89 f7             	mov    %r14,%rdi
   1002d:	e8 5e 76 00 00       	callq  17690 <__cxa_throw@plt>
   10032:	bf 10 00 00 00       	mov    $0x10,%edi
   10037:	e8 a4 76 00 00       	callq  176e0 <__cxa_allocate_exception@plt>
   1003c:	49 89 c6             	mov    %rax,%r14
   1003f:	48 8d 35 d8 2b ff ff 	lea    -0xd428(%rip),%rsi        # 2c1e <_IO_stdin_used+0x52e>
   10046:	48 89 c7             	mov    %rax,%rdi
   10049:	e8 22 76 00 00       	callq  17670 <_ZNSt16invalid_argumentC1EPKc@plt>
   1004e:	48 8b 35 8b 8d 00 00 	mov    0x8d8b(%rip),%rsi        # 18de0 <_ZTISt16invalid_argument@GLIBCXX_3.4>
   10055:	48 8b 15 4c 8d 00 00 	mov    0x8d4c(%rip),%rdx        # 18da8 <_ZNSt16invalid_argumentD1Ev@GLIBCXX_3.4>
   1005c:	4c 89 f7             	mov    %r14,%rdi
   1005f:	e8 2c 76 00 00       	callq  17690 <__cxa_throw@plt>
            throw std::invalid_argument("Range error: b must be > a");
   10064:	bf 10 00 00 00       	mov    $0x10,%edi
   10069:	e8 72 76 00 00       	callq  176e0 <__cxa_allocate_exception@plt>
   1006e:	49 89 c6             	mov    %rax,%r14
   10071:	48 8d 35 db 29 ff ff 	lea    -0xd625(%rip),%rsi        # 2a53 <_IO_stdin_used+0x363>
   10078:	48 89 c7             	mov    %rax,%rdi
   1007b:	e8 f0 75 00 00       	callq  17670 <_ZNSt16invalid_argumentC1EPKc@plt>
   10080:	48 8b 35 59 8d 00 00 	mov    0x8d59(%rip),%rsi        # 18de0 <_ZTISt16invalid_argument@GLIBCXX_3.4>
   10087:	48 8b 15 1a 8d 00 00 	mov    0x8d1a(%rip),%rdx        # 18da8 <_ZNSt16invalid_argumentD1Ev@GLIBCXX_3.4>
   1008e:	4c 89 f7             	mov    %r14,%rdi
   10091:	e8 fa 75 00 00       	callq  17690 <__cxa_throw@plt>
            throw std::invalid_argument("Probability must be in [0,1].");
   10096:	bf 10 00 00 00       	mov    $0x10,%edi
   1009b:	e8 40 76 00 00       	callq  176e0 <__cxa_allocate_exception@plt>
   100a0:	49 89 c6             	mov    %rax,%r14
   100a3:	48 8d 35 cb 27 ff ff 	lea    -0xd835(%rip),%rsi        # 2875 <_IO_stdin_used+0x185>
   100aa:	48 89 c7             	mov    %rax,%rdi
   100ad:	e8 be 75 00 00       	callq  17670 <_ZNSt16invalid_argumentC1EPKc@plt>
   100b2:	48 8b 35 27 8d 00 00 	mov    0x8d27(%rip),%rsi        # 18de0 <_ZTISt16invalid_argument@GLIBCXX_3.4>
   100b9:	48 8b 15 e8 8c 00 00 	mov    0x8ce8(%rip),%rdx        # 18da8 <_ZNSt16invalid_argumentD1Ev@GLIBCXX_3.4>
   100c0:	4c 89 f7             	mov    %r14,%rdi
   100c3:	e8 c8 75 00 00       	callq  17690 <__cxa_throw@plt>
   100c8:	eb 4e                	jmp    10118 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x8a8>
   100ca:	eb 4c                	jmp    10118 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x8a8>
   100cc:	eb 0e                	jmp    100dc <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x86c>
   100ce:	eb 48                	jmp    10118 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x8a8>
   100d0:	eb 0a                	jmp    100dc <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x86c>
   100d2:	eb 44                	jmp    10118 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x8a8>
   100d4:	eb 06                	jmp    100dc <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x86c>
   100d6:	eb 40                	jmp    10118 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x8a8>
   100d8:	eb 02                	jmp    100dc <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x86c>
   100da:	eb 3c                	jmp    10118 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x8a8>
   100dc:	48 89 c3             	mov    %rax,%rbx
   100df:	4c 89 f7             	mov    %r14,%rdi
   100e2:	e8 09 77 00 00       	callq  177f0 <__cxa_free_exception@plt>
   100e7:	eb 32                	jmp    1011b <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x8ab>
   100e9:	eb 2d                	jmp    10118 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x8a8>
   100eb:	eb 2b                	jmp    10118 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x8a8>
   100ed:	eb 29                	jmp    10118 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x8a8>
   100ef:	eb 27                	jmp    10118 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x8a8>
   100f1:	eb 25                	jmp    10118 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x8a8>
   100f3:	eb 23                	jmp    10118 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x8a8>
   100f5:	eb 21                	jmp    10118 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x8a8>
   100f7:	eb 1f                	jmp    10118 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x8a8>
   100f9:	eb 1d                	jmp    10118 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x8a8>
   100fb:	eb 1b                	jmp    10118 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x8a8>
   100fd:	eb 19                	jmp    10118 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x8a8>
   100ff:	eb 17                	jmp    10118 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x8a8>
   10101:	48 89 c3             	mov    %rax,%rbx
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
   10104:	4c 89 ff             	mov    %r15,%rdi
   10107:	e8 04 76 00 00       	callq  17710 <_ZdaPv@plt>
   1010c:	eb 0d                	jmp    1011b <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x8ab>
   1010e:	eb 08                	jmp    10118 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x8a8>
   10110:	eb 06                	jmp    10118 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x8a8>
   10112:	eb 04                	jmp    10118 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x8a8>
   10114:	eb 02                	jmp    10118 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x8a8>
   10116:	eb 00                	jmp    10118 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x8a8>
   10118:	48 89 c3             	mov    %rax,%rbx
	_M_deallocate(_M_impl._M_start,
   1011b:	48 8b 3c 24          	mov    (%rsp),%rdi
	if (__p)
   1011f:	48 85 ff             	test   %rdi,%rdi
   10122:	74 05                	je     10129 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine+0x8b9>
   10124:	e8 97 75 00 00       	callq  176c0 <_ZdlPv@plt>
   10129:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
   1012e:	e8 4d 3b 00 00       	callq  13c80 <_ZNSt5stackIiSt5dequeIiSaIiEEED2Ev>
   10133:	48 89 df             	mov    %rbx,%rdi
   10136:	e8 35 78 00 00       	callq  17970 <_Unwind_Resume@plt>
   1013b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000010140 <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine>:

    void point_mutation(const program& prog, program& p_out, const param& params,
                        PhiloxEngine& rng) {
   10140:	55                   	push   %rbp
   10141:	41 57                	push   %r15
   10143:	41 56                	push   %r14
   10145:	41 55                	push   %r13
   10147:	41 54                	push   %r12
   10149:	53                   	push   %rbx
   1014a:	48 83 ec 58          	sub    $0x58,%rsp
   1014e:	49 89 d6             	mov    %rdx,%r14
   10151:	48 89 f8             	mov    %rdi,%rax
   10154:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        // deep-copy program
        p_out = prog;
   10159:	48 89 f7             	mov    %rsi,%rdi
   1015c:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
   10161:	48 89 c6             	mov    %rax,%rsi
   10164:	e8 d7 dc ff ff       	callq  de40 <_ZN7genetic7programaSERKS0_>

        // Specify RNGs
        uniform_real_distribution_custom<float> dist_uniform(0.0f, 1.0f);
        uniform_int_distribution_custom<int>    dist_terminalChoice(0, params.num_features);
   10169:	41 8b 86 d0 00 00 00 	mov    0xd0(%r14),%eax
   10170:	89 44 24 10          	mov    %eax,0x10(%rsp)
        if (b < a) {
   10174:	85 c0                	test   %eax,%eax
   10176:	0f 88 13 03 00 00    	js     1048f <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x34f>
        uniform_real_distribution_custom<float> dist_constantVal(params.const_range[0],
   1017c:	f3 41 0f 10 46 18    	movss  0x18(%r14),%xmm0
                                                                 params.const_range[1]);
   10182:	f3 41 0f 10 4e 1c    	movss  0x1c(%r14),%xmm1
   10188:	f3 0f 11 44 24 14    	movss  %xmm0,0x14(%rsp)
   1018e:	f3 0f 11 4c 24 08    	movss  %xmm1,0x8(%rsp)
        if (b <= a) {
   10194:	0f 2e c1             	ucomiss %xmm1,%xmm0
   10197:	0f 83 10 03 00 00    	jae    104ad <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x36d>
   1019d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax

        // Fill with uniform numbers
        std::vector<float> node_probs(p_out.len);
   101a2:	4c 63 60 08          	movslq 0x8(%rax),%r12
   101a6:	4d 85 e4             	test   %r12,%r12
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   101a9:	0f 88 30 03 00 00    	js     104df <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x39f>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   101af:	45 85 e4             	test   %r12d,%r12d
   101b2:	0f 84 8a 02 00 00    	je     10442 <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x302>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   101b8:	4a 8d 1c a5 00 00 00 	lea    0x0(,%r12,4),%rbx
   101bf:	00 
   101c0:	48 89 df             	mov    %rbx,%rdi
   101c3:	e8 98 75 00 00       	callq  17760 <_Znwm@plt>
   101c8:	49 89 c5             	mov    %rax,%r13
   101cb:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   101d1:	4c 8d 78 04          	lea    0x4(%rax),%r15
      if (__n <= 0)
   101d5:	41 83 fc 01          	cmp    $0x1,%r12d
   101d9:	74 1f                	je     101fa <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0xba>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   101db:	4e 8d 24 a5 00 00 00 	lea    0x0(,%r12,4),%r12
   101e2:	00 
   101e3:	4d 01 ec             	add    %r13,%r12
      for (; __first != __last; ++__first)
   101e6:	48 83 c3 fc          	add    $0xfffffffffffffffc,%rbx
	*__first = __tmp;
   101ea:	4c 89 ff             	mov    %r15,%rdi
   101ed:	31 f6                	xor    %esi,%esi
   101ef:	48 89 da             	mov    %rbx,%rdx
   101f2:	e8 99 77 00 00       	callq  17990 <memset@plt>
   101f7:	4d 89 e7             	mov    %r12,%r15
   101fa:	4c 89 2c 24          	mov    %r13,(%rsp)
   101fe:	66 90                	xchg   %ax,%ax
   10200:	e8 eb 67 00 00       	callq  169f0 <philox_random_uint32>
        double u = x * (1.0 / (static_cast<double>(std::numeric_limits<uint32_t>::max()) + 1.0));
   10205:	89 c0                	mov    %eax,%eax
   10207:	0f 57 c0             	xorps  %xmm0,%xmm0
   1020a:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
   1020f:	f2 0f 59 05 91 2c ff 	mulsd  -0xd36f(%rip),%xmm0        # 2ea8 <_IO_stdin_used+0x7b8>
   10216:	ff 
        return a_ + static_cast<result_type>((b_ - a_) * u);
   10217:	f2 0f 5a c0          	cvtsd2ss %xmm0,%xmm0
   1021b:	f3 0f 58 05 b1 24 ff 	addss  -0xdb4f(%rip),%xmm0        # 26d4 <_IO_stdin_used-0x1c>
   10222:	ff 
      __glibcxx_function_requires(_GeneratorConcept<_Generator,
	    typename iterator_traits<_ForwardIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      for (; __first != __last; ++__first)
	*__first = __gen();
   10223:	f3 41 0f 11 45 00    	movss  %xmm0,0x0(%r13)
	++_M_current;
   10229:	49 83 c5 04          	add    $0x4,%r13
    { return __lhs.base() != __rhs.base(); }
   1022d:	4d 39 fd             	cmp    %r15,%r13
      for (; __first != __last; ++__first)
   10230:	75 ce                	jne    10200 <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0xc0>
   10232:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        std::generate(node_probs.begin(), node_probs.end(),
                      [&dist_uniform, &rng] { return dist_uniform(rng); });

        // Mutate nodes
        int len = p_out.len;
   10237:	8b 40 08             	mov    0x8(%rax),%eax
   1023a:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
        for (int i = 0; i < len; ++i) {
   1023f:	85 c0                	test   %eax,%eax
   10241:	48 8b 1c 24          	mov    (%rsp),%rbx
   10245:	0f 8e ef 01 00 00    	jle    1043a <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x2fa>
   1024b:	ff 44 24 10          	incl   0x10(%rsp)
   1024f:	f3 0f 10 44 24 08    	movss  0x8(%rsp),%xmm0
   10255:	f3 0f 5c 44 24 14    	subss  0x14(%rsp),%xmm0
   1025b:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
   1025f:	f2 0f 11 44 24 20    	movsd  %xmm0,0x20(%rsp)
   10265:	4c 8d 6c 24 48       	lea    0x48(%rsp),%r13
   1026a:	45 31 ff             	xor    %r15d,%r15d
   1026d:	eb 2f                	jmp    1029e <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x15e>
   1026f:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
	::operator delete(__p
   10274:	e8 47 74 00 00       	callq  176c0 <_ZdlPv@plt>
   10279:	48 8b 1c 24          	mov    (%rsp),%rbx
   1027d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
	return get()[__i];
   10282:	48 03 28             	add    (%rax),%rbp
                    int                                  choice = dist_fset(rng);
                    curr                                        = node(fset[choice]);
                }

                // Update p_out with updated value
                p_out.nodes[i] = curr;
   10285:	48 89 ef             	mov    %rbp,%rdi
   10288:	4c 89 ee             	mov    %r13,%rsi
   1028b:	e8 80 6b 00 00       	callq  16e10 <_ZN7genetic4nodeaSERKS0_>
        for (int i = 0; i < len; ++i) {
   10290:	49 ff c7             	inc    %r15
   10293:	4c 3b 7c 24 28       	cmp    0x28(%rsp),%r15
   10298:	0f 84 9c 01 00 00    	je     1043a <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x2fa>
   1029e:	4c 89 fd             	mov    %r15,%rbp
   102a1:	48 c1 e5 04          	shl    $0x4,%rbp
   102a5:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
   102aa:	48 8b 30             	mov    (%rax),%rsi
   102ad:	48 01 ee             	add    %rbp,%rsi
            node curr(prog.nodes[i]);
   102b0:	4c 89 ef             	mov    %r13,%rdi
   102b3:	e8 18 6b 00 00       	callq  16dd0 <_ZN7genetic4nodeC1ERKS0_>
            if (node_probs[i] < params.p_point_replace) {
   102b8:	f3 41 0f 10 86 ac 00 	movss  0xac(%r14),%xmm0
   102bf:	00 00 
   102c1:	42 0f 2e 04 bb       	ucomiss (%rbx,%r15,4),%xmm0
   102c6:	76 c8                	jbe    10290 <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x150>
                if (curr.is_terminal()) {
   102c8:	4c 89 ef             	mov    %r13,%rdi
   102cb:	e8 80 6b 00 00       	callq  16e50 <_ZNK7genetic4node11is_terminalEv>
   102d0:	84 c0                	test   %al,%al
   102d2:	0f 84 88 00 00 00    	je     10360 <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x220>
            std::numeric_limits<uint32_t>::max() - (std::numeric_limits<uint32_t>::max() % range);
   102d8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   102dd:	31 d2                	xor    %edx,%edx
   102df:	f7 74 24 10          	divl   0x10(%rsp)
   102e3:	89 d3                	mov    %edx,%ebx
   102e5:	f7 d3                	not    %ebx
   102e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   102ee:	00 00 
   102f0:	e8 fb 66 00 00       	callq  169f0 <philox_random_uint32>
        } while (x >= limit);
   102f5:	39 d8                	cmp    %ebx,%eax
   102f7:	73 f7                	jae    102f0 <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x1b0>
        return a_ + static_cast<result_type>(x % range);
   102f9:	31 d2                	xor    %edx,%edx
   102fb:	f7 74 24 10          	divl   0x10(%rsp)
                    if (choice == params.num_features) {
   102ff:	41 3b 96 d0 00 00 00 	cmp    0xd0(%r14),%edx
   10306:	0f 85 0b 01 00 00    	jne    10417 <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x2d7>
   1030c:	48 8b 1c 24          	mov    (%rsp),%rbx
   10310:	e8 db 66 00 00       	callq  169f0 <philox_random_uint32>
        double u = x * (1.0 / (static_cast<double>(std::numeric_limits<uint32_t>::max()) + 1.0));
   10315:	89 c0                	mov    %eax,%eax
   10317:	0f 57 c0             	xorps  %xmm0,%xmm0
   1031a:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
   1031f:	f2 0f 59 05 81 2b ff 	mulsd  -0xd47f(%rip),%xmm0        # 2ea8 <_IO_stdin_used+0x7b8>
   10326:	ff 
        return a_ + static_cast<result_type>((b_ - a_) * u);
   10327:	f2 0f 59 44 24 20    	mulsd  0x20(%rsp),%xmm0
   1032d:	f2 0f 5a c0          	cvtsd2ss %xmm0,%xmm0
   10331:	f3 0f 58 44 24 14    	addss  0x14(%rsp),%xmm0
                        curr = node(dist_constantVal(rng));
   10337:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
   1033c:	e8 6f 6a 00 00       	callq  16db0 <_ZN7genetic4nodeC1Ef>
   10341:	4c 89 ef             	mov    %r13,%rdi
   10344:	48 8d 74 24 38       	lea    0x38(%rsp),%rsi
   10349:	e8 c2 6a 00 00       	callq  16e10 <_ZN7genetic4nodeaSERKS0_>
   1034e:	e9 2a ff ff ff       	jmpq   1027d <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x13d>
   10353:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   1035a:	84 00 00 00 00 00 
                } else if (curr.is_nonterminal()) {
   10360:	4c 89 ef             	mov    %r13,%rdi
   10363:	e8 18 6a 00 00       	callq  16d80 <_ZNK7genetic4node14is_nonterminalEv>
   10368:	84 c0                	test   %al,%al
   1036a:	0f 84 0d ff ff ff    	je     1027d <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x13d>
                    int ar = curr.arity();
   10370:	4c 89 ef             	mov    %r13,%rdi
   10373:	e8 e8 6a 00 00       	callq  16e60 <_ZNK7genetic4node5arityEv>
                    std::vector<node::type>              fset = params.arity_set[ar];
   10378:	48 98                	cltq   
   1037a:	48 8d 1c 40          	lea    (%rax,%rax,2),%rbx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1037e:	49 8b 7c de 50       	mov    0x50(%r14,%rbx,8),%rdi
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   10383:	49 2b 7c de 48       	sub    0x48(%r14,%rbx,8),%rdi
   10388:	0f 84 c8 00 00 00    	je     10456 <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x316>
	if (__n > this->_M_max_size())
   1038e:	0f 88 bd 00 00 00    	js     10451 <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x311>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   10394:	e8 c7 73 00 00       	callq  17760 <_Znwm@plt>
   10399:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
   1039e:	49 8d 04 de          	lea    (%r14,%rbx,8),%rax
   103a2:	48 83 c0 48          	add    $0x48,%rax
      : _M_current(__i) { }
   103a6:	48 8b 30             	mov    (%rax),%rsi
   103a9:	48 8b 58 08          	mov    0x8(%rax),%rbx
	  if (_Num)
   103ad:	48 29 f3             	sub    %rsi,%rbx
   103b0:	74 0d                	je     103bf <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x27f>
   103b2:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   103b7:	48 89 da             	mov    %rbx,%rdx
   103ba:	e8 a1 75 00 00       	callq  17960 <memmove@plt>
        if (b < a) {
   103bf:	89 d8                	mov    %ebx,%eax
   103c1:	ff c8                	dec    %eax
   103c3:	0f 88 94 00 00 00    	js     1045d <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x31d>
            std::numeric_limits<uint32_t>::max() - (std::numeric_limits<uint32_t>::max() % range);
   103c9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   103ce:	31 d2                	xor    %edx,%edx
   103d0:	f7 f3                	div    %ebx
   103d2:	41 89 d4             	mov    %edx,%r12d
   103d5:	41 f7 d4             	not    %r12d
   103d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   103df:	00 
   103e0:	e8 0b 66 00 00       	callq  169f0 <philox_random_uint32>
        } while (x >= limit);
   103e5:	44 39 e0             	cmp    %r12d,%eax
   103e8:	73 f6                	jae    103e0 <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x2a0>
        return a_ + static_cast<result_type>(x % range);
   103ea:	31 d2                	xor    %edx,%edx
   103ec:	f7 f3                	div    %ebx
                    curr                                        = node(fset[choice]);
   103ee:	48 63 c2             	movslq %edx,%rax
   103f1:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
   103f6:	0f b6 34 01          	movzbl (%rcx,%rax,1),%esi
   103fa:	48 8d 5c 24 38       	lea    0x38(%rsp),%rbx
   103ff:	48 89 df             	mov    %rbx,%rdi
   10402:	e8 b9 67 00 00       	callq  16bc0 <_ZN7genetic4nodeC1ENS0_4typeE>
   10407:	4c 89 ef             	mov    %r13,%rdi
   1040a:	48 89 de             	mov    %rbx,%rsi
   1040d:	e8 fe 69 00 00       	callq  16e10 <_ZN7genetic4nodeaSERKS0_>
   10412:	e9 58 fe ff ff       	jmpq   1026f <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x12f>
   10417:	4c 8d 64 24 38       	lea    0x38(%rsp),%r12
                        curr = node(choice);
   1041c:	4c 89 e7             	mov    %r12,%rdi
   1041f:	89 d6                	mov    %edx,%esi
   10421:	48 8b 1c 24          	mov    (%rsp),%rbx
   10425:	e8 66 69 00 00       	callq  16d90 <_ZN7genetic4nodeC1Ei>
   1042a:	4c 89 ef             	mov    %r13,%rdi
   1042d:	4c 89 e6             	mov    %r12,%rsi
   10430:	e8 db 69 00 00       	callq  16e10 <_ZN7genetic4nodeaSERKS0_>
   10435:	e9 43 fe ff ff       	jmpq   1027d <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x13d>
	::operator delete(__p
   1043a:	48 89 df             	mov    %rbx,%rdi
   1043d:	e8 7e 72 00 00       	callq  176c0 <_ZdlPv@plt>
            }
        }
    }
   10442:	48 83 c4 58          	add    $0x58,%rsp
   10446:	5b                   	pop    %rbx
   10447:	41 5c                	pop    %r12
   10449:	41 5d                	pop    %r13
   1044b:	41 5e                	pop    %r14
   1044d:	41 5f                	pop    %r15
   1044f:	5d                   	pop    %rbp
   10450:	c3                   	retq   
	  std::__throw_bad_alloc();
   10451:	e8 4a 72 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
   10456:	31 c0                	xor    %eax,%eax
   10458:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
            throw std::invalid_argument("Range error: b must be >= a");
   1045d:	bf 10 00 00 00       	mov    $0x10,%edi
   10462:	e8 79 72 00 00       	callq  176e0 <__cxa_allocate_exception@plt>
   10467:	48 89 c3             	mov    %rax,%rbx
   1046a:	48 8d 35 ad 27 ff ff 	lea    -0xd853(%rip),%rsi        # 2c1e <_IO_stdin_used+0x52e>
   10471:	48 89 c7             	mov    %rax,%rdi
   10474:	e8 f7 71 00 00       	callq  17670 <_ZNSt16invalid_argumentC1EPKc@plt>
   10479:	48 8b 35 60 89 00 00 	mov    0x8960(%rip),%rsi        # 18de0 <_ZTISt16invalid_argument@GLIBCXX_3.4>
   10480:	48 8b 15 21 89 00 00 	mov    0x8921(%rip),%rdx        # 18da8 <_ZNSt16invalid_argumentD1Ev@GLIBCXX_3.4>
   10487:	48 89 df             	mov    %rbx,%rdi
   1048a:	e8 01 72 00 00       	callq  17690 <__cxa_throw@plt>
   1048f:	bf 10 00 00 00       	mov    $0x10,%edi
   10494:	e8 47 72 00 00       	callq  176e0 <__cxa_allocate_exception@plt>
   10499:	48 89 c3             	mov    %rax,%rbx
   1049c:	48 8d 35 7b 27 ff ff 	lea    -0xd885(%rip),%rsi        # 2c1e <_IO_stdin_used+0x52e>
   104a3:	48 89 c7             	mov    %rax,%rdi
   104a6:	e8 c5 71 00 00       	callq  17670 <_ZNSt16invalid_argumentC1EPKc@plt>
   104ab:	eb 1c                	jmp    104c9 <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x389>
            throw std::invalid_argument("Range error: b must be > a");
   104ad:	bf 10 00 00 00       	mov    $0x10,%edi
   104b2:	e8 29 72 00 00       	callq  176e0 <__cxa_allocate_exception@plt>
   104b7:	48 89 c3             	mov    %rax,%rbx
   104ba:	48 8d 35 92 25 ff ff 	lea    -0xda6e(%rip),%rsi        # 2a53 <_IO_stdin_used+0x363>
   104c1:	48 89 c7             	mov    %rax,%rdi
   104c4:	e8 a7 71 00 00       	callq  17670 <_ZNSt16invalid_argumentC1EPKc@plt>
   104c9:	48 8b 35 10 89 00 00 	mov    0x8910(%rip),%rsi        # 18de0 <_ZTISt16invalid_argument@GLIBCXX_3.4>
   104d0:	48 8b 15 d1 88 00 00 	mov    0x88d1(%rip),%rdx        # 18da8 <_ZNSt16invalid_argumentD1Ev@GLIBCXX_3.4>
   104d7:	48 89 df             	mov    %rbx,%rdi
   104da:	e8 b1 71 00 00       	callq  17690 <__cxa_throw@plt>
	  __throw_length_error(
   104df:	48 8d 3d dd 28 ff ff 	lea    -0xd723(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
   104e6:	e8 85 70 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
   104eb:	eb 00                	jmp    104ed <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x3ad>
   104ed:	49 89 c6             	mov    %rax,%r14
   104f0:	48 89 df             	mov    %rbx,%rdi
   104f3:	e8 f8 72 00 00       	callq  177f0 <__cxa_free_exception@plt>
   104f8:	4c 89 f7             	mov    %r14,%rdi
   104fb:	e8 70 74 00 00       	callq  17970 <_Unwind_Resume@plt>
   10500:	49 89 c6             	mov    %rax,%r14
   10503:	eb 0b                	jmp    10510 <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x3d0>
   10505:	49 89 c6             	mov    %rax,%r14
            throw std::invalid_argument("Range error: b must be >= a");
   10508:	48 89 df             	mov    %rbx,%rdi
   1050b:	e8 e0 72 00 00       	callq  177f0 <__cxa_free_exception@plt>
	if (__p)
   10510:	48 83 7c 24 08 00    	cmpq   $0x0,0x8(%rsp)
   10516:	48 8b 1c 24          	mov    (%rsp),%rbx
   1051a:	75 1c                	jne    10538 <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x3f8>
   1051c:	eb 2d                	jmp    1054b <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x40b>
   1051e:	eb 24                	jmp    10544 <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x404>
   10520:	eb 22                	jmp    10544 <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x404>
   10522:	eb 20                	jmp    10544 <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x404>
   10524:	eb 0b                	jmp    10531 <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x3f1>
   10526:	eb 04                	jmp    1052c <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x3ec>
   10528:	eb 02                	jmp    1052c <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x3ec>
   1052a:	eb 18                	jmp    10544 <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x404>
   1052c:	49 89 c6             	mov    %rax,%r14
   1052f:	eb 1a                	jmp    1054b <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x40b>
   10531:	49 89 c6             	mov    %rax,%r14
   10534:	48 8b 1c 24          	mov    (%rsp),%rbx
   10538:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
	::operator delete(__p
   1053d:	e8 7e 71 00 00       	callq  176c0 <_ZdlPv@plt>
   10542:	eb 07                	jmp    1054b <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x40b>
   10544:	49 89 c6             	mov    %rax,%r14
   10547:	48 8b 1c 24          	mov    (%rsp),%rbx
   1054b:	48 89 df             	mov    %rbx,%rdi
   1054e:	e8 6d 71 00 00       	callq  176c0 <_ZdlPv@plt>
   10553:	4c 89 f7             	mov    %r14,%rdi
   10556:	e8 15 74 00 00       	callq  17970 <_Unwind_Resume@plt>
   1055b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000010560 <_ZN7genetic9crossoverERKNS_7programES2_RS0_RKNS_5paramER12PhiloxEngine>:

    void crossover(const program& prog, const program& donor, program& p_out,
                   [[maybe_unused]] const param& params, PhiloxEngine& rng) {
   10560:	55                   	push   %rbp
   10561:	41 57                	push   %r15
   10563:	41 56                	push   %r14
   10565:	41 55                	push   %r13
   10567:	41 54                	push   %r12
   10569:	53                   	push   %rbx
   1056a:	48 83 ec 48          	sub    $0x48,%rsp
   1056e:	48 89 d3             	mov    %rdx,%rbx
   10571:	49 89 f6             	mov    %rsi,%r14
   10574:	49 89 ff             	mov    %rdi,%r15
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   10577:	48 8b 3f             	mov    (%rdi),%rdi
        // Get a random subtree of prog to replace
        std::pair<int, int> prog_slice = get_subtree(prog.nodes.get(), prog.len, rng);
   1057a:	41 8b 77 08          	mov    0x8(%r15),%esi
   1057e:	e8 9d ec ff ff       	callq  f220 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine>
   10583:	48 89 c1             	mov    %rax,%rcx
   10586:	48 c1 e9 20          	shr    $0x20,%rcx
   1058a:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
   1058f:	4c 89 7c 24 10       	mov    %r15,0x10(%rsp)
        int                 prog_start = prog_slice.first;
        int                 prog_end   = prog_slice.second;

        // Set metric of output program
        p_out.metric = prog.metric;
   10594:	41 8b 4f 14          	mov    0x14(%r15),%ecx
   10598:	89 4b 14             	mov    %ecx,0x14(%rbx)
   1059b:	4c 89 74 24 20       	mov    %r14,0x20(%rsp)

        // MAX_STACK_SIZE can only handle tree of depth MAX_STACK_SIZE -
        // max(func_arity=2) + 1 Thus we continuously hoist the donor subtree. Actual
        // indices in donor
        int donor_start  = 0;
        int donor_end    = donor.len;
   105a0:	45 8b 6e 08          	mov    0x8(%r14),%r13d
   105a4:	48 63 c8             	movslq %eax,%rcx
   105a7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
   105ac:	48 c1 f8 20          	sar    $0x20,%rax
   105b0:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
        int output_depth = 0;
        do {
   105b5:	48 ff c1             	inc    %rcx
   105b8:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
   105bd:	31 c9                	xor    %ecx,%ecx
   105bf:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
   105c4:	48 c1 e0 04          	shl    $0x4,%rax
   105c8:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
   105cd:	eb 12                	jmp    105e1 <_ZN7genetic9crossoverERKNS_7programES2_RS0_RKNS_5paramER12PhiloxEngine+0x81>
   105cf:	90                   	nop
            std::copy(donor.nodes.get() + donor_start, donor.nodes.get() + donor_end,
                      p_out.nodes.get() + prog_start);
            std::copy(prog.nodes.get() + prog_end, prog.nodes.get() + prog.len,
                      p_out.nodes.get() + (prog_start) + (donor_end - donor_start));

            output_depth = get_depth(p_out);
   105d0:	48 89 df             	mov    %rbx,%rdi
   105d3:	e8 48 ef ff ff       	callq  f520 <_ZN7genetic9get_depthERKNS_7programE>
        } while (output_depth >= MAX_STACK_SIZE);
   105d8:	83 f8 13             	cmp    $0x13,%eax
   105db:	0f 8e b0 01 00 00    	jle    10791 <_ZN7genetic9crossoverERKNS_7programES2_RS0_RKNS_5paramER12PhiloxEngine+0x231>
                get_subtree(donor.nodes.get() + donor_start, donor_end - donor_start, rng);
   105e1:	4c 63 74 24 18       	movslq 0x18(%rsp),%r14
   105e6:	4c 89 f7             	mov    %r14,%rdi
   105e9:	48 c1 e7 04          	shl    $0x4,%rdi
   105ed:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   105f2:	48 03 38             	add    (%rax),%rdi
   105f5:	45 29 f5             	sub    %r14d,%r13d
   105f8:	44 89 ee             	mov    %r13d,%esi
   105fb:	e8 20 ec ff ff       	callq  f220 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine>
   10600:	49 89 c5             	mov    %rax,%r13
            donor_substart += donor_start;
   10603:	42 8d 0c 30          	lea    (%rax,%r14,1),%ecx
                get_subtree(donor.nodes.get() + donor_start, donor_end - donor_start, rng);
   10607:	49 c1 ed 20          	shr    $0x20,%r13
            donor_subend += donor_start;
   1060b:	45 01 f5             	add    %r14d,%r13d
            p_out.len = (prog_start) + (donor_end - donor_start) + (prog.len - prog_end);
   1060e:	45 89 ef             	mov    %r13d,%r15d
   10611:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
   10616:	41 29 cf             	sub    %ecx,%r15d
   10619:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
   1061e:	8b 40 08             	mov    0x8(%rax),%eax
   10621:	2b 44 24 38          	sub    0x38(%rsp),%eax
   10625:	03 44 24 40          	add    0x40(%rsp),%eax
   10629:	44 01 f8             	add    %r15d,%eax
   1062c:	89 43 08             	mov    %eax,0x8(%rbx)
            p_out.nodes = std::make_unique<node[]>(p_out.len);
   1062f:	4c 63 e0             	movslq %eax,%r12
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
   10632:	4d 89 e6             	mov    %r12,%r14
   10635:	49 c1 e6 04          	shl    $0x4,%r14
   10639:	45 85 e4             	test   %r12d,%r12d
   1063c:	4c 89 f7             	mov    %r14,%rdi
   1063f:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
   10646:	48 0f 48 f8          	cmovs  %rax,%rdi
   1064a:	e8 11 70 00 00       	callq  17660 <_Znam@plt>
   1064f:	48 89 c5             	mov    %rax,%rbp
   10652:	45 85 e4             	test   %r12d,%r12d
   10655:	74 1b                	je     10672 <_ZN7genetic9crossoverERKNS_7programES2_RS0_RKNS_5paramER12PhiloxEngine+0x112>
   10657:	45 31 e4             	xor    %r12d,%r12d
   1065a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   10660:	49 8d 3c 2c          	lea    (%r12,%rbp,1),%rdi
   10664:	e8 47 65 00 00       	callq  16bb0 <_ZN7genetic4nodeC1Ev>
   10669:	49 83 c4 10          	add    $0x10,%r12
   1066d:	4d 39 e6             	cmp    %r12,%r14
   10670:	75 ee                	jne    10660 <_ZN7genetic9crossoverERKNS_7programES2_RS0_RKNS_5paramER12PhiloxEngine+0x100>
	const pointer __old_p = _M_ptr();
   10672:	48 8b 3b             	mov    (%rbx),%rdi
	_M_ptr() = __p;
   10675:	48 89 2b             	mov    %rbp,(%rbx)
	if (__old_p)
   10678:	48 85 ff             	test   %rdi,%rdi
   1067b:	74 08                	je     10685 <_ZN7genetic9crossoverERKNS_7programES2_RS0_RKNS_5paramER12PhiloxEngine+0x125>
	  delete [] __ptr;
   1067d:	e8 8e 70 00 00       	callq  17710 <_ZdaPv@plt>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   10682:	48 8b 2b             	mov    (%rbx),%rbp
   10685:	48 83 7c 24 08 00    	cmpq   $0x0,0x8(%rsp)
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   1068b:	7e 32                	jle    106bf <_ZN7genetic9crossoverERKNS_7programES2_RS0_RKNS_5paramER12PhiloxEngine+0x15f>
   1068d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
   10692:	4c 8b 20             	mov    (%rax),%r12
   10695:	4c 8b 74 24 28       	mov    0x28(%rsp),%r14
   1069a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	      *__result = *__first;
   106a0:	48 89 ef             	mov    %rbp,%rdi
   106a3:	4c 89 e6             	mov    %r12,%rsi
   106a6:	e8 65 67 00 00       	callq  16e10 <_ZN7genetic4nodeaSERKS0_>
	      ++__first;
   106ab:	49 83 c4 10          	add    $0x10,%r12
	      ++__result;
   106af:	48 83 c5 10          	add    $0x10,%rbp
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   106b3:	49 ff ce             	dec    %r14
   106b6:	49 83 fe 01          	cmp    $0x1,%r14
   106ba:	77 e4                	ja     106a0 <_ZN7genetic9crossoverERKNS_7programES2_RS0_RKNS_5paramER12PhiloxEngine+0x140>
   106bc:	48 8b 2b             	mov    (%rbx),%rbp
   106bf:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   106c4:	48 8b 00             	mov    (%rax),%rax
            std::copy(donor.nodes.get() + donor_start, donor.nodes.get() + donor_end,
   106c7:	4c 63 64 24 18       	movslq 0x18(%rsp),%r12
   106cc:	49 c1 e4 04          	shl    $0x4,%r12
   106d0:	49 01 c4             	add    %rax,%r12
   106d3:	4d 63 f5             	movslq %r13d,%r14
   106d6:	49 c1 e6 04          	shl    $0x4,%r14
   106da:	49 01 c6             	add    %rax,%r14
   106dd:	4d 29 e6             	sub    %r12,%r14
   106e0:	49 c1 fe 04          	sar    $0x4,%r14
   106e4:	4d 85 f6             	test   %r14,%r14
   106e7:	7e 36                	jle    1071f <_ZN7genetic9crossoverERKNS_7programES2_RS0_RKNS_5paramER12PhiloxEngine+0x1bf>
   106e9:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
                      p_out.nodes.get() + prog_start);
   106ee:	48 c1 e0 04          	shl    $0x4,%rax
   106f2:	48 01 c5             	add    %rax,%rbp
   106f5:	49 ff c6             	inc    %r14
   106f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   106ff:	00 
	      *__result = *__first;
   10700:	48 89 ef             	mov    %rbp,%rdi
   10703:	4c 89 e6             	mov    %r12,%rsi
   10706:	e8 05 67 00 00       	callq  16e10 <_ZN7genetic4nodeaSERKS0_>
	      ++__first;
   1070b:	49 83 c4 10          	add    $0x10,%r12
	      ++__result;
   1070f:	48 83 c5 10          	add    $0x10,%rbp
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   10713:	49 ff ce             	dec    %r14
   10716:	49 83 fe 01          	cmp    $0x1,%r14
   1071a:	77 e4                	ja     10700 <_ZN7genetic9crossoverERKNS_7programES2_RS0_RKNS_5paramER12PhiloxEngine+0x1a0>
   1071c:	48 8b 2b             	mov    (%rbx),%rbp
   1071f:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
   10724:	48 8b 01             	mov    (%rcx),%rax
   10727:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
            std::copy(prog.nodes.get() + prog_end, prog.nodes.get() + prog.len,
   1072c:	4c 8d 24 10          	lea    (%rax,%rdx,1),%r12
   10730:	4c 63 71 08          	movslq 0x8(%rcx),%r14
   10734:	49 c1 e6 04          	shl    $0x4,%r14
   10738:	49 01 c6             	add    %rax,%r14
   1073b:	4d 29 e6             	sub    %r12,%r14
   1073e:	49 c1 fe 04          	sar    $0x4,%r14
   10742:	4d 85 f6             	test   %r14,%r14
   10745:	0f 8e 85 fe ff ff    	jle    105d0 <_ZN7genetic9crossoverERKNS_7programES2_RS0_RKNS_5paramER12PhiloxEngine+0x70>
   1074b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
                      p_out.nodes.get() + (prog_start) + (donor_end - donor_start));
   10750:	48 c1 e0 04          	shl    $0x4,%rax
   10754:	49 63 cf             	movslq %r15d,%rcx
   10757:	48 c1 e1 04          	shl    $0x4,%rcx
   1075b:	48 01 c1             	add    %rax,%rcx
   1075e:	48 01 cd             	add    %rcx,%rbp
   10761:	49 ff c6             	inc    %r14
   10764:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
   1076b:	00 00 00 00 00 
	      *__result = *__first;
   10770:	48 89 ef             	mov    %rbp,%rdi
   10773:	4c 89 e6             	mov    %r12,%rsi
   10776:	e8 95 66 00 00       	callq  16e10 <_ZN7genetic4nodeaSERKS0_>
	      ++__first;
   1077b:	49 83 c4 10          	add    $0x10,%r12
	      ++__result;
   1077f:	48 83 c5 10          	add    $0x10,%rbp
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   10783:	49 ff ce             	dec    %r14
   10786:	49 83 fe 01          	cmp    $0x1,%r14
   1078a:	77 e4                	ja     10770 <_ZN7genetic9crossoverERKNS_7programES2_RS0_RKNS_5paramER12PhiloxEngine+0x210>
   1078c:	e9 3f fe ff ff       	jmpq   105d0 <_ZN7genetic9crossoverERKNS_7programES2_RS0_RKNS_5paramER12PhiloxEngine+0x70>

        // Set the depth of the final program
        p_out.depth = output_depth;
   10791:	89 43 0c             	mov    %eax,0xc(%rbx)
    }
   10794:	48 83 c4 48          	add    $0x48,%rsp
   10798:	5b                   	pop    %rbx
   10799:	41 5c                	pop    %r12
   1079b:	41 5d                	pop    %r13
   1079d:	41 5e                	pop    %r14
   1079f:	41 5f                	pop    %r15
   107a1:	5d                   	pop    %rbp
   107a2:	c3                   	retq   
   107a3:	48 89 c3             	mov    %rax,%rbx
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
   107a6:	48 89 ef             	mov    %rbp,%rdi
   107a9:	e8 62 6f 00 00       	callq  17710 <_ZdaPv@plt>
   107ae:	48 89 df             	mov    %rbx,%rdi
   107b1:	e8 ba 71 00 00       	callq  17970 <_Unwind_Resume@plt>
   107b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   107bd:	00 00 00 

00000000000107c0 <_ZN7genetic16subtree_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine>:

    void subtree_mutation(const program& prog, program& p_out, const param& params,
                          PhiloxEngine& rng) {
   107c0:	41 56                	push   %r14
   107c2:	53                   	push   %rbx
   107c3:	48 83 ec 28          	sub    $0x28,%rsp
   107c7:	48 89 f3             	mov    %rsi,%rbx
   107ca:	49 89 fe             	mov    %rdi,%r14
        : nodes(nullptr), len(0), depth(0), raw_fitness_(0.0f), metric(metric_t::mse),
   107cd:	0f 57 c0             	xorps  %xmm0,%xmm0
   107d0:	0f 29 04 24          	movaps %xmm0,(%rsp)
   107d4:	48 b8 00 00 00 00 01 	movabs $0x100000000,%rax
   107db:	00 00 00 
   107de:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
          mut_type(mutation_t::none) {
   107e3:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%rsp)
   107ea:	00 
   107eb:	48 89 e7             	mov    %rsp,%rdi
        // Generate a random program and perform crossover
        program new_program;
        build_program(new_program, params, rng);
   107ee:	48 89 d6             	mov    %rdx,%rsi
   107f1:	e8 7a f0 ff ff       	callq  f870 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine>
   107f6:	48 89 e6             	mov    %rsp,%rsi
        crossover(prog, new_program, p_out, params, rng);
   107f9:	4c 89 f7             	mov    %r14,%rdi
   107fc:	48 89 da             	mov    %rbx,%rdx
   107ff:	e8 5c fd ff ff       	callq  10560 <_ZN7genetic9crossoverERKNS_7programES2_RS0_RKNS_5paramER12PhiloxEngine>
	if (__ptr != nullptr)
   10804:	48 8b 3c 24          	mov    (%rsp),%rdi
	  delete [] __ptr;
   10808:	48 83 c4 28          	add    $0x28,%rsp
	if (__ptr != nullptr)
   1080c:	48 85 ff             	test   %rdi,%rdi
   1080f:	74 08                	je     10819 <_ZN7genetic16subtree_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x59>
	  delete [] __ptr;
   10811:	5b                   	pop    %rbx
   10812:	41 5e                	pop    %r14
   10814:	e9 f7 6e 00 00       	jmpq   17710 <_ZdaPv@plt>
    }
   10819:	5b                   	pop    %rbx
   1081a:	41 5e                	pop    %r14
   1081c:	c3                   	retq   
   1081d:	48 89 c3             	mov    %rax,%rbx
	if (__ptr != nullptr)
   10820:	48 8b 3c 24          	mov    (%rsp),%rdi
   10824:	48 85 ff             	test   %rdi,%rdi
   10827:	74 05                	je     1082e <_ZN7genetic16subtree_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x6e>
	  delete [] __ptr;
   10829:	e8 e2 6e 00 00       	callq  17710 <_ZdaPv@plt>
   1082e:	48 89 df             	mov    %rbx,%rdi
   10831:	e8 3a 71 00 00       	callq  17970 <_Unwind_Resume@plt>
   10836:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1083d:	00 00 00 

0000000000010840 <_ZN7genetic14hoist_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine>:

    void hoist_mutation(const program& prog, program& p_out, [[maybe_unused]] const param& params,
                        PhiloxEngine& rng) {
   10840:	55                   	push   %rbp
   10841:	41 57                	push   %r15
   10843:	41 56                	push   %r14
   10845:	41 55                	push   %r13
   10847:	41 54                	push   %r12
   10849:	53                   	push   %rbx
   1084a:	48 83 ec 28          	sub    $0x28,%rsp
   1084e:	49 89 f5             	mov    %rsi,%r13
   10851:	48 89 fd             	mov    %rdi,%rbp
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   10854:	48 8b 3f             	mov    (%rdi),%rdi
        // Replace program subtree with a random sub-subtree

        std::pair<int, int> prog_slice = get_subtree(prog.nodes.get(), prog.len, rng);
   10857:	8b 75 08             	mov    0x8(%rbp),%esi
   1085a:	e8 c1 e9 ff ff       	callq  f220 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine>
   1085f:	49 89 c6             	mov    %rax,%r14
   10862:	49 89 c4             	mov    %rax,%r12
   10865:	49 c1 ec 20          	shr    $0x20,%r12
        int                 prog_start = prog_slice.first;
        int                 prog_end   = prog_slice.second;

        std::pair<int, int> sub_slice =
            get_subtree(prog.nodes.get() + prog_start, prog_end - prog_start, rng);
   10869:	4d 63 fe             	movslq %r14d,%r15
   1086c:	4c 89 f8             	mov    %r15,%rax
   1086f:	48 c1 e0 04          	shl    $0x4,%rax
   10873:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
   10877:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   1087c:	48 01 c7             	add    %rax,%rdi
   1087f:	44 89 e6             	mov    %r12d,%esi
   10882:	44 29 fe             	sub    %r15d,%esi
   10885:	e8 96 e9 ff ff       	callq  f220 <_ZN7genetic11get_subtreeEPNS_4nodeEiR12PhiloxEngine>
   1088a:	48 89 c3             	mov    %rax,%rbx
   1088d:	48 c1 eb 20          	shr    $0x20,%rbx

        // Update subtree indices to global indices
        sub_start += prog_start;
        sub_end += prog_start;

        p_out.len    = (prog_start) + (sub_end - sub_start) + (prog.len - prog_end);
   10891:	89 d9                	mov    %ebx,%ecx
   10893:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
   10898:	29 c1                	sub    %eax,%ecx
   1089a:	48 89 6c 24 10       	mov    %rbp,0x10(%rsp)
   1089f:	8b 45 08             	mov    0x8(%rbp),%eax
   108a2:	44 29 e0             	sub    %r12d,%eax
   108a5:	44 01 f8             	add    %r15d,%eax
   108a8:	89 4c 24 1c          	mov    %ecx,0x1c(%rsp)
   108ac:	01 c8                	add    %ecx,%eax
   108ae:	4c 89 2c 24          	mov    %r13,(%rsp)
   108b2:	41 89 45 08          	mov    %eax,0x8(%r13)
        p_out.nodes  = std::make_unique<node[]>(p_out.len);
   108b6:	4c 63 e8             	movslq %eax,%r13
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
   108b9:	4c 89 ed             	mov    %r13,%rbp
   108bc:	48 c1 e5 04          	shl    $0x4,%rbp
   108c0:	45 85 ed             	test   %r13d,%r13d
   108c3:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
   108ca:	48 0f 49 fd          	cmovns %rbp,%rdi
   108ce:	e8 8d 6d 00 00       	callq  17660 <_Znam@plt>
   108d3:	49 89 c4             	mov    %rax,%r12
   108d6:	45 85 ed             	test   %r13d,%r13d
   108d9:	74 17                	je     108f2 <_ZN7genetic14hoist_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0xb2>
   108db:	45 31 ed             	xor    %r13d,%r13d
   108de:	66 90                	xchg   %ax,%ax
   108e0:	4b 8d 3c 2c          	lea    (%r12,%r13,1),%rdi
   108e4:	e8 c7 62 00 00       	callq  16bb0 <_ZN7genetic4nodeC1Ev>
   108e9:	49 83 c5 10          	add    $0x10,%r13
   108ed:	4c 39 ed             	cmp    %r13,%rbp
   108f0:	75 ee                	jne    108e0 <_ZN7genetic14hoist_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0xa0>
   108f2:	4c 8b 2c 24          	mov    (%rsp),%r13
	const pointer __old_p = _M_ptr();
   108f6:	49 8b 7d 00          	mov    0x0(%r13),%rdi
	_M_ptr() = __p;
   108fa:	4d 89 65 00          	mov    %r12,0x0(%r13)
	if (__old_p)
   108fe:	48 85 ff             	test   %rdi,%rdi
   10901:	74 09                	je     1090c <_ZN7genetic14hoist_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0xcc>
	  delete [] __ptr;
   10903:	e8 08 6e 00 00       	callq  17710 <_ZdaPv@plt>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   10908:	4d 8b 65 00          	mov    0x0(%r13),%r12
   1090c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
   10911:	4c 01 f2             	add    %r14,%rdx
   10914:	4c 01 f3             	add    %r14,%rbx
   10917:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        p_out.metric = prog.metric;
   1091c:	8b 41 14             	mov    0x14(%rcx),%eax
   1091f:	41 89 45 14          	mov    %eax,0x14(%r13)
   10923:	48 8b 29             	mov    (%rcx),%rbp
   10926:	4d 85 ff             	test   %r15,%r15
   10929:	7e 42                	jle    1096d <_ZN7genetic14hoist_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x12d>
   1092b:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
   10930:	49 ff c7             	inc    %r15
   10933:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   1093a:	84 00 00 00 00 00 
	      *__result = *__first;
   10940:	4c 89 e7             	mov    %r12,%rdi
   10943:	48 89 ee             	mov    %rbp,%rsi
   10946:	e8 c5 64 00 00       	callq  16e10 <_ZN7genetic4nodeaSERKS0_>
	      ++__first;
   1094b:	48 83 c5 10          	add    $0x10,%rbp
	      ++__result;
   1094f:	49 83 c4 10          	add    $0x10,%r12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   10953:	49 ff cf             	dec    %r15
   10956:	49 83 ff 01          	cmp    $0x1,%r15
   1095a:	77 e4                	ja     10940 <_ZN7genetic14hoist_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x100>
   1095c:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
   10961:	48 8b 29             	mov    (%rcx),%rbp
   10964:	4d 8b 65 00          	mov    0x0(%r13),%r12
   10968:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx


        // Copy node slices using std::copy
        std::copy(prog.nodes.get(), prog.nodes.get() + prog_start, p_out.nodes.get());
        std::copy(prog.nodes.get() + sub_start, prog.nodes.get() + sub_end,
   1096d:	4c 63 ea             	movslq %edx,%r13
   10970:	49 c1 e5 04          	shl    $0x4,%r13
   10974:	49 01 ed             	add    %rbp,%r13
   10977:	48 63 db             	movslq %ebx,%rbx
   1097a:	48 c1 e3 04          	shl    $0x4,%rbx
   1097e:	48 01 eb             	add    %rbp,%rbx
   10981:	4c 29 eb             	sub    %r13,%rbx
   10984:	48 c1 fb 04          	sar    $0x4,%rbx
   10988:	48 85 db             	test   %rbx,%rbx
   1098b:	7e 40                	jle    109cd <_ZN7genetic14hoist_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x18d>
                  p_out.nodes.get() + prog_start);
   1098d:	4c 03 64 24 20       	add    0x20(%rsp),%r12
   10992:	48 ff c3             	inc    %rbx
   10995:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
   1099c:	00 00 00 00 
	      *__result = *__first;
   109a0:	4c 89 e7             	mov    %r12,%rdi
   109a3:	4c 89 ee             	mov    %r13,%rsi
   109a6:	e8 65 64 00 00       	callq  16e10 <_ZN7genetic4nodeaSERKS0_>
	      ++__first;
   109ab:	49 83 c5 10          	add    $0x10,%r13
	      ++__result;
   109af:	49 83 c4 10          	add    $0x10,%r12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   109b3:	48 ff cb             	dec    %rbx
   109b6:	48 83 fb 01          	cmp    $0x1,%rbx
   109ba:	77 e4                	ja     109a0 <_ZN7genetic14hoist_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x160>
   109bc:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
   109c1:	48 8b 29             	mov    (%rcx),%rbp
   109c4:	4c 8b 3c 24          	mov    (%rsp),%r15
   109c8:	4d 8b 27             	mov    (%r15),%r12
   109cb:	eb 04                	jmp    109d1 <_ZN7genetic14hoist_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x191>
   109cd:	4c 8b 3c 24          	mov    (%rsp),%r15
        std::copy(prog.nodes.get() + prog_end, prog.nodes.get() + prog.len,
   109d1:	49 c1 fe 20          	sar    $0x20,%r14
   109d5:	49 c1 e6 04          	shl    $0x4,%r14
   109d9:	49 01 ee             	add    %rbp,%r14
   109dc:	48 63 59 08          	movslq 0x8(%rcx),%rbx
   109e0:	48 c1 e3 04          	shl    $0x4,%rbx
   109e4:	48 01 eb             	add    %rbp,%rbx
   109e7:	4c 29 f3             	sub    %r14,%rbx
   109ea:	48 c1 fb 04          	sar    $0x4,%rbx
   109ee:	48 85 db             	test   %rbx,%rbx
   109f1:	7e 39                	jle    10a2c <_ZN7genetic14hoist_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x1ec>
                  p_out.nodes.get() + (prog_start) + (sub_end - sub_start));
   109f3:	48 63 44 24 1c       	movslq 0x1c(%rsp),%rax
   109f8:	48 c1 e0 04          	shl    $0x4,%rax
   109fc:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
   10a01:	48 01 c1             	add    %rax,%rcx
   10a04:	49 01 cc             	add    %rcx,%r12
   10a07:	48 ff c3             	inc    %rbx
   10a0a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	      *__result = *__first;
   10a10:	4c 89 e7             	mov    %r12,%rdi
   10a13:	4c 89 f6             	mov    %r14,%rsi
   10a16:	e8 f5 63 00 00       	callq  16e10 <_ZN7genetic4nodeaSERKS0_>
	      ++__first;
   10a1b:	49 83 c6 10          	add    $0x10,%r14
	      ++__result;
   10a1f:	49 83 c4 10          	add    $0x10,%r12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   10a23:	48 ff cb             	dec    %rbx
   10a26:	48 83 fb 01          	cmp    $0x1,%rbx
   10a2a:	77 e4                	ja     10a10 <_ZN7genetic14hoist_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine+0x1d0>

        // Update depth
        p_out.depth = get_depth(p_out);
   10a2c:	4c 89 ff             	mov    %r15,%rdi
   10a2f:	e8 ec ea ff ff       	callq  f520 <_ZN7genetic9get_depthERKNS_7programE>
   10a34:	41 89 47 0c          	mov    %eax,0xc(%r15)
    }
   10a38:	48 83 c4 28          	add    $0x28,%rsp
   10a3c:	5b                   	pop    %rbx
   10a3d:	41 5c                	pop    %r12
   10a3f:	41 5d                	pop    %r13
   10a41:	41 5e                	pop    %r14
   10a43:	41 5f                	pop    %r15
   10a45:	5d                   	pop    %rbp
   10a46:	c3                   	retq   
   10a47:	48 89 c3             	mov    %rax,%rbx
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
   10a4a:	4c 89 e7             	mov    %r12,%rdi
   10a4d:	e8 be 6c 00 00       	callq  17710 <_ZdaPv@plt>
   10a52:	48 89 df             	mov    %rbx,%rdi
   10a55:	e8 16 6f 00 00       	callq  17970 <_Unwind_Resume@plt>
   10a5a:	cc                   	int3   
   10a5b:	cc                   	int3   
   10a5c:	cc                   	int3   
   10a5d:	cc                   	int3   
   10a5e:	cc                   	int3   
   10a5f:	cc                   	int3   

0000000000010a60 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_>:
                         const math_t* X, const math_t* W, math_t* out) {
   10a60:	55                   	push   %rbp
   10a61:	41 57                	push   %r15
   10a63:	41 56                	push   %r14
   10a65:	41 55                	push   %r13
   10a67:	41 54                	push   %r12
   10a69:	53                   	push   %rbx
   10a6a:	48 83 ec 78          	sub    $0x78,%rsp
   10a6e:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
   10a73:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
   10a78:	48 b8 fc ff ff ff ff 	movabs $0x1ffffffffffffffc,%rax
   10a7f:	ff ff 1f 
        std::vector<math_t> corr(n_samples * n_progs); // correlation matrix
   10a82:	49 89 f5             	mov    %rsi,%r13
   10a85:	4c 0f af ef          	imul   %rdi,%r13
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   10a89:	48 83 c0 03          	add    $0x3,%rax
   10a8d:	49 39 c5             	cmp    %rax,%r13
   10a90:	0f 87 fa 0b 00 00    	ja     11690 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xc30>
   10a96:	4d 89 c4             	mov    %r8,%r12
   10a99:	49 89 ce             	mov    %rcx,%r14
   10a9c:	48 89 fd             	mov    %rdi,%rbp
   10a9f:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   10aa4:	4d 85 ed             	test   %r13,%r13
   10aa7:	74 38                	je     10ae1 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x81>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   10aa9:	4a 8d 1c ad 00 00 00 	lea    0x0(,%r13,4),%rbx
   10ab0:	00 
   10ab1:	48 89 df             	mov    %rbx,%rdi
   10ab4:	e8 a7 6c 00 00       	callq  17760 <_Znwm@plt>
   10ab9:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      if (__n <= 0)
   10abf:	49 83 fd 01          	cmp    $0x1,%r13
   10ac3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
   10ac8:	74 1e                	je     10ae8 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x88>
   10aca:	48 89 c7             	mov    %rax,%rdi
   10acd:	48 83 c7 04          	add    $0x4,%rdi
      for (; __first != __last; ++__first)
   10ad1:	48 83 c3 fc          	add    $0xfffffffffffffffc,%rbx
	*__first = __tmp;
   10ad5:	31 f6                	xor    %esi,%esi
   10ad7:	48 89 da             	mov    %rbx,%rdx
   10ada:	e8 b1 6e 00 00       	callq  17990 <memset@plt>
   10adf:	eb 07                	jmp    10ae8 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x88>
   10ae1:	31 c0                	xor    %eax,%eax
   10ae3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   10ae8:	48 b8 fc ff ff ff ff 	movabs $0x1ffffffffffffffc,%rax
   10aef:	ff ff 1f 
   10af2:	4c 8d 78 03          	lea    0x3(%rax),%r15
   10af6:	4c 39 fd             	cmp    %r15,%rbp
   10af9:	0f 87 9d 0b 00 00    	ja     1169c <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xc3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   10aff:	48 85 ed             	test   %rbp,%rbp
   10b02:	74 78                	je     10b7c <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x11c>
   10b04:	48 8d 1c ad 00 00 00 	lea    0x0(,%rbp,4),%rbx
   10b0b:	00 
   10b0c:	48 89 df             	mov    %rbx,%rdi
   10b0f:	e8 4c 6c 00 00       	callq  17760 <_Znwm@plt>
   10b14:	48 89 c1             	mov    %rax,%rcx
   10b17:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
   10b1c:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      if (__n <= 0)
   10b22:	48 83 fd 01          	cmp    $0x1,%rbp
   10b26:	74 17                	je     10b3f <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xdf>
   10b28:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
   10b2d:	48 83 c7 04          	add    $0x4,%rdi
      for (; __first != __last; ++__first)
   10b31:	48 83 c3 fc          	add    $0xfffffffffffffffc,%rbx
	*__first = __tmp;
   10b35:	31 f6                	xor    %esi,%esi
   10b37:	48 89 da             	mov    %rbx,%rdx
   10b3a:	e8 51 6e 00 00       	callq  17990 <memset@plt>
   10b3f:	4d 85 ed             	test   %r13,%r13
   10b42:	74 3f                	je     10b83 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x123>
   10b44:	4a 8d 1c ad 00 00 00 	lea    0x0(,%r13,4),%rbx
   10b4b:	00 
   10b4c:	48 89 df             	mov    %rbx,%rdi
   10b4f:	e8 0c 6c 00 00       	callq  17760 <_Znwm@plt>
   10b54:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      if (__n <= 0)
   10b5a:	49 83 fd 01          	cmp    $0x1,%r13
   10b5e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   10b63:	74 25                	je     10b8a <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x12a>
   10b65:	48 89 c7             	mov    %rax,%rdi
   10b68:	48 83 c7 04          	add    $0x4,%rdi
      for (; __first != __last; ++__first)
   10b6c:	48 83 c3 fc          	add    $0xfffffffffffffffc,%rbx
	*__first = __tmp;
   10b70:	31 f6                	xor    %esi,%esi
   10b72:	48 89 da             	mov    %rbx,%rdx
   10b75:	e8 16 6e 00 00       	callq  17990 <memset@plt>
   10b7a:	eb 0e                	jmp    10b8a <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x12a>
   10b7c:	31 c0                	xor    %eax,%eax
   10b7e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
   10b83:	31 c0                	xor    %eax,%eax
   10b85:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   10b8a:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   10b8f:	4d 39 fa             	cmp    %r15,%r10
   10b92:	0f 87 10 0b 00 00    	ja     116a8 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xc48>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   10b98:	4d 85 d2             	test   %r10,%r10
   10b9b:	4c 8b 7c 24 28       	mov    0x28(%rsp),%r15
   10ba0:	74 28                	je     10bca <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x16a>
   10ba2:	4c 89 2c 24          	mov    %r13,(%rsp)
   10ba6:	4a 8d 1c 95 00 00 00 	lea    0x0(,%r10,4),%rbx
   10bad:	00 
   10bae:	48 89 df             	mov    %rbx,%rdi
   10bb1:	4d 89 d5             	mov    %r10,%r13
   10bb4:	e8 a7 6b 00 00       	callq  17760 <_Znwm@plt>
   10bb9:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      if (__n <= 0)
   10bbf:	49 83 fd 01          	cmp    $0x1,%r13
   10bc3:	75 09                	jne    10bce <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x16e>
   10bc5:	4d 89 ea             	mov    %r13,%r10
   10bc8:	eb 24                	jmp    10bee <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x18e>
   10bca:	31 c0                	xor    %eax,%eax
   10bcc:	eb 24                	jmp    10bf2 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x192>
   10bce:	48 89 c7             	mov    %rax,%rdi
   10bd1:	48 83 c7 04          	add    $0x4,%rdi
      for (; __first != __last; ++__first)
   10bd5:	48 83 c3 fc          	add    $0xfffffffffffffffc,%rbx
	*__first = __tmp;
   10bd9:	31 f6                	xor    %esi,%esi
   10bdb:	48 89 da             	mov    %rbx,%rdx
   10bde:	48 89 c3             	mov    %rax,%rbx
   10be1:	e8 aa 6d 00 00       	callq  17990 <memset@plt>
   10be6:	48 89 d8             	mov    %rbx,%rax
   10be9:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
   10bee:	4c 8b 2c 24          	mov    (%rsp),%r13
   10bf2:	48 85 ed             	test   %rbp,%rbp
   10bf5:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
   10bfa:	74 76                	je     10c72 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x212>
   10bfc:	48 8d 3c ad 00 00 00 	lea    0x0(,%rbp,4),%rdi
   10c03:	00 
   10c04:	48 89 3c 24          	mov    %rdi,(%rsp)
   10c08:	e8 53 6b 00 00       	callq  17760 <_Znwm@plt>
   10c0d:	48 89 c3             	mov    %rax,%rbx
   10c10:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      if (__n <= 0)
   10c16:	48 83 fd 01          	cmp    $0x1,%rbp
   10c1a:	74 16                	je     10c32 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x1d2>
   10c1c:	48 89 df             	mov    %rbx,%rdi
   10c1f:	48 83 c7 04          	add    $0x4,%rdi
   10c23:	48 8b 14 24          	mov    (%rsp),%rdx
      for (; __first != __last; ++__first)
   10c27:	48 83 c2 fc          	add    $0xfffffffffffffffc,%rdx
	*__first = __tmp;
   10c2b:	31 f6                	xor    %esi,%esi
   10c2d:	e8 5e 6d 00 00       	callq  17990 <memset@plt>
   10c32:	4d 85 ed             	test   %r13,%r13
   10c35:	74 42                	je     10c79 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x219>
   10c37:	4a 8d 3c ad 00 00 00 	lea    0x0(,%r13,4),%rdi
   10c3e:	00 
   10c3f:	48 89 3c 24          	mov    %rdi,(%rsp)
   10c43:	e8 18 6b 00 00       	callq  17760 <_Znwm@plt>
   10c48:	4c 89 e9             	mov    %r13,%rcx
   10c4b:	49 89 c5             	mov    %rax,%r13
   10c4e:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      if (__n <= 0)
   10c54:	48 83 f9 01          	cmp    $0x1,%rcx
   10c58:	74 22                	je     10c7c <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x21c>
   10c5a:	4c 89 ef             	mov    %r13,%rdi
   10c5d:	48 83 c7 04          	add    $0x4,%rdi
   10c61:	48 8b 14 24          	mov    (%rsp),%rdx
      for (; __first != __last; ++__first)
   10c65:	48 83 c2 fc          	add    $0xfffffffffffffffc,%rdx
	*__first = __tmp;
   10c69:	31 f6                	xor    %esi,%esi
   10c6b:	e8 20 6d 00 00       	callq  17990 <memset@plt>
   10c70:	eb 0a                	jmp    10c7c <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x21c>
   10c72:	31 db                	xor    %ebx,%ebx
   10c74:	45 31 ed             	xor    %r13d,%r13d
   10c77:	eb 0d                	jmp    10c86 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x226>
   10c79:	45 31 ed             	xor    %r13d,%r13d
   10c7c:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
   10c81:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
   10c86:	4c 89 6c 24 38       	mov    %r13,0x38(%rsp)
   10c8b:	4d 85 d2             	test   %r10,%r10
   10c8e:	74 28                	je     10cb8 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x258>
   10c90:	4a 8d 3c 95 00 00 00 	lea    0x0(,%r10,4),%rdi
   10c97:	00 
   10c98:	48 89 3c 24          	mov    %rdi,(%rsp)
   10c9c:	4d 89 d5             	mov    %r10,%r13
   10c9f:	e8 bc 6a 00 00       	callq  17760 <_Znwm@plt>
   10ca4:	49 89 c0             	mov    %rax,%r8
   10ca7:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      if (__n <= 0)
   10cad:	49 83 fd 01          	cmp    $0x1,%r13
   10cb1:	75 0a                	jne    10cbd <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x25d>
   10cb3:	4d 89 ea             	mov    %r13,%r10
   10cb6:	eb 26                	jmp    10cde <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x27e>
   10cb8:	45 31 c0             	xor    %r8d,%r8d
   10cbb:	eb 26                	jmp    10ce3 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x283>
   10cbd:	4c 89 c7             	mov    %r8,%rdi
   10cc0:	48 83 c7 04          	add    $0x4,%rdi
   10cc4:	48 8b 14 24          	mov    (%rsp),%rdx
      for (; __first != __last; ++__first)
   10cc8:	48 83 c2 fc          	add    $0xfffffffffffffffc,%rdx
	*__first = __tmp;
   10ccc:	31 f6                	xor    %esi,%esi
   10cce:	4d 89 c5             	mov    %r8,%r13
   10cd1:	e8 ba 6c 00 00       	callq  17990 <memset@plt>
   10cd6:	4d 89 e8             	mov    %r13,%r8
   10cd9:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
   10cde:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        math_t N = static_cast<math_t>(n_samples); // (math_t)n_samples;
   10ce3:	48 89 e9             	mov    %rbp,%rcx
   10ce6:	48 d1 e9             	shr    %rcx
   10ce9:	89 ea                	mov    %ebp,%edx
   10ceb:	83 e2 01             	and    $0x1,%edx
   10cee:	48 09 ca             	or     %rcx,%rdx
   10cf1:	48 85 ed             	test   %rbp,%rbp
   10cf4:	78 21                	js     10d17 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x2b7>
   10cf6:	f3 48 0f 2a f5       	cvtsi2ss %rbp,%xmm6
   10cfb:	4c 89 04 24          	mov    %r8,(%rsp)
        for (uint64_t i = 0; i < n_samples; ++i) {
   10cff:	74 25                	je     10d26 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x2c6>
   10d01:	48 8d 7d ff          	lea    -0x1(%rbp),%rdi
   10d05:	89 e9                	mov    %ebp,%ecx
   10d07:	83 e1 07             	and    $0x7,%ecx
   10d0a:	48 83 ff 07          	cmp    $0x7,%rdi
   10d0e:	73 21                	jae    10d31 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x2d1>
   10d10:	0f 57 c9             	xorps  %xmm1,%xmm1
   10d13:	31 d2                	xor    %edx,%edx
   10d15:	eb 79                	jmp    10d90 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x330>
   10d17:	f3 48 0f 2a f2       	cvtsi2ss %rdx,%xmm6
   10d1c:	f3 0f 58 f6          	addss  %xmm6,%xmm6
   10d20:	4c 89 04 24          	mov    %r8,(%rsp)
   10d24:	75 db                	jne    10d01 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x2a1>
   10d26:	0f 57 c9             	xorps  %xmm1,%xmm1
   10d29:	0f 57 c0             	xorps  %xmm0,%xmm0
   10d2c:	e9 a4 01 00 00       	jmpq   10ed5 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x475>
   10d31:	48 ba fc ff ff ff ff 	movabs $0x1ffffffffffffffc,%rdx
   10d38:	ff ff 1f 
   10d3b:	48 8d 72 fc          	lea    -0x4(%rdx),%rsi
   10d3f:	48 21 ee             	and    %rbp,%rsi
   10d42:	0f 57 c9             	xorps  %xmm1,%xmm1
   10d45:	31 d2                	xor    %edx,%edx
   10d47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   10d4e:	00 00 
            WS += W[i];
   10d50:	f3 41 0f 58 0c 94    	addss  (%r12,%rdx,4),%xmm1
   10d56:	f3 41 0f 58 4c 94 04 	addss  0x4(%r12,%rdx,4),%xmm1
   10d5d:	f3 41 0f 58 4c 94 08 	addss  0x8(%r12,%rdx,4),%xmm1
   10d64:	f3 41 0f 58 4c 94 0c 	addss  0xc(%r12,%rdx,4),%xmm1
   10d6b:	f3 41 0f 58 4c 94 10 	addss  0x10(%r12,%rdx,4),%xmm1
   10d72:	f3 41 0f 58 4c 94 14 	addss  0x14(%r12,%rdx,4),%xmm1
   10d79:	f3 41 0f 58 4c 94 18 	addss  0x18(%r12,%rdx,4),%xmm1
   10d80:	f3 41 0f 58 4c 94 1c 	addss  0x1c(%r12,%rdx,4),%xmm1
        for (uint64_t i = 0; i < n_samples; ++i) {
   10d87:	48 83 c2 08          	add    $0x8,%rdx
   10d8b:	48 39 d6             	cmp    %rdx,%rsi
   10d8e:	75 c0                	jne    10d50 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x2f0>
   10d90:	48 85 c9             	test   %rcx,%rcx
   10d93:	74 18                	je     10dad <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x34d>
   10d95:	49 8d 14 94          	lea    (%r12,%rdx,4),%rdx
   10d99:	31 f6                	xor    %esi,%esi
   10d9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            WS += W[i];
   10da0:	f3 0f 58 0c b2       	addss  (%rdx,%rsi,4),%xmm1
        for (uint64_t i = 0; i < n_samples; ++i) {
   10da5:	48 ff c6             	inc    %rsi
   10da8:	48 39 f1             	cmp    %rsi,%rcx
   10dab:	75 f3                	jne    10da0 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x340>
            for (uint64_t i = 0; i < n_samples; ++i) {
   10dad:	48 83 fd 04          	cmp    $0x4,%rbp
   10db1:	73 09                	jae    10dbc <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x35c>
   10db3:	31 c9                	xor    %ecx,%ecx
   10db5:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
   10dba:	eb 64                	jmp    10e20 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x3c0>
   10dbc:	48 89 e9             	mov    %rbp,%rcx
   10dbf:	48 ba fc ff ff ff ff 	movabs $0x1ffffffffffffffc,%rdx
   10dc6:	ff ff 1f 
   10dc9:	48 21 d1             	and    %rdx,%rcx
   10dcc:	0f 28 c6             	movaps %xmm6,%xmm0
   10dcf:	0f c6 c6 00          	shufps $0x0,%xmm6,%xmm0
   10dd3:	0f 28 d1             	movaps %xmm1,%xmm2
   10dd6:	0f c6 d1 00          	shufps $0x0,%xmm1,%xmm2
   10dda:	31 d2                	xor    %edx,%edx
   10ddc:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
   10de1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   10de8:	0f 1f 84 00 00 00 00 
   10def:	00 
                y_tmp[i] = Y[i] * W[i] * N / WS;
   10df0:	0f 10 1c 96          	movups (%rsi,%rdx,4),%xmm3
   10df4:	41 0f 10 24 94       	movups (%r12,%rdx,4),%xmm4
   10df9:	0f 59 e3             	mulps  %xmm3,%xmm4
   10dfc:	0f 59 e0             	mulps  %xmm0,%xmm4
   10dff:	0f 5e e2             	divps  %xmm2,%xmm4
   10e02:	41 0f 11 24 97       	movups %xmm4,(%r15,%rdx,4)
            for (uint64_t i = 0; i < n_samples; ++i) {
   10e07:	48 83 c2 04          	add    $0x4,%rdx
   10e0b:	48 39 d1             	cmp    %rdx,%rcx
   10e0e:	75 e0                	jne    10df0 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x390>
   10e10:	48 39 e9             	cmp    %rbp,%rcx
   10e13:	74 2c                	je     10e41 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x3e1>
   10e15:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
   10e1c:	00 00 00 00 
                y_tmp[i] = Y[i] * W[i] * N / WS;
   10e20:	f3 0f 10 04 8e       	movss  (%rsi,%rcx,4),%xmm0
   10e25:	f3 41 0f 59 04 8c    	mulss  (%r12,%rcx,4),%xmm0
   10e2b:	f3 0f 59 c6          	mulss  %xmm6,%xmm0
   10e2f:	f3 0f 5e c1          	divss  %xmm1,%xmm0
   10e33:	f3 41 0f 11 04 8f    	movss  %xmm0,(%r15,%rcx,4)
            for (uint64_t i = 0; i < n_samples; ++i) {
   10e39:	48 ff c1             	inc    %rcx
   10e3c:	48 39 cd             	cmp    %rcx,%rbp
   10e3f:	75 df                	jne    10e20 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x3c0>
            for (uint64_t i = 0; i < n_samples; ++i) {
   10e41:	89 e9                	mov    %ebp,%ecx
   10e43:	83 e1 03             	and    $0x3,%ecx
   10e46:	48 83 ff 03          	cmp    $0x3,%rdi
   10e4a:	73 07                	jae    10e53 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x3f3>
   10e4c:	0f 57 c0             	xorps  %xmm0,%xmm0
   10e4f:	31 f6                	xor    %esi,%esi
   10e51:	eb 61                	jmp    10eb4 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x454>
   10e53:	48 89 ea             	mov    %rbp,%rdx
   10e56:	48 be fc ff ff ff ff 	movabs $0x1ffffffffffffffc,%rsi
   10e5d:	ff ff 1f 
   10e60:	48 21 f2             	and    %rsi,%rdx
   10e63:	0f 57 c0             	xorps  %xmm0,%xmm0
   10e66:	31 f6                	xor    %esi,%esi
   10e68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   10e6f:	00 
                y_mu += y_tmp[i] / N;
   10e70:	f3 41 0f 10 14 b7    	movss  (%r15,%rsi,4),%xmm2
   10e76:	f3 41 0f 10 5c b7 04 	movss  0x4(%r15,%rsi,4),%xmm3
   10e7d:	f3 0f 5e d6          	divss  %xmm6,%xmm2
   10e81:	f3 0f 58 d0          	addss  %xmm0,%xmm2
   10e85:	f3 0f 5e de          	divss  %xmm6,%xmm3
   10e89:	f3 0f 58 da          	addss  %xmm2,%xmm3
   10e8d:	f3 41 0f 10 54 b7 08 	movss  0x8(%r15,%rsi,4),%xmm2
   10e94:	f3 0f 5e d6          	divss  %xmm6,%xmm2
   10e98:	f3 0f 58 d3          	addss  %xmm3,%xmm2
   10e9c:	f3 41 0f 10 44 b7 0c 	movss  0xc(%r15,%rsi,4),%xmm0
   10ea3:	f3 0f 5e c6          	divss  %xmm6,%xmm0
   10ea7:	f3 0f 58 c2          	addss  %xmm2,%xmm0
            for (uint64_t i = 0; i < n_samples; ++i) {
   10eab:	48 83 c6 04          	add    $0x4,%rsi
   10eaf:	48 39 f2             	cmp    %rsi,%rdx
   10eb2:	75 bc                	jne    10e70 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x410>
   10eb4:	48 85 c9             	test   %rcx,%rcx
   10eb7:	74 1c                	je     10ed5 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x475>
   10eb9:	49 8d 34 b7          	lea    (%r15,%rsi,4),%rsi
   10ebd:	31 d2                	xor    %edx,%edx
   10ebf:	90                   	nop
                y_mu += y_tmp[i] / N;
   10ec0:	f3 0f 10 14 96       	movss  (%rsi,%rdx,4),%xmm2
   10ec5:	f3 0f 5e d6          	divss  %xmm6,%xmm2
   10ec9:	f3 0f 58 c2          	addss  %xmm2,%xmm0
            for (uint64_t i = 0; i < n_samples; ++i) {
   10ecd:	48 ff c2             	inc    %rdx
   10ed0:	48 39 d1             	cmp    %rdx,%rcx
   10ed3:	75 eb                	jne    10ec0 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x460>
   10ed5:	4d 85 d2             	test   %r10,%r10
            for (uint64_t pid = 0; pid < n_progs; ++pid) {
   10ed8:	0f 84 8d 01 00 00    	je     1106b <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x60b>
   10ede:	48 89 e9             	mov    %rbp,%rcx
   10ee1:	48 ba fc ff ff ff ff 	movabs $0x1ffffffffffffffc,%rdx
   10ee8:	ff ff 1f 
   10eeb:	48 21 d1             	and    %rdx,%rcx
   10eee:	0f 28 d6             	movaps %xmm6,%xmm2
   10ef1:	0f c6 d6 00          	shufps $0x0,%xmm6,%xmm2
   10ef5:	0f 28 d9             	movaps %xmm1,%xmm3
   10ef8:	0f c6 d9 00          	shufps $0x0,%xmm1,%xmm3
   10efc:	4c 8d 2c ad 00 00 00 	lea    0x0(,%rbp,4),%r13
   10f03:	00 
   10f04:	31 d2                	xor    %edx,%edx
   10f06:	4c 89 f6             	mov    %r14,%rsi
   10f09:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   10f0e:	eb 0e                	jmp    10f1e <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x4be>
   10f10:	48 ff c2             	inc    %rdx
   10f13:	4c 01 ef             	add    %r13,%rdi
   10f16:	4c 01 ee             	add    %r13,%rsi
   10f19:	4c 39 d2             	cmp    %r10,%rdx
   10f1c:	74 66                	je     10f84 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x524>
   10f1e:	48 85 ed             	test   %rbp,%rbp
                for (uint64_t i = 0; i < n_samples; ++i) {
   10f21:	74 ed                	je     10f10 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x4b0>
   10f23:	45 31 c0             	xor    %r8d,%r8d
   10f26:	48 83 fd 04          	cmp    $0x4,%rbp
   10f2a:	72 34                	jb     10f60 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x500>
   10f2c:	0f 1f 40 00          	nopl   0x0(%rax)
                    x_tmp[pid * n_samples + i] = X[pid * n_samples + i] * W[i] * N / WS;
   10f30:	42 0f 10 24 86       	movups (%rsi,%r8,4),%xmm4
   10f35:	43 0f 10 2c 84       	movups (%r12,%r8,4),%xmm5
   10f3a:	0f 59 ec             	mulps  %xmm4,%xmm5
   10f3d:	0f 59 ea             	mulps  %xmm2,%xmm5
   10f40:	0f 5e eb             	divps  %xmm3,%xmm5
   10f43:	42 0f 11 2c 87       	movups %xmm5,(%rdi,%r8,4)
                for (uint64_t i = 0; i < n_samples; ++i) {
   10f48:	49 83 c0 04          	add    $0x4,%r8
   10f4c:	4c 39 c1             	cmp    %r8,%rcx
   10f4f:	75 df                	jne    10f30 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x4d0>
   10f51:	49 89 c8             	mov    %rcx,%r8
   10f54:	48 39 e9             	cmp    %rbp,%rcx
   10f57:	74 b7                	je     10f10 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x4b0>
   10f59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
                    x_tmp[pid * n_samples + i] = X[pid * n_samples + i] * W[i] * N / WS;
   10f60:	f3 42 0f 10 24 86    	movss  (%rsi,%r8,4),%xmm4
   10f66:	f3 43 0f 59 24 84    	mulss  (%r12,%r8,4),%xmm4
   10f6c:	f3 0f 59 e6          	mulss  %xmm6,%xmm4
   10f70:	f3 0f 5e e1          	divss  %xmm1,%xmm4
   10f74:	f3 42 0f 11 24 87    	movss  %xmm4,(%rdi,%r8,4)
                for (uint64_t i = 0; i < n_samples; ++i) {
   10f7a:	49 ff c0             	inc    %r8
   10f7d:	4c 39 c5             	cmp    %r8,%rbp
   10f80:	75 de                	jne    10f60 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x500>
   10f82:	eb 8c                	jmp    10f10 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x4b0>
            for (uint64_t pid = 0; pid < n_progs; ++pid) {
   10f84:	48 8d 4d ff          	lea    -0x1(%rbp),%rcx
   10f88:	89 ea                	mov    %ebp,%edx
   10f8a:	83 e2 03             	and    $0x3,%edx
   10f8d:	48 89 ee             	mov    %rbp,%rsi
   10f90:	48 bf fc ff ff ff ff 	movabs $0x1ffffffffffffffc,%rdi
   10f97:	ff ff 1f 
   10f9a:	48 21 fe             	and    %rdi,%rsi
   10f9d:	4c 8b 4c 24 20       	mov    0x20(%rsp),%r9
   10fa2:	49 8d 79 0c          	lea    0xc(%r9),%rdi
   10fa6:	45 31 c0             	xor    %r8d,%r8d
   10fa9:	eb 27                	jmp    10fd2 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x572>
   10fab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   10fb0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
                    x_mu[pid] += x_tmp[pid * n_samples + i] / N;
   10fb5:	f3 42 0f 11 0c 80    	movss  %xmm1,(%rax,%r8,4)
   10fbb:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
            for (uint64_t pid = 0; pid < n_progs; ++pid) {
   10fc0:	49 ff c0             	inc    %r8
   10fc3:	4c 01 ef             	add    %r13,%rdi
   10fc6:	4d 01 e9             	add    %r13,%r9
   10fc9:	4d 39 d0             	cmp    %r10,%r8
   10fcc:	0f 84 99 00 00 00    	je     1106b <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x60b>
   10fd2:	48 85 ed             	test   %rbp,%rbp
                for (uint64_t i = 0; i < n_samples; ++i) {
   10fd5:	74 e9                	je     10fc0 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x560>
   10fd7:	f3 42 0f 10 0c 80    	movss  (%rax,%r8,4),%xmm1
   10fdd:	45 31 d2             	xor    %r10d,%r10d
   10fe0:	48 83 f9 03          	cmp    $0x3,%rcx
   10fe4:	72 4e                	jb     11034 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x5d4>
   10fe6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   10fed:	00 00 00 
                    x_mu[pid] += x_tmp[pid * n_samples + i] / N;
   10ff0:	f3 42 0f 10 54 97 f4 	movss  -0xc(%rdi,%r10,4),%xmm2
   10ff7:	f3 42 0f 10 5c 97 f8 	movss  -0x8(%rdi,%r10,4),%xmm3
   10ffe:	f3 0f 5e d6          	divss  %xmm6,%xmm2
   11002:	f3 0f 58 d1          	addss  %xmm1,%xmm2
   11006:	f3 0f 5e de          	divss  %xmm6,%xmm3
   1100a:	f3 0f 58 da          	addss  %xmm2,%xmm3
   1100e:	f3 42 0f 10 54 97 fc 	movss  -0x4(%rdi,%r10,4),%xmm2
   11015:	f3 0f 5e d6          	divss  %xmm6,%xmm2
   11019:	f3 0f 58 d3          	addss  %xmm3,%xmm2
   1101d:	f3 42 0f 10 0c 97    	movss  (%rdi,%r10,4),%xmm1
   11023:	f3 0f 5e ce          	divss  %xmm6,%xmm1
   11027:	f3 0f 58 ca          	addss  %xmm2,%xmm1
                for (uint64_t i = 0; i < n_samples; ++i) {
   1102b:	49 83 c2 04          	add    $0x4,%r10
   1102f:	4c 39 d6             	cmp    %r10,%rsi
   11032:	75 bc                	jne    10ff0 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x590>
   11034:	48 85 d2             	test   %rdx,%rdx
   11037:	0f 84 73 ff ff ff    	je     10fb0 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x550>
   1103d:	4f 8d 14 91          	lea    (%r9,%r10,4),%r10
   11041:	45 31 db             	xor    %r11d,%r11d
   11044:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
   1104b:	00 00 00 00 00 
                    x_mu[pid] += x_tmp[pid * n_samples + i] / N;
   11050:	f3 43 0f 10 14 9a    	movss  (%r10,%r11,4),%xmm2
   11056:	f3 0f 5e d6          	divss  %xmm6,%xmm2
   1105a:	f3 0f 58 ca          	addss  %xmm2,%xmm1
                for (uint64_t i = 0; i < n_samples; ++i) {
   1105e:	49 ff c3             	inc    %r11
   11061:	4c 39 da             	cmp    %r11,%rdx
   11064:	75 ea                	jne    11050 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x5f0>
   11066:	e9 45 ff ff ff       	jmpq   10fb0 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x550>
   1106b:	48 85 ed             	test   %rbp,%rbp
   1106e:	4c 8b 6c 24 38       	mov    0x38(%rsp),%r13
   11073:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
        for (uint64_t i = 0; i < n_samples; ++i) {
   11078:	74 6c                	je     110e6 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x686>
   1107a:	48 83 fd 08          	cmp    $0x8,%rbp
   1107e:	73 04                	jae    11084 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x624>
   11080:	31 d2                	xor    %edx,%edx
   11082:	eb 4c                	jmp    110d0 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x670>
   11084:	48 b9 fc ff ff ff ff 	movabs $0x1ffffffffffffffc,%rcx
   1108b:	ff ff 1f 
   1108e:	48 8d 51 fc          	lea    -0x4(%rcx),%rdx
   11092:	48 21 ea             	and    %rbp,%rdx
   11095:	0f 28 c8             	movaps %xmm0,%xmm1
   11098:	0f c6 c8 00          	shufps $0x0,%xmm0,%xmm1
   1109c:	31 c9                	xor    %ecx,%ecx
   1109e:	66 90                	xchg   %ax,%ax
            y_diff[i] = Y[i] - y_mu;
   110a0:	0f 10 14 8e          	movups (%rsi,%rcx,4),%xmm2
   110a4:	0f 10 5c 8e 10       	movups 0x10(%rsi,%rcx,4),%xmm3
   110a9:	0f 5c d1             	subps  %xmm1,%xmm2
   110ac:	0f 5c d9             	subps  %xmm1,%xmm3
   110af:	0f 11 14 8b          	movups %xmm2,(%rbx,%rcx,4)
   110b3:	0f 11 5c 8b 10       	movups %xmm3,0x10(%rbx,%rcx,4)
        for (uint64_t i = 0; i < n_samples; ++i) {
   110b8:	48 83 c1 08          	add    $0x8,%rcx
   110bc:	48 39 ca             	cmp    %rcx,%rdx
   110bf:	75 df                	jne    110a0 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x640>
   110c1:	48 39 ea             	cmp    %rbp,%rdx
   110c4:	74 20                	je     110e6 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x686>
   110c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   110cd:	00 00 00 
            y_diff[i] = Y[i] - y_mu;
   110d0:	f3 0f 10 0c 96       	movss  (%rsi,%rdx,4),%xmm1
   110d5:	f3 0f 5c c8          	subss  %xmm0,%xmm1
   110d9:	f3 0f 11 0c 93       	movss  %xmm1,(%rbx,%rdx,4)
        for (uint64_t i = 0; i < n_samples; ++i) {
   110de:	48 ff c2             	inc    %rdx
   110e1:	48 39 d5             	cmp    %rdx,%rbp
   110e4:	75 ea                	jne    110d0 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x670>
   110e6:	4d 85 d2             	test   %r10,%r10
        for (uint64_t pid = 0; pid < n_progs; ++pid) {
   110e9:	0f 84 be 00 00 00    	je     111ad <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x74d>
   110ef:	48 b9 fc ff ff ff ff 	movabs $0x1ffffffffffffffc,%rcx
   110f6:	ff ff 1f 
   110f9:	4c 8d 59 fc          	lea    -0x4(%rcx),%r11
   110fd:	49 21 eb             	and    %rbp,%r11
   11100:	49 8d 4d 10          	lea    0x10(%r13),%rcx
   11104:	48 8d 14 ad 00 00 00 	lea    0x0(,%rbp,4),%rdx
   1110b:	00 
   1110c:	49 8d 76 10          	lea    0x10(%r14),%rsi
   11110:	31 ff                	xor    %edi,%edi
   11112:	4d 89 e8             	mov    %r13,%r8
   11115:	eb 1d                	jmp    11134 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x6d4>
   11117:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1111e:	00 00 
   11120:	48 ff c7             	inc    %rdi
   11123:	48 01 d1             	add    %rdx,%rcx
   11126:	48 01 d6             	add    %rdx,%rsi
   11129:	49 01 d0             	add    %rdx,%r8
   1112c:	49 01 d6             	add    %rdx,%r14
   1112f:	4c 39 d7             	cmp    %r10,%rdi
   11132:	74 79                	je     111ad <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x74d>
   11134:	48 85 ed             	test   %rbp,%rbp
            for (uint64_t i = 0; i < n_samples; ++i) {
   11137:	74 e7                	je     11120 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x6c0>
   11139:	f3 0f 10 04 b8       	movss  (%rax,%rdi,4),%xmm0
   1113e:	48 83 fd 08          	cmp    $0x8,%rbp
   11142:	73 0c                	jae    11150 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x6f0>
   11144:	45 31 c9             	xor    %r9d,%r9d
   11147:	eb 47                	jmp    11190 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x730>
   11149:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   11150:	0f 28 c8             	movaps %xmm0,%xmm1
   11153:	0f c6 c8 00          	shufps $0x0,%xmm0,%xmm1
   11157:	45 31 c9             	xor    %r9d,%r9d
   1115a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
                x_diff[pid * n_samples + i] = X[pid * n_samples + i] - x_mu[pid];
   11160:	42 0f 10 54 8e f0    	movups -0x10(%rsi,%r9,4),%xmm2
   11166:	42 0f 10 1c 8e       	movups (%rsi,%r9,4),%xmm3
   1116b:	0f 5c d1             	subps  %xmm1,%xmm2
   1116e:	0f 5c d9             	subps  %xmm1,%xmm3
   11171:	42 0f 11 54 89 f0    	movups %xmm2,-0x10(%rcx,%r9,4)
   11177:	42 0f 11 1c 89       	movups %xmm3,(%rcx,%r9,4)
            for (uint64_t i = 0; i < n_samples; ++i) {
   1117c:	49 83 c1 08          	add    $0x8,%r9
   11180:	4d 39 cb             	cmp    %r9,%r11
   11183:	75 db                	jne    11160 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x700>
   11185:	4d 89 d9             	mov    %r11,%r9
   11188:	49 39 eb             	cmp    %rbp,%r11
   1118b:	74 93                	je     11120 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x6c0>
   1118d:	0f 1f 00             	nopl   (%rax)
                x_diff[pid * n_samples + i] = X[pid * n_samples + i] - x_mu[pid];
   11190:	f3 43 0f 10 0c 8e    	movss  (%r14,%r9,4),%xmm1
   11196:	f3 0f 5c c8          	subss  %xmm0,%xmm1
   1119a:	f3 43 0f 11 0c 88    	movss  %xmm1,(%r8,%r9,4)
            for (uint64_t i = 0; i < n_samples; ++i) {
   111a0:	49 ff c1             	inc    %r9
   111a3:	4c 39 cd             	cmp    %r9,%rbp
   111a6:	75 e8                	jne    11190 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x730>
   111a8:	e9 73 ff ff ff       	jmpq   11120 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x6c0>
   111ad:	0f 57 c9             	xorps  %xmm1,%xmm1
   111b0:	0f 57 c0             	xorps  %xmm0,%xmm0
   111b3:	48 85 ed             	test   %rbp,%rbp
            for (uint64_t i = 0; i < n_samples; ++i) {
   111b6:	0f 84 be 00 00 00    	je     1127a <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x81a>
   111bc:	48 8d 4d ff          	lea    -0x1(%rbp),%rcx
   111c0:	89 e8                	mov    %ebp,%eax
   111c2:	83 e0 03             	and    $0x3,%eax
   111c5:	48 83 f9 03          	cmp    $0x3,%rcx
   111c9:	73 04                	jae    111cf <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x76f>
   111cb:	31 c9                	xor    %ecx,%ecx
   111cd:	eb 7c                	jmp    1124b <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x7eb>
   111cf:	48 89 ea             	mov    %rbp,%rdx
   111d2:	48 b9 fc ff ff ff ff 	movabs $0x1ffffffffffffffc,%rcx
   111d9:	ff ff 1f 
   111dc:	48 21 ca             	and    %rcx,%rdx
   111df:	31 c9                	xor    %ecx,%ecx
   111e1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   111e8:	0f 1f 84 00 00 00 00 
   111ef:	00 
                y_std += y_diff[i] * y_diff[i] * W[i];
   111f0:	f3 0f 10 14 8b       	movss  (%rbx,%rcx,4),%xmm2
   111f5:	f3 0f 10 5c 8b 04    	movss  0x4(%rbx,%rcx,4),%xmm3
   111fb:	f3 0f 59 d2          	mulss  %xmm2,%xmm2
   111ff:	f3 41 0f 59 14 8c    	mulss  (%r12,%rcx,4),%xmm2
   11205:	f3 0f 58 d0          	addss  %xmm0,%xmm2
   11209:	f3 0f 59 db          	mulss  %xmm3,%xmm3
   1120d:	f3 41 0f 59 5c 8c 04 	mulss  0x4(%r12,%rcx,4),%xmm3
   11214:	f3 0f 58 da          	addss  %xmm2,%xmm3
   11218:	f3 0f 10 54 8b 08    	movss  0x8(%rbx,%rcx,4),%xmm2
   1121e:	f3 0f 59 d2          	mulss  %xmm2,%xmm2
   11222:	f3 41 0f 59 54 8c 08 	mulss  0x8(%r12,%rcx,4),%xmm2
   11229:	f3 0f 10 44 8b 0c    	movss  0xc(%rbx,%rcx,4),%xmm0
   1122f:	f3 0f 59 c0          	mulss  %xmm0,%xmm0
   11233:	f3 41 0f 59 44 8c 0c 	mulss  0xc(%r12,%rcx,4),%xmm0
   1123a:	f3 0f 58 d3          	addss  %xmm3,%xmm2
   1123e:	f3 0f 58 c2          	addss  %xmm2,%xmm0
            for (uint64_t i = 0; i < n_samples; ++i) {
   11242:	48 83 c1 04          	add    $0x4,%rcx
   11246:	48 39 ca             	cmp    %rcx,%rdx
   11249:	75 a5                	jne    111f0 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x790>
   1124b:	48 85 c0             	test   %rax,%rax
   1124e:	74 2a                	je     1127a <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x81a>
   11250:	49 8d 14 8c          	lea    (%r12,%rcx,4),%rdx
   11254:	48 8d 0c 8b          	lea    (%rbx,%rcx,4),%rcx
   11258:	31 f6                	xor    %esi,%esi
   1125a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
                y_std += y_diff[i] * y_diff[i] * W[i];
   11260:	f3 0f 10 14 b1       	movss  (%rcx,%rsi,4),%xmm2
   11265:	f3 0f 59 d2          	mulss  %xmm2,%xmm2
   11269:	f3 0f 59 14 b2       	mulss  (%rdx,%rsi,4),%xmm2
   1126e:	f3 0f 58 c2          	addss  %xmm2,%xmm0
            for (uint64_t i = 0; i < n_samples; ++i) {
   11272:	48 ff c6             	inc    %rsi
   11275:	48 39 f0             	cmp    %rsi,%rax
   11278:	75 e6                	jne    11260 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x800>
            for (uint64_t pid = 0; pid < n_progs; ++pid) {
   1127a:	0f 2e c1             	ucomiss %xmm1,%xmm0
   1127d:	0f 29 74 24 50       	movaps %xmm6,0x50(%rsp)
   11282:	72 11                	jb     11295 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x835>
   11284:	0f 57 e4             	xorps  %xmm4,%xmm4
   11287:	f3 0f 51 e0          	sqrtss %xmm0,%xmm4
   1128b:	4d 85 d2             	test   %r10,%r10
   1128e:	75 20                	jne    112b0 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x850>
   11290:	e9 76 03 00 00       	jmpq   1160b <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xbab>
   11295:	e8 f6 65 00 00       	callq  17890 <sqrtf@plt>
   1129a:	0f 28 74 24 50       	movaps 0x50(%rsp),%xmm6
   1129f:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
   112a4:	0f 28 e0             	movaps %xmm0,%xmm4
   112a7:	4d 85 d2             	test   %r10,%r10
   112aa:	0f 84 5b 03 00 00    	je     1160b <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xbab>
   112b0:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
   112b4:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
   112b9:	4c 89 e8             	mov    %r13,%rax
   112bc:	48 b9 fc ff ff ff ff 	movabs $0x1ffffffffffffffc,%rcx
   112c3:	ff ff 1f 
   112c6:	4c 8d 69 02          	lea    0x2(%rcx),%r13
   112ca:	49 21 ed             	and    %rbp,%r13
   112cd:	4c 8d 78 04          	lea    0x4(%rax),%r15
   112d1:	48 8d 04 ad 00 00 00 	lea    0x0(,%rbp,4),%rax
   112d8:	00 
   112d9:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
   112de:	45 31 f6             	xor    %r14d,%r14d
   112e1:	0f 57 db             	xorps  %xmm3,%xmm3
   112e4:	48 8b 34 24          	mov    (%rsp),%rsi
   112e8:	0f 29 64 24 60       	movaps %xmm4,0x60(%rsp)
   112ed:	eb 33                	jmp    11322 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x8c2>
   112ef:	90                   	nop
   112f0:	e8 9b 65 00 00       	callq  17890 <sqrtf@plt>
   112f5:	0f 57 db             	xorps  %xmm3,%xmm3
   112f8:	0f 28 64 24 60       	movaps 0x60(%rsp),%xmm4
   112fd:	0f 28 74 24 50       	movaps 0x50(%rsp),%xmm6
   11302:	48 8b 34 24          	mov    (%rsp),%rsi
   11306:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
                x_std[pid] = std::sqrt(x_std[pid]);
   1130b:	f3 42 0f 11 04 b6    	movss  %xmm0,(%rsi,%r14,4)
            for (uint64_t pid = 0; pid < n_progs; ++pid) {
   11311:	49 ff c6             	inc    %r14
   11314:	4c 03 7c 24 40       	add    0x40(%rsp),%r15
   11319:	4d 39 d6             	cmp    %r10,%r14
   1131c:	0f 84 c8 00 00 00    	je     113ea <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x98a>
   11322:	48 85 ed             	test   %rbp,%rbp
                for (uint64_t i = 0; i < n_samples; ++i) {
   11325:	0f 84 95 00 00 00    	je     113c0 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x960>
   1132b:	f3 42 0f 10 04 b6    	movss  (%rsi,%r14,4),%xmm0
   11331:	48 83 7c 24 30 00    	cmpq   $0x0,0x30(%rsp)
   11337:	0f 84 a3 00 00 00    	je     113e0 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x980>
   1133d:	0f 28 c8             	movaps %xmm0,%xmm1
   11340:	31 c0                	xor    %eax,%eax
   11342:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   11349:	1f 84 00 00 00 00 00 
                    x_std[pid] += x_diff[pid * n_samples + i] * x_diff[pid * n_samples + i] * W[i];
   11350:	f3 41 0f 10 54 87 fc 	movss  -0x4(%r15,%rax,4),%xmm2
   11357:	f3 41 0f 10 04 87    	movss  (%r15,%rax,4),%xmm0
   1135d:	f3 0f 59 d2          	mulss  %xmm2,%xmm2
   11361:	f3 41 0f 59 14 84    	mulss  (%r12,%rax,4),%xmm2
   11367:	f3 0f 58 d1          	addss  %xmm1,%xmm2
   1136b:	f3 0f 59 c0          	mulss  %xmm0,%xmm0
   1136f:	f3 41 0f 59 44 84 04 	mulss  0x4(%r12,%rax,4),%xmm0
   11376:	f3 0f 58 c2          	addss  %xmm2,%xmm0
                for (uint64_t i = 0; i < n_samples; ++i) {
   1137a:	48 83 c0 02          	add    $0x2,%rax
   1137e:	0f 28 c8             	movaps %xmm0,%xmm1
   11381:	49 39 c5             	cmp    %rax,%r13
   11384:	75 ca                	jne    11350 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x8f0>
   11386:	40 f6 c5 01          	test   $0x1,%bpl
   1138a:	74 22                	je     113ae <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x94e>
   1138c:	4c 89 f1             	mov    %r14,%rcx
   1138f:	48 0f af cd          	imul   %rbp,%rcx
                    x_std[pid] += x_diff[pid * n_samples + i] * x_diff[pid * n_samples + i] * W[i];
   11393:	48 01 c1             	add    %rax,%rcx
   11396:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
   1139b:	f3 0f 10 0c 8a       	movss  (%rdx,%rcx,4),%xmm1
   113a0:	f3 0f 59 c9          	mulss  %xmm1,%xmm1
   113a4:	f3 41 0f 59 0c 84    	mulss  (%r12,%rax,4),%xmm1
   113aa:	f3 0f 58 c1          	addss  %xmm1,%xmm0
   113ae:	f3 42 0f 11 04 b6    	movss  %xmm0,(%rsi,%r14,4)
                x_std[pid] = std::sqrt(x_std[pid]);
   113b4:	0f 2e c3             	ucomiss %xmm3,%xmm0
   113b7:	0f 82 33 ff ff ff    	jb     112f0 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x890>
   113bd:	eb 10                	jmp    113cf <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x96f>
   113bf:	90                   	nop
   113c0:	f3 42 0f 10 04 b6    	movss  (%rsi,%r14,4),%xmm0
   113c6:	0f 2e c3             	ucomiss %xmm3,%xmm0
   113c9:	0f 82 21 ff ff ff    	jb     112f0 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x890>
   113cf:	f3 0f 51 c0          	sqrtss %xmm0,%xmm0
   113d3:	e9 33 ff ff ff       	jmpq   1130b <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x8ab>
   113d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   113df:	00 
   113e0:	31 c0                	xor    %eax,%eax
   113e2:	40 f6 c5 01          	test   $0x1,%bpl
                for (uint64_t i = 0; i < n_samples; ++i) {
   113e6:	75 a4                	jne    1138c <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x92c>
   113e8:	eb c4                	jmp    113ae <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x94e>
   113ea:	48 89 e8             	mov    %rbp,%rax
   113ed:	49 bb fc ff ff ff ff 	movabs $0x1ffffffffffffffc,%r11
   113f4:	ff ff 1f 
   113f7:	4c 21 d8             	and    %r11,%rax
   113fa:	0f 28 c6             	movaps %xmm6,%xmm0
   113fd:	0f c6 c6 00          	shufps $0x0,%xmm6,%xmm0
   11401:	0f 28 cc             	movaps %xmm4,%xmm1
   11404:	0f c6 cc 00          	shufps $0x0,%xmm4,%xmm1
   11408:	31 c9                	xor    %ecx,%ecx
   1140a:	4c 8b 6c 24 38       	mov    0x38(%rsp),%r13
   1140f:	4c 89 ea             	mov    %r13,%rdx
   11412:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
   11417:	4c 89 c6             	mov    %r8,%rsi
   1141a:	4c 8b 7c 24 28       	mov    0x28(%rsp),%r15
   1141f:	4c 8b 4c 24 48       	mov    0x48(%rsp),%r9
   11424:	4c 8b 74 24 40       	mov    0x40(%rsp),%r14
   11429:	eb 13                	jmp    1143e <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x9de>
   1142b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        for (uint64_t pid = 0; pid < n_progs; ++pid) {
   11430:	48 ff c1             	inc    %rcx
   11433:	4c 01 f6             	add    %r14,%rsi
   11436:	4c 01 f2             	add    %r14,%rdx
   11439:	4c 39 d1             	cmp    %r10,%rcx
   1143c:	74 69                	je     114a7 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xa47>
   1143e:	48 85 ed             	test   %rbp,%rbp
            for (uint64_t i = 0; i < n_samples; ++i) {
   11441:	74 ed                	je     11430 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x9d0>
   11443:	31 ff                	xor    %edi,%edi
   11445:	48 83 fd 04          	cmp    $0x4,%rbp
   11449:	72 35                	jb     11480 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xa20>
   1144b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                    N * W[i] * x_diff[pid * n_samples + i] * y_diff[i] / y_std;
   11450:	41 0f 10 14 bc       	movups (%r12,%rdi,4),%xmm2
   11455:	0f 59 d0             	mulps  %xmm0,%xmm2
   11458:	0f 10 1c ba          	movups (%rdx,%rdi,4),%xmm3
   1145c:	0f 59 da             	mulps  %xmm2,%xmm3
   1145f:	0f 10 14 bb          	movups (%rbx,%rdi,4),%xmm2
   11463:	0f 59 d3             	mulps  %xmm3,%xmm2
   11466:	0f 5e d1             	divps  %xmm1,%xmm2
                corr[pid * n_samples + i] =
   11469:	0f 11 14 be          	movups %xmm2,(%rsi,%rdi,4)
            for (uint64_t i = 0; i < n_samples; ++i) {
   1146d:	48 83 c7 04          	add    $0x4,%rdi
   11471:	48 39 f8             	cmp    %rdi,%rax
   11474:	75 da                	jne    11450 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x9f0>
   11476:	48 89 c7             	mov    %rax,%rdi
   11479:	48 39 e8             	cmp    %rbp,%rax
   1147c:	74 b2                	je     11430 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x9d0>
   1147e:	66 90                	xchg   %ax,%ax
   11480:	f3 41 0f 10 14 bc    	movss  (%r12,%rdi,4),%xmm2
                    N * W[i] * x_diff[pid * n_samples + i] * y_diff[i] / y_std;
   11486:	f3 0f 59 d6          	mulss  %xmm6,%xmm2
   1148a:	f3 0f 59 14 ba       	mulss  (%rdx,%rdi,4),%xmm2
   1148f:	f3 0f 59 14 bb       	mulss  (%rbx,%rdi,4),%xmm2
   11494:	f3 0f 5e d4          	divss  %xmm4,%xmm2
                corr[pid * n_samples + i] =
   11498:	f3 0f 11 14 be       	movss  %xmm2,(%rsi,%rdi,4)
            for (uint64_t i = 0; i < n_samples; ++i) {
   1149d:	48 ff c7             	inc    %rdi
   114a0:	48 39 fd             	cmp    %rdi,%rbp
   114a3:	75 db                	jne    11480 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xa20>
   114a5:	eb 89                	jmp    11430 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0x9d0>
   114a7:	48 89 e8             	mov    %rbp,%rax
   114aa:	4c 21 d8             	and    %r11,%rax
   114ad:	31 c9                	xor    %ecx,%ecx
   114af:	4c 89 c2             	mov    %r8,%rdx
   114b2:	eb 17                	jmp    114cb <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xa6b>
   114b4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
   114bb:	00 00 00 00 00 
        for (uint64_t pid = 0; pid < n_progs; ++pid) {
   114c0:	48 ff c1             	inc    %rcx
   114c3:	4c 01 f2             	add    %r14,%rdx
   114c6:	4c 39 d1             	cmp    %r10,%rcx
   114c9:	74 6d                	je     11538 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xad8>
   114cb:	48 85 ed             	test   %rbp,%rbp
            for (uint64_t i = 0; i < n_samples; ++i) {
   114ce:	74 f0                	je     114c0 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xa60>
   114d0:	48 8b 34 24          	mov    (%rsp),%rsi
   114d4:	f3 0f 10 04 8e       	movss  (%rsi,%rcx,4),%xmm0
   114d9:	48 83 fd 04          	cmp    $0x4,%rbp
   114dd:	73 11                	jae    114f0 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xa90>
   114df:	31 f6                	xor    %esi,%esi
   114e1:	eb 3d                	jmp    11520 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xac0>
   114e3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   114ea:	84 00 00 00 00 00 
   114f0:	0f 28 c8             	movaps %xmm0,%xmm1
   114f3:	0f c6 c8 00          	shufps $0x0,%xmm0,%xmm1
   114f7:	31 f6                	xor    %esi,%esi
   114f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
                corr[pid * n_samples + i] = corr[pid * n_samples + i] / x_std[pid];
   11500:	0f 10 14 b2          	movups (%rdx,%rsi,4),%xmm2
   11504:	0f 5e d1             	divps  %xmm1,%xmm2
   11507:	0f 11 14 b2          	movups %xmm2,(%rdx,%rsi,4)
            for (uint64_t i = 0; i < n_samples; ++i) {
   1150b:	48 83 c6 04          	add    $0x4,%rsi
   1150f:	48 39 f0             	cmp    %rsi,%rax
   11512:	75 ec                	jne    11500 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xaa0>
   11514:	48 89 c6             	mov    %rax,%rsi
   11517:	48 39 e8             	cmp    %rbp,%rax
   1151a:	74 a4                	je     114c0 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xa60>
   1151c:	0f 1f 40 00          	nopl   0x0(%rax)
                corr[pid * n_samples + i] = corr[pid * n_samples + i] / x_std[pid];
   11520:	f3 0f 10 0c b2       	movss  (%rdx,%rsi,4),%xmm1
   11525:	f3 0f 5e c8          	divss  %xmm0,%xmm1
   11529:	f3 0f 11 0c b2       	movss  %xmm1,(%rdx,%rsi,4)
            for (uint64_t i = 0; i < n_samples; ++i) {
   1152e:	48 ff c6             	inc    %rsi
   11531:	48 39 f5             	cmp    %rsi,%rbp
   11534:	75 ea                	jne    11520 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xac0>
   11536:	eb 88                	jmp    114c0 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xa60>
   11538:	89 e8                	mov    %ebp,%eax
   1153a:	83 e0 03             	and    $0x3,%eax
   1153d:	49 21 eb             	and    %rbp,%r11
        for (uint64_t pid = 0; pid < n_progs; ++pid) {
   11540:	49 8d 48 0c          	lea    0xc(%r8),%rcx
   11544:	31 d2                	xor    %edx,%edx
   11546:	4c 89 c6             	mov    %r8,%rsi
   11549:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
   1154e:	eb 18                	jmp    11568 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xb08>
                out[pid] += corr[pid * n_samples + i] / N;
   11550:	f3 41 0f 11 04 91    	movss  %xmm0,(%r9,%rdx,4)
        for (uint64_t pid = 0; pid < n_progs; ++pid) {
   11556:	48 ff c2             	inc    %rdx
   11559:	4c 01 f1             	add    %r14,%rcx
   1155c:	4c 01 f6             	add    %r14,%rsi
   1155f:	4c 39 d2             	cmp    %r10,%rdx
   11562:	0f 84 a3 00 00 00    	je     1160b <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xbab>
            out[pid] = static_cast<math_t>(0);
   11568:	41 c7 04 91 00 00 00 	movl   $0x0,(%r9,%rdx,4)
   1156f:	00 
   11570:	48 85 ed             	test   %rbp,%rbp
            for (uint64_t i = 0; i < n_samples; ++i) {
   11573:	74 e1                	je     11556 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xaf6>
   11575:	48 83 7c 24 30 03    	cmpq   $0x3,0x30(%rsp)
   1157b:	73 13                	jae    11590 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xb30>
   1157d:	0f 57 c0             	xorps  %xmm0,%xmm0
   11580:	31 ff                	xor    %edi,%edi
   11582:	eb 5c                	jmp    115e0 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xb80>
   11584:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
   1158b:	00 00 00 00 00 
   11590:	0f 57 c0             	xorps  %xmm0,%xmm0
   11593:	31 ff                	xor    %edi,%edi
   11595:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
   1159c:	00 00 00 00 
                out[pid] += corr[pid * n_samples + i] / N;
   115a0:	f3 0f 10 4c b9 f4    	movss  -0xc(%rcx,%rdi,4),%xmm1
   115a6:	f3 0f 10 54 b9 f8    	movss  -0x8(%rcx,%rdi,4),%xmm2
   115ac:	f3 0f 5e ce          	divss  %xmm6,%xmm1
   115b0:	f3 0f 58 c8          	addss  %xmm0,%xmm1
   115b4:	f3 0f 5e d6          	divss  %xmm6,%xmm2
   115b8:	f3 0f 58 d1          	addss  %xmm1,%xmm2
   115bc:	f3 0f 10 4c b9 fc    	movss  -0x4(%rcx,%rdi,4),%xmm1
   115c2:	f3 0f 5e ce          	divss  %xmm6,%xmm1
   115c6:	f3 0f 58 ca          	addss  %xmm2,%xmm1
   115ca:	f3 0f 10 04 b9       	movss  (%rcx,%rdi,4),%xmm0
   115cf:	f3 0f 5e c6          	divss  %xmm6,%xmm0
   115d3:	f3 0f 58 c1          	addss  %xmm1,%xmm0
            for (uint64_t i = 0; i < n_samples; ++i) {
   115d7:	48 83 c7 04          	add    $0x4,%rdi
   115db:	49 39 fb             	cmp    %rdi,%r11
   115de:	75 c0                	jne    115a0 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xb40>
   115e0:	48 85 c0             	test   %rax,%rax
   115e3:	0f 84 67 ff ff ff    	je     11550 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xaf0>
   115e9:	48 8d 3c be          	lea    (%rsi,%rdi,4),%rdi
   115ed:	45 31 c0             	xor    %r8d,%r8d
                out[pid] += corr[pid * n_samples + i] / N;
   115f0:	f3 42 0f 10 0c 87    	movss  (%rdi,%r8,4),%xmm1
   115f6:	f3 0f 5e ce          	divss  %xmm6,%xmm1
   115fa:	f3 0f 58 c1          	addss  %xmm1,%xmm0
            for (uint64_t i = 0; i < n_samples; ++i) {
   115fe:	49 ff c0             	inc    %r8
   11601:	4c 39 c0             	cmp    %r8,%rax
   11604:	75 ea                	jne    115f0 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xb90>
   11606:	e9 45 ff ff ff       	jmpq   11550 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xaf0>
   1160b:	48 8b 3c 24          	mov    (%rsp),%rdi
	if (__p)
   1160f:	48 85 ff             	test   %rdi,%rdi
   11612:	74 05                	je     11619 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xbb9>
	::operator delete(__p
   11614:	e8 a7 60 00 00       	callq  176c0 <_ZdlPv@plt>
   11619:	4d 85 ed             	test   %r13,%r13
   1161c:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
   11621:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
   11626:	74 08                	je     11630 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xbd0>
   11628:	4c 89 ef             	mov    %r13,%rdi
   1162b:	e8 90 60 00 00       	callq  176c0 <_ZdlPv@plt>
   11630:	48 85 db             	test   %rbx,%rbx
   11633:	74 08                	je     1163d <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xbdd>
   11635:	48 89 df             	mov    %rbx,%rdi
   11638:	e8 83 60 00 00       	callq  176c0 <_ZdlPv@plt>
   1163d:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
   11642:	48 85 ff             	test   %rdi,%rdi
   11645:	74 05                	je     1164c <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xbec>
   11647:	e8 74 60 00 00       	callq  176c0 <_ZdlPv@plt>
   1164c:	4d 85 f6             	test   %r14,%r14
   1164f:	74 08                	je     11659 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xbf9>
   11651:	4c 89 f7             	mov    %r14,%rdi
   11654:	e8 67 60 00 00       	callq  176c0 <_ZdlPv@plt>
   11659:	4d 85 ff             	test   %r15,%r15
   1165c:	74 08                	je     11666 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xc06>
   1165e:	4c 89 ff             	mov    %r15,%rdi
   11661:	e8 5a 60 00 00       	callq  176c0 <_ZdlPv@plt>
   11666:	4d 85 e4             	test   %r12,%r12
   11669:	74 16                	je     11681 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xc21>
   1166b:	4c 89 e7             	mov    %r12,%rdi
   1166e:	48 83 c4 78          	add    $0x78,%rsp
   11672:	5b                   	pop    %rbx
   11673:	41 5c                	pop    %r12
   11675:	41 5d                	pop    %r13
   11677:	41 5e                	pop    %r14
   11679:	41 5f                	pop    %r15
   1167b:	5d                   	pop    %rbp
   1167c:	e9 3f 60 00 00       	jmpq   176c0 <_ZdlPv@plt>
    }
   11681:	48 83 c4 78          	add    $0x78,%rsp
   11685:	5b                   	pop    %rbx
   11686:	41 5c                	pop    %r12
   11688:	41 5d                	pop    %r13
   1168a:	41 5e                	pop    %r14
   1168c:	41 5f                	pop    %r15
   1168e:	5d                   	pop    %rbp
   1168f:	c3                   	retq   
	  __throw_length_error(
   11690:	48 8d 3d 2c 17 ff ff 	lea    -0xe8d4(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
   11697:	e8 d4 5e 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
   1169c:	48 8d 3d 20 17 ff ff 	lea    -0xe8e0(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
   116a3:	e8 c8 5e 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
   116a8:	48 8d 3d 14 17 ff ff 	lea    -0xe8ec(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
   116af:	e8 bc 5e 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
   116b4:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
   116b9:	49 89 c6             	mov    %rax,%r14
   116bc:	eb 2c                	jmp    116ea <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xc8a>
   116be:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
   116c3:	49 89 c6             	mov    %rax,%r14
   116c6:	e9 8c 00 00 00       	jmpq   11757 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xcf7>
   116cb:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
   116d0:	49 89 c6             	mov    %rax,%r14
	if (__p)
   116d3:	48 83 7c 24 38 00    	cmpq   $0x0,0x38(%rsp)
   116d9:	74 0a                	je     116e5 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xc85>
   116db:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
   116e0:	e8 db 5f 00 00       	callq  176c0 <_ZdlPv@plt>
   116e5:	48 85 db             	test   %rbx,%rbx
   116e8:	74 12                	je     116fc <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xc9c>
   116ea:	48 89 df             	mov    %rbx,%rdi
   116ed:	e8 ce 5f 00 00       	callq  176c0 <_ZdlPv@plt>
   116f2:	eb 08                	jmp    116fc <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xc9c>
   116f4:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
   116f9:	49 89 c6             	mov    %rax,%r14
   116fc:	48 83 7c 24 18 00    	cmpq   $0x0,0x18(%rsp)
   11702:	75 1d                	jne    11721 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xcc1>
   11704:	48 83 7c 24 20 00    	cmpq   $0x0,0x20(%rsp)
   1170a:	75 39                	jne    11745 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xce5>
   1170c:	48 83 7c 24 28 00    	cmpq   $0x0,0x28(%rsp)
   11712:	75 43                	jne    11757 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xcf7>
   11714:	4d 85 ed             	test   %r13,%r13
   11717:	75 5c                	jne    11775 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xd15>
   11719:	4c 89 f7             	mov    %r14,%rdi
   1171c:	e8 4f 62 00 00       	callq  17970 <_Unwind_Resume@plt>
   11721:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
   11726:	e8 95 5f 00 00       	callq  176c0 <_ZdlPv@plt>
   1172b:	48 83 7c 24 20 00    	cmpq   $0x0,0x20(%rsp)
   11731:	74 d9                	je     1170c <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xcac>
   11733:	eb 10                	jmp    11745 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xce5>
   11735:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
   1173a:	49 89 c6             	mov    %rax,%r14
   1173d:	48 83 7c 24 20 00    	cmpq   $0x0,0x20(%rsp)
   11743:	74 c7                	je     1170c <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xcac>
   11745:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   1174a:	e8 71 5f 00 00       	callq  176c0 <_ZdlPv@plt>
   1174f:	48 83 7c 24 28 00    	cmpq   $0x0,0x28(%rsp)
   11755:	74 bd                	je     11714 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xcb4>
   11757:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
   1175c:	e8 5f 5f 00 00       	callq  176c0 <_ZdlPv@plt>
   11761:	4d 85 ed             	test   %r13,%r13
   11764:	74 b3                	je     11719 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xcb9>
   11766:	eb 0d                	jmp    11775 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xd15>
   11768:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
   1176d:	49 89 c6             	mov    %rax,%r14
   11770:	4d 85 ed             	test   %r13,%r13
   11773:	74 a4                	je     11719 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_+0xcb9>
   11775:	4c 89 ef             	mov    %r13,%rdi
   11778:	e8 43 5f 00 00       	callq  176c0 <_ZdlPv@plt>
   1177d:	4c 89 f7             	mov    %r14,%rdi
   11780:	e8 eb 61 00 00       	callq  17970 <_Unwind_Resume@plt>
   11785:	cc                   	int3   
   11786:	cc                   	int3   
   11787:	cc                   	int3   
   11788:	cc                   	int3   
   11789:	cc                   	int3   
   1178a:	cc                   	int3   
   1178b:	cc                   	int3   
   1178c:	cc                   	int3   
   1178d:	cc                   	int3   
   1178e:	cc                   	int3   
   1178f:	cc                   	int3   

0000000000011790 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_>:
                          const math_t* Y_pred, const math_t* W, math_t* out) {
   11790:	55                   	push   %rbp
   11791:	41 57                	push   %r15
   11793:	41 56                	push   %r14
   11795:	41 55                	push   %r13
   11797:	41 54                	push   %r12
   11799:	53                   	push   %rbx
   1179a:	48 81 ec 78 01 00 00 	sub    $0x178,%rsp
   117a1:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
   117a6:	48 b8 f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%rax
   117ad:	ff ff 7f 
	: _M_start(), _M_finish(), _M_end_of_storage()
   117b0:	66 0f ef c0          	pxor   %xmm0,%xmm0
   117b4:	66 0f 7f 84 24 a0 00 	movdqa %xmm0,0xa0(%rsp)
   117bb:	00 00 
   117bd:	48 c7 84 24 b0 00 00 	movq   $0x0,0xb0(%rsp)
   117c4:	00 00 00 00 00 
   117c9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   117ce:	4c 8d 2c bd 00 00 00 	lea    0x0(,%rdi,4),%r13
   117d5:	00 
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   117d6:	48 83 c0 04          	add    $0x4,%rax
   117da:	49 39 c5             	cmp    %rax,%r13
   117dd:	0f 87 b2 0d 00 00    	ja     12595 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xe05>
   117e3:	4d 89 c7             	mov    %r8,%r15
   117e6:	48 89 cd             	mov    %rcx,%rbp
   117e9:	48 89 d3             	mov    %rdx,%rbx
   117ec:	4c 89 8c 24 e8 00 00 	mov    %r9,0xe8(%rsp)
   117f3:	00 
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   117f4:	4c 89 ef             	mov    %r13,%rdi
   117f7:	e8 64 5f 00 00       	callq  17760 <_Znwm@plt>
   117fc:	49 bc fc ff ff ff ff 	movabs $0xffffffffffffffc,%r12
   11803:	ff ff 0f 
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   11806:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
   1180d:	00 
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   1180e:	49 89 c6             	mov    %rax,%r14
   11811:	4d 01 ee             	add    %r13,%r14
   11814:	4c 89 b4 24 b0 00 00 	mov    %r14,0xb0(%rsp)
   1181b:	00 
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   1181c:	48 89 c7             	mov    %rax,%rdi
   1181f:	48 89 de             	mov    %rbx,%rsi
   11822:	4c 89 ea             	mov    %r13,%rdx
   11825:	e8 96 61 00 00       	callq  179c0 <memcpy@plt>
	  this->_M_impl._M_finish =
   1182a:	4c 89 b4 24 a8 00 00 	mov    %r14,0xa8(%rsp)
   11831:	00 
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   11832:	49 8d 44 24 03       	lea    0x3(%r12),%rax
   11837:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
   1183c:	48 39 c1             	cmp    %rax,%rcx
   1183f:	0f 87 5c 0d 00 00    	ja     125a1 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xe11>
   11845:	4c 8d 34 cd 00 00 00 	lea    0x0(,%rcx,8),%r14
   1184c:	00 
   1184d:	4c 89 f7             	mov    %r14,%rdi
   11850:	e8 0b 5f 00 00       	callq  17760 <_Znwm@plt>
   11855:	48 89 c3             	mov    %rax,%rbx
   11858:	48 89 6c 24 58       	mov    %rbp,0x58(%rsp)
   1185d:	4c 89 a4 24 90 00 00 	mov    %r12,0x90(%rsp)
   11864:	00 
	*__first = __tmp;
   11865:	48 89 c7             	mov    %rax,%rdi
   11868:	31 f6                	xor    %esi,%esi
   1186a:	4c 89 f2             	mov    %r14,%rdx
   1186d:	e8 1e 61 00 00       	callq  17990 <memset@plt>
   11872:	4c 89 ef             	mov    %r13,%rdi
   11875:	e8 e6 5e 00 00       	callq  17760 <_Znwm@plt>
   1187a:	49 89 c6             	mov    %rax,%r14
   1187d:	4c 89 bc 24 e0 00 00 	mov    %r15,0xe0(%rsp)
   11884:	00 
   11885:	48 89 c7             	mov    %rax,%rdi
   11888:	31 f6                	xor    %esi,%esi
   1188a:	4c 89 ea             	mov    %r13,%rdx
   1188d:	e8 fe 60 00 00       	callq  17990 <memset@plt>
   11892:	4c 89 ef             	mov    %r13,%rdi
   11895:	e8 c6 5e 00 00       	callq  17760 <_Znwm@plt>
   1189a:	4c 89 ea             	mov    %r13,%rdx
   1189d:	48 89 c5             	mov    %rax,%rbp
   118a0:	4c 8b 6c 24 20       	mov    0x20(%rsp),%r13
   118a5:	4a 8d 04 eb          	lea    (%rbx,%r13,8),%rax
   118a9:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
   118ae:	49 bc ff ff ff ff ff 	movabs $0x1fffffffffffffff,%r12
   118b5:	ff ff 1f 
   118b8:	45 31 ff             	xor    %r15d,%r15d
   118bb:	48 89 ef             	mov    %rbp,%rdi
   118be:	31 f6                	xor    %esi,%esi
   118c0:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
   118c5:	e8 c6 60 00 00       	callq  17990 <memset@plt>
      for (; __first != __last; ++__first)
   118ca:	49 8d 4d ff          	lea    -0x1(%r13),%rcx
   118ce:	4c 21 e1             	and    %r12,%rcx
   118d1:	48 83 f9 03          	cmp    $0x3,%rcx
   118d5:	73 0a                	jae    118e1 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x151>
   118d7:	48 89 d8             	mov    %rbx,%rax
   118da:	4c 8b 64 24 50       	mov    0x50(%rsp),%r12
   118df:	eb 6f                	jmp    11950 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x1c0>
   118e1:	48 ff c1             	inc    %rcx
   118e4:	49 89 cf             	mov    %rcx,%r15
   118e7:	48 b8 fc ff ff ff ff 	movabs $0x3ffffffffffffffc,%rax
   118ee:	ff ff 3f 
   118f1:	49 21 c7             	and    %rax,%r15
   118f4:	4a 8d 04 fb          	lea    (%rbx,%r15,8),%rax
   118f8:	66 0f 6f 05 50 0e ff 	movdqa -0xf1b0(%rip),%xmm0        # 2750 <_IO_stdin_used+0x60>
   118ff:	ff 
   11900:	31 d2                	xor    %edx,%edx
   11902:	66 0f 6f 0d 36 0e ff 	movdqa -0xf1ca(%rip),%xmm1        # 2740 <_IO_stdin_used+0x50>
   11909:	ff 
   1190a:	66 0f 6f 15 ce 0e ff 	movdqa -0xf132(%rip),%xmm2        # 27e0 <_IO_stdin_used+0xf0>
   11911:	ff 
   11912:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   11919:	1f 84 00 00 00 00 00 
   11920:	66 0f 6f d8          	movdqa %xmm0,%xmm3
   11924:	66 0f d4 d9          	paddq  %xmm1,%xmm3
	  *__first = __value;
   11928:	f3 0f 7f 04 d3       	movdqu %xmm0,(%rbx,%rdx,8)
   1192d:	f3 0f 7f 5c d3 10    	movdqu %xmm3,0x10(%rbx,%rdx,8)
	  ++__value;
   11933:	48 83 c2 04          	add    $0x4,%rdx
   11937:	66 0f d4 c2          	paddq  %xmm2,%xmm0
   1193b:	49 39 d7             	cmp    %rdx,%r15
   1193e:	75 e0                	jne    11920 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x190>
      for (; __first != __last; ++__first)
   11940:	4c 39 f9             	cmp    %r15,%rcx
   11943:	4c 8b 64 24 50       	mov    0x50(%rsp),%r12
   11948:	74 15                	je     1195f <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x1cf>
   1194a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	  *__first = __value;
   11950:	4c 89 38             	mov    %r15,(%rax)
	  ++__value;
   11953:	49 ff c7             	inc    %r15
	++_M_current;
   11956:	48 83 c0 08          	add    $0x8,%rax
    { return __lhs.base() != __rhs.base(); }
   1195a:	4c 39 e0             	cmp    %r12,%rax
      for (; __first != __last; ++__first)
   1195d:	75 f1                	jne    11950 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x1c0>
   1195f:	4c 8b 7c 24 20       	mov    0x20(%rsp),%r15
  __lg(unsigned __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }

  inline _GLIBCXX_CONSTEXPR long
  __lg(long __n)
  { return (int)sizeof(long) * __CHAR_BIT__ - 1 - __builtin_clzl(__n); }
   11964:	49 0f bd d7          	bsr    %r15,%rdx
   11968:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
   1196f:	00 
   11970:	83 f2 3f             	xor    $0x3f,%edx
				std::__lg(__last - __first) * 2,
   11973:	01 d2                	add    %edx,%edx
   11975:	48 83 f2 7e          	xor    $0x7e,%rdx
   11979:	48 8d 8c 24 a0 00 00 	lea    0xa0(%rsp),%rcx
   11980:	00 
	  std::__introsort_loop(__first, __last,
   11981:	48 89 df             	mov    %rbx,%rdi
   11984:	4c 89 e6             	mov    %r12,%rsi
   11987:	48 89 ac 24 b8 00 00 	mov    %rbp,0xb8(%rsp)
   1198e:	00 
   1198f:	e8 0c 17 00 00       	callq  130a0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_>
   11994:	48 8d 94 24 a0 00 00 	lea    0xa0(%rsp),%rdx
   1199b:	00 
	  std::__final_insertion_sort(__first, __last, __comp);
   1199c:	48 89 df             	mov    %rbx,%rdi
   1199f:	4c 89 e6             	mov    %r12,%rsi
   119a2:	e8 99 1a 00 00       	callq  13440 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_>
   119a7:	4c 8b 64 24 38       	mov    0x38(%rsp),%r12
   119ac:	4c 89 e7             	mov    %r12,%rdi
   119af:	e8 ac 5d 00 00       	callq  17760 <_Znwm@plt>
   119b4:	49 8d 54 24 fc       	lea    -0x4(%r12),%rdx
   119b9:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   119bf:	48 8d 78 04          	lea    0x4(%rax),%rdi
      if (__n <= 0)
   119c3:	49 83 ff 01          	cmp    $0x1,%r15
   119c7:	49 89 c4             	mov    %rax,%r12
   119ca:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
   119cf:	74 14                	je     119e5 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x255>
	*__first = __tmp;
   119d1:	31 f6                	xor    %esi,%esi
   119d3:	e8 b8 5f 00 00       	callq  17990 <memset@plt>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   119d8:	4b 8d 3c bc          	lea    (%r12,%r15,4),%rdi
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   119dc:	4d 85 ff             	test   %r15,%r15
        for (uint64_t i = 0; i < n_samples; ++i) {
   119df:	0f 84 b5 00 00 00    	je     11a9a <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x30a>
   119e5:	49 89 f9             	mov    %rdi,%r9
   119e8:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
   119ef:	00 
   119f0:	44 89 f9             	mov    %r15d,%ecx
   119f3:	83 e1 03             	and    $0x3,%ecx
   119f6:	49 83 ff 04          	cmp    $0x4,%r15
   119fa:	73 04                	jae    11a00 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x270>
   119fc:	31 d2                	xor    %edx,%edx
   119fe:	eb 6b                	jmp    11a6b <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x2db>
   11a00:	4c 89 fe             	mov    %r15,%rsi
   11a03:	48 ba fc ff ff ff ff 	movabs $0xffffffffffffffc,%rdx
   11a0a:	ff ff 0f 
   11a0d:	48 21 d6             	and    %rdx,%rsi
   11a10:	31 d2                	xor    %edx,%edx
   11a12:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   11a19:	1f 84 00 00 00 00 00 
            Ysorted[i] = Ycopy[rank_idx[i]];
   11a20:	48 8b 3c d3          	mov    (%rbx,%rdx,8),%rdi
   11a24:	f3 0f 10 04 b8       	movss  (%rax,%rdi,4),%xmm0
   11a29:	f3 41 0f 11 04 94    	movss  %xmm0,(%r12,%rdx,4)
   11a2f:	48 8b 7c d3 08       	mov    0x8(%rbx,%rdx,8),%rdi
   11a34:	f3 0f 10 04 b8       	movss  (%rax,%rdi,4),%xmm0
   11a39:	f3 41 0f 11 44 94 04 	movss  %xmm0,0x4(%r12,%rdx,4)
   11a40:	48 8b 7c d3 10       	mov    0x10(%rbx,%rdx,8),%rdi
   11a45:	f3 0f 10 04 b8       	movss  (%rax,%rdi,4),%xmm0
   11a4a:	f3 41 0f 11 44 94 08 	movss  %xmm0,0x8(%r12,%rdx,4)
   11a51:	48 8b 7c d3 18       	mov    0x18(%rbx,%rdx,8),%rdi
   11a56:	66 0f 6e 04 b8       	movd   (%rax,%rdi,4),%xmm0
   11a5b:	66 41 0f 7e 44 94 0c 	movd   %xmm0,0xc(%r12,%rdx,4)
        for (uint64_t i = 0; i < n_samples; ++i) {
   11a62:	48 83 c2 04          	add    $0x4,%rdx
   11a66:	48 39 d6             	cmp    %rdx,%rsi
   11a69:	75 b5                	jne    11a20 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x290>
   11a6b:	48 85 c9             	test   %rcx,%rcx
   11a6e:	74 27                	je     11a97 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x307>
   11a70:	49 8d 34 94          	lea    (%r12,%rdx,4),%rsi
   11a74:	48 8d 14 d3          	lea    (%rbx,%rdx,8),%rdx
   11a78:	31 ff                	xor    %edi,%edi
   11a7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            Ysorted[i] = Ycopy[rank_idx[i]];
   11a80:	4c 8b 04 fa          	mov    (%rdx,%rdi,8),%r8
   11a84:	66 42 0f 6e 04 80    	movd   (%rax,%r8,4),%xmm0
   11a8a:	66 0f 7e 04 be       	movd   %xmm0,(%rsi,%rdi,4)
        for (uint64_t i = 0; i < n_samples; ++i) {
   11a8f:	48 ff c7             	inc    %rdi
   11a92:	48 39 f9             	cmp    %rdi,%rcx
   11a95:	75 e9                	jne    11a80 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x2f0>
   11a97:	4c 89 cf             	mov    %r9,%rdi
    { return __lhs.base() == __rhs.base(); }
   11a9a:	49 39 fc             	cmp    %rdi,%r12
   11a9d:	0f 94 c0             	sete   %al
   11aa0:	89 44 24 34          	mov    %eax,0x34(%rsp)
   11aa4:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
				                         _ValueType>)
      __glibcxx_requires_valid_range(__first, __last);

      if (__first == __last)
   11aa9:	74 32                	je     11add <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x34d>
	return __result;
      _ValueType __value = *__first;
   11aab:	f3 41 0f 10 04 24    	movss  (%r12),%xmm0
      *__result = __value;
   11ab1:	f3 41 0f 11 06       	movss  %xmm0,(%r14)
	++_M_current;
   11ab6:	49 8d 44 24 04       	lea    0x4(%r12),%rax
    { return __lhs.base() != __rhs.base(); }
   11abb:	48 39 f8             	cmp    %rdi,%rax
   11abe:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
      while (++__first != __last)
   11ac3:	74 23                	je     11ae8 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x358>
   11ac5:	48 89 fa             	mov    %rdi,%rdx
   11ac8:	4c 29 e2             	sub    %r12,%rdx
   11acb:	48 83 c2 f8          	add    $0xfffffffffffffff8,%rdx
   11acf:	48 83 fa 1c          	cmp    $0x1c,%rdx
   11ad3:	73 20                	jae    11af5 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x365>
   11ad5:	4c 89 f1             	mov    %r14,%rcx
   11ad8:	e9 89 00 00 00       	jmpq   11b66 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x3d6>
   11add:	b0 01                	mov    $0x1,%al
   11adf:	89 44 24 34          	mov    %eax,0x34(%rsp)
   11ae3:	e9 a7 00 00 00       	jmpq   11b8f <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x3ff>
   11ae8:	c7 44 24 34 00 00 00 	movl   $0x0,0x34(%rsp)
   11aef:	00 
   11af0:	e9 9f 00 00 00       	jmpq   11b94 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x404>
   11af5:	48 c1 ea 02          	shr    $0x2,%rdx
   11af9:	48 ff c2             	inc    %rdx
   11afc:	48 89 d6             	mov    %rdx,%rsi
   11aff:	48 b9 f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%rcx
   11b06:	ff ff 7f 
   11b09:	48 21 ce             	and    %rcx,%rsi
   11b0c:	48 8d 04 b0          	lea    (%rax,%rsi,4),%rax
   11b10:	49 8d 0c b6          	lea    (%r14,%rsi,4),%rcx
   11b14:	0f c6 c0 00          	shufps $0x0,%xmm0,%xmm0
   11b18:	31 ff                	xor    %edi,%edi
   11b1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	{
	  _ValueType __tmp = *__first;
   11b20:	41 0f 10 4c bc 04    	movups 0x4(%r12,%rdi,4),%xmm1
   11b26:	0f c6 c1 03          	shufps $0x3,%xmm1,%xmm0
   11b2a:	0f c6 c1 98          	shufps $0x98,%xmm1,%xmm0
   11b2e:	0f 28 d1             	movaps %xmm1,%xmm2
	  *++__result = __tmp - _GLIBCXX_MOVE_IF_20(__value);
   11b31:	0f 5c c8             	subps  %xmm0,%xmm1
	  _ValueType __tmp = *__first;
   11b34:	41 0f 10 44 bc 14    	movups 0x14(%r12,%rdi,4),%xmm0
   11b3a:	0f c6 d0 03          	shufps $0x3,%xmm0,%xmm2
   11b3e:	0f c6 d0 98          	shufps $0x98,%xmm0,%xmm2
	  *++__result = __tmp - _GLIBCXX_MOVE_IF_20(__value);
   11b42:	0f 28 d8             	movaps %xmm0,%xmm3
   11b45:	0f 5c da             	subps  %xmm2,%xmm3
   11b48:	41 0f 11 4c be 04    	movups %xmm1,0x4(%r14,%rdi,4)
   11b4e:	41 0f 11 5c be 14    	movups %xmm3,0x14(%r14,%rdi,4)
   11b54:	48 83 c7 08          	add    $0x8,%rdi
   11b58:	48 39 fe             	cmp    %rdi,%rsi
   11b5b:	75 c3                	jne    11b20 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x390>
      while (++__first != __last)
   11b5d:	48 39 f2             	cmp    %rsi,%rdx
   11b60:	74 2d                	je     11b8f <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x3ff>
   11b62:	0f c6 c0 ff          	shufps $0xff,%xmm0,%xmm0
   11b66:	48 83 c1 04          	add    $0x4,%rcx
   11b6a:	48 8b 54 24 68       	mov    0x68(%rsp),%rdx
   11b6f:	90                   	nop
	  _ValueType __tmp = *__first;
   11b70:	f3 0f 10 08          	movss  (%rax),%xmm1
	  *++__result = __tmp - _GLIBCXX_MOVE_IF_20(__value);
   11b74:	0f 28 d1             	movaps %xmm1,%xmm2
   11b77:	f3 0f 5c d0          	subss  %xmm0,%xmm2
   11b7b:	f3 0f 11 11          	movss  %xmm2,(%rcx)
	++_M_current;
   11b7f:	48 83 c0 04          	add    $0x4,%rax
    { return __lhs.base() != __rhs.base(); }
   11b83:	48 83 c1 04          	add    $0x4,%rcx
   11b87:	0f 28 c1             	movaps %xmm1,%xmm0
   11b8a:	48 39 d0             	cmp    %rdx,%rax
      while (++__first != __last)
   11b8d:	75 e1                	jne    11b70 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x3e0>
   11b8f:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
   11b94:	4f 8d 3c be          	lea    (%r14,%r15,4),%r15
      for (; __first != __last; ++__first, (void)++__result)
   11b98:	48 89 c8             	mov    %rcx,%rax
   11b9b:	48 c1 e8 02          	shr    $0x2,%rax
   11b9f:	48 ff c0             	inc    %rax
   11ba2:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
   11ba7:	4c 89 f0             	mov    %r14,%rax
   11baa:	48 83 f9 1c          	cmp    $0x1c,%rcx
   11bae:	72 64                	jb     11c14 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x484>
   11bb0:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
   11bb5:	48 b8 f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%rax
   11bbc:	ff ff 7f 
   11bbf:	48 21 c1             	and    %rax,%rcx
   11bc2:	49 8d 04 8e          	lea    (%r14,%rcx,4),%rax
   11bc6:	31 d2                	xor    %edx,%edx
   11bc8:	0f 57 c0             	xorps  %xmm0,%xmm0
   11bcb:	0f 28 0d 3e 0c ff ff 	movaps -0xf3c2(%rip),%xmm1        # 2810 <_IO_stdin_used+0x120>
   11bd2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   11bd9:	1f 84 00 00 00 00 00 
	*__result = __unary_op(*__first);
   11be0:	41 0f 10 14 96       	movups (%r14,%rdx,4),%xmm2
   11be5:	41 0f 10 5c 96 10    	movups 0x10(%r14,%rdx,4),%xmm3
   11beb:	0f c2 d0 04          	cmpneqps %xmm0,%xmm2
   11bef:	0f 54 d1             	andps  %xmm1,%xmm2
   11bf2:	0f c2 d8 04          	cmpneqps %xmm0,%xmm3
   11bf6:	0f 54 d9             	andps  %xmm1,%xmm3
   11bf9:	41 0f 11 14 96       	movups %xmm2,(%r14,%rdx,4)
   11bfe:	41 0f 11 5c 96 10    	movups %xmm3,0x10(%r14,%rdx,4)
   11c04:	48 83 c2 08          	add    $0x8,%rdx
   11c08:	48 39 d1             	cmp    %rdx,%rcx
   11c0b:	75 d3                	jne    11be0 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x450>
      for (; __first != __last; ++__first, (void)++__result)
   11c0d:	48 39 4c 24 48       	cmp    %rcx,0x48(%rsp)
   11c12:	74 25                	je     11c39 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x4a9>
   11c14:	0f 57 c0             	xorps  %xmm0,%xmm0
   11c17:	f3 0f 10 0d b1 0a ff 	movss  -0xf54f(%rip),%xmm1        # 26d0 <_IO_stdin_used-0x20>
   11c1e:	ff 
   11c1f:	90                   	nop
   11c20:	f3 0f 10 10          	movss  (%rax),%xmm2
   11c24:	f3 0f c2 d0 00       	cmpeqss %xmm0,%xmm2
   11c29:	0f 55 d1             	andnps %xmm1,%xmm2
	*__result = __unary_op(*__first);
   11c2c:	f3 0f 11 10          	movss  %xmm2,(%rax)
	++_M_current;
   11c30:	48 83 c0 04          	add    $0x4,%rax
    { return __lhs.base() != __rhs.base(); }
   11c34:	4c 39 f8             	cmp    %r15,%rax
      for (; __first != __last; ++__first, (void)++__result)
   11c37:	75 e7                	jne    11c20 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x490>
		   _OutputIterator __result, _BinaryOperation __binary_op)
    {
      if (__first != __last)
	{
	  auto __init = *__first;
	  *__result++ = __init;
   11c39:	41 c7 06 00 00 80 3f 	movl   $0x3f800000,(%r14)
   11c40:	48 83 7c 24 20 01    	cmpq   $0x1,0x20(%rsp)
	  ++__first;
	  if (__first != __last)
   11c46:	0f 84 ab 00 00 00    	je     11cf7 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x567>
      { return __normal_iterator(_M_current++); }
   11c4c:	49 8d 46 04          	lea    0x4(%r14),%rax
   11c50:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
      for (; __first != __last; ++__first)
   11c55:	48 83 c1 f8          	add    $0xfffffffffffffff8,%rcx
   11c59:	89 ca                	mov    %ecx,%edx
   11c5b:	c1 ea 02             	shr    $0x2,%edx
   11c5e:	ff c2                	inc    %edx
   11c60:	83 e2 07             	and    $0x7,%edx
   11c63:	0f 84 15 09 00 00    	je     1257e <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xdee>
   11c69:	c1 e2 02             	shl    $0x2,%edx
   11c6c:	f3 0f 10 05 5c 0a ff 	movss  -0xf5a4(%rip),%xmm0        # 26d0 <_IO_stdin_used-0x20>
   11c73:	ff 
   11c74:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
   11c7b:	00 00 00 00 00 
	_GLIBCXX14_CONSTEXPR
	auto
	operator()(_Tp&& __t, _Up&& __u) const
	noexcept(noexcept(std::forward<_Tp>(__t) + std::forward<_Up>(__u)))
	-> decltype(std::forward<_Tp>(__t) + std::forward<_Up>(__u))
	{ return std::forward<_Tp>(__t) + std::forward<_Up>(__u); }
   11c80:	f3 0f 58 00          	addss  (%rax),%xmm0
	*__result++ = __init = __binary_op(__init, *__first);
   11c84:	f3 0f 11 00          	movss  %xmm0,(%rax)
	++_M_current;
   11c88:	48 83 c0 04          	add    $0x4,%rax
      for (; __first != __last; ++__first)
   11c8c:	48 83 c2 fc          	add    $0xfffffffffffffffc,%rdx
   11c90:	75 ee                	jne    11c80 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x4f0>
   11c92:	48 83 f9 1c          	cmp    $0x1c,%rcx
   11c96:	72 5f                	jb     11cf7 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x567>
   11c98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   11c9f:	00 
   11ca0:	f3 0f 58 00          	addss  (%rax),%xmm0
	*__result++ = __init = __binary_op(__init, *__first);
   11ca4:	f3 0f 11 00          	movss  %xmm0,(%rax)
   11ca8:	f3 0f 58 40 04       	addss  0x4(%rax),%xmm0
   11cad:	f3 0f 11 40 04       	movss  %xmm0,0x4(%rax)
   11cb2:	f3 0f 58 40 08       	addss  0x8(%rax),%xmm0
   11cb7:	f3 0f 11 40 08       	movss  %xmm0,0x8(%rax)
   11cbc:	f3 0f 58 40 0c       	addss  0xc(%rax),%xmm0
   11cc1:	f3 0f 11 40 0c       	movss  %xmm0,0xc(%rax)
   11cc6:	f3 0f 58 40 10       	addss  0x10(%rax),%xmm0
   11ccb:	f3 0f 11 40 10       	movss  %xmm0,0x10(%rax)
   11cd0:	f3 0f 58 40 14       	addss  0x14(%rax),%xmm0
   11cd5:	f3 0f 11 40 14       	movss  %xmm0,0x14(%rax)
   11cda:	f3 0f 58 40 18       	addss  0x18(%rax),%xmm0
   11cdf:	f3 0f 11 40 18       	movss  %xmm0,0x18(%rax)
   11ce4:	f3 0f 58 40 1c       	addss  0x1c(%rax),%xmm0
   11ce9:	f3 0f 11 40 1c       	movss  %xmm0,0x1c(%rax)
    { return __lhs.base() != __rhs.base(); }
   11cee:	48 83 c0 20          	add    $0x20,%rax
   11cf2:	4c 39 f8             	cmp    %r15,%rax
      for (; __first != __last; ++__first)
   11cf5:	75 a9                	jne    11ca0 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x510>
   11cf7:	48 83 7c 24 20 00    	cmpq   $0x0,0x20(%rsp)
        for (uint64_t i = 0; i < n_samples; ++i) {
   11cfd:	0f 84 a4 00 00 00    	je     11da7 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x617>
   11d03:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
   11d08:	89 d0                	mov    %edx,%eax
   11d0a:	83 e0 03             	and    $0x3,%eax
   11d0d:	48 83 fa 04          	cmp    $0x4,%rdx
   11d11:	73 04                	jae    11d17 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x587>
   11d13:	31 c9                	xor    %ecx,%ecx
   11d15:	eb 68                	jmp    11d7f <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x5ef>
   11d17:	48 b9 fc ff ff ff ff 	movabs $0xffffffffffffffc,%rcx
   11d1e:	ff ff 0f 
   11d21:	48 21 ca             	and    %rcx,%rdx
   11d24:	31 c9                	xor    %ecx,%ecx
   11d26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   11d2d:	00 00 00 
            Yrank[rank_idx[i]] = rank_diff[i];
   11d30:	f3 41 0f 10 04 8e    	movss  (%r14,%rcx,4),%xmm0
   11d36:	48 8b 34 cb          	mov    (%rbx,%rcx,8),%rsi
   11d3a:	f3 0f 11 44 b5 00    	movss  %xmm0,0x0(%rbp,%rsi,4)
   11d40:	f3 41 0f 10 44 8e 04 	movss  0x4(%r14,%rcx,4),%xmm0
   11d47:	48 8b 74 cb 08       	mov    0x8(%rbx,%rcx,8),%rsi
   11d4c:	f3 0f 11 44 b5 00    	movss  %xmm0,0x0(%rbp,%rsi,4)
   11d52:	f3 41 0f 10 44 8e 08 	movss  0x8(%r14,%rcx,4),%xmm0
   11d59:	48 8b 74 cb 10       	mov    0x10(%rbx,%rcx,8),%rsi
   11d5e:	f3 0f 11 44 b5 00    	movss  %xmm0,0x0(%rbp,%rsi,4)
   11d64:	f3 41 0f 10 44 8e 0c 	movss  0xc(%r14,%rcx,4),%xmm0
   11d6b:	48 8b 74 cb 18       	mov    0x18(%rbx,%rcx,8),%rsi
   11d70:	f3 0f 11 44 b5 00    	movss  %xmm0,0x0(%rbp,%rsi,4)
        for (uint64_t i = 0; i < n_samples; ++i) {
   11d76:	48 83 c1 04          	add    $0x4,%rcx
   11d7a:	48 39 ca             	cmp    %rcx,%rdx
   11d7d:	75 b1                	jne    11d30 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x5a0>
   11d7f:	48 85 c0             	test   %rax,%rax
   11d82:	74 23                	je     11da7 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x617>
   11d84:	48 8d 14 cb          	lea    (%rbx,%rcx,8),%rdx
   11d88:	49 8d 0c 8e          	lea    (%r14,%rcx,4),%rcx
   11d8c:	31 f6                	xor    %esi,%esi
   11d8e:	66 90                	xchg   %ax,%ax
            Yrank[rank_idx[i]] = rank_diff[i];
   11d90:	f3 0f 10 04 b1       	movss  (%rcx,%rsi,4),%xmm0
   11d95:	48 8b 3c f2          	mov    (%rdx,%rsi,8),%rdi
   11d99:	f3 0f 11 44 bd 00    	movss  %xmm0,0x0(%rbp,%rdi,4)
        for (uint64_t i = 0; i < n_samples; ++i) {
   11d9f:	48 ff c6             	inc    %rsi
   11da2:	48 39 f0             	cmp    %rsi,%rax
   11da5:	75 e9                	jne    11d90 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x600>
   11da7:	4c 89 64 24 28       	mov    %r12,0x28(%rsp)
   11dac:	4c 8b 64 24 60       	mov    0x60(%rsp),%r12
        std::vector<math_t> Ypredcopy(Y_pred, Y_pred + n_samples * n_progs);
   11db1:	4c 0f af 64 24 20    	imul   0x20(%rsp),%r12
	: _M_start(), _M_finish(), _M_end_of_storage()
   11db7:	0f 57 c0             	xorps  %xmm0,%xmm0
   11dba:	0f 29 44 24 70       	movaps %xmm0,0x70(%rsp)
   11dbf:	48 c7 84 24 80 00 00 	movq   $0x0,0x80(%rsp)
   11dc6:	00 00 00 00 00 
   11dcb:	4e 8d 2c a5 00 00 00 	lea    0x0(,%r12,4),%r13
   11dd2:	00 
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   11dd3:	48 b8 f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%rax
   11dda:	ff ff 7f 
   11ddd:	48 83 c0 04          	add    $0x4,%rax
   11de1:	49 39 c5             	cmp    %rax,%r13
   11de4:	0f 87 c3 07 00 00    	ja     125ad <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xe1d>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   11dea:	4d 85 e4             	test   %r12,%r12
   11ded:	74 68                	je     11e57 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x6c7>
   11def:	4c 89 ef             	mov    %r13,%rdi
   11df2:	e8 69 59 00 00       	callq  17760 <_Znwm@plt>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   11df7:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   11dfc:	48 89 c5             	mov    %rax,%rbp
   11dff:	4c 01 ed             	add    %r13,%rbp
   11e02:	48 89 ac 24 80 00 00 	mov    %rbp,0x80(%rsp)
   11e09:	00 
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   11e0a:	48 89 c7             	mov    %rax,%rdi
   11e0d:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
   11e12:	4c 89 ea             	mov    %r13,%rdx
   11e15:	e8 a6 5b 00 00       	callq  179c0 <memcpy@plt>
	  this->_M_impl._M_finish =
   11e1a:	48 89 6c 24 78       	mov    %rbp,0x78(%rsp)
   11e1f:	48 bd ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rbp
   11e26:	ff ff 1f 
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   11e29:	49 39 ec             	cmp    %rbp,%r12
   11e2c:	0f 87 87 07 00 00    	ja     125b9 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xe29>
   11e32:	4c 89 ef             	mov    %r13,%rdi
   11e35:	e8 26 59 00 00       	callq  17760 <_Znwm@plt>
   11e3a:	49 89 c4             	mov    %rax,%r12
	*__first = __tmp;
   11e3d:	48 89 c7             	mov    %rax,%rdi
   11e40:	31 f6                	xor    %esi,%esi
   11e42:	4c 89 ea             	mov    %r13,%rdx
   11e45:	e8 46 5b 00 00       	callq  17990 <memset@plt>
        for (std::size_t pid = 0; pid < n_progs; ++pid) {
   11e4a:	48 83 7c 24 60 00    	cmpq   $0x0,0x60(%rsp)
   11e50:	75 2b                	jne    11e7d <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x6ed>
   11e52:	e9 98 06 00 00       	jmpq   124ef <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xd5f>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   11e57:	4c 89 ac 24 80 00 00 	mov    %r13,0x80(%rsp)
   11e5e:	00 
	  this->_M_impl._M_finish =
   11e5f:	4c 89 6c 24 78       	mov    %r13,0x78(%rsp)
   11e64:	45 31 e4             	xor    %r12d,%r12d
   11e67:	48 bd ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rbp
   11e6e:	ff ff 1f 
   11e71:	48 83 7c 24 60 00    	cmpq   $0x0,0x60(%rsp)
   11e77:	0f 84 72 06 00 00    	je     124ef <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xd5f>
   11e7d:	4c 8b ac 24 98 00 00 	mov    0x98(%rsp),%r13
   11e84:	00 
   11e85:	41 83 f5 3f          	xor    $0x3f,%r13d
   11e89:	45 01 ed             	add    %r13d,%r13d
   11e8c:	49 83 f5 7e          	xor    $0x7e,%r13
   11e90:	4c 89 ac 24 98 00 00 	mov    %r13,0x98(%rsp)
   11e97:	00 
   11e98:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
   11e9d:	48 8d 42 04          	lea    0x4(%rdx),%rax
   11ea1:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
   11ea8:	00 
   11ea9:	49 8d 46 04          	lea    0x4(%r14),%rax
   11ead:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
   11eb2:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
   11eb7:	48 29 d0             	sub    %rdx,%rax
   11eba:	48 83 c0 f8          	add    $0xfffffffffffffff8,%rax
   11ebe:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
   11ec5:	00 
   11ec6:	48 89 c6             	mov    %rax,%rsi
   11ec9:	48 c1 ee 02          	shr    $0x2,%rsi
   11ecd:	48 ff c6             	inc    %rsi
   11ed0:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   11ed5:	48 8d 0c 28          	lea    (%rax,%rbp,1),%rcx
   11ed9:	48 21 e9             	and    %rbp,%rcx
   11edc:	48 89 8c 24 58 01 00 	mov    %rcx,0x158(%rsp)
   11ee3:	00 
   11ee4:	48 8d 79 01          	lea    0x1(%rcx),%rdi
   11ee8:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
   11eed:	48 83 c1 f8          	add    $0xfffffffffffffff8,%rcx
   11ef1:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
   11ef6:	c1 e9 02             	shr    $0x2,%ecx
   11ef9:	ff c1                	inc    %ecx
   11efb:	49 bd fc ff ff ff ff 	movabs $0x3ffffffffffffffc,%r13
   11f02:	ff ff 3f 
   11f05:	48 89 bc 24 28 01 00 	mov    %rdi,0x128(%rsp)
   11f0c:	00 
   11f0d:	49 21 fd             	and    %rdi,%r13
   11f10:	4c 89 ac 24 30 01 00 	mov    %r13,0x130(%rsp)
   11f17:	00 
   11f18:	4a 8d 3c eb          	lea    (%rbx,%r13,8),%rdi
   11f1c:	48 89 bc 24 20 01 00 	mov    %rdi,0x120(%rsp)
   11f23:	00 
   11f24:	89 c5                	mov    %eax,%ebp
   11f26:	83 e5 03             	and    $0x3,%ebp
   11f29:	48 21 84 24 90 00 00 	and    %rax,0x90(%rsp)
   11f30:	00 
   11f31:	48 89 b4 24 08 01 00 	mov    %rsi,0x108(%rsp)
   11f38:	00 
   11f39:	48 b8 f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%rax
   11f40:	ff ff 7f 
   11f43:	48 21 c6             	and    %rax,%rsi
   11f46:	48 8d 14 b2          	lea    (%rdx,%rsi,4),%rdx
   11f4a:	48 83 c2 04          	add    $0x4,%rdx
   11f4e:	48 89 94 24 f8 00 00 	mov    %rdx,0xf8(%rsp)
   11f55:	00 
   11f56:	48 89 b4 24 00 01 00 	mov    %rsi,0x100(%rsp)
   11f5d:	00 
   11f5e:	49 8d 14 b6          	lea    (%r14,%rsi,4),%rdx
   11f62:	48 89 94 24 f0 00 00 	mov    %rdx,0xf0(%rsp)
   11f69:	00 
   11f6a:	48 23 44 24 48       	and    0x48(%rsp),%rax
   11f6f:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
   11f76:	00 
   11f77:	49 8d 04 86          	lea    (%r14,%rax,4),%rax
   11f7b:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
   11f82:	00 
   11f83:	83 e1 07             	and    $0x7,%ecx
   11f86:	48 89 8c 24 40 01 00 	mov    %rcx,0x140(%rsp)
   11f8d:	00 
   11f8e:	c1 e1 02             	shl    $0x2,%ecx
   11f91:	48 89 8c 24 10 01 00 	mov    %rcx,0x110(%rsp)
   11f98:	00 
   11f99:	45 31 c0             	xor    %r8d,%r8d
   11f9c:	66 0f 6f 25 9c 07 ff 	movdqa -0xf864(%rip),%xmm4        # 2740 <_IO_stdin_used+0x50>
   11fa3:	ff 
   11fa4:	66 0f 6f 2d 34 08 ff 	movdqa -0xf7cc(%rip),%xmm5        # 27e0 <_IO_stdin_used+0xf0>
   11fab:	ff 
   11fac:	4c 89 bc 24 50 01 00 	mov    %r15,0x150(%rsp)
   11fb3:	00 
   11fb4:	eb 18                	jmp    11fce <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x83e>
   11fb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   11fbd:	00 00 00 
   11fc0:	49 ff c0             	inc    %r8
   11fc3:	4c 3b 44 24 60       	cmp    0x60(%rsp),%r8
   11fc8:	0f 84 21 05 00 00    	je     124ef <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xd5f>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   11fce:	48 83 7c 24 20 00    	cmpq   $0x0,0x20(%rsp)
      for (; __first != __last; ++__first)
   11fd4:	0f 84 0c 02 00 00    	je     121e6 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xa56>
   11fda:	48 83 bc 24 58 01 00 	cmpq   $0x3,0x158(%rsp)
   11fe1:	00 03 
   11fe3:	73 1b                	jae    12000 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x870>
   11fe5:	31 c0                	xor    %eax,%eax
   11fe7:	48 89 d9             	mov    %rbx,%rcx
   11fea:	4c 8b 6c 24 50       	mov    0x50(%rsp),%r13
   11fef:	eb 6f                	jmp    12060 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x8d0>
   11ff1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   11ff8:	0f 1f 84 00 00 00 00 
   11fff:	00 
   12000:	31 c0                	xor    %eax,%eax
   12002:	66 0f 6f 05 46 07 ff 	movdqa -0xf8ba(%rip),%xmm0        # 2750 <_IO_stdin_used+0x60>
   12009:	ff 
   1200a:	4c 8b 6c 24 50       	mov    0x50(%rsp),%r13
   1200f:	48 8b 94 24 30 01 00 	mov    0x130(%rsp),%rdx
   12016:	00 
   12017:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1201e:	00 00 
   12020:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   12024:	66 0f d4 cc          	paddq  %xmm4,%xmm1
	  *__first = __value;
   12028:	f3 0f 7f 04 c3       	movdqu %xmm0,(%rbx,%rax,8)
   1202d:	f3 0f 7f 4c c3 10    	movdqu %xmm1,0x10(%rbx,%rax,8)
	  ++__value;
   12033:	48 83 c0 04          	add    $0x4,%rax
   12037:	66 0f d4 c5          	paddq  %xmm5,%xmm0
   1203b:	48 39 c2             	cmp    %rax,%rdx
   1203e:	75 e0                	jne    12020 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x890>
   12040:	48 89 d0             	mov    %rdx,%rax
   12043:	48 8b 8c 24 20 01 00 	mov    0x120(%rsp),%rcx
   1204a:	00 
   1204b:	48 39 94 24 28 01 00 	cmp    %rdx,0x128(%rsp)
   12052:	00 
      for (; __first != __last; ++__first)
   12053:	74 1a                	je     1206f <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x8df>
   12055:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
   1205c:	00 00 00 00 
	  *__first = __value;
   12060:	48 89 01             	mov    %rax,(%rcx)
	  ++__value;
   12063:	48 ff c0             	inc    %rax
	++_M_current;
   12066:	48 83 c1 08          	add    $0x8,%rcx
    { return __lhs.base() != __rhs.base(); }
   1206a:	4c 39 e9             	cmp    %r13,%rcx
      for (; __first != __last; ++__first)
   1206d:	75 f1                	jne    12060 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x8d0>
   1206f:	48 8d 44 24 70       	lea    0x70(%rsp),%rax
   12074:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
   1207b:	00 
   1207c:	4d 89 c7             	mov    %r8,%r15
   1207f:	4c 89 84 24 d0 00 00 	mov    %r8,0xd0(%rsp)
   12086:	00 
   12087:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   1208c:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
   12093:	00 
	    typename iterator_traits<_RandomAccessIterator>::value_type,
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
   12094:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
   1209b:	00 
   1209c:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
   120a3:	00 
   120a4:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
   120ab:	00 
   120ac:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
   120b3:	00 
   120b4:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
   120bb:	00 
	  std::__introsort_loop(__first, __last,
   120bc:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
   120c3:	00 
   120c4:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
   120c9:	0f 10 84 24 c8 00 00 	movups 0xc8(%rsp),%xmm0
   120d0:	00 
   120d1:	0f 11 04 24          	movups %xmm0,(%rsp)
   120d5:	48 89 df             	mov    %rbx,%rdi
   120d8:	4c 89 ee             	mov    %r13,%rsi
   120db:	48 8b 94 24 98 00 00 	mov    0x98(%rsp),%rdx
   120e2:	00 
   120e3:	e8 38 15 00 00       	callq  13620 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
   120e8:	48 8b 84 24 70 01 00 	mov    0x170(%rsp),%rax
   120ef:	00 
   120f0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
   120f5:	0f 28 84 24 60 01 00 	movaps 0x160(%rsp),%xmm0
   120fc:	00 
   120fd:	0f 11 04 24          	movups %xmm0,(%rsp)
   12101:	48 89 df             	mov    %rbx,%rdi
   12104:	4c 89 ee             	mov    %r13,%rsi
   12107:	e8 f4 17 00 00       	callq  13900 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_>
   1210c:	48 83 7c 24 20 00    	cmpq   $0x0,0x20(%rsp)
   12112:	4d 89 f8             	mov    %r15,%r8
   12115:	4c 8b bc 24 50 01 00 	mov    0x150(%rsp),%r15
   1211c:	00 
   1211d:	66 0f 6f 25 1b 06 ff 	movdqa -0xf9e5(%rip),%xmm4        # 2740 <_IO_stdin_used+0x50>
   12124:	ff 
   12125:	66 0f 6f 2d b3 06 ff 	movdqa -0xf94d(%rip),%xmm5        # 27e0 <_IO_stdin_used+0xf0>
   1212c:	ff 
            for (uint64_t i = 0; i < n_samples; ++i) {
   1212d:	0f 84 b3 00 00 00    	je     121e6 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xa56>
   12133:	4c 89 c0             	mov    %r8,%rax
   12136:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
   1213b:	48 0f af c1          	imul   %rcx,%rax
   1213f:	48 c1 e0 02          	shl    $0x2,%rax
   12143:	48 03 44 24 70       	add    0x70(%rsp),%rax
   12148:	48 83 f9 04          	cmp    $0x4,%rcx
   1214c:	73 04                	jae    12152 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x9c2>
   1214e:	31 c9                	xor    %ecx,%ecx
   12150:	eb 65                	jmp    121b7 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xa27>
   12152:	31 c9                	xor    %ecx,%ecx
   12154:	48 8b b4 24 90 00 00 	mov    0x90(%rsp),%rsi
   1215b:	00 
   1215c:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
   12161:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   12168:	0f 1f 84 00 00 00 00 
   1216f:	00 
                Ysorted[i] = Ypredcopy[pid * n_samples + rank_idx[i]];
   12170:	48 8b 14 cb          	mov    (%rbx,%rcx,8),%rdx
   12174:	f3 0f 10 04 90       	movss  (%rax,%rdx,4),%xmm0
   12179:	f3 0f 11 04 8f       	movss  %xmm0,(%rdi,%rcx,4)
   1217e:	48 8b 54 cb 08       	mov    0x8(%rbx,%rcx,8),%rdx
   12183:	f3 0f 10 04 90       	movss  (%rax,%rdx,4),%xmm0
   12188:	f3 0f 11 44 8f 04    	movss  %xmm0,0x4(%rdi,%rcx,4)
   1218e:	48 8b 54 cb 10       	mov    0x10(%rbx,%rcx,8),%rdx
   12193:	f3 0f 10 04 90       	movss  (%rax,%rdx,4),%xmm0
   12198:	f3 0f 11 44 8f 08    	movss  %xmm0,0x8(%rdi,%rcx,4)
   1219e:	48 8b 54 cb 18       	mov    0x18(%rbx,%rcx,8),%rdx
   121a3:	f3 0f 10 04 90       	movss  (%rax,%rdx,4),%xmm0
   121a8:	f3 0f 11 44 8f 0c    	movss  %xmm0,0xc(%rdi,%rcx,4)
            for (uint64_t i = 0; i < n_samples; ++i) {
   121ae:	48 83 c1 04          	add    $0x4,%rcx
   121b2:	48 39 ce             	cmp    %rcx,%rsi
   121b5:	75 b9                	jne    12170 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x9e0>
   121b7:	48 85 ed             	test   %rbp,%rbp
   121ba:	74 2a                	je     121e6 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xa56>
   121bc:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
   121c1:	48 8d 14 8a          	lea    (%rdx,%rcx,4),%rdx
   121c5:	48 8d 0c cb          	lea    (%rbx,%rcx,8),%rcx
   121c9:	31 f6                	xor    %esi,%esi
   121cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                Ysorted[i] = Ypredcopy[pid * n_samples + rank_idx[i]];
   121d0:	48 8b 3c f1          	mov    (%rcx,%rsi,8),%rdi
   121d4:	f3 0f 10 04 b8       	movss  (%rax,%rdi,4),%xmm0
   121d9:	f3 0f 11 04 b2       	movss  %xmm0,(%rdx,%rsi,4)
            for (uint64_t i = 0; i < n_samples; ++i) {
   121de:	48 ff c6             	inc    %rsi
   121e1:	48 39 f5             	cmp    %rsi,%rbp
   121e4:	75 ea                	jne    121d0 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xa40>
      if (__first == __last)
   121e6:	80 7c 24 34 00       	cmpb   $0x0,0x34(%rsp)
   121eb:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
   121f0:	0f 85 d9 00 00 00    	jne    122cf <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xb3f>
   121f6:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
      _ValueType __value = *__first;
   121fb:	f3 0f 10 00          	movss  (%rax),%xmm0
      *__result = __value;
   121ff:	f3 41 0f 11 06       	movss  %xmm0,(%r14)
   12204:	48 39 8c 24 c0 00 00 	cmp    %rcx,0xc0(%rsp)
   1220b:	00 
      while (++__first != __last)
   1220c:	0f 84 bd 00 00 00    	je     122cf <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xb3f>
   12212:	48 83 bc 24 18 01 00 	cmpq   $0x1c,0x118(%rsp)
   12219:	00 1c 
   1221b:	73 0d                	jae    1222a <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xa9a>
   1221d:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
   12224:	00 
   12225:	4c 89 f1             	mov    %r14,%rcx
   12228:	eb 6f                	jmp    12299 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xb09>
   1222a:	0f c6 c0 00          	shufps $0x0,%xmm0,%xmm0
   1222e:	31 c0                	xor    %eax,%eax
   12230:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
   12235:	48 8b 94 24 00 01 00 	mov    0x100(%rsp),%rdx
   1223c:	00 
   1223d:	0f 1f 00             	nopl   (%rax)
	  _ValueType __tmp = *__first;
   12240:	0f 10 4c 81 04       	movups 0x4(%rcx,%rax,4),%xmm1
   12245:	0f c6 c1 03          	shufps $0x3,%xmm1,%xmm0
   12249:	0f c6 c1 98          	shufps $0x98,%xmm1,%xmm0
   1224d:	0f 28 d1             	movaps %xmm1,%xmm2
	  *++__result = __tmp - _GLIBCXX_MOVE_IF_20(__value);
   12250:	0f 5c c8             	subps  %xmm0,%xmm1
	  _ValueType __tmp = *__first;
   12253:	0f 10 44 81 14       	movups 0x14(%rcx,%rax,4),%xmm0
   12258:	0f c6 d0 03          	shufps $0x3,%xmm0,%xmm2
   1225c:	0f c6 d0 98          	shufps $0x98,%xmm0,%xmm2
	  *++__result = __tmp - _GLIBCXX_MOVE_IF_20(__value);
   12260:	0f 28 d8             	movaps %xmm0,%xmm3
   12263:	0f 5c da             	subps  %xmm2,%xmm3
   12266:	41 0f 11 4c 86 04    	movups %xmm1,0x4(%r14,%rax,4)
   1226c:	41 0f 11 5c 86 14    	movups %xmm3,0x14(%r14,%rax,4)
   12272:	48 83 c0 08          	add    $0x8,%rax
   12276:	48 39 c2             	cmp    %rax,%rdx
   12279:	75 c5                	jne    12240 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xab0>
   1227b:	48 39 94 24 08 01 00 	cmp    %rdx,0x108(%rsp)
   12282:	00 
      while (++__first != __last)
   12283:	74 4a                	je     122cf <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xb3f>
   12285:	0f c6 c0 ff          	shufps $0xff,%xmm0,%xmm0
   12289:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
   12290:	00 
   12291:	48 8b 8c 24 f0 00 00 	mov    0xf0(%rsp),%rcx
   12298:	00 
   12299:	48 83 c1 04          	add    $0x4,%rcx
   1229d:	48 8b 54 24 68       	mov    0x68(%rsp),%rdx
   122a2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   122a9:	1f 84 00 00 00 00 00 
	  _ValueType __tmp = *__first;
   122b0:	f3 0f 10 08          	movss  (%rax),%xmm1
	  *++__result = __tmp - _GLIBCXX_MOVE_IF_20(__value);
   122b4:	0f 28 d1             	movaps %xmm1,%xmm2
   122b7:	f3 0f 5c d0          	subss  %xmm0,%xmm2
   122bb:	f3 0f 11 11          	movss  %xmm2,(%rcx)
	++_M_current;
   122bf:	48 83 c0 04          	add    $0x4,%rax
    { return __lhs.base() != __rhs.base(); }
   122c3:	48 83 c1 04          	add    $0x4,%rcx
   122c7:	0f 28 c1             	movaps %xmm1,%xmm0
   122ca:	48 39 d0             	cmp    %rdx,%rax
      while (++__first != __last)
   122cd:	75 e1                	jne    122b0 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xb20>
   122cf:	4c 89 f0             	mov    %r14,%rax
   122d2:	48 83 7c 24 40 1c    	cmpq   $0x1c,0x40(%rsp)
   122d8:	0f 57 c9             	xorps  %xmm1,%xmm1
   122db:	f3 0f 10 15 ed 03 ff 	movss  -0xfc13(%rip),%xmm2        # 26d0 <_IO_stdin_used-0x20>
   122e2:	ff 
      for (; __first != __last; ++__first, (void)++__result)
   122e3:	72 6b                	jb     12350 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xbc0>
   122e5:	31 c0                	xor    %eax,%eax
   122e7:	48 8b 8c 24 48 01 00 	mov    0x148(%rsp),%rcx
   122ee:	00 
   122ef:	0f 57 d2             	xorps  %xmm2,%xmm2
   122f2:	0f 28 1d 17 05 ff ff 	movaps -0xfae9(%rip),%xmm3        # 2810 <_IO_stdin_used+0x120>
   122f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	*__result = __unary_op(*__first);
   12300:	41 0f 10 04 86       	movups (%r14,%rax,4),%xmm0
   12305:	41 0f 10 4c 86 10    	movups 0x10(%r14,%rax,4),%xmm1
   1230b:	0f c2 c2 04          	cmpneqps %xmm2,%xmm0
   1230f:	0f 54 c3             	andps  %xmm3,%xmm0
   12312:	0f c2 ca 04          	cmpneqps %xmm2,%xmm1
   12316:	0f 54 cb             	andps  %xmm3,%xmm1
   12319:	41 0f 11 04 86       	movups %xmm0,(%r14,%rax,4)
   1231e:	41 0f 11 4c 86 10    	movups %xmm1,0x10(%r14,%rax,4)
   12324:	48 83 c0 08          	add    $0x8,%rax
   12328:	48 39 c1             	cmp    %rax,%rcx
   1232b:	75 d3                	jne    12300 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xb70>
   1232d:	48 8b 84 24 38 01 00 	mov    0x138(%rsp),%rax
   12334:	00 
   12335:	48 39 4c 24 48       	cmp    %rcx,0x48(%rsp)
   1233a:	0f 57 c9             	xorps  %xmm1,%xmm1
   1233d:	f3 0f 10 15 8b 03 ff 	movss  -0xfc75(%rip),%xmm2        # 26d0 <_IO_stdin_used-0x20>
   12344:	ff 
      for (; __first != __last; ++__first, (void)++__result)
   12345:	74 22                	je     12369 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xbd9>
   12347:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1234e:	00 00 
   12350:	f3 0f 10 00          	movss  (%rax),%xmm0
   12354:	f3 0f c2 c1 00       	cmpeqss %xmm1,%xmm0
   12359:	0f 55 c2             	andnps %xmm2,%xmm0
	*__result = __unary_op(*__first);
   1235c:	f3 0f 11 00          	movss  %xmm0,(%rax)
	++_M_current;
   12360:	48 83 c0 04          	add    $0x4,%rax
    { return __lhs.base() != __rhs.base(); }
   12364:	4c 39 f8             	cmp    %r15,%rax
      for (; __first != __last; ++__first, (void)++__result)
   12367:	75 e7                	jne    12350 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xbc0>
	  *__result++ = __init;
   12369:	41 c7 06 00 00 80 3f 	movl   $0x3f800000,(%r14)
   12370:	48 83 7c 24 20 01    	cmpq   $0x1,0x20(%rsp)
	  if (__first != __last)
   12376:	0f 84 ab 00 00 00    	je     12427 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xc97>
   1237c:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
   12381:	f3 0f 10 05 47 03 ff 	movss  -0xfcb9(%rip),%xmm0        # 26d0 <_IO_stdin_used-0x20>
   12388:	ff 
   12389:	48 83 bc 24 40 01 00 	cmpq   $0x0,0x140(%rsp)
   12390:	00 00 
      for (; __first != __last; ++__first)
   12392:	74 2e                	je     123c2 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xc32>
   12394:	48 8b 8c 24 10 01 00 	mov    0x110(%rsp),%rcx
   1239b:	00 
   1239c:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
   123a1:	f3 0f 10 05 27 03 ff 	movss  -0xfcd9(%rip),%xmm0        # 26d0 <_IO_stdin_used-0x20>
   123a8:	ff 
   123a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   123b0:	f3 0f 58 00          	addss  (%rax),%xmm0
	*__result++ = __init = __binary_op(__init, *__first);
   123b4:	f3 0f 11 00          	movss  %xmm0,(%rax)
	++_M_current;
   123b8:	48 83 c0 04          	add    $0x4,%rax
      for (; __first != __last; ++__first)
   123bc:	48 83 c1 fc          	add    $0xfffffffffffffffc,%rcx
   123c0:	75 ee                	jne    123b0 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xc20>
   123c2:	48 83 7c 24 38 1c    	cmpq   $0x1c,0x38(%rsp)
   123c8:	72 5d                	jb     12427 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xc97>
   123ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   123d0:	f3 0f 58 00          	addss  (%rax),%xmm0
	*__result++ = __init = __binary_op(__init, *__first);
   123d4:	f3 0f 11 00          	movss  %xmm0,(%rax)
   123d8:	f3 0f 58 40 04       	addss  0x4(%rax),%xmm0
   123dd:	f3 0f 11 40 04       	movss  %xmm0,0x4(%rax)
   123e2:	f3 0f 58 40 08       	addss  0x8(%rax),%xmm0
   123e7:	f3 0f 11 40 08       	movss  %xmm0,0x8(%rax)
   123ec:	f3 0f 58 40 0c       	addss  0xc(%rax),%xmm0
   123f1:	f3 0f 11 40 0c       	movss  %xmm0,0xc(%rax)
   123f6:	f3 0f 58 40 10       	addss  0x10(%rax),%xmm0
   123fb:	f3 0f 11 40 10       	movss  %xmm0,0x10(%rax)
   12400:	f3 0f 58 40 14       	addss  0x14(%rax),%xmm0
   12405:	f3 0f 11 40 14       	movss  %xmm0,0x14(%rax)
   1240a:	f3 0f 58 40 18       	addss  0x18(%rax),%xmm0
   1240f:	f3 0f 11 40 18       	movss  %xmm0,0x18(%rax)
   12414:	f3 0f 58 40 1c       	addss  0x1c(%rax),%xmm0
   12419:	f3 0f 11 40 1c       	movss  %xmm0,0x1c(%rax)
    { return __lhs.base() != __rhs.base(); }
   1241e:	48 83 c0 20          	add    $0x20,%rax
   12422:	4c 39 f8             	cmp    %r15,%rax
      for (; __first != __last; ++__first)
   12425:	75 a9                	jne    123d0 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xc40>
   12427:	48 83 7c 24 20 00    	cmpq   $0x0,0x20(%rsp)
            for (uint64_t i = 0; i < n_samples; ++i) {
   1242d:	0f 84 8d fb ff ff    	je     11fc0 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x830>
   12433:	4c 89 c0             	mov    %r8,%rax
   12436:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
   1243b:	48 0f af c1          	imul   %rcx,%rax
   1243f:	48 83 f9 04          	cmp    $0x4,%rcx
   12443:	73 0b                	jae    12450 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xcc0>
   12445:	31 c9                	xor    %ecx,%ecx
   12447:	eb 72                	jmp    124bb <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xd2b>
   12449:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   12450:	31 c9                	xor    %ecx,%ecx
   12452:	48 8b b4 24 90 00 00 	mov    0x90(%rsp),%rsi
   12459:	00 
   1245a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
                Ypredrank[pid * n_samples + rank_idx[i]] = rank_diff[i];
   12460:	f3 41 0f 10 04 8e    	movss  (%r14,%rcx,4),%xmm0
   12466:	48 8b 14 cb          	mov    (%rbx,%rcx,8),%rdx
   1246a:	48 01 c2             	add    %rax,%rdx
   1246d:	f3 41 0f 11 04 94    	movss  %xmm0,(%r12,%rdx,4)
   12473:	f3 41 0f 10 44 8e 04 	movss  0x4(%r14,%rcx,4),%xmm0
   1247a:	48 8b 54 cb 08       	mov    0x8(%rbx,%rcx,8),%rdx
   1247f:	48 01 c2             	add    %rax,%rdx
   12482:	f3 41 0f 11 04 94    	movss  %xmm0,(%r12,%rdx,4)
   12488:	f3 41 0f 10 44 8e 08 	movss  0x8(%r14,%rcx,4),%xmm0
   1248f:	48 8b 54 cb 10       	mov    0x10(%rbx,%rcx,8),%rdx
   12494:	48 01 c2             	add    %rax,%rdx
   12497:	f3 41 0f 11 04 94    	movss  %xmm0,(%r12,%rdx,4)
   1249d:	f3 41 0f 10 44 8e 0c 	movss  0xc(%r14,%rcx,4),%xmm0
   124a4:	48 8b 54 cb 18       	mov    0x18(%rbx,%rcx,8),%rdx
   124a9:	48 01 c2             	add    %rax,%rdx
   124ac:	f3 41 0f 11 04 94    	movss  %xmm0,(%r12,%rdx,4)
            for (uint64_t i = 0; i < n_samples; ++i) {
   124b2:	48 83 c1 04          	add    $0x4,%rcx
   124b6:	48 39 ce             	cmp    %rcx,%rsi
   124b9:	75 a5                	jne    12460 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xcd0>
   124bb:	f6 44 24 20 03       	testb  $0x3,0x20(%rsp)
   124c0:	0f 84 fa fa ff ff    	je     11fc0 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x830>
   124c6:	48 8d 14 cb          	lea    (%rbx,%rcx,8),%rdx
   124ca:	49 8d 0c 8e          	lea    (%r14,%rcx,4),%rcx
   124ce:	31 f6                	xor    %esi,%esi
                Ypredrank[pid * n_samples + rank_idx[i]] = rank_diff[i];
   124d0:	f3 0f 10 04 b1       	movss  (%rcx,%rsi,4),%xmm0
   124d5:	48 8b 3c f2          	mov    (%rdx,%rsi,8),%rdi
   124d9:	48 01 c7             	add    %rax,%rdi
   124dc:	f3 41 0f 11 04 bc    	movss  %xmm0,(%r12,%rdi,4)
            for (uint64_t i = 0; i < n_samples; ++i) {
   124e2:	48 ff c6             	inc    %rsi
   124e5:	48 39 f5             	cmp    %rsi,%rbp
   124e8:	75 e6                	jne    124d0 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xd40>
   124ea:	e9 d1 fa ff ff       	jmpq   11fc0 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x830>
   124ef:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   124f4:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
   124f9:	4c 8b bc 24 b8 00 00 	mov    0xb8(%rsp),%r15
   12500:	00 
        weightedPearson(n_samples, n_progs, Yrank.data(), Ypredrank.data(), W, out);
   12501:	4c 89 fa             	mov    %r15,%rdx
   12504:	4c 89 e1             	mov    %r12,%rcx
   12507:	4c 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%r8
   1250e:	00 
   1250f:	4c 8b 8c 24 e8 00 00 	mov    0xe8(%rsp),%r9
   12516:	00 
   12517:	e8 44 e5 ff ff       	callq  10a60 <_ZN7genetic15weightedPearsonIfEEvmmPKT_S3_S3_PS1_>
	if (__p)
   1251c:	4d 85 e4             	test   %r12,%r12
   1251f:	74 08                	je     12529 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xd99>
	::operator delete(__p
   12521:	4c 89 e7             	mov    %r12,%rdi
   12524:	e8 97 51 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
   12529:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
	if (__p)
   1252e:	48 85 ff             	test   %rdi,%rdi
   12531:	74 05                	je     12538 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xda8>
   12533:	e8 88 51 00 00       	callq  176c0 <_ZdlPv@plt>
   12538:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
   1253d:	e8 7e 51 00 00       	callq  176c0 <_ZdlPv@plt>
   12542:	4c 89 ff             	mov    %r15,%rdi
   12545:	e8 76 51 00 00       	callq  176c0 <_ZdlPv@plt>
   1254a:	4c 89 f7             	mov    %r14,%rdi
   1254d:	e8 6e 51 00 00       	callq  176c0 <_ZdlPv@plt>
   12552:	48 89 df             	mov    %rbx,%rdi
   12555:	e8 66 51 00 00       	callq  176c0 <_ZdlPv@plt>
	_M_deallocate(_M_impl._M_start,
   1255a:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
   12561:	00 
	if (__p)
   12562:	48 85 ff             	test   %rdi,%rdi
   12565:	74 05                	je     1256c <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xddc>
   12567:	e8 54 51 00 00       	callq  176c0 <_ZdlPv@plt>
    }
   1256c:	48 81 c4 78 01 00 00 	add    $0x178,%rsp
   12573:	5b                   	pop    %rbx
   12574:	41 5c                	pop    %r12
   12576:	41 5d                	pop    %r13
   12578:	41 5e                	pop    %r14
   1257a:	41 5f                	pop    %r15
   1257c:	5d                   	pop    %rbp
   1257d:	c3                   	retq   
   1257e:	f3 0f 10 05 4a 01 ff 	movss  -0xfeb6(%rip),%xmm0        # 26d0 <_IO_stdin_used-0x20>
   12585:	ff 
   12586:	48 83 f9 1c          	cmp    $0x1c,%rcx
   1258a:	0f 83 10 f7 ff ff    	jae    11ca0 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x510>
   12590:	e9 62 f7 ff ff       	jmpq   11cf7 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0x567>
	  __throw_length_error(
   12595:	48 8d 3d 27 08 ff ff 	lea    -0xf7d9(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
   1259c:	e8 cf 4f 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
   125a1:	48 8d 3d 1b 08 ff ff 	lea    -0xf7e5(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
   125a8:	e8 c3 4f 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
   125ad:	48 8d 3d 0f 08 ff ff 	lea    -0xf7f1(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
   125b4:	e8 b7 4f 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
   125b9:	48 8d 3d 03 08 ff ff 	lea    -0xf7fd(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
   125c0:	e8 ab 4f 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
   125c5:	eb 28                	jmp    125ef <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xe5f>
   125c7:	49 89 c7             	mov    %rax,%r15
   125ca:	eb 4c                	jmp    12618 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xe88>
   125cc:	49 89 c7             	mov    %rax,%r15
   125cf:	eb 54                	jmp    12625 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xe95>
   125d1:	49 89 c7             	mov    %rax,%r15
   125d4:	eb 57                	jmp    1262d <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xe9d>
   125d6:	49 89 c7             	mov    %rax,%r15
   125d9:	eb 24                	jmp    125ff <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xe6f>
   125db:	49 89 c7             	mov    %rax,%r15
   125de:	eb 1f                	jmp    125ff <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xe6f>
   125e0:	49 89 c7             	mov    %rax,%r15
   125e3:	eb 33                	jmp    12618 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xe88>
   125e5:	49 89 c7             	mov    %rax,%r15
   125e8:	eb 4b                	jmp    12635 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xea5>
   125ea:	49 89 c7             	mov    %rax,%r15
   125ed:	eb 46                	jmp    12635 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xea5>
   125ef:	49 89 c7             	mov    %rax,%r15
	if (__p)
   125f2:	4d 85 e4             	test   %r12,%r12
   125f5:	74 08                	je     125ff <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xe6f>
   125f7:	4c 89 e7             	mov    %r12,%rdi
   125fa:	e8 c1 50 00 00       	callq  176c0 <_ZdlPv@plt>
   125ff:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
   12604:	48 85 ff             	test   %rdi,%rdi
   12607:	74 05                	je     1260e <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xe7e>
   12609:	e8 b2 50 00 00       	callq  176c0 <_ZdlPv@plt>
   1260e:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
   12613:	e8 a8 50 00 00       	callq  176c0 <_ZdlPv@plt>
   12618:	48 8b bc 24 b8 00 00 	mov    0xb8(%rsp),%rdi
   1261f:	00 
   12620:	e8 9b 50 00 00       	callq  176c0 <_ZdlPv@plt>
   12625:	4c 89 f7             	mov    %r14,%rdi
   12628:	e8 93 50 00 00       	callq  176c0 <_ZdlPv@plt>
   1262d:	48 89 df             	mov    %rbx,%rdi
   12630:	e8 8b 50 00 00       	callq  176c0 <_ZdlPv@plt>
   12635:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
   1263c:	00 
   1263d:	48 85 ff             	test   %rdi,%rdi
   12640:	74 05                	je     12647 <_ZN7genetic16weightedSpearmanIfEEvmmPKT_S3_S3_PS1_+0xeb7>
   12642:	e8 79 50 00 00       	callq  176c0 <_ZdlPv@plt>
   12647:	4c 89 ff             	mov    %r15,%rdi
   1264a:	e8 21 53 00 00       	callq  17970 <_Unwind_Resume@plt>
   1264f:	cc                   	int3   

0000000000012650 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_>:
                           const math_t* Y_pred, const math_t* W, math_t* out) {
   12650:	55                   	push   %rbp
   12651:	41 57                	push   %r15
   12653:	41 56                	push   %r14
   12655:	41 55                	push   %r13
   12657:	41 54                	push   %r12
   12659:	53                   	push   %rbx
   1265a:	48 83 ec 18          	sub    $0x18,%rsp
        std::vector<math_t> error(n_samples * n_progs);
   1265e:	49 89 f6             	mov    %rsi,%r14
   12661:	4c 0f af f7          	imul   %rdi,%r14
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   12665:	4c 89 f0             	mov    %r14,%rax
   12668:	48 c1 e8 3d          	shr    $0x3d,%rax
   1266c:	0f 85 fc 02 00 00    	jne    1296e <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x31e>
   12672:	4d 89 c5             	mov    %r8,%r13
   12675:	48 89 cd             	mov    %rcx,%rbp
   12678:	49 89 d4             	mov    %rdx,%r12
   1267b:	48 89 f3             	mov    %rsi,%rbx
   1267e:	49 89 ff             	mov    %rdi,%r15
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   12681:	4d 85 f6             	test   %r14,%r14
   12684:	74 2d                	je     126b3 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x63>
   12686:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   1268b:	4a 8d 3c b5 00 00 00 	lea    0x0(,%r14,4),%rdi
   12692:	00 
   12693:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
   12698:	e8 c3 50 00 00       	callq  17760 <_Znwm@plt>
   1269d:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      if (__n <= 0)
   126a3:	49 83 fe 01          	cmp    $0x1,%r14
   126a7:	75 0e                	jne    126b7 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x67>
   126a9:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
   126ae:	48 89 c7             	mov    %rax,%rdi
   126b1:	eb 26                	jmp    126d9 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x89>
   126b3:	31 ff                	xor    %edi,%edi
   126b5:	eb 22                	jmp    126d9 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x89>
   126b7:	48 89 c7             	mov    %rax,%rdi
   126ba:	48 83 c7 04          	add    $0x4,%rdi
   126be:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
      for (; __first != __last; ++__first)
   126c3:	48 83 c2 fc          	add    $0xfffffffffffffffc,%rdx
	*__first = __tmp;
   126c7:	31 f6                	xor    %esi,%esi
   126c9:	49 89 c6             	mov    %rax,%r14
   126cc:	e8 bf 52 00 00       	callq  17990 <memset@plt>
   126d1:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
   126d6:	4c 89 f7             	mov    %r14,%rdi
        math_t              N = static_cast<math_t>(n_samples);
   126d9:	4c 89 f9             	mov    %r15,%rcx
   126dc:	48 d1 e9             	shr    %rcx
   126df:	44 89 f8             	mov    %r15d,%eax
   126e2:	83 e0 01             	and    $0x1,%eax
   126e5:	48 09 c8             	or     %rcx,%rax
   126e8:	4d 85 ff             	test   %r15,%r15
   126eb:	78 1a                	js     12707 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0xb7>
   126ed:	f3 49 0f 2a c7       	cvtsi2ss %r15,%xmm0
        for (uint64_t i = 0; i < n_samples; ++i) {
   126f2:	74 1e                	je     12712 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0xc2>
   126f4:	44 89 f8             	mov    %r15d,%eax
   126f7:	83 e0 07             	and    $0x7,%eax
   126fa:	49 83 ff 08          	cmp    $0x8,%r15
   126fe:	73 1a                	jae    1271a <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0xca>
   12700:	0f 57 c9             	xorps  %xmm1,%xmm1
   12703:	31 c9                	xor    %ecx,%ecx
   12705:	eb 6a                	jmp    12771 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x121>
   12707:	f3 48 0f 2a c0       	cvtsi2ss %rax,%xmm0
   1270c:	f3 0f 58 c0          	addss  %xmm0,%xmm0
   12710:	75 e2                	jne    126f4 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0xa4>
   12712:	0f 57 c9             	xorps  %xmm1,%xmm1
   12715:	e9 83 00 00 00       	jmpq   1279d <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x14d>
   1271a:	4c 89 fa             	mov    %r15,%rdx
   1271d:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
   12721:	0f 57 c9             	xorps  %xmm1,%xmm1
   12724:	31 c9                	xor    %ecx,%ecx
   12726:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1272d:	00 00 00 
            WS += W[i];
   12730:	f3 41 0f 58 4c 8d 00 	addss  0x0(%r13,%rcx,4),%xmm1
   12737:	f3 41 0f 58 4c 8d 04 	addss  0x4(%r13,%rcx,4),%xmm1
   1273e:	f3 41 0f 58 4c 8d 08 	addss  0x8(%r13,%rcx,4),%xmm1
   12745:	f3 41 0f 58 4c 8d 0c 	addss  0xc(%r13,%rcx,4),%xmm1
   1274c:	f3 41 0f 58 4c 8d 10 	addss  0x10(%r13,%rcx,4),%xmm1
   12753:	f3 41 0f 58 4c 8d 14 	addss  0x14(%r13,%rcx,4),%xmm1
   1275a:	f3 41 0f 58 4c 8d 18 	addss  0x18(%r13,%rcx,4),%xmm1
   12761:	f3 41 0f 58 4c 8d 1c 	addss  0x1c(%r13,%rcx,4),%xmm1
        for (uint64_t i = 0; i < n_samples; ++i) {
   12768:	48 83 c1 08          	add    $0x8,%rcx
   1276c:	48 39 ca             	cmp    %rcx,%rdx
   1276f:	75 bf                	jne    12730 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0xe0>
   12771:	48 85 c0             	test   %rax,%rax
   12774:	74 27                	je     1279d <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x14d>
   12776:	48 8d 0c 8d 00 00 00 	lea    0x0(,%rcx,4),%rcx
   1277d:	00 
   1277e:	4c 01 e9             	add    %r13,%rcx
   12781:	31 d2                	xor    %edx,%edx
   12783:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   1278a:	84 00 00 00 00 00 
            WS += W[i];
   12790:	f3 0f 58 0c 91       	addss  (%rcx,%rdx,4),%xmm1
        for (uint64_t i = 0; i < n_samples; ++i) {
   12795:	48 ff c2             	inc    %rdx
   12798:	48 39 d0             	cmp    %rdx,%rax
   1279b:	75 f3                	jne    12790 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x140>
        for (uint64_t pid = 0; pid < n_progs; ++pid) {
   1279d:	48 85 db             	test   %rbx,%rbx
   127a0:	0f 84 a5 01 00 00    	je     1294b <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x2fb>
   127a6:	4c 89 f9             	mov    %r15,%rcx
   127a9:	48 83 e1 fc          	and    $0xfffffffffffffffc,%rcx
   127ad:	0f 28 d0             	movaps %xmm0,%xmm2
   127b0:	0f c6 d0 00          	shufps $0x0,%xmm0,%xmm2
   127b4:	0f 28 d9             	movaps %xmm1,%xmm3
   127b7:	0f c6 d9 00          	shufps $0x0,%xmm1,%xmm3
   127bb:	4a 8d 04 bd 00 00 00 	lea    0x0(,%r15,4),%rax
   127c2:	00 
   127c3:	31 d2                	xor    %edx,%edx
   127c5:	0f 28 25 e4 ff fe ff 	movaps -0x1001c(%rip),%xmm4        # 27b0 <_IO_stdin_used+0xc0>
   127cc:	48 89 fe             	mov    %rdi,%rsi
   127cf:	eb 21                	jmp    127f2 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x1a2>
   127d1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   127d8:	0f 1f 84 00 00 00 00 
   127df:	00 
   127e0:	48 ff c2             	inc    %rdx
   127e3:	48 01 c6             	add    %rax,%rsi
   127e6:	48 01 c5             	add    %rax,%rbp
   127e9:	48 39 da             	cmp    %rbx,%rdx
   127ec:	0f 84 84 00 00 00    	je     12876 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x226>
        for (uint64_t i = 0; i < n_samples; ++i) {
   127f2:	4d 85 ff             	test   %r15,%r15
            for (uint64_t i = 0; i < n_samples; ++i) {
   127f5:	74 e9                	je     127e0 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x190>
   127f7:	45 31 c0             	xor    %r8d,%r8d
   127fa:	49 83 ff 04          	cmp    $0x4,%r15
   127fe:	72 40                	jb     12840 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x1f0>
                    N * W[i] * std::abs(Y_pred[pid * n_samples + i] - Y[i]) / WS;
   12800:	43 0f 10 6c 85 00    	movups 0x0(%r13,%r8,4),%xmm5
   12806:	0f 59 ea             	mulps  %xmm2,%xmm5
   12809:	42 0f 10 74 85 00    	movups 0x0(%rbp,%r8,4),%xmm6
   1280f:	43 0f 10 3c 84       	movups (%r12,%r8,4),%xmm7
   12814:	0f 5c f7             	subps  %xmm7,%xmm6
   12817:	0f 54 f4             	andps  %xmm4,%xmm6
   1281a:	0f 59 f5             	mulps  %xmm5,%xmm6
   1281d:	0f 5e f3             	divps  %xmm3,%xmm6
                error[pid * n_samples + i] =
   12820:	42 0f 11 34 86       	movups %xmm6,(%rsi,%r8,4)
            for (uint64_t i = 0; i < n_samples; ++i) {
   12825:	49 83 c0 04          	add    $0x4,%r8
   12829:	4c 39 c1             	cmp    %r8,%rcx
   1282c:	75 d2                	jne    12800 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x1b0>
   1282e:	49 89 c8             	mov    %rcx,%r8
   12831:	4c 39 f9             	cmp    %r15,%rcx
   12834:	74 aa                	je     127e0 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x190>
   12836:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1283d:	00 00 00 
   12840:	f3 43 0f 10 6c 85 00 	movss  0x0(%r13,%r8,4),%xmm5
                    N * W[i] * std::abs(Y_pred[pid * n_samples + i] - Y[i]) / WS;
   12847:	f3 0f 59 e8          	mulss  %xmm0,%xmm5
   1284b:	f3 42 0f 10 74 85 00 	movss  0x0(%rbp,%r8,4),%xmm6
   12852:	f3 43 0f 5c 34 84    	subss  (%r12,%r8,4),%xmm6
   12858:	0f 54 f4             	andps  %xmm4,%xmm6
   1285b:	f3 0f 59 f5          	mulss  %xmm5,%xmm6
   1285f:	f3 0f 5e f1          	divss  %xmm1,%xmm6
                error[pid * n_samples + i] =
   12863:	f3 42 0f 11 34 86    	movss  %xmm6,(%rsi,%r8,4)
            for (uint64_t i = 0; i < n_samples; ++i) {
   12869:	49 ff c0             	inc    %r8
   1286c:	4d 39 c7             	cmp    %r8,%r15
   1286f:	75 cf                	jne    12840 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x1f0>
   12871:	e9 6a ff ff ff       	jmpq   127e0 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x190>
   12876:	44 89 f9             	mov    %r15d,%ecx
   12879:	83 e1 03             	and    $0x3,%ecx
   1287c:	4c 89 fa             	mov    %r15,%rdx
   1287f:	48 83 e2 fc          	and    $0xfffffffffffffffc,%rdx
        for (uint64_t pid = 0; pid < n_progs; ++pid) {
   12883:	48 8d 77 0c          	lea    0xc(%rdi),%rsi
   12887:	45 31 f6             	xor    %r14d,%r14d
   1288a:	49 89 f8             	mov    %rdi,%r8
   1288d:	eb 19                	jmp    128a8 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x258>
   1288f:	90                   	nop
                out[pid] += error[pid * n_samples + i] / N;
   12890:	f3 43 0f 11 0c b1    	movss  %xmm1,(%r9,%r14,4)
        for (uint64_t pid = 0; pid < n_progs; ++pid) {
   12896:	49 ff c6             	inc    %r14
   12899:	48 01 c6             	add    %rax,%rsi
   1289c:	49 01 c0             	add    %rax,%r8
   1289f:	49 39 de             	cmp    %rbx,%r14
   128a2:	0f 84 a3 00 00 00    	je     1294b <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x2fb>
            out[pid] = static_cast<math_t>(0);
   128a8:	43 c7 04 b1 00 00 00 	movl   $0x0,(%r9,%r14,4)
   128af:	00 
        for (uint64_t i = 0; i < n_samples; ++i) {
   128b0:	4d 85 ff             	test   %r15,%r15
            for (uint64_t i = 0; i < n_samples; ++i) {
   128b3:	74 e1                	je     12896 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x246>
   128b5:	0f 57 c9             	xorps  %xmm1,%xmm1
   128b8:	45 31 d2             	xor    %r10d,%r10d
   128bb:	49 83 ff 04          	cmp    $0x4,%r15
   128bf:	72 53                	jb     12914 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x2c4>
   128c1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   128c8:	0f 1f 84 00 00 00 00 
   128cf:	00 
                out[pid] += error[pid * n_samples + i] / N;
   128d0:	f3 42 0f 10 54 96 f4 	movss  -0xc(%rsi,%r10,4),%xmm2
   128d7:	f3 42 0f 10 5c 96 f8 	movss  -0x8(%rsi,%r10,4),%xmm3
   128de:	f3 0f 5e d0          	divss  %xmm0,%xmm2
   128e2:	f3 0f 58 d1          	addss  %xmm1,%xmm2
   128e6:	f3 0f 5e d8          	divss  %xmm0,%xmm3
   128ea:	f3 0f 58 da          	addss  %xmm2,%xmm3
   128ee:	f3 42 0f 10 54 96 fc 	movss  -0x4(%rsi,%r10,4),%xmm2
   128f5:	f3 0f 5e d0          	divss  %xmm0,%xmm2
   128f9:	f3 0f 58 d3          	addss  %xmm3,%xmm2
   128fd:	f3 42 0f 10 0c 96    	movss  (%rsi,%r10,4),%xmm1
   12903:	f3 0f 5e c8          	divss  %xmm0,%xmm1
   12907:	f3 0f 58 ca          	addss  %xmm2,%xmm1
            for (uint64_t i = 0; i < n_samples; ++i) {
   1290b:	49 83 c2 04          	add    $0x4,%r10
   1290f:	4c 39 d2             	cmp    %r10,%rdx
   12912:	75 bc                	jne    128d0 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x280>
   12914:	48 85 c9             	test   %rcx,%rcx
   12917:	0f 84 73 ff ff ff    	je     12890 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x240>
   1291d:	4f 8d 1c 90          	lea    (%r8,%r10,4),%r11
   12921:	45 31 d2             	xor    %r10d,%r10d
   12924:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
   1292b:	00 00 00 00 00 
                out[pid] += error[pid * n_samples + i] / N;
   12930:	f3 43 0f 10 14 93    	movss  (%r11,%r10,4),%xmm2
   12936:	f3 0f 5e d0          	divss  %xmm0,%xmm2
   1293a:	f3 0f 58 ca          	addss  %xmm2,%xmm1
            for (uint64_t i = 0; i < n_samples; ++i) {
   1293e:	49 ff c2             	inc    %r10
   12941:	4c 39 d1             	cmp    %r10,%rcx
   12944:	75 ea                	jne    12930 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x2e0>
   12946:	e9 45 ff ff ff       	jmpq   12890 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x240>
	::operator delete(__p
   1294b:	48 83 c4 18          	add    $0x18,%rsp
	if (__p)
   1294f:	48 85 ff             	test   %rdi,%rdi
   12952:	74 0f                	je     12963 <_ZN7genetic17meanAbsoluteErrorIfEEvmmPKT_S3_S3_PS1_+0x313>
   12954:	5b                   	pop    %rbx
   12955:	41 5c                	pop    %r12
   12957:	41 5d                	pop    %r13
   12959:	41 5e                	pop    %r14
   1295b:	41 5f                	pop    %r15
   1295d:	5d                   	pop    %rbp
   1295e:	e9 5d 4d 00 00       	jmpq   176c0 <_ZdlPv@plt>
    }
   12963:	5b                   	pop    %rbx
   12964:	41 5c                	pop    %r12
   12966:	41 5d                	pop    %r13
   12968:	41 5e                	pop    %r14
   1296a:	41 5f                	pop    %r15
   1296c:	5d                   	pop    %rbp
   1296d:	c3                   	retq   
	  __throw_length_error(
   1296e:	48 8d 3d 4e 04 ff ff 	lea    -0xfbb2(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
   12975:	e8 f6 4b 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
   1297a:	cc                   	int3   
   1297b:	cc                   	int3   
   1297c:	cc                   	int3   
   1297d:	cc                   	int3   
   1297e:	cc                   	int3   
   1297f:	cc                   	int3   

0000000000012980 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_>:
                         const math_t* Y_pred, const math_t* W, math_t* out) {
   12980:	55                   	push   %rbp
   12981:	41 57                	push   %r15
   12983:	41 56                	push   %r14
   12985:	41 55                	push   %r13
   12987:	41 54                	push   %r12
   12989:	53                   	push   %rbx
   1298a:	48 83 ec 18          	sub    $0x18,%rsp
        std::vector<math_t> error(n_samples * n_progs);
   1298e:	49 89 f6             	mov    %rsi,%r14
   12991:	4c 0f af f7          	imul   %rdi,%r14
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   12995:	4c 89 f0             	mov    %r14,%rax
   12998:	48 c1 e8 3d          	shr    $0x3d,%rax
   1299c:	0f 85 ec 02 00 00    	jne    12c8e <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x30e>
   129a2:	4d 89 c5             	mov    %r8,%r13
   129a5:	48 89 cd             	mov    %rcx,%rbp
   129a8:	49 89 d4             	mov    %rdx,%r12
   129ab:	48 89 f3             	mov    %rsi,%rbx
   129ae:	49 89 ff             	mov    %rdi,%r15
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   129b1:	4d 85 f6             	test   %r14,%r14
   129b4:	74 2d                	je     129e3 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x63>
   129b6:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   129bb:	4a 8d 3c b5 00 00 00 	lea    0x0(,%r14,4),%rdi
   129c2:	00 
   129c3:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
   129c8:	e8 93 4d 00 00       	callq  17760 <_Znwm@plt>
   129cd:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      if (__n <= 0)
   129d3:	49 83 fe 01          	cmp    $0x1,%r14
   129d7:	75 0e                	jne    129e7 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x67>
   129d9:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
   129de:	48 89 c7             	mov    %rax,%rdi
   129e1:	eb 26                	jmp    12a09 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x89>
   129e3:	31 ff                	xor    %edi,%edi
   129e5:	eb 22                	jmp    12a09 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x89>
   129e7:	48 89 c7             	mov    %rax,%rdi
   129ea:	48 83 c7 04          	add    $0x4,%rdi
   129ee:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
      for (; __first != __last; ++__first)
   129f3:	48 83 c2 fc          	add    $0xfffffffffffffffc,%rdx
	*__first = __tmp;
   129f7:	31 f6                	xor    %esi,%esi
   129f9:	49 89 c6             	mov    %rax,%r14
   129fc:	e8 8f 4f 00 00       	callq  17990 <memset@plt>
   12a01:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
   12a06:	4c 89 f7             	mov    %r14,%rdi
        math_t              N = static_cast<math_t>(n_samples);
   12a09:	4c 89 f9             	mov    %r15,%rcx
   12a0c:	48 d1 e9             	shr    %rcx
   12a0f:	44 89 f8             	mov    %r15d,%eax
   12a12:	83 e0 01             	and    $0x1,%eax
   12a15:	48 09 c8             	or     %rcx,%rax
   12a18:	4d 85 ff             	test   %r15,%r15
   12a1b:	78 1a                	js     12a37 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0xb7>
   12a1d:	f3 49 0f 2a c7       	cvtsi2ss %r15,%xmm0
        for (uint64_t i = 0; i < n_samples; ++i) {
   12a22:	74 1e                	je     12a42 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0xc2>
   12a24:	44 89 f8             	mov    %r15d,%eax
   12a27:	83 e0 07             	and    $0x7,%eax
   12a2a:	49 83 ff 08          	cmp    $0x8,%r15
   12a2e:	73 1a                	jae    12a4a <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0xca>
   12a30:	0f 57 c9             	xorps  %xmm1,%xmm1
   12a33:	31 c9                	xor    %ecx,%ecx
   12a35:	eb 6a                	jmp    12aa1 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x121>
   12a37:	f3 48 0f 2a c0       	cvtsi2ss %rax,%xmm0
   12a3c:	f3 0f 58 c0          	addss  %xmm0,%xmm0
   12a40:	75 e2                	jne    12a24 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0xa4>
   12a42:	0f 57 c9             	xorps  %xmm1,%xmm1
   12a45:	e9 83 00 00 00       	jmpq   12acd <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x14d>
   12a4a:	4c 89 fa             	mov    %r15,%rdx
   12a4d:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
   12a51:	0f 57 c9             	xorps  %xmm1,%xmm1
   12a54:	31 c9                	xor    %ecx,%ecx
   12a56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   12a5d:	00 00 00 
            WS += W[i];
   12a60:	f3 41 0f 58 4c 8d 00 	addss  0x0(%r13,%rcx,4),%xmm1
   12a67:	f3 41 0f 58 4c 8d 04 	addss  0x4(%r13,%rcx,4),%xmm1
   12a6e:	f3 41 0f 58 4c 8d 08 	addss  0x8(%r13,%rcx,4),%xmm1
   12a75:	f3 41 0f 58 4c 8d 0c 	addss  0xc(%r13,%rcx,4),%xmm1
   12a7c:	f3 41 0f 58 4c 8d 10 	addss  0x10(%r13,%rcx,4),%xmm1
   12a83:	f3 41 0f 58 4c 8d 14 	addss  0x14(%r13,%rcx,4),%xmm1
   12a8a:	f3 41 0f 58 4c 8d 18 	addss  0x18(%r13,%rcx,4),%xmm1
   12a91:	f3 41 0f 58 4c 8d 1c 	addss  0x1c(%r13,%rcx,4),%xmm1
        for (uint64_t i = 0; i < n_samples; ++i) {
   12a98:	48 83 c1 08          	add    $0x8,%rcx
   12a9c:	48 39 ca             	cmp    %rcx,%rdx
   12a9f:	75 bf                	jne    12a60 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0xe0>
   12aa1:	48 85 c0             	test   %rax,%rax
   12aa4:	74 27                	je     12acd <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x14d>
   12aa6:	48 8d 0c 8d 00 00 00 	lea    0x0(,%rcx,4),%rcx
   12aad:	00 
   12aae:	4c 01 e9             	add    %r13,%rcx
   12ab1:	31 d2                	xor    %edx,%edx
   12ab3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   12aba:	84 00 00 00 00 00 
            WS += W[i];
   12ac0:	f3 0f 58 0c 91       	addss  (%rcx,%rdx,4),%xmm1
        for (uint64_t i = 0; i < n_samples; ++i) {
   12ac5:	48 ff c2             	inc    %rdx
   12ac8:	48 39 d0             	cmp    %rdx,%rax
   12acb:	75 f3                	jne    12ac0 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x140>
        for (uint64_t pid = 0; pid < n_progs; ++pid) {
   12acd:	48 85 db             	test   %rbx,%rbx
   12ad0:	0f 84 95 01 00 00    	je     12c6b <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x2eb>
   12ad6:	4c 89 f9             	mov    %r15,%rcx
   12ad9:	48 83 e1 fc          	and    $0xfffffffffffffffc,%rcx
   12add:	0f 28 d0             	movaps %xmm0,%xmm2
   12ae0:	0f c6 d0 00          	shufps $0x0,%xmm0,%xmm2
   12ae4:	0f 28 d9             	movaps %xmm1,%xmm3
   12ae7:	0f c6 d9 00          	shufps $0x0,%xmm1,%xmm3
   12aeb:	4a 8d 04 bd 00 00 00 	lea    0x0(,%r15,4),%rax
   12af2:	00 
   12af3:	31 d2                	xor    %edx,%edx
   12af5:	48 89 fe             	mov    %rdi,%rsi
   12af8:	eb 18                	jmp    12b12 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x192>
   12afa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   12b00:	48 ff c2             	inc    %rdx
   12b03:	48 01 c6             	add    %rax,%rsi
   12b06:	48 01 c5             	add    %rax,%rbp
   12b09:	48 39 da             	cmp    %rbx,%rdx
   12b0c:	0f 84 85 00 00 00    	je     12b97 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x217>
        for (uint64_t i = 0; i < n_samples; ++i) {
   12b12:	4d 85 ff             	test   %r15,%r15
            for (uint64_t i = 0; i < n_samples; ++i) {
   12b15:	74 e9                	je     12b00 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x180>
   12b17:	45 31 c0             	xor    %r8d,%r8d
   12b1a:	49 83 ff 04          	cmp    $0x4,%r15
   12b1e:	72 40                	jb     12b60 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x1e0>
                error[pid * n_samples + i] = N * W[i] * (Y_pred[pid * n_samples + i] - Y[i]) *
   12b20:	43 0f 10 64 85 00    	movups 0x0(%r13,%r8,4),%xmm4
   12b26:	0f 59 e2             	mulps  %xmm2,%xmm4
   12b29:	42 0f 10 6c 85 00    	movups 0x0(%rbp,%r8,4),%xmm5
   12b2f:	43 0f 10 34 84       	movups (%r12,%r8,4),%xmm6
   12b34:	0f 5c ee             	subps  %xmm6,%xmm5
   12b37:	0f 59 e5             	mulps  %xmm5,%xmm4
   12b3a:	0f 59 e5             	mulps  %xmm5,%xmm4
                                             (Y_pred[pid * n_samples + i] - Y[i]) / WS;
   12b3d:	0f 5e e3             	divps  %xmm3,%xmm4
                error[pid * n_samples + i] = N * W[i] * (Y_pred[pid * n_samples + i] - Y[i]) *
   12b40:	42 0f 11 24 86       	movups %xmm4,(%rsi,%r8,4)
            for (uint64_t i = 0; i < n_samples; ++i) {
   12b45:	49 83 c0 04          	add    $0x4,%r8
   12b49:	4c 39 c1             	cmp    %r8,%rcx
   12b4c:	75 d2                	jne    12b20 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x1a0>
   12b4e:	49 89 c8             	mov    %rcx,%r8
   12b51:	4c 39 f9             	cmp    %r15,%rcx
   12b54:	74 aa                	je     12b00 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x180>
   12b56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   12b5d:	00 00 00 
   12b60:	f3 43 0f 10 64 85 00 	movss  0x0(%r13,%r8,4),%xmm4
                error[pid * n_samples + i] = N * W[i] * (Y_pred[pid * n_samples + i] - Y[i]) *
   12b67:	f3 0f 59 e0          	mulss  %xmm0,%xmm4
   12b6b:	f3 42 0f 10 6c 85 00 	movss  0x0(%rbp,%r8,4),%xmm5
   12b72:	f3 43 0f 5c 2c 84    	subss  (%r12,%r8,4),%xmm5
   12b78:	f3 0f 59 e5          	mulss  %xmm5,%xmm4
   12b7c:	f3 0f 59 e5          	mulss  %xmm5,%xmm4
                                             (Y_pred[pid * n_samples + i] - Y[i]) / WS;
   12b80:	f3 0f 5e e1          	divss  %xmm1,%xmm4
                error[pid * n_samples + i] = N * W[i] * (Y_pred[pid * n_samples + i] - Y[i]) *
   12b84:	f3 42 0f 11 24 86    	movss  %xmm4,(%rsi,%r8,4)
            for (uint64_t i = 0; i < n_samples; ++i) {
   12b8a:	49 ff c0             	inc    %r8
   12b8d:	4d 39 c7             	cmp    %r8,%r15
   12b90:	75 ce                	jne    12b60 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x1e0>
   12b92:	e9 69 ff ff ff       	jmpq   12b00 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x180>
   12b97:	44 89 f9             	mov    %r15d,%ecx
   12b9a:	83 e1 03             	and    $0x3,%ecx
   12b9d:	4c 89 fa             	mov    %r15,%rdx
   12ba0:	48 83 e2 fc          	and    $0xfffffffffffffffc,%rdx
        for (uint64_t pid = 0; pid < n_progs; ++pid) {
   12ba4:	48 8d 77 0c          	lea    0xc(%rdi),%rsi
   12ba8:	45 31 f6             	xor    %r14d,%r14d
   12bab:	49 89 f8             	mov    %rdi,%r8
   12bae:	eb 18                	jmp    12bc8 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x248>
                out[pid] += error[pid * n_samples + i] / N;
   12bb0:	f3 43 0f 11 0c b1    	movss  %xmm1,(%r9,%r14,4)
        for (uint64_t pid = 0; pid < n_progs; ++pid) {
   12bb6:	49 ff c6             	inc    %r14
   12bb9:	48 01 c6             	add    %rax,%rsi
   12bbc:	49 01 c0             	add    %rax,%r8
   12bbf:	49 39 de             	cmp    %rbx,%r14
   12bc2:	0f 84 a3 00 00 00    	je     12c6b <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x2eb>
            out[pid] = static_cast<math_t>(0);
   12bc8:	43 c7 04 b1 00 00 00 	movl   $0x0,(%r9,%r14,4)
   12bcf:	00 
        for (uint64_t i = 0; i < n_samples; ++i) {
   12bd0:	4d 85 ff             	test   %r15,%r15
            for (uint64_t i = 0; i < n_samples; ++i) {
   12bd3:	74 e1                	je     12bb6 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x236>
   12bd5:	0f 57 c9             	xorps  %xmm1,%xmm1
   12bd8:	45 31 d2             	xor    %r10d,%r10d
   12bdb:	49 83 ff 04          	cmp    $0x4,%r15
   12bdf:	72 53                	jb     12c34 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x2b4>
   12be1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   12be8:	0f 1f 84 00 00 00 00 
   12bef:	00 
                out[pid] += error[pid * n_samples + i] / N;
   12bf0:	f3 42 0f 10 54 96 f4 	movss  -0xc(%rsi,%r10,4),%xmm2
   12bf7:	f3 42 0f 10 5c 96 f8 	movss  -0x8(%rsi,%r10,4),%xmm3
   12bfe:	f3 0f 5e d0          	divss  %xmm0,%xmm2
   12c02:	f3 0f 58 d1          	addss  %xmm1,%xmm2
   12c06:	f3 0f 5e d8          	divss  %xmm0,%xmm3
   12c0a:	f3 0f 58 da          	addss  %xmm2,%xmm3
   12c0e:	f3 42 0f 10 54 96 fc 	movss  -0x4(%rsi,%r10,4),%xmm2
   12c15:	f3 0f 5e d0          	divss  %xmm0,%xmm2
   12c19:	f3 0f 58 d3          	addss  %xmm3,%xmm2
   12c1d:	f3 42 0f 10 0c 96    	movss  (%rsi,%r10,4),%xmm1
   12c23:	f3 0f 5e c8          	divss  %xmm0,%xmm1
   12c27:	f3 0f 58 ca          	addss  %xmm2,%xmm1
            for (uint64_t i = 0; i < n_samples; ++i) {
   12c2b:	49 83 c2 04          	add    $0x4,%r10
   12c2f:	4c 39 d2             	cmp    %r10,%rdx
   12c32:	75 bc                	jne    12bf0 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x270>
   12c34:	48 85 c9             	test   %rcx,%rcx
   12c37:	0f 84 73 ff ff ff    	je     12bb0 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x230>
   12c3d:	4f 8d 1c 90          	lea    (%r8,%r10,4),%r11
   12c41:	45 31 d2             	xor    %r10d,%r10d
   12c44:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
   12c4b:	00 00 00 00 00 
                out[pid] += error[pid * n_samples + i] / N;
   12c50:	f3 43 0f 10 14 93    	movss  (%r11,%r10,4),%xmm2
   12c56:	f3 0f 5e d0          	divss  %xmm0,%xmm2
   12c5a:	f3 0f 58 ca          	addss  %xmm2,%xmm1
            for (uint64_t i = 0; i < n_samples; ++i) {
   12c5e:	49 ff c2             	inc    %r10
   12c61:	4c 39 d1             	cmp    %r10,%rcx
   12c64:	75 ea                	jne    12c50 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x2d0>
   12c66:	e9 45 ff ff ff       	jmpq   12bb0 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x230>
	::operator delete(__p
   12c6b:	48 83 c4 18          	add    $0x18,%rsp
	if (__p)
   12c6f:	48 85 ff             	test   %rdi,%rdi
   12c72:	74 0f                	je     12c83 <_ZN7genetic15meanSquareErrorIfEEvmmPKT_S3_S3_PS1_+0x303>
   12c74:	5b                   	pop    %rbx
   12c75:	41 5c                	pop    %r12
   12c77:	41 5d                	pop    %r13
   12c79:	41 5e                	pop    %r14
   12c7b:	41 5f                	pop    %r15
   12c7d:	5d                   	pop    %rbp
   12c7e:	e9 3d 4a 00 00       	jmpq   176c0 <_ZdlPv@plt>
    }
   12c83:	5b                   	pop    %rbx
   12c84:	41 5c                	pop    %r12
   12c86:	41 5d                	pop    %r13
   12c88:	41 5e                	pop    %r14
   12c8a:	41 5f                	pop    %r15
   12c8c:	5d                   	pop    %rbp
   12c8d:	c3                   	retq   
	  __throw_length_error(
   12c8e:	48 8d 3d 2e 01 ff ff 	lea    -0xfed2(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
   12c95:	e8 d6 48 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
   12c9a:	cc                   	int3   
   12c9b:	cc                   	int3   
   12c9c:	cc                   	int3   
   12c9d:	cc                   	int3   
   12c9e:	cc                   	int3   
   12c9f:	cc                   	int3   

0000000000012ca0 <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_>:
        }
    }

    template <typename math_t = float>
    void logLoss(const uint64_t n_samples, const uint64_t n_progs, const math_t* Y,
                 const math_t* Y_pred, const math_t* W, math_t* out) {
   12ca0:	55                   	push   %rbp
   12ca1:	41 57                	push   %r15
   12ca3:	41 56                	push   %r14
   12ca5:	41 55                	push   %r13
   12ca7:	41 54                	push   %r12
   12ca9:	53                   	push   %rbx
   12caa:	48 83 ec 58          	sub    $0x58,%rsp
   12cae:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        // Logistic error per sample
        std::vector<math_t> error(n_samples * n_progs);
   12cb3:	48 89 f3             	mov    %rsi,%rbx
   12cb6:	48 0f af df          	imul   %rdi,%rbx
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   12cba:	48 89 d8             	mov    %rbx,%rax
   12cbd:	48 c1 e8 3d          	shr    $0x3d,%rax
   12cc1:	0f 85 be 03 00 00    	jne    13085 <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x3e5>
   12cc7:	4d 89 c5             	mov    %r8,%r13
   12cca:	48 89 cd             	mov    %rcx,%rbp
   12ccd:	49 89 d4             	mov    %rdx,%r12
   12cd0:	49 89 ff             	mov    %rdi,%r15
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   12cd3:	48 85 db             	test   %rbx,%rbx
   12cd6:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
   12cdb:	74 3d                	je     12d1a <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x7a>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   12cdd:	48 8d 3c 9d 00 00 00 	lea    0x0(,%rbx,4),%rdi
   12ce4:	00 
   12ce5:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
   12cea:	e8 71 4a 00 00       	callq  17760 <_Znwm@plt>
   12cef:	49 89 c6             	mov    %rax,%r14
   12cf2:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      if (__n <= 0)
   12cf8:	48 83 fb 01          	cmp    $0x1,%rbx
   12cfc:	74 17                	je     12d15 <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x75>
   12cfe:	4c 89 f7             	mov    %r14,%rdi
   12d01:	48 83 c7 04          	add    $0x4,%rdi
   12d05:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
      for (; __first != __last; ++__first)
   12d0a:	48 83 c2 fc          	add    $0xfffffffffffffffc,%rdx
	*__first = __tmp;
   12d0e:	31 f6                	xor    %esi,%esi
   12d10:	e8 7b 4c 00 00       	callq  17990 <memset@plt>
   12d15:	4c 89 f3             	mov    %r14,%rbx
   12d18:	eb 02                	jmp    12d1c <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x7c>
   12d1a:	31 db                	xor    %ebx,%ebx
        math_t              N = (math_t)n_samples;
   12d1c:	4c 89 f9             	mov    %r15,%rcx
   12d1f:	48 d1 e9             	shr    %rcx
   12d22:	44 89 f8             	mov    %r15d,%eax
   12d25:	83 e0 01             	and    $0x1,%eax
   12d28:	48 09 c8             	or     %rcx,%rax
   12d2b:	4d 85 ff             	test   %r15,%r15
   12d2e:	78 1a                	js     12d4a <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0xaa>
   12d30:	f3 49 0f 2a df       	cvtsi2ss %r15,%xmm3

        // Weight Sum
        math_t WS = static_cast<math_t>(0);
        for (uint64_t i = 0; i < n_samples; ++i) {
   12d35:	74 1e                	je     12d55 <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0xb5>
   12d37:	44 89 f8             	mov    %r15d,%eax
   12d3a:	83 e0 07             	and    $0x7,%eax
   12d3d:	49 83 ff 08          	cmp    $0x8,%r15
   12d41:	73 1a                	jae    12d5d <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0xbd>
   12d43:	0f 57 d2             	xorps  %xmm2,%xmm2
   12d46:	31 c9                	xor    %ecx,%ecx
   12d48:	eb 67                	jmp    12db1 <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x111>
   12d4a:	f3 48 0f 2a d8       	cvtsi2ss %rax,%xmm3
   12d4f:	f3 0f 58 db          	addss  %xmm3,%xmm3
   12d53:	75 e2                	jne    12d37 <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x97>
   12d55:	0f 57 d2             	xorps  %xmm2,%xmm2
   12d58:	e9 80 00 00 00       	jmpq   12ddd <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x13d>
   12d5d:	4c 89 fa             	mov    %r15,%rdx
   12d60:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
   12d64:	0f 57 d2             	xorps  %xmm2,%xmm2
   12d67:	31 c9                	xor    %ecx,%ecx
   12d69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            WS += W[i];
   12d70:	f3 41 0f 58 54 8d 00 	addss  0x0(%r13,%rcx,4),%xmm2
   12d77:	f3 41 0f 58 54 8d 04 	addss  0x4(%r13,%rcx,4),%xmm2
   12d7e:	f3 41 0f 58 54 8d 08 	addss  0x8(%r13,%rcx,4),%xmm2
   12d85:	f3 41 0f 58 54 8d 0c 	addss  0xc(%r13,%rcx,4),%xmm2
   12d8c:	f3 41 0f 58 54 8d 10 	addss  0x10(%r13,%rcx,4),%xmm2
   12d93:	f3 41 0f 58 54 8d 14 	addss  0x14(%r13,%rcx,4),%xmm2
   12d9a:	f3 41 0f 58 54 8d 18 	addss  0x18(%r13,%rcx,4),%xmm2
   12da1:	f3 41 0f 58 54 8d 1c 	addss  0x1c(%r13,%rcx,4),%xmm2
        for (uint64_t i = 0; i < n_samples; ++i) {
   12da8:	48 83 c1 08          	add    $0x8,%rcx
   12dac:	48 39 ca             	cmp    %rcx,%rdx
   12daf:	75 bf                	jne    12d70 <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0xd0>
   12db1:	48 85 c0             	test   %rax,%rax
   12db4:	74 27                	je     12ddd <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x13d>
   12db6:	48 8d 0c 8d 00 00 00 	lea    0x0(,%rcx,4),%rcx
   12dbd:	00 
   12dbe:	4c 01 e9             	add    %r13,%rcx
   12dc1:	31 d2                	xor    %edx,%edx
   12dc3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   12dca:	84 00 00 00 00 00 
            WS += W[i];
   12dd0:	f3 0f 58 14 91       	addss  (%rcx,%rdx,4),%xmm2
        for (uint64_t i = 0; i < n_samples; ++i) {
   12dd5:	48 ff c2             	inc    %rdx
   12dd8:	48 39 d0             	cmp    %rdx,%rax
   12ddb:	75 f3                	jne    12dd0 <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x130>
        // logistic regression.
        // PS - In 2021, I spent 2 sleepless nights trying to just compute this, then
        // adapt it for the weighted version (turned out pre-multiplying N just
        // worked). Improving numerical stability in CUDA is ... :)

        for (uint64_t pid = 0; pid < n_progs; ++pid) {
   12ddd:	48 83 7c 24 18 00    	cmpq   $0x0,0x18(%rsp)
   12de3:	0f 84 72 02 00 00    	je     1305b <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x3bb>
   12de9:	4e 8d 34 bd 00 00 00 	lea    0x0(,%r15,4),%r14
   12df0:	00 
   12df1:	31 c0                	xor    %eax,%eax
   12df3:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
   12df8:	f2 0f 10 25 88 00 ff 	movsd  -0xff78(%rip),%xmm4        # 2e88 <_IO_stdin_used+0x798>
   12dff:	ff 
   12e00:	f3 0f 10 2d c8 f8 fe 	movss  -0x10738(%rip),%xmm5        # 26d0 <_IO_stdin_used-0x20>
   12e07:	ff 
   12e08:	0f 28 35 f1 f9 fe ff 	movaps -0x1060f(%rip),%xmm6        # 2800 <_IO_stdin_used+0x110>
   12e0f:	48 89 5c 24 40       	mov    %rbx,0x40(%rsp)
   12e14:	f3 0f 11 5c 24 0c    	movss  %xmm3,0xc(%rsp)
   12e1a:	4c 89 74 24 50       	mov    %r14,0x50(%rsp)
   12e1f:	f3 0f 11 54 24 08    	movss  %xmm2,0x8(%rsp)
   12e25:	eb 2f                	jmp    12e56 <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x1b6>
   12e27:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   12e2e:	00 00 
   12e30:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
   12e35:	48 ff c1             	inc    %rcx
   12e38:	4c 8b 74 24 50       	mov    0x50(%rsp),%r14
   12e3d:	4c 01 f3             	add    %r14,%rbx
   12e40:	4c 01 f5             	add    %r14,%rbp
   12e43:	48 89 c8             	mov    %rcx,%rax
   12e46:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
   12e4b:	48 3b 4c 24 18       	cmp    0x18(%rsp),%rcx
   12e50:	0f 84 28 01 00 00    	je     12f7e <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x2de>
        for (uint64_t i = 0; i < n_samples; ++i) {
   12e56:	4d 85 ff             	test   %r15,%r15
            for (uint64_t i = 0; i < n_samples; ++i) {
   12e59:	74 d5                	je     12e30 <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x190>
   12e5b:	45 31 f6             	xor    %r14d,%r14d
   12e5e:	eb 65                	jmp    12ec5 <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x225>
   12e60:	0f 28 0d 99 f9 fe ff 	movaps -0x10667(%rip),%xmm1        # 2800 <_IO_stdin_used+0x110>
   12e67:	0f 57 c1             	xorps  %xmm1,%xmm0
   12e6a:	f3 0f 10 5c 24 0c    	movss  0xc(%rsp),%xmm3
   12e70:	f3 0f 10 54 24 08    	movss  0x8(%rsp),%xmm2
   12e76:	f2 0f 10 25 0a 00 ff 	movsd  -0xfff6(%rip),%xmm4        # 2e88 <_IO_stdin_used+0x798>
   12e7d:	ff 
   12e7e:	f3 0f 10 2d 4a f8 fe 	movss  -0x107b6(%rip),%xmm5        # 26d0 <_IO_stdin_used-0x20>
   12e85:	ff 
   12e86:	0f 28 f1             	movaps %xmm1,%xmm6
   12e89:	f3 0f 10 7c 24 14    	movss  0x14(%rsp),%xmm7
   12e8f:	f3 44 0f 10 4c 24 10 	movss  0x10(%rsp),%xmm9
                    logsig = yp - expf(yp);
                else if (yp <= 37)
                    logsig = -log1pf(expf(-yp));
                else
                    logsig = -expf(-yp);
                error[pid * n_samples + i] = ((1 - y) * yp - logsig) * (N * w / WS);
   12e96:	0f 28 cd             	movaps %xmm5,%xmm1
   12e99:	f3 41 0f 5c c9       	subss  %xmm9,%xmm1
   12e9e:	f3 41 0f 59 c8       	mulss  %xmm8,%xmm1
   12ea3:	f3 0f 5c c8          	subss  %xmm0,%xmm1
   12ea7:	f3 0f 59 fb          	mulss  %xmm3,%xmm7
   12eab:	f3 0f 5e fa          	divss  %xmm2,%xmm7
   12eaf:	f3 0f 59 f9          	mulss  %xmm1,%xmm7
   12eb3:	f3 42 0f 11 3c b3    	movss  %xmm7,(%rbx,%r14,4)
            for (uint64_t i = 0; i < n_samples; ++i) {
   12eb9:	49 ff c6             	inc    %r14
   12ebc:	4d 39 f7             	cmp    %r14,%r15
   12ebf:	0f 84 6b ff ff ff    	je     12e30 <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x190>
                math_t yp = Y_pred[pid * n_samples + i];
   12ec5:	f3 46 0f 10 44 b5 00 	movss  0x0(%rbp,%r14,4),%xmm8
                math_t y  = Y[i];
   12ecc:	f3 47 0f 10 0c b4    	movss  (%r12,%r14,4),%xmm9
                math_t w  = W[i];
   12ed2:	f3 43 0f 10 7c b5 00 	movss  0x0(%r13,%r14,4),%xmm7
                if (yp < -33.3)
   12ed9:	0f 57 c0             	xorps  %xmm0,%xmm0
   12edc:	f3 41 0f 5a c0       	cvtss2sd %xmm8,%xmm0
   12ee1:	66 0f 2e e0          	ucomisd %xmm0,%xmm4
   12ee5:	41 0f 28 c0          	movaps %xmm8,%xmm0
   12ee9:	77 ab                	ja     12e96 <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x1f6>
   12eeb:	f3 44 0f 11 4c 24 10 	movss  %xmm9,0x10(%rsp)
   12ef2:	f3 0f 11 7c 24 14    	movss  %xmm7,0x14(%rsp)
                else if (yp <= -18)
   12ef8:	f3 0f 10 05 f4 f7 fe 	movss  -0x1080c(%rip),%xmm0        # 26f4 <_IO_stdin_used+0x4>
   12eff:	ff 
   12f00:	41 0f 2e c0          	ucomiss %xmm8,%xmm0
   12f04:	44 0f 29 44 24 20    	movaps %xmm8,0x20(%rsp)
   12f0a:	41 0f 28 c0          	movaps %xmm8,%xmm0
   12f0e:	73 30                	jae    12f40 <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x2a0>
   12f10:	0f 57 c6             	xorps  %xmm6,%xmm0
   12f13:	e8 f8 49 00 00       	callq  17910 <expf@plt>
   12f18:	44 0f 28 44 24 20    	movaps 0x20(%rsp),%xmm8
                else if (yp <= 37)
   12f1e:	f3 0f 10 0d ba f7 fe 	movss  -0x10846(%rip),%xmm1        # 26e0 <_IO_stdin_used-0x10>
   12f25:	ff 
   12f26:	41 0f 2e c8          	ucomiss %xmm8,%xmm1
   12f2a:	0f 82 30 ff ff ff    	jb     12e60 <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x1c0>
                    logsig = -log1pf(expf(-yp));
   12f30:	e8 eb 48 00 00       	callq  17820 <log1pf@plt>
   12f35:	44 0f 28 44 24 20    	movaps 0x20(%rsp),%xmm8
   12f3b:	e9 20 ff ff ff       	jmpq   12e60 <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x1c0>
                    logsig = yp - expf(yp);
   12f40:	e8 cb 49 00 00       	callq  17910 <expf@plt>
   12f45:	44 0f 28 44 24 20    	movaps 0x20(%rsp),%xmm8
   12f4b:	0f 28 35 ae f8 fe ff 	movaps -0x10752(%rip),%xmm6        # 2800 <_IO_stdin_used+0x110>
   12f52:	0f 28 c8             	movaps %xmm0,%xmm1
   12f55:	41 0f 28 c0          	movaps %xmm8,%xmm0
   12f59:	f3 0f 5c c1          	subss  %xmm1,%xmm0
   12f5d:	f3 0f 10 5c 24 0c    	movss  0xc(%rsp),%xmm3
   12f63:	f3 0f 10 54 24 08    	movss  0x8(%rsp),%xmm2
   12f69:	f2 0f 10 25 17 ff fe 	movsd  -0x100e9(%rip),%xmm4        # 2e88 <_IO_stdin_used+0x798>
   12f70:	ff 
   12f71:	f3 0f 10 2d 57 f7 fe 	movss  -0x108a9(%rip),%xmm5        # 26d0 <_IO_stdin_used-0x20>
   12f78:	ff 
   12f79:	e9 0b ff ff ff       	jmpq   12e89 <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x1e9>
   12f7e:	44 89 f8             	mov    %r15d,%eax
   12f81:	83 e0 03             	and    $0x3,%eax
   12f84:	4c 89 f9             	mov    %r15,%rcx
   12f87:	48 83 e1 fc          	and    $0xfffffffffffffffc,%rcx
   12f8b:	48 8b 5c 24 40       	mov    0x40(%rsp),%rbx
            }
        }

        // Take average along rows
        for (uint64_t pid = 0; pid < n_progs; ++pid) {
   12f90:	48 8d 53 0c          	lea    0xc(%rbx),%rdx
   12f94:	31 f6                	xor    %esi,%esi
   12f96:	49 89 db             	mov    %rbx,%r11
   12f99:	4c 8b 54 24 48       	mov    0x48(%rsp),%r10
   12f9e:	eb 1a                	jmp    12fba <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x31a>
            out[pid] = static_cast<math_t>(0);
            for (uint64_t i = 0; i < n_samples; ++i) {
                out[pid] += error[pid * n_samples + i] / N;
   12fa0:	f3 41 0f 11 04 b2    	movss  %xmm0,(%r10,%rsi,4)
        for (uint64_t pid = 0; pid < n_progs; ++pid) {
   12fa6:	48 ff c6             	inc    %rsi
   12fa9:	4c 01 f2             	add    %r14,%rdx
   12fac:	4d 01 f3             	add    %r14,%r11
   12faf:	48 3b 74 24 18       	cmp    0x18(%rsp),%rsi
   12fb4:	0f 84 a1 00 00 00    	je     1305b <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x3bb>
            out[pid] = static_cast<math_t>(0);
   12fba:	41 c7 04 b2 00 00 00 	movl   $0x0,(%r10,%rsi,4)
   12fc1:	00 
        for (uint64_t i = 0; i < n_samples; ++i) {
   12fc2:	4d 85 ff             	test   %r15,%r15
            for (uint64_t i = 0; i < n_samples; ++i) {
   12fc5:	74 df                	je     12fa6 <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x306>
   12fc7:	0f 57 c0             	xorps  %xmm0,%xmm0
   12fca:	45 31 c0             	xor    %r8d,%r8d
   12fcd:	49 83 ff 04          	cmp    $0x4,%r15
   12fd1:	72 51                	jb     13024 <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x384>
   12fd3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   12fda:	84 00 00 00 00 00 
                out[pid] += error[pid * n_samples + i] / N;
   12fe0:	f3 42 0f 10 4c 82 f4 	movss  -0xc(%rdx,%r8,4),%xmm1
   12fe7:	f3 42 0f 10 54 82 f8 	movss  -0x8(%rdx,%r8,4),%xmm2
   12fee:	f3 0f 5e cb          	divss  %xmm3,%xmm1
   12ff2:	f3 0f 58 c8          	addss  %xmm0,%xmm1
   12ff6:	f3 0f 5e d3          	divss  %xmm3,%xmm2
   12ffa:	f3 0f 58 d1          	addss  %xmm1,%xmm2
   12ffe:	f3 42 0f 10 4c 82 fc 	movss  -0x4(%rdx,%r8,4),%xmm1
   13005:	f3 0f 5e cb          	divss  %xmm3,%xmm1
   13009:	f3 0f 58 ca          	addss  %xmm2,%xmm1
   1300d:	f3 42 0f 10 04 82    	movss  (%rdx,%r8,4),%xmm0
   13013:	f3 0f 5e c3          	divss  %xmm3,%xmm0
   13017:	f3 0f 58 c1          	addss  %xmm1,%xmm0
            for (uint64_t i = 0; i < n_samples; ++i) {
   1301b:	49 83 c0 04          	add    $0x4,%r8
   1301f:	4c 39 c1             	cmp    %r8,%rcx
   13022:	75 bc                	jne    12fe0 <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x340>
   13024:	48 85 c0             	test   %rax,%rax
   13027:	0f 84 73 ff ff ff    	je     12fa0 <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x300>
   1302d:	4f 8d 04 83          	lea    (%r11,%r8,4),%r8
   13031:	45 31 c9             	xor    %r9d,%r9d
   13034:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
   1303b:	00 00 00 00 00 
                out[pid] += error[pid * n_samples + i] / N;
   13040:	f3 43 0f 10 0c 88    	movss  (%r8,%r9,4),%xmm1
   13046:	f3 0f 5e cb          	divss  %xmm3,%xmm1
   1304a:	f3 0f 58 c1          	addss  %xmm1,%xmm0
            for (uint64_t i = 0; i < n_samples; ++i) {
   1304e:	49 ff c1             	inc    %r9
   13051:	4c 39 c8             	cmp    %r9,%rax
   13054:	75 ea                	jne    13040 <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x3a0>
   13056:	e9 45 ff ff ff       	jmpq   12fa0 <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x300>
	if (__p)
   1305b:	48 85 db             	test   %rbx,%rbx
   1305e:	74 16                	je     13076 <_ZN7genetic7logLossIfEEvmmPKT_S3_S3_PS1_+0x3d6>
	::operator delete(__p
   13060:	48 89 df             	mov    %rbx,%rdi
   13063:	48 83 c4 58          	add    $0x58,%rsp
   13067:	5b                   	pop    %rbx
   13068:	41 5c                	pop    %r12
   1306a:	41 5d                	pop    %r13
   1306c:	41 5e                	pop    %r14
   1306e:	41 5f                	pop    %r15
   13070:	5d                   	pop    %rbp
   13071:	e9 4a 46 00 00       	jmpq   176c0 <_ZdlPv@plt>
            }
        }
    }
   13076:	48 83 c4 58          	add    $0x58,%rsp
   1307a:	5b                   	pop    %rbx
   1307b:	41 5c                	pop    %r12
   1307d:	41 5d                	pop    %r13
   1307f:	41 5e                	pop    %r14
   13081:	41 5f                	pop    %r15
   13083:	5d                   	pop    %rbp
   13084:	c3                   	retq   
	  __throw_length_error(
   13085:	48 8d 3d 37 fd fe ff 	lea    -0x102c9(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
   1308c:	e8 df 44 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
   13091:	cc                   	int3   
   13092:	cc                   	int3   
   13093:	cc                   	int3   
   13094:	cc                   	int3   
   13095:	cc                   	int3   
   13096:	cc                   	int3   
   13097:	cc                   	int3   
   13098:	cc                   	int3   
   13099:	cc                   	int3   
   1309a:	cc                   	int3   
   1309b:	cc                   	int3   
   1309c:	cc                   	int3   
   1309d:	cc                   	int3   
   1309e:	cc                   	int3   
   1309f:	cc                   	int3   

00000000000130a0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_>:
    {
   130a0:	55                   	push   %rbp
   130a1:	41 57                	push   %r15
   130a3:	41 56                	push   %r14
   130a5:	41 55                	push   %r13
   130a7:	41 54                	push   %r12
   130a9:	53                   	push   %rbx
   130aa:	48 83 ec 18          	sub    $0x18,%rsp
   130ae:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    { return __lhs.base() - __rhs.base(); }
   130b3:	49 89 f5             	mov    %rsi,%r13
   130b6:	49 29 fd             	sub    %rdi,%r13
   130b9:	4c 89 e8             	mov    %r13,%rax
   130bc:	48 c1 f8 03          	sar    $0x3,%rax
      while (__last - __first > int(_S_threshold))
   130c0:	48 83 f8 11          	cmp    $0x11,%rax
   130c4:	0f 8c 5d 02 00 00    	jl     13327 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x287>
   130ca:	49 89 d7             	mov    %rdx,%r15
   130cd:	49 89 fe             	mov    %rdi,%r14
	  if (__depth_limit == 0)
   130d0:	48 85 d2             	test   %rdx,%rdx
   130d3:	0f 84 5b 01 00 00    	je     13234 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x194>
   130d9:	49 8d 4e 08          	lea    0x8(%r14),%rcx
   130dd:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
   130e2:	48 c7 c5 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rbp
	  while (__comp(__first, __pivot))
   130e9:	4c 29 f5             	sub    %r14,%rbp
   130ec:	0f 1f 40 00          	nopl   0x0(%rax)
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
   130f0:	48 d1 e8             	shr    %rax

      template<typename _Iterator1, typename _Iterator2>
        _GLIBCXX14_CONSTEXPR
        bool
        operator()(_Iterator1 __it1, _Iterator2 __it2)
        { return bool(_M_comp(*__it1, *__it2)); }
   130f3:	49 8b 56 08          	mov    0x8(%r14),%rdx
   130f7:	49 8b 3c c6          	mov    (%r14,%rax,8),%rdi
   130fb:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
	return *(this->_M_impl._M_start + __n);
   13100:	48 8b 09             	mov    (%rcx),%rcx
                  [&Ycopy](size_t i1, size_t i2) { return Ycopy[i1] < Ycopy[i2]; }); // sort_by_key
   13103:	f3 0f 10 04 91       	movss  (%rcx,%rdx,4),%xmm0
   13108:	f3 0f 10 14 b9       	movss  (%rcx,%rdi,4),%xmm2
   1310d:	0f 2e d0             	ucomiss %xmm0,%xmm2
   13110:	4c 8b 46 f8          	mov    -0x8(%rsi),%r8
   13114:	f3 42 0f 10 0c 81    	movss  (%rcx,%r8,4),%xmm1
      if (__comp(__a, __b))
   1311a:	76 14                	jbe    13130 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x90>
   1311c:	0f 2e ca             	ucomiss %xmm2,%xmm1
	  if (__comp(__b, __c))
   1311f:	76 1f                	jbe    13140 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0xa0>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   13121:	49 8b 16             	mov    (%r14),%rdx
   13124:	eb 6a                	jmp    13190 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0xf0>
   13126:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1312d:	00 00 00 
   13130:	0f 2e c8             	ucomiss %xmm0,%xmm1
      else if (__comp(__a, __c))
   13133:	76 3b                	jbe    13170 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0xd0>
   13135:	49 8b 06             	mov    (%r14),%rax
   13138:	eb 26                	jmp    13160 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0xc0>
   1313a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   13140:	0f 2e c8             	ucomiss %xmm0,%xmm1
   13143:	49 8b 06             	mov    (%r14),%rax
	  else if (__comp(__a, __c))
   13146:	76 18                	jbe    13160 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0xc0>
      __a = _GLIBCXX_MOVE(__b);
   13148:	4d 89 06             	mov    %r8,(%r14)
      __b = _GLIBCXX_MOVE(__tmp);
   1314b:	48 89 46 f8          	mov    %rax,-0x8(%rsi)
   1314f:	eb 46                	jmp    13197 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0xf7>
   13151:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   13158:	0f 1f 84 00 00 00 00 
   1315f:	00 
      __a = _GLIBCXX_MOVE(__b);
   13160:	49 89 16             	mov    %rdx,(%r14)
      __b = _GLIBCXX_MOVE(__tmp);
   13163:	49 89 46 08          	mov    %rax,0x8(%r14)
   13167:	eb 2e                	jmp    13197 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0xf7>
   13169:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   13170:	0f 2e ca             	ucomiss %xmm2,%xmm1
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   13173:	49 8b 16             	mov    (%r14),%rdx
      else if (__comp(__b, __c))
   13176:	76 18                	jbe    13190 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0xf0>
      __a = _GLIBCXX_MOVE(__b);
   13178:	4d 89 06             	mov    %r8,(%r14)
      __b = _GLIBCXX_MOVE(__tmp);
   1317b:	48 89 56 f8          	mov    %rdx,-0x8(%rsi)
   1317f:	eb 16                	jmp    13197 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0xf7>
   13181:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   13188:	0f 1f 84 00 00 00 00 
   1318f:	00 
      __a = _GLIBCXX_MOVE(__b);
   13190:	49 89 3e             	mov    %rdi,(%r14)
      __b = _GLIBCXX_MOVE(__tmp);
   13193:	49 89 14 c6          	mov    %rdx,(%r14,%rax,8)
   13197:	49 ff cf             	dec    %r15
   1319a:	48 89 f0             	mov    %rsi,%rax
   1319d:	48 8b 5c 24 10       	mov    0x10(%rsp),%rbx
   131a2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   131a9:	1f 84 00 00 00 00 00 
   131b0:	49 8b 16             	mov    (%r14),%rdx
   131b3:	f3 0f 10 04 91       	movss  (%rcx,%rdx,4),%xmm0
	  while (__comp(__first, __pivot))
   131b8:	4c 8d 2c 2b          	lea    (%rbx,%rbp,1),%r13
   131bc:	0f 1f 40 00          	nopl   0x0(%rax)
   131c0:	48 8b 13             	mov    (%rbx),%rdx
	++_M_current;
   131c3:	48 83 c3 08          	add    $0x8,%rbx
   131c7:	49 83 c5 08          	add    $0x8,%r13
   131cb:	0f 2e 04 91          	ucomiss (%rcx,%rdx,4),%xmm0
   131cf:	77 ef                	ja     131c0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x120>
	  while (__comp(__pivot, __last))
   131d1:	4c 8d 63 f8          	lea    -0x8(%rbx),%r12
   131d5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
   131dc:	00 00 00 00 
   131e0:	48 8b 78 f8          	mov    -0x8(%rax),%rdi
	--_M_current;
   131e4:	48 83 c0 f8          	add    $0xfffffffffffffff8,%rax
   131e8:	f3 0f 10 0c b9       	movss  (%rcx,%rdi,4),%xmm1
   131ed:	0f 2e c8             	ucomiss %xmm0,%xmm1
   131f0:	77 ee                	ja     131e0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x140>
    { return __lhs.base() < __rhs.base(); }
   131f2:	49 39 c4             	cmp    %rax,%r12
	  if (!(__first < __last))
   131f5:	73 09                	jae    13200 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x160>
      __a = _GLIBCXX_MOVE(__b);
   131f7:	49 89 3c 24          	mov    %rdi,(%r12)
      __b = _GLIBCXX_MOVE(__tmp);
   131fb:	48 89 10             	mov    %rdx,(%rax)
   131fe:	eb b0                	jmp    131b0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x110>
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   13200:	4c 89 e7             	mov    %r12,%rdi
   13203:	4c 89 fa             	mov    %r15,%rdx
   13206:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
   1320b:	e8 90 fe ff ff       	callq  130a0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_>
    { return __lhs.base() - __rhs.base(); }
   13210:	4c 89 e8             	mov    %r13,%rax
   13213:	48 c1 f8 03          	sar    $0x3,%rax
      while (__last - __first > int(_S_threshold))
   13217:	48 83 f8 10          	cmp    $0x10,%rax
   1321b:	0f 8e 06 01 00 00    	jle    13327 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x287>
   13221:	4c 89 e6             	mov    %r12,%rsi
	  if (__depth_limit == 0)
   13224:	4d 85 ff             	test   %r15,%r15
   13227:	0f 85 c3 fe ff ff    	jne    130f0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x50>

      if (__last - __first < 2)
	return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
   1322d:	48 83 c3 f8          	add    $0xfffffffffffffff8,%rbx
   13231:	48 89 de             	mov    %rbx,%rsi
   13234:	48 8d 48 fe          	lea    -0x2(%rax),%rcx
   13238:	48 d1 e9             	shr    %rcx
   1323b:	48 ff c8             	dec    %rax
   1323e:	48 89 c2             	mov    %rax,%rdx
   13241:	48 d1 ea             	shr    %rdx
   13244:	48 89 cf             	mov    %rcx,%rdi
   13247:	eb 18                	jmp    13261 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x1c1>
   13249:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   13250:	4d 89 cb             	mov    %r9,%r11
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
   13253:	4f 89 04 de          	mov    %r8,(%r14,%r11,8)
      while (true)
	{
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
			     __comp);
	  if (__parent == 0)
   13257:	48 83 ef 01          	sub    $0x1,%rdi
   1325b:	0f 82 c0 00 00 00    	jb     13321 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x281>
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
   13261:	4d 8b 04 fe          	mov    (%r14,%rdi,8),%r8
   13265:	49 89 f9             	mov    %rdi,%r9
      while (__secondChild < (__len - 1) / 2)
   13268:	48 39 fa             	cmp    %rdi,%rdx
   1326b:	7e 53                	jle    132c0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x220>
   1326d:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
   13272:	4d 8b 11             	mov    (%r9),%r10
   13275:	49 89 fb             	mov    %rdi,%r11
   13278:	eb 1e                	jmp    13298 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x1f8>
   1327a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   13280:	4e 8d 0c 5d 02 00 00 	lea    0x2(,%r11,2),%r9
   13287:	00 
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
   13288:	4b 8b 1c ce          	mov    (%r14,%r9,8),%rbx
   1328c:	4b 89 1c de          	mov    %rbx,(%r14,%r11,8)
   13290:	4d 89 cb             	mov    %r9,%r11
      while (__secondChild < (__len - 1) / 2)
   13293:	49 39 d1             	cmp    %rdx,%r9
   13296:	7d 28                	jge    132c0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x220>
	  __secondChild = 2 * (__secondChild + 1);
   13298:	4f 8d 0c 1b          	lea    (%r11,%r11,1),%r9
   1329c:	4b 8b 5c ce 08       	mov    0x8(%r14,%r9,8),%rbx
   132a1:	4f 8b 4c ce 10       	mov    0x10(%r14,%r9,8),%r9
   132a6:	f3 41 0f 10 04 9a    	movss  (%r10,%rbx,4),%xmm0
   132ac:	43 0f 2e 04 8a       	ucomiss (%r10,%r9,4),%xmm0
	  if (__comp(__first + __secondChild,
   132b1:	76 cd                	jbe    13280 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x1e0>
   132b3:	4e 8d 0c 5d 01 00 00 	lea    0x1(,%r11,2),%r9
   132ba:	00 
   132bb:	eb cb                	jmp    13288 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x1e8>
   132bd:	0f 1f 00             	nopl   (%rax)
   132c0:	41 f6 c5 08          	test   $0x8,%r13b
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
   132c4:	75 10                	jne    132d6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x236>
   132c6:	49 39 c9             	cmp    %rcx,%r9
   132c9:	75 0b                	jne    132d6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x236>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
   132cb:	4d 8b 0c c6          	mov    (%r14,%rax,8),%r9
   132cf:	4d 89 0c ce          	mov    %r9,(%r14,%rcx,8)
   132d3:	49 89 c1             	mov    %rax,%r9
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
   132d6:	49 39 f9             	cmp    %rdi,%r9
   132d9:	0f 8e 71 ff ff ff    	jle    13250 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x1b0>
   132df:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
   132e4:	4d 8b 12             	mov    (%r10),%r10
   132e7:	f3 43 0f 10 04 82    	movss  (%r10,%r8,4),%xmm0
   132ed:	0f 1f 00             	nopl   (%rax)
   132f0:	4d 8d 59 ff          	lea    -0x1(%r9),%r11
   132f4:	49 c1 eb 3f          	shr    $0x3f,%r11
   132f8:	4d 01 cb             	add    %r9,%r11
   132fb:	49 ff cb             	dec    %r11
   132fe:	49 d1 fb             	sar    %r11

      template<typename _Iterator, typename _Value>
	_GLIBCXX20_CONSTEXPR
	bool
	operator()(_Iterator __it, _Value& __val)
	{ return bool(_M_comp(*__it, __val)); }
   13301:	4b 8b 1c de          	mov    (%r14,%r11,8),%rbx
   13305:	41 0f 2e 04 9a       	ucomiss (%r10,%rbx,4),%xmm0
   1330a:	0f 86 40 ff ff ff    	jbe    13250 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x1b0>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
   13310:	4b 89 1c ce          	mov    %rbx,(%r14,%r9,8)
   13314:	4d 89 d9             	mov    %r11,%r9
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
   13317:	49 39 fb             	cmp    %rdi,%r11
   1331a:	7f d4                	jg     132f0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x250>
   1331c:	e9 32 ff ff ff       	jmpq   13253 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x1b3>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
		_Compare& __comp)
    {
      while (__last - __first > 1)
   13321:	49 83 fd 09          	cmp    $0x9,%r13
   13325:	7d 25                	jge    1334c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x2ac>
    }
   13327:	48 83 c4 18          	add    $0x18,%rsp
   1332b:	5b                   	pop    %rbx
   1332c:	41 5c                	pop    %r12
   1332e:	41 5d                	pop    %r13
   13330:	41 5e                	pop    %r14
   13332:	41 5f                	pop    %r15
   13334:	5d                   	pop    %rbp
   13335:	c3                   	retq   
   13336:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1333d:	00 00 00 
   13340:	31 d2                	xor    %edx,%edx
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
   13342:	49 89 04 d6          	mov    %rax,(%r14,%rdx,8)
      while (__last - __first > 1)
   13346:	48 83 f9 08          	cmp    $0x8,%rcx
   1334a:	7e db                	jle    13327 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x287>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
   1334c:	48 8b 46 f8          	mov    -0x8(%rsi),%rax
      *__result = _GLIBCXX_MOVE(*__first);
   13350:	49 8b 0e             	mov    (%r14),%rcx
   13353:	48 89 4e f8          	mov    %rcx,-0x8(%rsi)
	--_M_current;
   13357:	48 83 c6 f8          	add    $0xfffffffffffffff8,%rsi
    { return __lhs.base() - __rhs.base(); }
   1335b:	48 89 f1             	mov    %rsi,%rcx
   1335e:	4c 29 f1             	sub    %r14,%rcx
   13361:	48 89 cf             	mov    %rcx,%rdi
   13364:	48 c1 ff 03          	sar    $0x3,%rdi
      while (__secondChild < (__len - 1) / 2)
   13368:	48 83 ff 03          	cmp    $0x3,%rdi
   1336c:	7c 62                	jl     133d0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x330>
   1336e:	48 8d 57 ff          	lea    -0x1(%rdi),%rdx
   13372:	48 c1 ea 3f          	shr    $0x3f,%rdx
   13376:	4c 8d 04 17          	lea    (%rdi,%rdx,1),%r8
   1337a:	49 ff c8             	dec    %r8
   1337d:	49 d1 f8             	sar    %r8
   13380:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
   13385:	4c 8b 0a             	mov    (%rdx),%r9
   13388:	45 31 d2             	xor    %r10d,%r10d
   1338b:	eb 1b                	jmp    133a8 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x308>
   1338d:	0f 1f 00             	nopl   (%rax)
   13390:	4a 8d 14 55 02 00 00 	lea    0x2(,%r10,2),%rdx
   13397:	00 
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
   13398:	4d 8b 1c d6          	mov    (%r14,%rdx,8),%r11
   1339c:	4f 89 1c d6          	mov    %r11,(%r14,%r10,8)
   133a0:	49 89 d2             	mov    %rdx,%r10
      while (__secondChild < (__len - 1) / 2)
   133a3:	4c 39 c2             	cmp    %r8,%rdx
   133a6:	7d 2a                	jge    133d2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x332>
	  __secondChild = 2 * (__secondChild + 1);
   133a8:	4b 8d 14 12          	lea    (%r10,%r10,1),%rdx
        { return bool(_M_comp(*__it1, *__it2)); }
   133ac:	4d 8b 5c d6 08       	mov    0x8(%r14,%rdx,8),%r11
   133b1:	49 8b 54 d6 10       	mov    0x10(%r14,%rdx,8),%rdx
   133b6:	f3 43 0f 10 04 99    	movss  (%r9,%r11,4),%xmm0
   133bc:	41 0f 2e 04 91       	ucomiss (%r9,%rdx,4),%xmm0
	  if (__comp(__first + __secondChild,
   133c1:	76 cd                	jbe    13390 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x2f0>
   133c3:	4a 8d 14 55 01 00 00 	lea    0x1(,%r10,2),%rdx
   133ca:	00 
   133cb:	eb cb                	jmp    13398 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x2f8>
   133cd:	0f 1f 00             	nopl   (%rax)
   133d0:	31 d2                	xor    %edx,%edx
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
   133d2:	f6 c1 08             	test   $0x8,%cl
   133d5:	75 21                	jne    133f8 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x358>
   133d7:	48 83 c7 fe          	add    $0xfffffffffffffffe,%rdi
   133db:	48 d1 ff             	sar    %rdi
   133de:	48 39 fa             	cmp    %rdi,%rdx
   133e1:	75 15                	jne    133f8 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x358>
	  __secondChild = 2 * (__secondChild + 1);
   133e3:	48 8d 3c 12          	lea    (%rdx,%rdx,1),%rdi
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
   133e7:	49 8b 7c fe 08       	mov    0x8(%r14,%rdi,8),%rdi
   133ec:	49 89 3c d6          	mov    %rdi,(%r14,%rdx,8)
   133f0:	48 8d 14 55 01 00 00 	lea    0x1(,%rdx,2),%rdx
   133f7:	00 
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
   133f8:	48 85 d2             	test   %rdx,%rdx
   133fb:	0f 8e 41 ff ff ff    	jle    13342 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x2a2>
   13401:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
   13406:	48 8b 3f             	mov    (%rdi),%rdi
   13409:	f3 0f 10 04 87       	movss  (%rdi,%rax,4),%xmm0
   1340e:	66 90                	xchg   %ax,%ax
   13410:	4c 8d 42 ff          	lea    -0x1(%rdx),%r8
   13414:	4d 89 c1             	mov    %r8,%r9
   13417:	49 d1 e9             	shr    %r9
	{ return bool(_M_comp(*__it, __val)); }
   1341a:	4f 8b 14 ce          	mov    (%r14,%r9,8),%r10
   1341e:	42 0f 2e 04 97       	ucomiss (%rdi,%r10,4),%xmm0
   13423:	0f 86 19 ff ff ff    	jbe    13342 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x2a2>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
   13429:	4d 89 14 d6          	mov    %r10,(%r14,%rdx,8)
   1342d:	4c 89 ca             	mov    %r9,%rdx
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
   13430:	49 83 f8 01          	cmp    $0x1,%r8
   13434:	77 da                	ja     13410 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x370>
   13436:	e9 05 ff ff ff       	jmpq   13340 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_T1_+0x2a0>
   1343b:	cc                   	int3   
   1343c:	cc                   	int3   
   1343d:	cc                   	int3   
   1343e:	cc                   	int3   
   1343f:	cc                   	int3   

0000000000013440 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_>:
    {
   13440:	55                   	push   %rbp
   13441:	41 57                	push   %r15
   13443:	41 56                	push   %r14
   13445:	41 55                	push   %r13
   13447:	41 54                	push   %r12
   13449:	53                   	push   %rbx
   1344a:	48 83 ec 18          	sub    $0x18,%rsp
   1344e:	49 89 d7             	mov    %rdx,%r15
   13451:	49 89 f5             	mov    %rsi,%r13
   13454:	49 89 fe             	mov    %rdi,%r14
   13457:	48 89 f0             	mov    %rsi,%rax
   1345a:	48 29 f8             	sub    %rdi,%rax
      if (__last - __first > int(_S_threshold))
   1345d:	48 3d 81 00 00 00    	cmp    $0x81,%rax
   13463:	0f 8c 9e 00 00 00    	jl     13507 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_+0xc7>
   13469:	4c 89 6c 24 08       	mov    %r13,0x8(%rsp)
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   1346e:	49 8d 6e 08          	lea    0x8(%r14),%rbp
   13472:	41 bd 08 00 00 00    	mov    $0x8,%r13d
   13478:	48 89 6c 24 10       	mov    %rbp,0x10(%rsp)
   1347d:	4c 89 f3             	mov    %r14,%rbx
   13480:	eb 39                	jmp    134bb <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_+0x7b>
   13482:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   13489:	1f 84 00 00 00 00 00 
   13490:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   13495:	4c 89 f6             	mov    %r14,%rsi
   13498:	4c 89 ea             	mov    %r13,%rdx
   1349b:	e8 c0 44 00 00       	callq  17960 <memmove@plt>
   134a0:	4c 89 f1             	mov    %r14,%rcx
   134a3:	4c 89 21             	mov    %r12,(%rcx)
   134a6:	49 83 c5 08          	add    $0x8,%r13
   134aa:	48 83 c5 08          	add    $0x8,%rbp
    { return __lhs.base() != __rhs.base(); }
   134ae:	49 81 fd 80 00 00 00 	cmp    $0x80,%r13
   134b5:	0f 84 ec 00 00 00    	je     135a7 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_+0x167>
   134bb:	48 89 d9             	mov    %rbx,%rcx
        { return bool(_M_comp(*__it1, *__it2)); }
   134be:	4b 8d 1c 2e          	lea    (%r14,%r13,1),%rbx
   134c2:	4f 8b 24 2e          	mov    (%r14,%r13,1),%r12
   134c6:	49 8b 16             	mov    (%r14),%rdx
   134c9:	49 8b 07             	mov    (%r15),%rax
   134cc:	f3 42 0f 10 04 a0    	movss  (%rax,%r12,4),%xmm0
   134d2:	f3 0f 10 0c 90       	movss  (%rax,%rdx,4),%xmm1
   134d7:	0f 2e c8             	ucomiss %xmm0,%xmm1
	  if (__comp(__i, __first))
   134da:	77 b4                	ja     13490 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_+0x50>

      template<typename _Value, typename _Iterator>
	_GLIBCXX20_CONSTEXPR
	bool
	operator()(_Value& __val, _Iterator __it)
	{ return bool(_M_comp(__val, *__it)); }
   134dc:	48 8b 11             	mov    (%rcx),%rdx
   134df:	f3 0f 10 0c 90       	movss  (%rax,%rdx,4),%xmm1
   134e4:	0f 2e c8             	ucomiss %xmm0,%xmm1
   134e7:	48 89 d9             	mov    %rbx,%rcx
      while (__comp(__val, __next))
   134ea:	76 b7                	jbe    134a3 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_+0x63>
   134ec:	48 89 e9             	mov    %rbp,%rcx
   134ef:	90                   	nop
	  *__last = _GLIBCXX_MOVE(*__next);
   134f0:	48 89 11             	mov    %rdx,(%rcx)
   134f3:	48 8b 51 f0          	mov    -0x10(%rcx),%rdx
   134f7:	f3 0f 10 0c 90       	movss  (%rax,%rdx,4),%xmm1
      while (__comp(__val, __next))
   134fc:	48 83 c1 f8          	add    $0xfffffffffffffff8,%rcx
   13500:	0f 2e c8             	ucomiss %xmm0,%xmm1
   13503:	77 eb                	ja     134f0 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_+0xb0>
   13505:	eb 9c                	jmp    134a3 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_+0x63>
    { return __lhs.base() == __rhs.base(); }
   13507:	4d 39 ee             	cmp    %r13,%r14
      if (__first == __last) return;
   1350a:	0f 84 f7 00 00 00    	je     13607 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_+0x1c7>
   13510:	49 8d 46 08          	lea    0x8(%r14),%rax
   13514:	4c 39 e8             	cmp    %r13,%rax
   13517:	0f 84 ea 00 00 00    	je     13607 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_+0x1c7>
   1351d:	4d 89 f4             	mov    %r14,%r12
   13520:	eb 37                	jmp    13559 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_+0x119>
   13522:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   13529:	1f 84 00 00 00 00 00 
	  const ptrdiff_t _Num = __last - __first;
   13530:	4c 89 e2             	mov    %r12,%rdx
   13533:	4c 29 f2             	sub    %r14,%rdx
      { return __normal_iterator(_M_current + __n); }
   13536:	48 29 d7             	sub    %rdx,%rdi
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   13539:	48 83 c7 10          	add    $0x10,%rdi
   1353d:	4c 89 f6             	mov    %r14,%rsi
   13540:	e8 1b 44 00 00       	callq  17960 <memmove@plt>
   13545:	4c 89 f1             	mov    %r14,%rcx
   13548:	48 89 19             	mov    %rbx,(%rcx)
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   1354b:	49 8d 44 24 08       	lea    0x8(%r12),%rax
    { return __lhs.base() != __rhs.base(); }
   13550:	4c 39 e8             	cmp    %r13,%rax
   13553:	0f 84 ae 00 00 00    	je     13607 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_+0x1c7>
   13559:	4c 89 e7             	mov    %r12,%rdi
   1355c:	49 89 c4             	mov    %rax,%r12
        { return bool(_M_comp(*__it1, *__it2)); }
   1355f:	48 8b 5f 08          	mov    0x8(%rdi),%rbx
   13563:	49 8b 0e             	mov    (%r14),%rcx
   13566:	49 8b 07             	mov    (%r15),%rax
   13569:	f3 0f 10 04 98       	movss  (%rax,%rbx,4),%xmm0
   1356e:	f3 0f 10 0c 88       	movss  (%rax,%rcx,4),%xmm1
   13573:	0f 2e c8             	ucomiss %xmm0,%xmm1
	  if (__comp(__i, __first))
   13576:	77 b8                	ja     13530 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_+0xf0>
	{ return bool(_M_comp(__val, *__it)); }
   13578:	48 8b 17             	mov    (%rdi),%rdx
   1357b:	f3 0f 10 0c 90       	movss  (%rax,%rdx,4),%xmm1
   13580:	0f 2e c8             	ucomiss %xmm0,%xmm1
   13583:	4c 89 e1             	mov    %r12,%rcx
      while (__comp(__val, __next))
   13586:	76 c0                	jbe    13548 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_+0x108>
   13588:	4c 89 e1             	mov    %r12,%rcx
   1358b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	  *__last = _GLIBCXX_MOVE(*__next);
   13590:	48 89 11             	mov    %rdx,(%rcx)
   13593:	48 8b 51 f0          	mov    -0x10(%rcx),%rdx
   13597:	f3 0f 10 0c 90       	movss  (%rax,%rdx,4),%xmm1
      while (__comp(__val, __next))
   1359c:	48 83 c1 f8          	add    $0xfffffffffffffff8,%rcx
   135a0:	0f 2e c8             	ucomiss %xmm0,%xmm1
   135a3:	77 eb                	ja     13590 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_+0x150>
   135a5:	eb a1                	jmp    13548 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_+0x108>
      { return __normal_iterator(_M_current + __n); }
   135a7:	49 83 ee 80          	sub    $0xffffffffffffff80,%r14
   135ab:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    { return __lhs.base() != __rhs.base(); }
   135b0:	49 39 fe             	cmp    %rdi,%r14
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
   135b3:	74 52                	je     13607 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_+0x1c7>
   135b5:	49 8b 07             	mov    (%r15),%rax
   135b8:	eb 12                	jmp    135cc <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_+0x18c>
   135ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      *__last = _GLIBCXX_MOVE(__val);
   135c0:	48 89 0e             	mov    %rcx,(%rsi)
	++_M_current;
   135c3:	49 83 c6 08          	add    $0x8,%r14
    { return __lhs.base() != __rhs.base(); }
   135c7:	49 39 fe             	cmp    %rdi,%r14
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
   135ca:	74 3b                	je     13607 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_+0x1c7>
   135cc:	49 8b 56 f8          	mov    -0x8(%r14),%rdx
	__val = _GLIBCXX_MOVE(*__last);
   135d0:	49 8b 0e             	mov    (%r14),%rcx
   135d3:	f3 0f 10 04 88       	movss  (%rax,%rcx,4),%xmm0
   135d8:	f3 0f 10 0c 90       	movss  (%rax,%rdx,4),%xmm1
   135dd:	0f 2e c8             	ucomiss %xmm0,%xmm1
   135e0:	4c 89 f6             	mov    %r14,%rsi
      while (__comp(__val, __next))
   135e3:	76 db                	jbe    135c0 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_+0x180>
   135e5:	4c 89 f6             	mov    %r14,%rsi
   135e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   135ef:	00 
	  *__last = _GLIBCXX_MOVE(*__next);
   135f0:	48 89 16             	mov    %rdx,(%rsi)
   135f3:	48 8b 56 f0          	mov    -0x10(%rsi),%rdx
   135f7:	f3 0f 10 0c 90       	movss  (%rax,%rdx,4),%xmm1
      while (__comp(__val, __next))
   135fc:	48 83 c6 f8          	add    $0xfffffffffffffff8,%rsi
   13600:	0f 2e c8             	ucomiss %xmm0,%xmm1
   13603:	77 eb                	ja     135f0 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_+0x1b0>
   13605:	eb b9                	jmp    135c0 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE_EEEvSB_SB_T0_+0x180>
    }
   13607:	48 83 c4 18          	add    $0x18,%rsp
   1360b:	5b                   	pop    %rbx
   1360c:	41 5c                	pop    %r12
   1360e:	41 5d                	pop    %r13
   13610:	41 5e                	pop    %r14
   13612:	41 5f                	pop    %r15
   13614:	5d                   	pop    %rbp
   13615:	c3                   	retq   
   13616:	cc                   	int3   
   13617:	cc                   	int3   
   13618:	cc                   	int3   
   13619:	cc                   	int3   
   1361a:	cc                   	int3   
   1361b:	cc                   	int3   
   1361c:	cc                   	int3   
   1361d:	cc                   	int3   
   1361e:	cc                   	int3   
   1361f:	cc                   	int3   

0000000000013620 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_>:
    {
   13620:	55                   	push   %rbp
   13621:	41 57                	push   %r15
   13623:	41 56                	push   %r14
   13625:	41 55                	push   %r13
   13627:	41 54                	push   %r12
   13629:	53                   	push   %rbx
   1362a:	48 83 ec 48          	sub    $0x48,%rsp
    { return __lhs.base() - __rhs.base(); }
   1362e:	49 89 f4             	mov    %rsi,%r12
   13631:	49 29 fc             	sub    %rdi,%r12
   13634:	4c 89 e0             	mov    %r12,%rax
   13637:	48 c1 f8 03          	sar    $0x3,%rax
      while (__last - __first > int(_S_threshold))
   1363b:	48 83 f8 11          	cmp    $0x11,%rax
   1363f:	0f 8c a9 02 00 00    	jl     138ee <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0x2ce>
   13645:	48 89 fb             	mov    %rdi,%rbx
   13648:	4c 8d 8c 24 80 00 00 	lea    0x80(%rsp),%r9
   1364f:	00 
	  if (__depth_limit == 0)
   13650:	48 85 d2             	test   %rdx,%rdx
   13653:	0f 84 74 01 00 00    	je     137cd <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0x1ad>
   13659:	48 8d 4b 08          	lea    0x8(%rbx),%rcx
   1365d:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
   13662:	48 c7 c5 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rbp
	  while (__comp(__first, __pivot))
   13669:	48 29 dd             	sub    %rbx,%rbp
   1366c:	0f 1f 40 00          	nopl   0x0(%rax)
	    std::__unguarded_partition_pivot(__first, __last, __comp);
   13670:	4d 8b 01             	mov    (%r9),%r8
   13673:	49 8b 49 10          	mov    0x10(%r9),%rcx
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
   13677:	48 d1 e8             	shr    %rax
        { return bool(_M_comp(*__it1, *__it2)); }
   1367a:	4c 8b 53 08          	mov    0x8(%rbx),%r10
   1367e:	48 8b 3c c3          	mov    (%rbx,%rax,8),%rdi
                          return Ypredcopy[pid * n_samples + i1] < Ypredcopy[pid * n_samples + i2];
   13682:	49 0f af 49 08       	imul   0x8(%r9),%rcx
   13687:	48 c1 e1 02          	shl    $0x2,%rcx
   1368b:	49 03 08             	add    (%r8),%rcx
   1368e:	f3 42 0f 10 04 91    	movss  (%rcx,%r10,4),%xmm0
   13694:	f3 0f 10 14 b9       	movss  (%rcx,%rdi,4),%xmm2
   13699:	0f 2e d0             	ucomiss %xmm0,%xmm2
   1369c:	4c 8b 46 f8          	mov    -0x8(%rsi),%r8
   136a0:	f3 42 0f 10 0c 81    	movss  (%rcx,%r8,4),%xmm1
      if (__comp(__a, __b))
   136a6:	76 18                	jbe    136c0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0xa0>
   136a8:	0f 2e ca             	ucomiss %xmm2,%xmm1
	  if (__comp(__b, __c))
   136ab:	76 23                	jbe    136d0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0xb0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   136ad:	4c 8b 03             	mov    (%rbx),%r8
      __a = _GLIBCXX_MOVE(__b);
   136b0:	48 89 3b             	mov    %rdi,(%rbx)
      __b = _GLIBCXX_MOVE(__tmp);
   136b3:	4c 89 04 c3          	mov    %r8,(%rbx,%rax,8)
   136b7:	eb 67                	jmp    13720 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0x100>
   136b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   136c0:	0f 2e c8             	ucomiss %xmm0,%xmm1
      else if (__comp(__a, __c))
   136c3:	76 3b                	jbe    13700 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   136c5:	48 8b 03             	mov    (%rbx),%rax
   136c8:	eb 26                	jmp    136f0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0xd0>
   136ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   136d0:	0f 2e c8             	ucomiss %xmm0,%xmm1
   136d3:	48 8b 03             	mov    (%rbx),%rax
	  else if (__comp(__a, __c))
   136d6:	76 18                	jbe    136f0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0xd0>
      __a = _GLIBCXX_MOVE(__b);
   136d8:	4c 89 03             	mov    %r8,(%rbx)
      __b = _GLIBCXX_MOVE(__tmp);
   136db:	48 89 46 f8          	mov    %rax,-0x8(%rsi)
   136df:	eb 3f                	jmp    13720 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0x100>
   136e1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   136e8:	0f 1f 84 00 00 00 00 
   136ef:	00 
      __a = _GLIBCXX_MOVE(__b);
   136f0:	4c 89 13             	mov    %r10,(%rbx)
      __b = _GLIBCXX_MOVE(__tmp);
   136f3:	48 89 43 08          	mov    %rax,0x8(%rbx)
   136f7:	eb 27                	jmp    13720 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0x100>
   136f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   13700:	0f 2e ca             	ucomiss %xmm2,%xmm1
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   13703:	4c 8b 13             	mov    (%rbx),%r10
      else if (__comp(__b, __c))
   13706:	76 09                	jbe    13711 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0xf1>
      __a = _GLIBCXX_MOVE(__b);
   13708:	4c 89 03             	mov    %r8,(%rbx)
      __b = _GLIBCXX_MOVE(__tmp);
   1370b:	4c 89 56 f8          	mov    %r10,-0x8(%rsi)
   1370f:	eb 0f                	jmp    13720 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0x100>
      __a = _GLIBCXX_MOVE(__b);
   13711:	48 89 3b             	mov    %rdi,(%rbx)
      __b = _GLIBCXX_MOVE(__tmp);
   13714:	4c 89 14 c3          	mov    %r10,(%rbx,%rax,8)
   13718:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1371f:	00 
   13720:	48 ff ca             	dec    %rdx
   13723:	4c 8b 6c 24 20       	mov    0x20(%rsp),%r13
   13728:	48 89 f0             	mov    %rsi,%rax
   1372b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   13730:	48 8b 3b             	mov    (%rbx),%rdi
   13733:	f3 0f 10 04 b9       	movss  (%rcx,%rdi,4),%xmm0
	  while (__comp(__first, __pivot))
   13738:	49 89 ec             	mov    %rbp,%r12
   1373b:	4d 01 ec             	add    %r13,%r12
   1373e:	66 90                	xchg   %ax,%ax
   13740:	4d 8b 45 00          	mov    0x0(%r13),%r8
	++_M_current;
   13744:	49 83 c5 08          	add    $0x8,%r13
   13748:	49 83 c4 08          	add    $0x8,%r12
   1374c:	42 0f 2e 04 81       	ucomiss (%rcx,%r8,4),%xmm0
   13751:	77 ed                	ja     13740 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0x120>
	  while (__comp(__pivot, __last))
   13753:	4d 8d 7d f8          	lea    -0x8(%r13),%r15
   13757:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1375e:	00 00 
   13760:	48 8b 78 f8          	mov    -0x8(%rax),%rdi
	--_M_current;
   13764:	48 83 c0 f8          	add    $0xfffffffffffffff8,%rax
   13768:	f3 0f 10 0c b9       	movss  (%rcx,%rdi,4),%xmm1
   1376d:	0f 2e c8             	ucomiss %xmm0,%xmm1
   13770:	77 ee                	ja     13760 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0x140>
    { return __lhs.base() < __rhs.base(); }
   13772:	49 39 c7             	cmp    %rax,%r15
	  if (!(__first < __last))
   13775:	73 09                	jae    13780 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0x160>
      __a = _GLIBCXX_MOVE(__b);
   13777:	49 89 3f             	mov    %rdi,(%r15)
      __b = _GLIBCXX_MOVE(__tmp);
   1377a:	4c 89 00             	mov    %r8,(%rax)
   1377d:	eb b1                	jmp    13730 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0x110>
   1377f:	90                   	nop
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   13780:	49 8b 41 10          	mov    0x10(%r9),%rax
   13784:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
   13789:	4d 89 ce             	mov    %r9,%r14
   1378c:	41 0f 10 01          	movups (%r9),%xmm0
   13790:	0f 11 04 24          	movups %xmm0,(%rsp)
   13794:	4c 89 ff             	mov    %r15,%rdi
   13797:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
   1379c:	e8 7f fe ff ff       	callq  13620 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_>
   137a1:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
    { return __lhs.base() - __rhs.base(); }
   137a6:	4c 89 e0             	mov    %r12,%rax
   137a9:	48 c1 f8 03          	sar    $0x3,%rax
      while (__last - __first > int(_S_threshold))
   137ad:	48 83 f8 10          	cmp    $0x10,%rax
   137b1:	0f 8e 37 01 00 00    	jle    138ee <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0x2ce>
   137b7:	4c 89 fe             	mov    %r15,%rsi
	  if (__depth_limit == 0)
   137ba:	48 85 d2             	test   %rdx,%rdx
   137bd:	4d 89 f1             	mov    %r14,%r9
   137c0:	0f 85 aa fe ff ff    	jne    13670 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0x50>
      std::__heap_select(__first, __middle, __last, __comp);
   137c6:	49 83 c5 f8          	add    $0xfffffffffffffff8,%r13
   137ca:	4c 89 ee             	mov    %r13,%rsi
	      std::__partial_sort(__first, __last, __last, __comp);
   137cd:	41 0f 10 01          	movups (%r9),%xmm0
   137d1:	0f 29 44 24 30       	movaps %xmm0,0x30(%rsp)
   137d6:	49 8b 49 10          	mov    0x10(%r9),%rcx
   137da:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
      std::__make_heap(__first, __middle, __comp);
   137df:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
      _DistanceType __parent = (__len - 2) / 2;
   137e4:	48 8d 78 fe          	lea    -0x2(%rax),%rdi
   137e8:	48 d1 ef             	shr    %rdi
   137eb:	48 ff c8             	dec    %rax
   137ee:	49 89 c0             	mov    %rax,%r8
   137f1:	49 d1 e8             	shr    %r8
   137f4:	48 0f af 4c 24 38    	imul   0x38(%rsp),%rcx
   137fa:	48 c1 e1 02          	shl    $0x2,%rcx
   137fe:	49 89 f9             	mov    %rdi,%r9
   13801:	eb 1e                	jmp    13821 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0x201>
   13803:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   1380a:	84 00 00 00 00 00 
   13810:	4d 89 df             	mov    %r11,%r15
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
   13813:	4e 89 14 fb          	mov    %r10,(%rbx,%r15,8)
	  if (__parent == 0)
   13817:	49 83 e9 01          	sub    $0x1,%r9
   1381b:	0f 82 c0 00 00 00    	jb     138e1 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0x2c1>
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
   13821:	4e 8b 14 cb          	mov    (%rbx,%r9,8),%r10
   13825:	4d 89 cb             	mov    %r9,%r11
      while (__secondChild < (__len - 1) / 2)
   13828:	4d 39 c8             	cmp    %r9,%r8
   1382b:	7e 53                	jle    13880 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0x260>
   1382d:	4c 8b 32             	mov    (%rdx),%r14
   13830:	49 01 ce             	add    %rcx,%r14
   13833:	4d 89 cf             	mov    %r9,%r15
   13836:	eb 20                	jmp    13858 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0x238>
   13838:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1383f:	00 
   13840:	4e 8d 1c 7d 02 00 00 	lea    0x2(,%r15,2),%r11
   13847:	00 
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
   13848:	4e 8b 2c db          	mov    (%rbx,%r11,8),%r13
   1384c:	4e 89 2c fb          	mov    %r13,(%rbx,%r15,8)
   13850:	4d 89 df             	mov    %r11,%r15
      while (__secondChild < (__len - 1) / 2)
   13853:	4d 39 c3             	cmp    %r8,%r11
   13856:	7d 28                	jge    13880 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0x260>
	  __secondChild = 2 * (__secondChild + 1);
   13858:	4f 8d 1c 3f          	lea    (%r15,%r15,1),%r11
   1385c:	4e 8b 6c db 08       	mov    0x8(%rbx,%r11,8),%r13
   13861:	4e 8b 5c db 10       	mov    0x10(%rbx,%r11,8),%r11
   13866:	f3 43 0f 10 04 ae    	movss  (%r14,%r13,4),%xmm0
   1386c:	43 0f 2e 04 9e       	ucomiss (%r14,%r11,4),%xmm0
	  if (__comp(__first + __secondChild,
   13871:	76 cd                	jbe    13840 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0x220>
   13873:	4e 8d 1c 7d 01 00 00 	lea    0x1(,%r15,2),%r11
   1387a:	00 
   1387b:	eb cb                	jmp    13848 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0x228>
   1387d:	0f 1f 00             	nopl   (%rax)
   13880:	41 f6 c4 08          	test   $0x8,%r12b
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
   13884:	75 10                	jne    13896 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0x276>
   13886:	49 39 fb             	cmp    %rdi,%r11
   13889:	75 0b                	jne    13896 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0x276>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
   1388b:	4c 8b 1c c3          	mov    (%rbx,%rax,8),%r11
   1388f:	4c 89 1c fb          	mov    %r11,(%rbx,%rdi,8)
   13893:	49 89 c3             	mov    %rax,%r11
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
   13896:	4d 39 cb             	cmp    %r9,%r11
   13899:	0f 8e 71 ff ff ff    	jle    13810 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0x1f0>
   1389f:	4c 8b 32             	mov    (%rdx),%r14
   138a2:	49 01 ce             	add    %rcx,%r14
   138a5:	f3 43 0f 10 04 96    	movss  (%r14,%r10,4),%xmm0
   138ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   138b0:	4d 8d 7b ff          	lea    -0x1(%r11),%r15
   138b4:	49 c1 ef 3f          	shr    $0x3f,%r15
   138b8:	4d 01 df             	add    %r11,%r15
   138bb:	49 ff cf             	dec    %r15
   138be:	49 d1 ff             	sar    %r15
	{ return bool(_M_comp(*__it, __val)); }
   138c1:	4e 8b 2c fb          	mov    (%rbx,%r15,8),%r13
   138c5:	43 0f 2e 04 ae       	ucomiss (%r14,%r13,4),%xmm0
   138ca:	0f 86 40 ff ff ff    	jbe    13810 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0x1f0>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
   138d0:	4e 89 2c db          	mov    %r13,(%rbx,%r11,8)
   138d4:	4d 89 fb             	mov    %r15,%r11
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
   138d7:	4d 39 cf             	cmp    %r9,%r15
   138da:	7f d4                	jg     138b0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0x290>
   138dc:	e9 32 ff ff ff       	jmpq   13813 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEElNS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_T1_+0x1f3>
   138e1:	48 8d 54 24 30       	lea    0x30(%rsp),%rdx
      std::__sort_heap(__first, __middle, __comp);
   138e6:	48 89 df             	mov    %rbx,%rdi
   138e9:	e8 32 02 00 00       	callq  13b20 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_RT0_>
    }
   138ee:	48 83 c4 48          	add    $0x48,%rsp
   138f2:	5b                   	pop    %rbx
   138f3:	41 5c                	pop    %r12
   138f5:	41 5d                	pop    %r13
   138f7:	41 5e                	pop    %r14
   138f9:	41 5f                	pop    %r15
   138fb:	5d                   	pop    %rbp
   138fc:	c3                   	retq   
   138fd:	cc                   	int3   
   138fe:	cc                   	int3   
   138ff:	cc                   	int3   

0000000000013900 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_>:
    {
   13900:	55                   	push   %rbp
   13901:	41 57                	push   %r15
   13903:	41 56                	push   %r14
   13905:	41 55                	push   %r13
   13907:	41 54                	push   %r12
   13909:	53                   	push   %rbx
   1390a:	48 83 ec 18          	sub    $0x18,%rsp
   1390e:	49 89 f5             	mov    %rsi,%r13
   13911:	49 89 fe             	mov    %rdi,%r14
   13914:	48 8d 4c 24 50       	lea    0x50(%rsp),%rcx
   13919:	48 89 f0             	mov    %rsi,%rax
   1391c:	48 29 f8             	sub    %rdi,%rax
   1391f:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
      if (__last - __first > int(_S_threshold))
   13924:	48 3d 81 00 00 00    	cmp    $0x81,%rax
   1392a:	48 89 34 24          	mov    %rsi,(%rsp)
   1392e:	0f 8c b3 00 00 00    	jl     139e7 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_+0xe7>
   13934:	4c 89 6c 24 08       	mov    %r13,0x8(%rsp)
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   13939:	48 8b 69 10          	mov    0x10(%rcx),%rbp
   1393d:	48 0f af 69 08       	imul   0x8(%rcx),%rbp
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   13942:	4d 8d 7e 08          	lea    0x8(%r14),%r15
   13946:	41 bc 08 00 00 00    	mov    $0x8,%r12d
   1394c:	48 c1 e5 02          	shl    $0x2,%rbp
   13950:	4c 89 7c 24 10       	mov    %r15,0x10(%rsp)
   13955:	4c 89 f3             	mov    %r14,%rbx
   13958:	eb 35                	jmp    1398f <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_+0x8f>
   1395a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   13960:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
   13965:	4c 89 f6             	mov    %r14,%rsi
   13968:	4c 89 e2             	mov    %r12,%rdx
   1396b:	e8 f0 3f 00 00       	callq  17960 <memmove@plt>
   13970:	48 8b 34 24          	mov    (%rsp),%rsi
   13974:	4c 89 f1             	mov    %r14,%rcx
   13977:	4c 89 29             	mov    %r13,(%rcx)
   1397a:	49 83 c4 08          	add    $0x8,%r12
   1397e:	49 83 c7 08          	add    $0x8,%r15
    { return __lhs.base() != __rhs.base(); }
   13982:	49 81 fc 80 00 00 00 	cmp    $0x80,%r12
   13989:	0f 84 08 01 00 00    	je     13a97 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_+0x197>
   1398f:	48 89 d9             	mov    %rbx,%rcx
        { return bool(_M_comp(*__it1, *__it2)); }
   13992:	4b 8d 1c 26          	lea    (%r14,%r12,1),%rbx
   13996:	4f 8b 2c 26          	mov    (%r14,%r12,1),%r13
   1399a:	49 8b 16             	mov    (%r14),%rdx
   1399d:	48 8b 06             	mov    (%rsi),%rax
   139a0:	48 01 e8             	add    %rbp,%rax
   139a3:	f3 42 0f 10 04 a8    	movss  (%rax,%r13,4),%xmm0
   139a9:	f3 0f 10 0c 90       	movss  (%rax,%rdx,4),%xmm1
   139ae:	0f 2e c8             	ucomiss %xmm0,%xmm1
	  if (__comp(__i, __first))
   139b1:	77 ad                	ja     13960 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_+0x60>
	{ return bool(_M_comp(__val, *__it)); }
   139b3:	48 8b 11             	mov    (%rcx),%rdx
   139b6:	f3 0f 10 0c 90       	movss  (%rax,%rdx,4),%xmm1
   139bb:	0f 2e c8             	ucomiss %xmm0,%xmm1
   139be:	48 89 d9             	mov    %rbx,%rcx
      while (__comp(__val, __next))
   139c1:	76 b4                	jbe    13977 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_+0x77>
   139c3:	4c 89 f9             	mov    %r15,%rcx
   139c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   139cd:	00 00 00 
	  *__last = _GLIBCXX_MOVE(*__next);
   139d0:	48 89 11             	mov    %rdx,(%rcx)
   139d3:	48 8b 51 f0          	mov    -0x10(%rcx),%rdx
   139d7:	f3 0f 10 0c 90       	movss  (%rax,%rdx,4),%xmm1
      while (__comp(__val, __next))
   139dc:	48 83 c1 f8          	add    $0xfffffffffffffff8,%rcx
   139e0:	0f 2e c8             	ucomiss %xmm0,%xmm1
   139e3:	77 eb                	ja     139d0 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_+0xd0>
   139e5:	eb 90                	jmp    13977 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_+0x77>
    { return __lhs.base() == __rhs.base(); }
   139e7:	4d 39 ee             	cmp    %r13,%r14
      if (__first == __last) return;
   139ea:	0f 84 17 01 00 00    	je     13b07 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_+0x207>
   139f0:	49 8d 46 08          	lea    0x8(%r14),%rax
   139f4:	4c 39 e8             	cmp    %r13,%rax
   139f7:	0f 84 0a 01 00 00    	je     13b07 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_+0x207>
	std::__insertion_sort(__first, __last, __comp);
   139fd:	4c 8b 79 10          	mov    0x10(%rcx),%r15
   13a01:	4c 0f af 79 08       	imul   0x8(%rcx),%r15
   13a06:	49 c1 e7 02          	shl    $0x2,%r15
   13a0a:	4c 89 f3             	mov    %r14,%rbx
   13a0d:	eb 2d                	jmp    13a3c <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_+0x13c>
   13a0f:	90                   	nop
	  const ptrdiff_t _Num = __last - __first;
   13a10:	48 89 da             	mov    %rbx,%rdx
   13a13:	4c 29 f2             	sub    %r14,%rdx
      { return __normal_iterator(_M_current + __n); }
   13a16:	48 29 d7             	sub    %rdx,%rdi
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   13a19:	48 83 c7 10          	add    $0x10,%rdi
   13a1d:	4c 89 f6             	mov    %r14,%rsi
   13a20:	e8 3b 3f 00 00       	callq  17960 <memmove@plt>
   13a25:	48 8b 34 24          	mov    (%rsp),%rsi
   13a29:	4c 89 f1             	mov    %r14,%rcx
   13a2c:	4c 89 21             	mov    %r12,(%rcx)
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   13a2f:	48 8d 43 08          	lea    0x8(%rbx),%rax
    { return __lhs.base() != __rhs.base(); }
   13a33:	4c 39 e8             	cmp    %r13,%rax
   13a36:	0f 84 cb 00 00 00    	je     13b07 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_+0x207>
   13a3c:	48 89 df             	mov    %rbx,%rdi
   13a3f:	48 89 c3             	mov    %rax,%rbx
        { return bool(_M_comp(*__it1, *__it2)); }
   13a42:	4c 8b 67 08          	mov    0x8(%rdi),%r12
   13a46:	49 8b 0e             	mov    (%r14),%rcx
   13a49:	48 8b 06             	mov    (%rsi),%rax
   13a4c:	4c 01 f8             	add    %r15,%rax
   13a4f:	f3 42 0f 10 04 a0    	movss  (%rax,%r12,4),%xmm0
   13a55:	f3 0f 10 0c 88       	movss  (%rax,%rcx,4),%xmm1
   13a5a:	0f 2e c8             	ucomiss %xmm0,%xmm1
	  if (__comp(__i, __first))
   13a5d:	77 b1                	ja     13a10 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_+0x110>
	{ return bool(_M_comp(__val, *__it)); }
   13a5f:	48 8b 17             	mov    (%rdi),%rdx
   13a62:	f3 0f 10 0c 90       	movss  (%rax,%rdx,4),%xmm1
   13a67:	0f 2e c8             	ucomiss %xmm0,%xmm1
   13a6a:	48 89 d9             	mov    %rbx,%rcx
      while (__comp(__val, __next))
   13a6d:	76 bd                	jbe    13a2c <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_+0x12c>
   13a6f:	48 89 d9             	mov    %rbx,%rcx
   13a72:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   13a79:	1f 84 00 00 00 00 00 
	  *__last = _GLIBCXX_MOVE(*__next);
   13a80:	48 89 11             	mov    %rdx,(%rcx)
   13a83:	48 8b 51 f0          	mov    -0x10(%rcx),%rdx
   13a87:	f3 0f 10 0c 90       	movss  (%rax,%rdx,4),%xmm1
      while (__comp(__val, __next))
   13a8c:	48 83 c1 f8          	add    $0xfffffffffffffff8,%rcx
   13a90:	0f 2e c8             	ucomiss %xmm0,%xmm1
   13a93:	77 eb                	ja     13a80 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_+0x180>
   13a95:	eb 95                	jmp    13a2c <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_+0x12c>
      { return __normal_iterator(_M_current + __n); }
   13a97:	49 83 ee 80          	sub    $0xffffffffffffff80,%r14
   13a9b:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    { return __lhs.base() != __rhs.base(); }
   13aa0:	49 39 fe             	cmp    %rdi,%r14
   13aa3:	48 8d 4c 24 50       	lea    0x50(%rsp),%rcx
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
   13aa8:	74 5d                	je     13b07 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_+0x207>
					  __comp);
   13aaa:	48 8b 41 10          	mov    0x10(%rcx),%rax
   13aae:	48 0f af 41 08       	imul   0x8(%rcx),%rax
   13ab3:	48 8b 09             	mov    (%rcx),%rcx
   13ab6:	48 c1 e0 02          	shl    $0x2,%rax
   13aba:	48 03 01             	add    (%rcx),%rax
   13abd:	eb 0d                	jmp    13acc <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_+0x1cc>
   13abf:	90                   	nop
      *__last = _GLIBCXX_MOVE(__val);
   13ac0:	48 89 0e             	mov    %rcx,(%rsi)
	++_M_current;
   13ac3:	49 83 c6 08          	add    $0x8,%r14
    { return __lhs.base() != __rhs.base(); }
   13ac7:	49 39 fe             	cmp    %rdi,%r14
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
   13aca:	74 3b                	je     13b07 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_+0x207>
   13acc:	49 8b 56 f8          	mov    -0x8(%r14),%rdx
	__val = _GLIBCXX_MOVE(*__last);
   13ad0:	49 8b 0e             	mov    (%r14),%rcx
   13ad3:	f3 0f 10 04 88       	movss  (%rax,%rcx,4),%xmm0
   13ad8:	f3 0f 10 0c 90       	movss  (%rax,%rdx,4),%xmm1
   13add:	0f 2e c8             	ucomiss %xmm0,%xmm1
   13ae0:	4c 89 f6             	mov    %r14,%rsi
      while (__comp(__val, __next))
   13ae3:	76 db                	jbe    13ac0 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_+0x1c0>
   13ae5:	4c 89 f6             	mov    %r14,%rsi
   13ae8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   13aef:	00 
	  *__last = _GLIBCXX_MOVE(*__next);
   13af0:	48 89 16             	mov    %rdx,(%rsi)
   13af3:	48 8b 56 f0          	mov    -0x10(%rsi),%rdx
   13af7:	f3 0f 10 0c 90       	movss  (%rax,%rdx,4),%xmm1
      while (__comp(__val, __next))
   13afc:	48 83 c6 f8          	add    $0xfffffffffffffff8,%rsi
   13b00:	0f 2e c8             	ucomiss %xmm0,%xmm1
   13b03:	77 eb                	ja     13af0 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_+0x1f0>
   13b05:	eb b9                	jmp    13ac0 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_T0_+0x1c0>
    }
   13b07:	48 83 c4 18          	add    $0x18,%rsp
   13b0b:	5b                   	pop    %rbx
   13b0c:	41 5c                	pop    %r12
   13b0e:	41 5d                	pop    %r13
   13b10:	41 5e                	pop    %r14
   13b12:	41 5f                	pop    %r15
   13b14:	5d                   	pop    %rbp
   13b15:	c3                   	retq   
   13b16:	cc                   	int3   
   13b17:	cc                   	int3   
   13b18:	cc                   	int3   
   13b19:	cc                   	int3   
   13b1a:	cc                   	int3   
   13b1b:	cc                   	int3   
   13b1c:	cc                   	int3   
   13b1d:	cc                   	int3   
   13b1e:	cc                   	int3   
   13b1f:	cc                   	int3   

0000000000013b20 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_RT0_>:
    { return __lhs.base() - __rhs.base(); }
   13b20:	48 89 f0             	mov    %rsi,%rax
   13b23:	48 29 f8             	sub    %rdi,%rax
      while (__last - __first > 1)
   13b26:	48 83 f8 09          	cmp    $0x9,%rax
   13b2a:	0f 8c 44 01 00 00    	jl     13c74 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_RT0_+0x154>
   13b30:	41 57                	push   %r15
   13b32:	41 56                	push   %r14
   13b34:	41 55                	push   %r13
   13b36:	41 54                	push   %r12
   13b38:	53                   	push   %rbx
   13b39:	eb 16                	jmp    13b51 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_RT0_+0x31>
   13b3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   13b40:	45 31 db             	xor    %r11d,%r11d
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
   13b43:	4a 89 04 df          	mov    %rax,(%rdi,%r11,8)
      while (__last - __first > 1)
   13b47:	48 83 f9 08          	cmp    $0x8,%rcx
   13b4b:	0f 8e 1a 01 00 00    	jle    13c6b <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_RT0_+0x14b>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
   13b51:	48 8b 46 f8          	mov    -0x8(%rsi),%rax
      *__result = _GLIBCXX_MOVE(*__first);
   13b55:	48 8b 0f             	mov    (%rdi),%rcx
   13b58:	48 89 4e f8          	mov    %rcx,-0x8(%rsi)
	--_M_current;
   13b5c:	48 83 c6 f8          	add    $0xfffffffffffffff8,%rsi
    { return __lhs.base() - __rhs.base(); }
   13b60:	48 89 f1             	mov    %rsi,%rcx
   13b63:	48 29 f9             	sub    %rdi,%rcx
   13b66:	48 89 cb             	mov    %rcx,%rbx
   13b69:	48 c1 fb 03          	sar    $0x3,%rbx
			 _GLIBCXX_MOVE(__value), __comp);
   13b6d:	4c 8b 0a             	mov    (%rdx),%r9
   13b70:	4c 8b 52 08          	mov    0x8(%rdx),%r10
   13b74:	4c 8b 42 10          	mov    0x10(%rdx),%r8
      while (__secondChild < (__len - 1) / 2)
   13b78:	48 83 fb 03          	cmp    $0x3,%rbx
   13b7c:	7c 72                	jl     13bf0 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_RT0_+0xd0>
   13b7e:	4c 8d 5b ff          	lea    -0x1(%rbx),%r11
   13b82:	49 c1 eb 3f          	shr    $0x3f,%r11
   13b86:	4e 8d 34 1b          	lea    (%rbx,%r11,1),%r14
   13b8a:	49 ff ce             	dec    %r14
   13b8d:	49 d1 fe             	sar    %r14
   13b90:	4d 89 c7             	mov    %r8,%r15
   13b93:	4d 0f af fa          	imul   %r10,%r15
   13b97:	49 c1 e7 02          	shl    $0x2,%r15
   13b9b:	4d 03 39             	add    (%r9),%r15
   13b9e:	45 31 e4             	xor    %r12d,%r12d
   13ba1:	eb 25                	jmp    13bc8 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_RT0_+0xa8>
   13ba3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   13baa:	84 00 00 00 00 00 
   13bb0:	4e 8d 1c 65 02 00 00 	lea    0x2(,%r12,2),%r11
   13bb7:	00 
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
   13bb8:	4e 8b 2c df          	mov    (%rdi,%r11,8),%r13
   13bbc:	4e 89 2c e7          	mov    %r13,(%rdi,%r12,8)
   13bc0:	4d 89 dc             	mov    %r11,%r12
      while (__secondChild < (__len - 1) / 2)
   13bc3:	4d 39 f3             	cmp    %r14,%r11
   13bc6:	7d 2b                	jge    13bf3 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_RT0_+0xd3>
	  __secondChild = 2 * (__secondChild + 1);
   13bc8:	4f 8d 1c 24          	lea    (%r12,%r12,1),%r11
        { return bool(_M_comp(*__it1, *__it2)); }
   13bcc:	4e 8b 6c df 08       	mov    0x8(%rdi,%r11,8),%r13
   13bd1:	4e 8b 5c df 10       	mov    0x10(%rdi,%r11,8),%r11
   13bd6:	f3 43 0f 10 04 af    	movss  (%r15,%r13,4),%xmm0
   13bdc:	43 0f 2e 04 9f       	ucomiss (%r15,%r11,4),%xmm0
	  if (__comp(__first + __secondChild,
   13be1:	76 cd                	jbe    13bb0 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_RT0_+0x90>
   13be3:	4e 8d 1c 65 01 00 00 	lea    0x1(,%r12,2),%r11
   13bea:	00 
   13beb:	eb cb                	jmp    13bb8 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_RT0_+0x98>
   13bed:	0f 1f 00             	nopl   (%rax)
   13bf0:	45 31 db             	xor    %r11d,%r11d
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
   13bf3:	f6 c1 08             	test   $0x8,%cl
   13bf6:	75 21                	jne    13c19 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_RT0_+0xf9>
   13bf8:	48 83 c3 fe          	add    $0xfffffffffffffffe,%rbx
   13bfc:	48 d1 fb             	sar    %rbx
   13bff:	49 39 db             	cmp    %rbx,%r11
   13c02:	75 15                	jne    13c19 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_RT0_+0xf9>
	  __secondChild = 2 * (__secondChild + 1);
   13c04:	4b 8d 1c 1b          	lea    (%r11,%r11,1),%rbx
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
   13c08:	48 8b 5c df 08       	mov    0x8(%rdi,%rbx,8),%rbx
   13c0d:	4a 89 1c df          	mov    %rbx,(%rdi,%r11,8)
   13c11:	4e 8d 1c 5d 01 00 00 	lea    0x1(,%r11,2),%r11
   13c18:	00 
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
   13c19:	4d 85 db             	test   %r11,%r11
   13c1c:	0f 8e 21 ff ff ff    	jle    13b43 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_RT0_+0x23>
   13c22:	4d 0f af c2          	imul   %r10,%r8
   13c26:	49 c1 e0 02          	shl    $0x2,%r8
   13c2a:	4d 03 01             	add    (%r9),%r8
   13c2d:	f3 41 0f 10 04 80    	movss  (%r8,%rax,4),%xmm0
   13c33:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   13c3a:	84 00 00 00 00 00 
   13c40:	4d 8d 4b ff          	lea    -0x1(%r11),%r9
   13c44:	4d 89 ca             	mov    %r9,%r10
   13c47:	49 d1 ea             	shr    %r10
	{ return bool(_M_comp(*__it, __val)); }
   13c4a:	4a 8b 1c d7          	mov    (%rdi,%r10,8),%rbx
   13c4e:	41 0f 2e 04 98       	ucomiss (%r8,%rbx,4),%xmm0
   13c53:	0f 86 ea fe ff ff    	jbe    13b43 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_RT0_+0x23>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
   13c59:	4a 89 1c df          	mov    %rbx,(%rdi,%r11,8)
   13c5d:	4d 89 d3             	mov    %r10,%r11
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
   13c60:	49 83 f9 01          	cmp    $0x1,%r9
   13c64:	77 da                	ja     13c40 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_RT0_+0x120>
   13c66:	e9 d5 fe ff ff       	jmpq   13b40 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEENS0_5__ops15_Iter_comp_iterIZN7genetic16weightedSpearmanIfEEvmmPKT_SD_SD_PSB_EUlmmE0_EEEvSB_SB_RT0_+0x20>
   13c6b:	5b                   	pop    %rbx
   13c6c:	41 5c                	pop    %r12
   13c6e:	41 5d                	pop    %r13
   13c70:	41 5e                	pop    %r14
   13c72:	41 5f                	pop    %r15
	{
	  --__last;
	  std::__pop_heap(__first, __last, __last, __comp);
	}
    }
   13c74:	c3                   	retq   
   13c75:	cc                   	int3   
   13c76:	cc                   	int3   
   13c77:	cc                   	int3   
   13c78:	cc                   	int3   
   13c79:	cc                   	int3   
   13c7a:	cc                   	int3   
   13c7b:	cc                   	int3   
   13c7c:	cc                   	int3   
   13c7d:	cc                   	int3   
   13c7e:	cc                   	int3   
   13c7f:	cc                   	int3   

0000000000013c80 <_ZNSt5stackIiSt5dequeIiSaIiEEED2Ev>:
   *  which is a typedef for the second Sequence parameter, and @c
   *  push, @c pop, and @c top, which are standard %stack/FILO
   *  operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class stack
   13c80:	48 89 f8             	mov    %rdi,%rax
      if (this->_M_impl._M_map)
   13c83:	48 8b 3f             	mov    (%rdi),%rdi
   13c86:	48 85 ff             	test   %rdi,%rdi
   13c89:	74 44                	je     13ccf <_ZNSt5stackIiSt5dequeIiSaIiEEED2Ev+0x4f>
   13c8b:	41 57                	push   %r15
   13c8d:	41 56                	push   %r14
   13c8f:	53                   	push   %rbx
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   13c90:	48 8b 58 28          	mov    0x28(%rax),%rbx
			   this->_M_impl._M_finish._M_node + 1);
   13c94:	4c 8b 70 48          	mov    0x48(%rax),%r14
   13c98:	49 8d 4e 08          	lea    0x8(%r14),%rcx
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   13c9c:	48 39 cb             	cmp    %rcx,%rbx
   13c9f:	73 24                	jae    13cc5 <_ZNSt5stackIiSt5dequeIiSaIiEEED2Ev+0x45>
   13ca1:	49 89 c7             	mov    %rax,%r15
   13ca4:	48 83 c3 f8          	add    $0xfffffffffffffff8,%rbx
   13ca8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   13caf:	00 
	_M_deallocate_node(*__n);
   13cb0:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
   13cb4:	48 83 c3 08          	add    $0x8,%rbx
   13cb8:	e8 03 3a 00 00       	callq  176c0 <_ZdlPv@plt>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   13cbd:	4c 39 f3             	cmp    %r14,%rbx
   13cc0:	72 ee                	jb     13cb0 <_ZNSt5stackIiSt5dequeIiSaIiEEED2Ev+0x30>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
   13cc2:	49 8b 3f             	mov    (%r15),%rdi
   13cc5:	5b                   	pop    %rbx
   13cc6:	41 5e                	pop    %r14
   13cc8:	41 5f                	pop    %r15
   13cca:	e9 f1 39 00 00       	jmpq   176c0 <_ZdlPv@plt>
   13ccf:	c3                   	retq   

0000000000013cd0 <_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEm>:
    {
   13cd0:	41 57                	push   %r15
   13cd2:	41 56                	push   %r14
   13cd4:	41 54                	push   %r12
   13cd6:	53                   	push   %rbx
   13cd7:	50                   	push   %rax
   13cd8:	49 89 f6             	mov    %rsi,%r14
   13cdb:	48 89 fb             	mov    %rdi,%rbx
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
   13cde:	49 89 f4             	mov    %rsi,%r12
   13ce1:	49 c1 ec 07          	shr    $0x7,%r12
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   13ce5:	49 83 fc 06          	cmp    $0x6,%r12
   13ce9:	b8 05 00 00 00       	mov    $0x5,%eax
   13cee:	49 0f 43 c4          	cmovae %r12,%rax
				  + 1);
   13cf2:	4d 8d 7c 24 01       	lea    0x1(%r12),%r15
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   13cf7:	48 8d 48 03          	lea    0x3(%rax),%rcx
   13cfb:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   13cff:	48 8d 3c c5 18 00 00 	lea    0x18(,%rax,8),%rdi
   13d06:	00 
   13d07:	e8 54 3a 00 00       	callq  17760 <_Znwm@plt>
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   13d0c:	48 89 03             	mov    %rax,(%rbx)
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   13d0f:	48 8b 4b 08          	mov    0x8(%rbx),%rcx
   13d13:	4c 29 f9             	sub    %r15,%rcx
   13d16:	48 83 e1 fe          	and    $0xfffffffffffffffe,%rcx
   13d1a:	4c 8d 3c 88          	lea    (%rax,%rcx,4),%r15
      _Map_pointer __nfinish = __nstart + __num_nodes;
   13d1e:	4b 8d 14 e7          	lea    (%r15,%r12,8),%rdx
   13d22:	48 83 c2 08          	add    $0x8,%rdx
	{ _M_create_nodes(__nstart, __nfinish); }
   13d26:	48 89 df             	mov    %rbx,%rdi
   13d29:	4c 89 fe             	mov    %r15,%rsi
   13d2c:	e8 8f 00 00 00       	callq  13dc0 <_ZNSt11_Deque_baseIiSaIiEE15_M_create_nodesEPPiS3_>
	_M_node = __new_node;
   13d31:	4c 89 7b 28          	mov    %r15,0x28(%rbx)
	_M_first = *__new_node;
   13d35:	49 8b 07             	mov    (%r15),%rax
   13d38:	48 89 43 18          	mov    %rax,0x18(%rbx)
	_M_last = _M_first + difference_type(_S_buffer_size());
   13d3c:	48 8d 88 00 02 00 00 	lea    0x200(%rax),%rcx
   13d43:	48 89 4b 20          	mov    %rcx,0x20(%rbx)
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
   13d47:	4b 8d 0c e7          	lea    (%r15,%r12,8),%rcx
	_M_node = __new_node;
   13d4b:	48 89 4b 48          	mov    %rcx,0x48(%rbx)
	_M_first = *__new_node;
   13d4f:	4b 8b 0c e7          	mov    (%r15,%r12,8),%rcx
   13d53:	48 89 4b 38          	mov    %rcx,0x38(%rbx)
	_M_last = _M_first + difference_type(_S_buffer_size());
   13d57:	48 8d 91 00 02 00 00 	lea    0x200(%rcx),%rdx
   13d5e:	48 89 53 40          	mov    %rdx,0x40(%rbx)
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   13d62:	48 89 43 10          	mov    %rax,0x10(%rbx)
					% __deque_buf_size(sizeof(_Tp)));
   13d66:	41 83 e6 7f          	and    $0x7f,%r14d
					+ __num_elements
   13d6a:	4a 8d 04 b1          	lea    (%rcx,%r14,4),%rax
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   13d6e:	48 89 43 30          	mov    %rax,0x30(%rbx)
    }
   13d72:	48 83 c4 08          	add    $0x8,%rsp
   13d76:	5b                   	pop    %rbx
   13d77:	41 5c                	pop    %r12
   13d79:	41 5e                	pop    %r14
   13d7b:	41 5f                	pop    %r15
   13d7d:	c3                   	retq   
	{ _M_create_nodes(__nstart, __nfinish); }
   13d7e:	48 89 c7             	mov    %rax,%rdi
   13d81:	e8 2a 39 00 00       	callq  176b0 <__cxa_begin_catch@plt>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
   13d86:	48 8b 3b             	mov    (%rbx),%rdi
	::operator delete(__p
   13d89:	e8 32 39 00 00       	callq  176c0 <_ZdlPv@plt>
	  this->_M_impl._M_map_size = 0;
   13d8e:	0f 57 c0             	xorps  %xmm0,%xmm0
   13d91:	0f 11 03             	movups %xmm0,(%rbx)
	  __throw_exception_again;
   13d94:	e8 f7 39 00 00       	callq  17790 <__cxa_rethrow@plt>
   13d99:	48 89 c3             	mov    %rax,%rbx
	}
   13d9c:	e8 1f 3a 00 00       	callq  177c0 <__cxa_end_catch@plt>
   13da1:	48 89 df             	mov    %rbx,%rdi
   13da4:	e8 c7 3b 00 00       	callq  17970 <_Unwind_Resume@plt>
   13da9:	48 89 c7             	mov    %rax,%rdi
   13dac:	e8 cf 8a ff ff       	callq  c880 <__clang_call_terminate>
   13db1:	cc                   	int3   
   13db2:	cc                   	int3   
   13db3:	cc                   	int3   
   13db4:	cc                   	int3   
   13db5:	cc                   	int3   
   13db6:	cc                   	int3   
   13db7:	cc                   	int3   
   13db8:	cc                   	int3   
   13db9:	cc                   	int3   
   13dba:	cc                   	int3   
   13dbb:	cc                   	int3   
   13dbc:	cc                   	int3   
   13dbd:	cc                   	int3   
   13dbe:	cc                   	int3   
   13dbf:	cc                   	int3   

0000000000013dc0 <_ZNSt11_Deque_baseIiSaIiEE15_M_create_nodesEPPiS3_>:
    {
   13dc0:	41 57                	push   %r15
   13dc2:	41 56                	push   %r14
   13dc4:	53                   	push   %rbx
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
   13dc5:	48 39 d6             	cmp    %rdx,%rsi
   13dc8:	73 2c                	jae    13df6 <_ZNSt11_Deque_baseIiSaIiEE15_M_create_nodesEPPiS3_+0x36>
   13dca:	49 89 d6             	mov    %rdx,%r14
   13dcd:	48 89 f3             	mov    %rsi,%rbx
   13dd0:	49 89 f7             	mov    %rsi,%r15
   13dd3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   13dda:	84 00 00 00 00 00 
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   13de0:	bf 00 02 00 00       	mov    $0x200,%edi
   13de5:	e8 76 39 00 00       	callq  17760 <_Znwm@plt>
	    *__cur = this->_M_allocate_node();
   13dea:	49 89 07             	mov    %rax,(%r15)
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
   13ded:	49 83 c7 08          	add    $0x8,%r15
   13df1:	4d 39 f7             	cmp    %r14,%r15
   13df4:	72 ea                	jb     13de0 <_ZNSt11_Deque_baseIiSaIiEE15_M_create_nodesEPPiS3_+0x20>
    }
   13df6:	5b                   	pop    %rbx
   13df7:	41 5e                	pop    %r14
   13df9:	41 5f                	pop    %r15
   13dfb:	c3                   	retq   
	}
   13dfc:	48 89 c7             	mov    %rax,%rdi
   13dff:	e8 ac 38 00 00       	callq  176b0 <__cxa_begin_catch@plt>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   13e04:	49 39 df             	cmp    %rbx,%r15
   13e07:	76 18                	jbe    13e21 <_ZNSt11_Deque_baseIiSaIiEE15_M_create_nodesEPPiS3_+0x61>
   13e09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	_M_deallocate_node(*__n);
   13e10:	48 8b 3b             	mov    (%rbx),%rdi
	::operator delete(__p
   13e13:	e8 a8 38 00 00       	callq  176c0 <_ZdlPv@plt>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   13e18:	48 83 c3 08          	add    $0x8,%rbx
   13e1c:	4c 39 fb             	cmp    %r15,%rbx
   13e1f:	72 ef                	jb     13e10 <_ZNSt11_Deque_baseIiSaIiEE15_M_create_nodesEPPiS3_+0x50>
	  __throw_exception_again;
   13e21:	e8 6a 39 00 00       	callq  17790 <__cxa_rethrow@plt>
   13e26:	48 89 c3             	mov    %rax,%rbx
	}
   13e29:	e8 92 39 00 00       	callq  177c0 <__cxa_end_catch@plt>
   13e2e:	48 89 df             	mov    %rbx,%rdi
   13e31:	e8 3a 3b 00 00       	callq  17970 <_Unwind_Resume@plt>
   13e36:	48 89 c7             	mov    %rax,%rdi
   13e39:	e8 42 8a ff ff       	callq  c880 <__clang_call_terminate>
   13e3e:	cc                   	int3   
   13e3f:	cc                   	int3   

0000000000013e40 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJiEEEvDpOT_>:
      {
   13e40:	41 56                	push   %r14
   13e42:	53                   	push   %rbx
   13e43:	50                   	push   %rax
   13e44:	49 89 f6             	mov    %rsi,%r14
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   13e47:	48 8b 47 48          	mov    0x48(%rdi),%rax
   13e4b:	48 89 c1             	mov    %rax,%rcx
   13e4e:	48 2b 4f 28          	sub    0x28(%rdi),%rcx
   13e52:	48 c1 e1 04          	shl    $0x4,%rcx
	  + (__y._M_last - __y._M_cur);
   13e56:	48 8b 57 20          	mov    0x20(%rdi),%rdx
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   13e5a:	48 8b 77 30          	mov    0x30(%rdi),%rsi
   13e5e:	48 2b 77 38          	sub    0x38(%rdi),%rsi
   13e62:	48 c1 fe 02          	sar    $0x2,%rsi
   13e66:	48 01 ce             	add    %rcx,%rsi
	  + (__y._M_last - __y._M_cur);
   13e69:	48 2b 57 10          	sub    0x10(%rdi),%rdx
   13e6d:	48 c1 fa 02          	sar    $0x2,%rdx
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   13e71:	48 01 f2             	add    %rsi,%rdx
   13e74:	48 b9 7f 00 00 00 00 	movabs $0x200000000000007f,%rcx
   13e7b:	00 00 20 
	if (size() == max_size())
   13e7e:	48 39 ca             	cmp    %rcx,%rdx
   13e81:	74 6c                	je     13eef <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJiEEEvDpOT_+0xaf>
   13e83:	48 89 fb             	mov    %rdi,%rbx
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   13e86:	48 2b 07             	sub    (%rdi),%rax
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   13e89:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   13e8d:	48 c1 f8 03          	sar    $0x3,%rax
   13e91:	48 29 c1             	sub    %rax,%rcx
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   13e94:	48 83 f9 01          	cmp    $0x1,%rcx
   13e98:	77 0f                	ja     13ea9 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJiEEEvDpOT_+0x69>
	  _M_reallocate_map(__nodes_to_add, false);
   13e9a:	be 01 00 00 00       	mov    $0x1,%esi
   13e9f:	48 89 df             	mov    %rbx,%rdi
   13ea2:	31 d2                	xor    %edx,%edx
   13ea4:	e8 57 00 00 00       	callq  13f00 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEmb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   13ea9:	bf 00 02 00 00       	mov    $0x200,%edi
   13eae:	e8 ad 38 00 00       	callq  17760 <_Znwm@plt>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   13eb3:	48 8b 4b 48          	mov    0x48(%rbx),%rcx
   13eb7:	48 89 41 08          	mov    %rax,0x8(%rcx)
				     this->_M_impl._M_finish._M_cur,
   13ebb:	48 8b 43 30          	mov    0x30(%rbx),%rax
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   13ebf:	41 8b 0e             	mov    (%r14),%ecx
   13ec2:	89 08                	mov    %ecx,(%rax)
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   13ec4:	48 8b 43 48          	mov    0x48(%rbx),%rax
						+ 1);
   13ec8:	48 8d 48 08          	lea    0x8(%rax),%rcx
	_M_node = __new_node;
   13ecc:	48 89 4b 48          	mov    %rcx,0x48(%rbx)
	_M_first = *__new_node;
   13ed0:	48 8b 40 08          	mov    0x8(%rax),%rax
   13ed4:	48 89 43 38          	mov    %rax,0x38(%rbx)
	_M_last = _M_first + difference_type(_S_buffer_size());
   13ed8:	48 8d 88 00 02 00 00 	lea    0x200(%rax),%rcx
   13edf:	48 89 4b 40          	mov    %rcx,0x40(%rbx)
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   13ee3:	48 89 43 30          	mov    %rax,0x30(%rbx)
      }
   13ee7:	48 83 c4 08          	add    $0x8,%rsp
   13eeb:	5b                   	pop    %rbx
   13eec:	41 5e                	pop    %r14
   13eee:	c3                   	retq   
	  __throw_length_error(
   13eef:	48 8d 3d 68 ec fe ff 	lea    -0x11398(%rip),%rdi        # 2b5e <_IO_stdin_used+0x46e>
   13ef6:	e8 75 36 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
   13efb:	cc                   	int3   
   13efc:	cc                   	int3   
   13efd:	cc                   	int3   
   13efe:	cc                   	int3   
   13eff:	cc                   	int3   

0000000000013f00 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEmb>:

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
   13f00:	55                   	push   %rbp
   13f01:	41 57                	push   %r15
   13f03:	41 56                	push   %r14
   13f05:	41 55                	push   %r13
   13f07:	41 54                	push   %r12
   13f09:	53                   	push   %rbx
   13f0a:	50                   	push   %rax
   13f0b:	89 d5                	mov    %edx,%ebp
   13f0d:	49 89 f6             	mov    %rsi,%r14
   13f10:	48 89 fb             	mov    %rdi,%rbx
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   13f13:	48 8b 57 48          	mov    0x48(%rdi),%rdx
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   13f17:	48 8b 47 08          	mov    0x8(%rdi),%rax
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   13f1b:	48 8b 77 28          	mov    0x28(%rdi),%rsi
   13f1f:	49 89 d4             	mov    %rdx,%r12
   13f22:	49 29 f4             	sub    %rsi,%r12
   13f25:	49 c1 fc 03          	sar    $0x3,%r12
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   13f29:	4f 8d 3c 34          	lea    (%r12,%r14,1),%r15
   13f2d:	49 ff c7             	inc    %r15
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   13f30:	49 ff c4             	inc    %r12
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   13f33:	4b 8d 0c 3f          	lea    (%r15,%r15,1),%rcx
   13f37:	48 39 c8             	cmp    %rcx,%rax
   13f3a:	76 39                	jbe    13f75 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEmb+0x75>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   13f3c:	4c 29 f8             	sub    %r15,%rax
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   13f3f:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
   13f43:	48 c1 e0 02          	shl    $0x2,%rax
   13f47:	48 03 03             	add    (%rbx),%rax
   13f4a:	31 c9                	xor    %ecx,%ecx
			 + (__add_at_front ? __nodes_to_add : 0);
   13f4c:	40 84 ed             	test   %bpl,%bpl
   13f4f:	49 0f 45 ce          	cmovne %r14,%rcx
   13f53:	4c 8d 34 c8          	lea    (%rax,%rcx,8),%r14
   13f57:	48 83 c2 08          	add    $0x8,%rdx
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   13f5b:	49 39 f6             	cmp    %rsi,%r14
   13f5e:	0f 83 85 00 00 00    	jae    13fe9 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEmb+0xe9>
   13f64:	48 29 f2             	sub    %rsi,%rdx
	  if (_Num)
   13f67:	0f 84 8d 00 00 00    	je     13ffa <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEmb+0xfa>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   13f6d:	4c 89 f7             	mov    %r14,%rdi
   13f70:	e9 80 00 00 00       	jmpq   13ff5 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEmb+0xf5>
			       __new_nstart + __old_num_nodes);
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
				     + std::max(this->_M_impl._M_map_size,
   13f75:	4c 39 f0             	cmp    %r14,%rax
   13f78:	4c 89 f1             	mov    %r14,%rcx
   13f7b:	48 0f 47 c8          	cmova  %rax,%rcx
						__nodes_to_add) + 2;
   13f7f:	4c 8d 2c 08          	lea    (%rax,%rcx,1),%r13
   13f83:	49 83 c5 02          	add    $0x2,%r13
	if (__n > this->_M_max_size())
   13f87:	4c 89 e8             	mov    %r13,%rax
   13f8a:	48 c1 e8 3c          	shr    $0x3c,%rax
   13f8e:	0f 85 a9 00 00 00    	jne    1403d <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEmb+0x13d>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   13f94:	4a 8d 3c ed 00 00 00 	lea    0x0(,%r13,8),%rdi
   13f9b:	00 
   13f9c:	e8 bf 37 00 00       	callq  17760 <_Znwm@plt>

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   13fa1:	4c 89 e9             	mov    %r13,%rcx
   13fa4:	4c 29 f9             	sub    %r15,%rcx
   13fa7:	49 89 c7             	mov    %rax,%r15
   13faa:	48 83 e1 fe          	and    $0xfffffffffffffffe,%rcx
   13fae:	48 8d 04 88          	lea    (%rax,%rcx,4),%rax
   13fb2:	31 c9                	xor    %ecx,%ecx
			 + (__add_at_front ? __nodes_to_add : 0);
   13fb4:	40 84 ed             	test   %bpl,%bpl
   13fb7:	49 0f 45 ce          	cmovne %r14,%rcx
   13fbb:	4c 8d 34 c8          	lea    (%rax,%rcx,8),%r14
	  std::copy(this->_M_impl._M_start._M_node,
   13fbf:	48 8b 73 28          	mov    0x28(%rbx),%rsi
		    this->_M_impl._M_finish._M_node + 1,
   13fc3:	48 8b 53 48          	mov    0x48(%rbx),%rdx
   13fc7:	48 83 c2 08          	add    $0x8,%rdx
	  if (_Num)
   13fcb:	48 29 f2             	sub    %rsi,%rdx
   13fce:	74 08                	je     13fd8 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEmb+0xd8>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   13fd0:	4c 89 f7             	mov    %r14,%rdi
   13fd3:	e8 88 39 00 00       	callq  17960 <memmove@plt>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
   13fd8:	48 8b 3b             	mov    (%rbx),%rdi
	::operator delete(__p
   13fdb:	e8 e0 36 00 00       	callq  176c0 <_ZdlPv@plt>

	  this->_M_impl._M_map = __new_map;
   13fe0:	4c 89 3b             	mov    %r15,(%rbx)
	  this->_M_impl._M_map_size = __new_map_size;
   13fe3:	4c 89 6b 08          	mov    %r13,0x8(%rbx)
   13fe7:	eb 11                	jmp    13ffa <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEmb+0xfa>
   13fe9:	48 29 f2             	sub    %rsi,%rdx
	  if (_Num)
   13fec:	74 0c                	je     13ffa <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEmb+0xfa>
			       __new_nstart + __old_num_nodes);
   13fee:	4b 8d 3c e6          	lea    (%r14,%r12,8),%rdi
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   13ff2:	48 29 d7             	sub    %rdx,%rdi
   13ff5:	e8 66 39 00 00       	callq  17960 <memmove@plt>
	_M_node = __new_node;
   13ffa:	4c 89 73 28          	mov    %r14,0x28(%rbx)
	_M_first = *__new_node;
   13ffe:	49 8b 06             	mov    (%r14),%rax
   14001:	48 89 43 18          	mov    %rax,0x18(%rbx)
	_M_last = _M_first + difference_type(_S_buffer_size());
   14005:	48 05 00 02 00 00    	add    $0x200,%rax
   1400b:	48 89 43 20          	mov    %rax,0x20(%rbx)
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   1400f:	4b 8d 04 e6          	lea    (%r14,%r12,8),%rax
   14013:	48 83 c0 f8          	add    $0xfffffffffffffff8,%rax
	_M_node = __new_node;
   14017:	48 89 43 48          	mov    %rax,0x48(%rbx)
	_M_first = *__new_node;
   1401b:	4b 8b 44 e6 f8       	mov    -0x8(%r14,%r12,8),%rax
   14020:	48 89 43 38          	mov    %rax,0x38(%rbx)
	_M_last = _M_first + difference_type(_S_buffer_size());
   14024:	48 05 00 02 00 00    	add    $0x200,%rax
   1402a:	48 89 43 40          	mov    %rax,0x40(%rbx)
    }
   1402e:	48 83 c4 08          	add    $0x8,%rsp
   14032:	5b                   	pop    %rbx
   14033:	41 5c                	pop    %r12
   14035:	41 5d                	pop    %r13
   14037:	41 5e                	pop    %r14
   14039:	41 5f                	pop    %r15
   1403b:	5d                   	pop    %rbp
   1403c:	c3                   	retq   
	  std::__throw_bad_alloc();
   1403d:	e8 5e 36 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
   14042:	cc                   	int3   
   14043:	cc                   	int3   
   14044:	cc                   	int3   
   14045:	cc                   	int3   
   14046:	cc                   	int3   
   14047:	cc                   	int3   
   14048:	cc                   	int3   
   14049:	cc                   	int3   
   1404a:	cc                   	int3   
   1404b:	cc                   	int3   
   1404c:	cc                   	int3   
   1404d:	cc                   	int3   
   1404e:	cc                   	int3   
   1404f:	cc                   	int3   

0000000000014050 <_ZNSt6vectorIN7genetic4nodeESaIS1_EE20_M_allocate_and_copyIPKS1_EEPS1_mT_S8_>:
	{
   14050:	41 57                	push   %r15
   14052:	41 56                	push   %r14
   14054:	41 54                	push   %r12
   14056:	53                   	push   %rbx
   14057:	50                   	push   %rax
   14058:	49 89 ce             	mov    %rcx,%r14
   1405b:	49 89 d7             	mov    %rdx,%r15
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1405e:	48 85 f6             	test   %rsi,%rsi
   14061:	74 1f                	je     14082 <_ZNSt6vectorIN7genetic4nodeESaIS1_EE20_M_allocate_and_copyIPKS1_EEPS1_mT_S8_+0x32>
	if (__n > this->_M_max_size())
   14063:	48 89 f0             	mov    %rsi,%rax
   14066:	48 c1 e8 3b          	shr    $0x3b,%rax
   1406a:	75 4b                	jne    140b7 <_ZNSt6vectorIN7genetic4nodeESaIS1_EE20_M_allocate_and_copyIPKS1_EEPS1_mT_S8_+0x67>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   1406c:	48 c1 e6 04          	shl    $0x4,%rsi
   14070:	48 89 f7             	mov    %rsi,%rdi
   14073:	e8 e8 36 00 00       	callq  17760 <_Znwm@plt>
   14078:	48 89 c3             	mov    %rax,%rbx
	      for (; __first != __last; ++__first, (void)++__cur)
   1407b:	4d 39 f7             	cmp    %r14,%r15
   1407e:	75 09                	jne    14089 <_ZNSt6vectorIN7genetic4nodeESaIS1_EE20_M_allocate_and_copyIPKS1_EEPS1_mT_S8_+0x39>
   14080:	eb 26                	jmp    140a8 <_ZNSt6vectorIN7genetic4nodeESaIS1_EE20_M_allocate_and_copyIPKS1_EEPS1_mT_S8_+0x58>
   14082:	31 db                	xor    %ebx,%ebx
   14084:	4d 39 f7             	cmp    %r14,%r15
   14087:	74 1f                	je     140a8 <_ZNSt6vectorIN7genetic4nodeESaIS1_EE20_M_allocate_and_copyIPKS1_EEPS1_mT_S8_+0x58>
   14089:	49 89 dc             	mov    %rbx,%r12
   1408c:	0f 1f 40 00          	nopl   0x0(%rax)
   14090:	4c 89 e7             	mov    %r12,%rdi
   14093:	4c 89 fe             	mov    %r15,%rsi
   14096:	e8 35 2d 00 00       	callq  16dd0 <_ZN7genetic4nodeC1ERKS0_>
   1409b:	49 83 c7 10          	add    $0x10,%r15
   1409f:	49 83 c4 10          	add    $0x10,%r12
   140a3:	4d 39 f7             	cmp    %r14,%r15
   140a6:	75 e8                	jne    14090 <_ZNSt6vectorIN7genetic4nodeESaIS1_EE20_M_allocate_and_copyIPKS1_EEPS1_mT_S8_+0x40>
	      return __result;
   140a8:	48 89 d8             	mov    %rbx,%rax
   140ab:	48 83 c4 08          	add    $0x8,%rsp
   140af:	5b                   	pop    %rbx
   140b0:	41 5c                	pop    %r12
   140b2:	41 5e                	pop    %r14
   140b4:	41 5f                	pop    %r15
   140b6:	c3                   	retq   
	  std::__throw_bad_alloc();
   140b7:	e8 e4 35 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
	    }
   140bc:	48 89 c7             	mov    %rax,%rdi
   140bf:	e8 ec 35 00 00       	callq  176b0 <__cxa_begin_catch@plt>
	      __throw_exception_again;
   140c4:	e8 c7 36 00 00       	callq  17790 <__cxa_rethrow@plt>
   140c9:	49 89 c6             	mov    %rax,%r14
	    }
   140cc:	e8 ef 36 00 00       	callq  177c0 <__cxa_end_catch@plt>
	    }
   140d1:	4c 89 f7             	mov    %r14,%rdi
   140d4:	e8 d7 35 00 00       	callq  176b0 <__cxa_begin_catch@plt>
	if (__p)
   140d9:	48 85 db             	test   %rbx,%rbx
   140dc:	74 08                	je     140e6 <_ZNSt6vectorIN7genetic4nodeESaIS1_EE20_M_allocate_and_copyIPKS1_EEPS1_mT_S8_+0x96>
	::operator delete(__p
   140de:	48 89 df             	mov    %rbx,%rdi
   140e1:	e8 da 35 00 00       	callq  176c0 <_ZdlPv@plt>
	      __throw_exception_again;
   140e6:	e8 a5 36 00 00       	callq  17790 <__cxa_rethrow@plt>
   140eb:	48 89 c3             	mov    %rax,%rbx
	    }
   140ee:	e8 cd 36 00 00       	callq  177c0 <__cxa_end_catch@plt>
   140f3:	48 89 df             	mov    %rbx,%rdi
   140f6:	e8 75 38 00 00       	callq  17970 <_Unwind_Resume@plt>
   140fb:	48 89 c7             	mov    %rax,%rdi
   140fe:	e8 7d 87 ff ff       	callq  c880 <__clang_call_terminate>
   14103:	48 89 c7             	mov    %rax,%rdi
   14106:	e8 75 87 ff ff       	callq  c880 <__clang_call_terminate>
   1410b:	cc                   	int3   
   1410c:	cc                   	int3   
   1410d:	cc                   	int3   
   1410e:	cc                   	int3   
   1410f:	cc                   	int3   

0000000000014110 <_ZNSt6vectorIN7genetic4nodeESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
    {
   14110:	55                   	push   %rbp
   14111:	41 57                	push   %r15
   14113:	41 56                	push   %r14
   14115:	41 55                	push   %r13
   14117:	41 54                	push   %r12
   14119:	53                   	push   %rbx
   1411a:	48 83 ec 18          	sub    $0x18,%rsp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1411e:	4c 8b 3f             	mov    (%rdi),%r15
   14121:	4c 8b 77 08          	mov    0x8(%rdi),%r14
   14125:	4c 89 f0             	mov    %r14,%rax
   14128:	4c 29 f8             	sub    %r15,%rax
   1412b:	48 b9 f0 ff ff ff ff 	movabs $0x7ffffffffffffff0,%rcx
   14132:	ff ff 7f 
	if (max_size() - size() < __n)
   14135:	48 39 c8             	cmp    %rcx,%rax
   14138:	0f 84 09 01 00 00    	je     14247 <_ZNSt6vectorIN7genetic4nodeESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x137>
   1413e:	49 89 f4             	mov    %rsi,%r12
   14141:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   14146:	48 c1 f8 04          	sar    $0x4,%rax
	const size_type __len = size() + (std::max)(size(), __n);
   1414a:	48 83 f8 01          	cmp    $0x1,%rax
   1414e:	48 89 c1             	mov    %rax,%rcx
   14151:	48 83 d1 00          	adc    $0x0,%rcx
   14155:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
   14159:	48 be ff ff ff ff ff 	movabs $0x7ffffffffffffff,%rsi
   14160:	ff ff 07 
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   14163:	48 39 f3             	cmp    %rsi,%rbx
   14166:	48 0f 43 de          	cmovae %rsi,%rbx
	const size_type __len = size() + (std::max)(size(), __n);
   1416a:	48 01 c1             	add    %rax,%rcx
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1416d:	48 0f 42 de          	cmovb  %rsi,%rbx
   14171:	4c 89 e5             	mov    %r12,%rbp
   14174:	4c 29 fd             	sub    %r15,%rbp
   14177:	48 c1 fd 04          	sar    $0x4,%rbp
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1417b:	48 85 db             	test   %rbx,%rbx
   1417e:	74 17                	je     14197 <_ZNSt6vectorIN7genetic4nodeESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x87>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   14180:	48 89 df             	mov    %rbx,%rdi
   14183:	48 c1 e7 04          	shl    $0x4,%rdi
   14187:	49 89 d5             	mov    %rdx,%r13
   1418a:	e8 d1 35 00 00       	callq  17760 <_Znwm@plt>
   1418f:	4c 89 ea             	mov    %r13,%rdx
   14192:	49 89 c5             	mov    %rax,%r13
   14195:	eb 03                	jmp    1419a <_ZNSt6vectorIN7genetic4nodeESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8a>
   14197:	45 31 ed             	xor    %r13d,%r13d
				   __new_start + __elems_before,
   1419a:	48 c1 e5 04          	shl    $0x4,%rbp
   1419e:	4c 01 ed             	add    %r13,%rbp
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   141a1:	48 89 ef             	mov    %rbp,%rdi
   141a4:	48 89 d6             	mov    %rdx,%rsi
   141a7:	4c 89 6c 24 08       	mov    %r13,0x8(%rsp)
   141ac:	e8 1f 2c 00 00       	callq  16dd0 <_ZN7genetic4nodeC1ERKS0_>
	      for (; __first != __last; ++__first, (void)++__cur)
   141b1:	4d 39 e7             	cmp    %r12,%r15
   141b4:	74 22                	je     141d8 <_ZNSt6vectorIN7genetic4nodeESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xc8>
   141b6:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
   141bb:	4c 89 fd             	mov    %r15,%rbp
   141be:	66 90                	xchg   %ax,%ax
   141c0:	4c 89 ef             	mov    %r13,%rdi
   141c3:	48 89 ee             	mov    %rbp,%rsi
   141c6:	e8 05 2c 00 00       	callq  16dd0 <_ZN7genetic4nodeC1ERKS0_>
   141cb:	48 83 c5 10          	add    $0x10,%rbp
   141cf:	49 83 c5 10          	add    $0x10,%r13
   141d3:	4c 39 e5             	cmp    %r12,%rbp
   141d6:	75 e8                	jne    141c0 <_ZNSt6vectorIN7genetic4nodeESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb0>
	      ++__new_finish;
   141d8:	49 83 c5 10          	add    $0x10,%r13
   141dc:	4d 39 e6             	cmp    %r12,%r14
   141df:	74 5a                	je     1423b <_ZNSt6vectorIN7genetic4nodeESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x12b>
   141e1:	48 8b 6c 24 08       	mov    0x8(%rsp),%rbp
   141e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   141ed:	00 00 00 
   141f0:	4c 89 ef             	mov    %r13,%rdi
   141f3:	4c 89 e6             	mov    %r12,%rsi
   141f6:	e8 d5 2b 00 00       	callq  16dd0 <_ZN7genetic4nodeC1ERKS0_>
   141fb:	49 83 c4 10          	add    $0x10,%r12
   141ff:	49 83 c5 10          	add    $0x10,%r13
   14203:	4d 39 f4             	cmp    %r14,%r12
   14206:	75 e8                	jne    141f0 <_ZNSt6vectorIN7genetic4nodeESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe0>
	if (__p)
   14208:	4d 85 ff             	test   %r15,%r15
   1420b:	74 08                	je     14215 <_ZNSt6vectorIN7genetic4nodeESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x105>
	::operator delete(__p
   1420d:	4c 89 ff             	mov    %r15,%rdi
   14210:	e8 ab 34 00 00       	callq  176c0 <_ZdlPv@plt>
   14215:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
      this->_M_impl._M_start = __new_start;
   1421a:	48 89 28             	mov    %rbp,(%rax)
      this->_M_impl._M_finish = __new_finish;
   1421d:	4c 89 68 08          	mov    %r13,0x8(%rax)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   14221:	48 c1 e3 04          	shl    $0x4,%rbx
   14225:	48 01 eb             	add    %rbp,%rbx
   14228:	48 89 58 10          	mov    %rbx,0x10(%rax)
    }
   1422c:	48 83 c4 18          	add    $0x18,%rsp
   14230:	5b                   	pop    %rbx
   14231:	41 5c                	pop    %r12
   14233:	41 5d                	pop    %r13
   14235:	41 5e                	pop    %r14
   14237:	41 5f                	pop    %r15
   14239:	5d                   	pop    %rbp
   1423a:	c3                   	retq   
   1423b:	48 8b 6c 24 08       	mov    0x8(%rsp),%rbp
   14240:	4d 85 ff             	test   %r15,%r15
   14243:	75 c8                	jne    1420d <_ZNSt6vectorIN7genetic4nodeESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xfd>
   14245:	eb ce                	jmp    14215 <_ZNSt6vectorIN7genetic4nodeESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x105>
	  __throw_length_error(__N(__s));
   14247:	48 8d 3d 64 e8 fe ff 	lea    -0x1179c(%rip),%rdi        # 2ab2 <_IO_stdin_used+0x3c2>
   1424e:	e8 1d 33 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
   14253:	49 89 c6             	mov    %rax,%r14
   14256:	eb 34                	jmp    1428c <_ZNSt6vectorIN7genetic4nodeESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x17c>
	    }
   14258:	48 89 c7             	mov    %rax,%rdi
   1425b:	e8 50 34 00 00       	callq  176b0 <__cxa_begin_catch@plt>
	      __throw_exception_again;
   14260:	e8 2b 35 00 00       	callq  17790 <__cxa_rethrow@plt>
   14265:	49 89 c6             	mov    %rax,%r14
	    }
   14268:	e8 53 35 00 00       	callq  177c0 <__cxa_end_catch@plt>
   1426d:	eb 1d                	jmp    1428c <_ZNSt6vectorIN7genetic4nodeESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x17c>
   1426f:	48 89 c7             	mov    %rax,%rdi
   14272:	e8 09 86 ff ff       	callq  c880 <__clang_call_terminate>
	    }
   14277:	48 89 c7             	mov    %rax,%rdi
   1427a:	e8 31 34 00 00       	callq  176b0 <__cxa_begin_catch@plt>
	      __throw_exception_again;
   1427f:	e8 0c 35 00 00       	callq  17790 <__cxa_rethrow@plt>
   14284:	49 89 c6             	mov    %rax,%r14
	    }
   14287:	e8 34 35 00 00       	callq  177c0 <__cxa_end_catch@plt>
	}
   1428c:	4c 89 f7             	mov    %r14,%rdi
   1428f:	e8 1c 34 00 00       	callq  176b0 <__cxa_begin_catch@plt>
	if (__p)
   14294:	48 83 7c 24 08 00    	cmpq   $0x0,0x8(%rsp)
   1429a:	74 0a                	je     142a6 <_ZNSt6vectorIN7genetic4nodeESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x196>
   1429c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
   142a1:	e8 1a 34 00 00       	callq  176c0 <_ZdlPv@plt>
	  __throw_exception_again;
   142a6:	e8 e5 34 00 00       	callq  17790 <__cxa_rethrow@plt>
   142ab:	48 89 c7             	mov    %rax,%rdi
   142ae:	e8 cd 85 ff ff       	callq  c880 <__clang_call_terminate>
   142b3:	48 89 c3             	mov    %rax,%rbx
	}
   142b6:	e8 05 35 00 00       	callq  177c0 <__cxa_end_catch@plt>
   142bb:	48 89 df             	mov    %rbx,%rdi
   142be:	e8 ad 36 00 00       	callq  17970 <_Unwind_Resume@plt>
   142c3:	48 89 c7             	mov    %rax,%rdi
   142c6:	e8 b5 85 ff ff       	callq  c880 <__clang_call_terminate>
   142cb:	cc                   	int3   
   142cc:	cc                   	int3   
   142cd:	cc                   	int3   
   142ce:	cc                   	int3   
   142cf:	cc                   	int3   

00000000000142d0 <_GLOBAL__sub_I_program.cpp>:
   142d0:	53                   	push   %rbx
   142d1:	48 8d 1d fa 5d 00 00 	lea    0x5dfa(%rip),%rbx        # 1a0d2 <_ZStL8__ioinit>
   142d8:	48 89 df             	mov    %rbx,%rdi
   142db:	e8 90 34 00 00       	callq  17770 <_ZNSt8ios_base4InitC1Ev@plt>
   142e0:	48 8b 3d c9 4a 00 00 	mov    0x4ac9(%rip),%rdi        # 18db0 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
   142e7:	48 8d 15 1a 5b 00 00 	lea    0x5b1a(%rip),%rdx        # 19e08 <__dso_handle>
   142ee:	48 89 de             	mov    %rbx,%rsi
   142f1:	5b                   	pop    %rbx
   142f2:	e9 d9 36 00 00       	jmpq   179d0 <__cxa_atexit@plt>
   142f7:	cc                   	int3   
   142f8:	cc                   	int3   
   142f9:	cc                   	int3   
   142fa:	cc                   	int3   
   142fb:	cc                   	int3   
   142fc:	cc                   	int3   
   142fd:	cc                   	int3   
   142fe:	cc                   	int3   
   142ff:	cc                   	int3   

0000000000014300 <_ZN7genetic17tournament_kernelERKSt6vectorINS_7programESaIS1_EEPiiiiiif>:
     * @param criterion     Selection criterion for choices(min/max)
     * @param parsimony     Parsimony coefficient to account for bloat
     */
    void tournament_kernel(const std::vector<program>& progs, int* win_indices, const int seed,
                           const int n_progs, const int n_tours, const int tour_size,
                           const int criterion, const float parsimony) {
   14300:	55                   	push   %rbp
   14301:	41 57                	push   %r15
   14303:	41 56                	push   %r14
   14305:	41 55                	push   %r13
   14307:	41 54                	push   %r12
   14309:	53                   	push   %rbx
   1430a:	48 83 ec 28          	sub    $0x28,%rsp
   1430e:	f3 0f 11 44 24 0c    	movss  %xmm0,0xc(%rsp)
   14314:	44 89 cb             	mov    %r9d,%ebx
   14317:	45 89 c5             	mov    %r8d,%r13d
   1431a:	89 cd                	mov    %ecx,%ebp
   1431c:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
   14321:	49 89 ff             	mov    %rdi,%r15
    explicit PhiloxEngine(uint32_t seed) { philox_seed(seed); }
   14324:	89 d7                	mov    %edx,%edi
   14326:	e8 f5 22 00 00       	callq  16620 <philox_seed>
        if (b < a) {
   1432b:	85 ed                	test   %ebp,%ebp
   1432d:	0f 8e 31 01 00 00    	jle    14464 <_ZN7genetic17tournament_kernelERKSt6vectorINS_7programESaIS1_EEPiiiiiif+0x164>
        PhiloxEngine                         gen(seed);
        uniform_int_distribution_custom<int> rng(0, n_progs - 1);

        for (auto idx = 0; idx < n_tours; ++idx) {
   14333:	45 85 ed             	test   %r13d,%r13d
   14336:	0f 8e 19 01 00 00    	jle    14455 <_ZN7genetic17tournament_kernelERKSt6vectorINS_7programESaIS1_EEPiiiiiif+0x155>
   1433c:	8b 4c 24 60          	mov    0x60(%rsp),%ecx
   14340:	45 31 f6             	xor    %r14d,%r14d
   14343:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14348:	31 d2                	xor    %edx,%edx
   1434a:	f7 f5                	div    %ebp
   1434c:	41 89 d4             	mov    %edx,%r12d
   1434f:	41 f7 d4             	not    %r12d
   14352:	8d 04 4d ff ff ff ff 	lea    -0x1(,%rcx,2),%eax
   14359:	0f 57 c0             	xorps  %xmm0,%xmm0
   1435c:	f3 0f 2a c0          	cvtsi2ss %eax,%xmm0
   14360:	f3 0f 11 44 24 08    	movss  %xmm0,0x8(%rsp)
   14366:	44 89 e8             	mov    %r13d,%eax
   14369:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
   1436e:	eb 20                	jmp    14390 <_ZN7genetic17tournament_kernelERKSt6vectorINS_7programESaIS1_EEPiiiiiif+0x90>
   14370:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
   14375:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
                    }
                }
            }

            // Set win index
            win_indices[idx] = opt;
   1437a:	46 89 2c b0          	mov    %r13d,(%rax,%r14,4)
        for (auto idx = 0; idx < n_tours; ++idx) {
   1437e:	49 ff c6             	inc    %r14
   14381:	4c 3b 74 24 10       	cmp    0x10(%rsp),%r14
   14386:	0f 84 c9 00 00 00    	je     14455 <_ZN7genetic17tournament_kernelERKSt6vectorINS_7programESaIS1_EEPiiiiiif+0x155>
   1438c:	0f 1f 40 00          	nopl   0x0(%rax)
    uint32_t                  operator()() { return philox_random_uint32(); }
   14390:	e8 5b 26 00 00       	callq  169f0 <philox_random_uint32>
        } while (x >= limit);
   14395:	44 39 e0             	cmp    %r12d,%eax
   14398:	73 f6                	jae    14390 <_ZN7genetic17tournament_kernelERKSt6vectorINS_7programESaIS1_EEPiiiiiif+0x90>
   1439a:	4c 89 74 24 20       	mov    %r14,0x20(%rsp)
        return a_ + static_cast<result_type>(x % range);
   1439f:	31 d2                	xor    %edx,%edx
   143a1:	f7 f5                	div    %ebp
   143a3:	41 89 d5             	mov    %edx,%r13d
   143a6:	83 fb 02             	cmp    $0x2,%ebx
   143a9:	7c c5                	jl     14370 <_ZN7genetic17tournament_kernelERKSt6vectorINS_7programESaIS1_EEPiiiiiif+0x70>
	return *(this->_M_impl._M_start + __n);
   143ab:	49 8b 07             	mov    (%r15),%rax
            float opt_penalty = parsimony * progs[opt].len * (2 * criterion - 1);
   143ae:	44 89 e9             	mov    %r13d,%ecx
            float opt_score   = progs[opt].raw_fitness_ - opt_penalty;
   143b1:	48 c1 e1 05          	shl    $0x5,%rcx
   143b5:	f3 0f 10 4c 08 10    	movss  0x10(%rax,%rcx,1),%xmm1
            float opt_penalty = parsimony * progs[opt].len * (2 * criterion - 1);
   143bb:	0f 57 c0             	xorps  %xmm0,%xmm0
   143be:	f3 0f 2a 44 08 08    	cvtsi2ssl 0x8(%rax,%rcx,1),%xmm0
   143c4:	f3 0f 59 44 24 0c    	mulss  0xc(%rsp),%xmm0
   143ca:	f3 0f 59 44 24 08    	mulss  0x8(%rsp),%xmm0
            float opt_score   = progs[opt].raw_fitness_ - opt_penalty;
   143d0:	f3 0f 5c c8          	subss  %xmm0,%xmm1
   143d4:	f3 0f 11 4c 24 04    	movss  %xmm1,0x4(%rsp)
   143da:	41 be 01 00 00 00    	mov    $0x1,%r14d
   143e0:	eb 1e                	jmp    14400 <_ZN7genetic17tournament_kernelERKSt6vectorINS_7programESaIS1_EEPiiiiiif+0x100>
   143e2:	41 89 d5             	mov    %edx,%r13d
   143e5:	f3 0f 11 44 24 04    	movss  %xmm0,0x4(%rsp)
            for (int s = 1; s < tour_size; ++s) {
   143eb:	41 ff c6             	inc    %r14d
   143ee:	41 39 de             	cmp    %ebx,%r14d
   143f1:	0f 84 79 ff ff ff    	je     14370 <_ZN7genetic17tournament_kernelERKSt6vectorINS_7programESaIS1_EEPiiiiiif+0x70>
   143f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   143fe:	00 00 
   14400:	e8 eb 25 00 00       	callq  169f0 <philox_random_uint32>
        } while (x >= limit);
   14405:	44 39 e0             	cmp    %r12d,%eax
   14408:	73 f6                	jae    14400 <_ZN7genetic17tournament_kernelERKSt6vectorINS_7programESaIS1_EEPiiiiiif+0x100>
        return a_ + static_cast<result_type>(x % range);
   1440a:	31 d2                	xor    %edx,%edx
   1440c:	f7 f5                	div    %ebp
                float curr_penalty = parsimony * progs[curr].len * (2 * criterion - 1);
   1440e:	48 89 d0             	mov    %rdx,%rax
   14411:	48 c1 e0 05          	shl    $0x5,%rax
   14415:	49 8b 0f             	mov    (%r15),%rcx
   14418:	0f 57 c9             	xorps  %xmm1,%xmm1
   1441b:	f3 0f 2a 4c 01 08    	cvtsi2ssl 0x8(%rcx,%rax,1),%xmm1
   14421:	f3 0f 59 4c 24 0c    	mulss  0xc(%rsp),%xmm1
   14427:	f3 0f 59 4c 24 08    	mulss  0x8(%rsp),%xmm1
                float curr_score   = progs[curr].raw_fitness_ - curr_penalty;
   1442d:	f3 0f 10 44 01 10    	movss  0x10(%rcx,%rax,1),%xmm0
   14433:	f3 0f 5c c1          	subss  %xmm1,%xmm0
   14437:	8b 44 24 60          	mov    0x60(%rsp),%eax
   1443b:	85 c0                	test   %eax,%eax
                if (criterion) {
   1443d:	74 09                	je     14448 <_ZN7genetic17tournament_kernelERKSt6vectorINS_7programESaIS1_EEPiiiiiif+0x148>
                    if (opt_score < curr_score) {
   1443f:	0f 2e 44 24 04       	ucomiss 0x4(%rsp),%xmm0
   14444:	77 9c                	ja     143e2 <_ZN7genetic17tournament_kernelERKSt6vectorINS_7programESaIS1_EEPiiiiiif+0xe2>
   14446:	eb a3                	jmp    143eb <_ZN7genetic17tournament_kernelERKSt6vectorINS_7programESaIS1_EEPiiiiiif+0xeb>
   14448:	f3 0f 10 4c 24 04    	movss  0x4(%rsp),%xmm1
                    if (opt_score > curr_score) {
   1444e:	0f 2e c8             	ucomiss %xmm0,%xmm1
   14451:	77 8f                	ja     143e2 <_ZN7genetic17tournament_kernelERKSt6vectorINS_7programESaIS1_EEPiiiiiif+0xe2>
   14453:	eb 96                	jmp    143eb <_ZN7genetic17tournament_kernelERKSt6vectorINS_7programESaIS1_EEPiiiiiif+0xeb>
        }
    }
   14455:	48 83 c4 28          	add    $0x28,%rsp
   14459:	5b                   	pop    %rbx
   1445a:	41 5c                	pop    %r12
   1445c:	41 5d                	pop    %r13
   1445e:	41 5e                	pop    %r14
   14460:	41 5f                	pop    %r15
   14462:	5d                   	pop    %rbp
   14463:	c3                   	retq   
            throw std::invalid_argument("Range error: b must be >= a");
   14464:	bf 10 00 00 00       	mov    $0x10,%edi
   14469:	e8 72 32 00 00       	callq  176e0 <__cxa_allocate_exception@plt>
   1446e:	48 89 c3             	mov    %rax,%rbx
   14471:	48 8d 35 a6 e7 fe ff 	lea    -0x1185a(%rip),%rsi        # 2c1e <_IO_stdin_used+0x52e>
   14478:	48 89 c7             	mov    %rax,%rdi
   1447b:	e8 f0 31 00 00       	callq  17670 <_ZNSt16invalid_argumentC1EPKc@plt>
   14480:	48 8b 35 59 49 00 00 	mov    0x4959(%rip),%rsi        # 18de0 <_ZTISt16invalid_argument@GLIBCXX_3.4>
   14487:	48 8b 15 1a 49 00 00 	mov    0x491a(%rip),%rdx        # 18da8 <_ZNSt16invalid_argumentD1Ev@GLIBCXX_3.4>
   1448e:	48 89 df             	mov    %rbx,%rdi
   14491:	e8 fa 31 00 00       	callq  17690 <__cxa_throw@plt>
   14496:	49 89 c6             	mov    %rax,%r14
   14499:	48 89 df             	mov    %rbx,%rdi
   1449c:	e8 4f 33 00 00       	callq  177f0 <__cxa_free_exception@plt>
   144a1:	4c 89 f7             	mov    %r14,%rdi
   144a4:	e8 c7 34 00 00       	callq  17970 <_Unwind_Resume@plt>
   144a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000144b0 <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii>:
     * @param seed            Random seed for generators
     */
    void cpp_evolve(const std::vector<program>& h_oldprogs, std::vector<program>& h_nextprogs,
                    const int n_samples, const float* data, const float* y,
                    const float* sample_weights, const param& params, const int generation,
                    const int seed) {
   144b0:	55                   	push   %rbp
   144b1:	41 57                	push   %r15
   144b3:	41 56                	push   %r14
   144b5:	41 55                	push   %r13
   144b7:	41 54                	push   %r12
   144b9:	53                   	push   %rbx
   144ba:	48 83 ec 48          	sub    $0x48,%rsp
   144be:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
   144c3:	4d 89 c5             	mov    %r8,%r13
   144c6:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
   144cb:	89 54 24 24          	mov    %edx,0x24(%rsp)
   144cf:	49 89 f4             	mov    %rsi,%r12
   144d2:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
   144d7:	8b bc 24 90 00 00 00 	mov    0x90(%rsp),%edi
   144de:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
   144e5:	00 
   144e6:	8b 9c 24 88 00 00 00 	mov    0x88(%rsp),%ebx
        auto n_progs   = params.population_size;
   144ed:	8b 28                	mov    (%rax),%ebp
        auto tour_size = params.tournament_size;
   144ef:	44 8b 70 10          	mov    0x10(%rax),%r14d
    explicit PhiloxEngine(uint32_t seed) { philox_seed(seed); }
   144f3:	e8 28 21 00 00       	callq  16620 <philox_seed>

        uniform_real_distribution_custom<float> dist_U(0.0f, 1.0f);

        // Build, Mutate and Run Tournaments

        if (generation == 1) {
   144f8:	83 fb 01             	cmp    $0x1,%ebx
   144fb:	4c 89 6c 24 40       	mov    %r13,0x40(%rsp)
   14500:	48 89 6c 24 28       	mov    %rbp,0x28(%rsp)
   14505:	75 3e                	jne    14545 <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0x95>
   14507:	85 ed                	test   %ebp,%ebp
            // Build random programs for the first generation
            for (auto i = 0; i < n_progs; ++i) {
   14509:	0f 8e eb 02 00 00    	jle    147fa <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0x34a>
   1450f:	48 8b 5c 24 28       	mov    0x28(%rsp),%rbx
   14514:	48 c1 e3 05          	shl    $0x5,%rbx
   14518:	45 31 ff             	xor    %r15d,%r15d
   1451b:	4c 8d 74 24 0f       	lea    0xf(%rsp),%r14
   14520:	49 8b 3c 24          	mov    (%r12),%rdi
                build_program(h_nextprogs[i], params, h_gen);
   14524:	4c 01 ff             	add    %r15,%rdi
   14527:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
   1452e:	00 
   1452f:	4c 89 f2             	mov    %r14,%rdx
   14532:	e8 39 b3 ff ff       	callq  f870 <_ZN7genetic13build_programERNS_7programERKNS_5paramER12PhiloxEngine>
            for (auto i = 0; i < n_progs; ++i) {
   14537:	49 83 c7 20          	add    $0x20,%r15
   1453b:	4c 39 fb             	cmp    %r15,%rbx
   1453e:	75 e0                	jne    14520 <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0x70>
   14540:	e9 b5 02 00 00       	jmpq   147fa <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0x34a>
   14545:	44 89 74 24 20       	mov    %r14d,0x20(%rsp)
   1454a:	41 89 ef             	mov    %ebp,%r15d
   1454d:	85 ed                	test   %ebp,%ebp
            }

        } else {
            // Set mutation type

            for (auto i = 0; i < n_progs; ++i) {
   1454f:	0f 8e d4 00 00 00    	jle    14629 <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0x179>
   14555:	48 89 eb             	mov    %rbp,%rbx
   14558:	48 c1 e3 05          	shl    $0x5,%rbx
   1455c:	45 31 f6             	xor    %r14d,%r14d
   1455f:	41 89 ef             	mov    %ebp,%r15d
   14562:	eb 29                	jmp    1458d <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0xdd>
   14564:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
   1456b:	00 00 00 00 00 
	return *(this->_M_impl._M_start + __n);
   14570:	49 8b 04 24          	mov    (%r12),%rax
                float prob = dist_U(h_gen);

                if (prob < mut_probs[0]) {
                    h_nextprogs[i].mut_type = mutation_t::crossover;
   14574:	42 c7 44 30 18 01 00 	movl   $0x1,0x18(%rax,%r14,1)
   1457b:	00 00 
                    n_tours++;
   1457d:	41 ff c7             	inc    %r15d
            for (auto i = 0; i < n_progs; ++i) {
   14580:	49 83 c6 20          	add    $0x20,%r14
   14584:	4c 39 f3             	cmp    %r14,%rbx
   14587:	0f 84 9c 00 00 00    	je     14629 <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0x179>
    uint32_t                  operator()() { return philox_random_uint32(); }
   1458d:	e8 5e 24 00 00       	callq  169f0 <philox_random_uint32>
        double u = x * (1.0 / (static_cast<double>(std::numeric_limits<uint32_t>::max()) + 1.0));
   14592:	89 c0                	mov    %eax,%eax
   14594:	0f 57 c0             	xorps  %xmm0,%xmm0
   14597:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
   1459c:	f2 0f 59 05 04 e9 fe 	mulsd  -0x116fc(%rip),%xmm0        # 2ea8 <_IO_stdin_used+0x7b8>
   145a3:	ff 
        return a_ + static_cast<result_type>((b_ - a_) * u);
   145a4:	f2 0f 5a c0          	cvtsd2ss %xmm0,%xmm0
   145a8:	f3 0f 58 05 24 e1 fe 	addss  -0x11edc(%rip),%xmm0        # 26d4 <_IO_stdin_used-0x1c>
   145af:	ff 
                if (prob < mut_probs[0]) {
   145b0:	f3 0f 10 0d 38 5b 00 	movss  0x5b38(%rip),%xmm1        # 1a0f0 <_ZN7geneticL9mut_probsE.0>
   145b7:	00 
   145b8:	0f 2e c8             	ucomiss %xmm0,%xmm1
   145bb:	77 b3                	ja     14570 <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0xc0>
                } else if (prob < mut_probs[1]) {
   145bd:	f3 0f 10 0d 3b 5b 00 	movss  0x5b3b(%rip),%xmm1        # 1a100 <_ZN7geneticL9mut_probsE.1>
   145c4:	00 
   145c5:	0f 2e c8             	ucomiss %xmm0,%xmm1
   145c8:	76 16                	jbe    145e0 <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0x130>
   145ca:	49 8b 04 24          	mov    (%r12),%rax
                    h_nextprogs[i].mut_type = mutation_t::subtree;
   145ce:	42 c7 44 30 18 02 00 	movl   $0x2,0x18(%rax,%r14,1)
   145d5:	00 00 
   145d7:	eb a7                	jmp    14580 <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0xd0>
   145d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
                } else if (prob < mut_probs[2]) {
   145e0:	f3 0f 10 0d 20 5b 00 	movss  0x5b20(%rip),%xmm1        # 1a108 <_ZN7geneticL9mut_probsE.2>
   145e7:	00 
   145e8:	0f 2e c8             	ucomiss %xmm0,%xmm1
   145eb:	76 0f                	jbe    145fc <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0x14c>
   145ed:	49 8b 04 24          	mov    (%r12),%rax
                    h_nextprogs[i].mut_type = mutation_t::hoist;
   145f1:	42 c7 44 30 18 03 00 	movl   $0x3,0x18(%rax,%r14,1)
   145f8:	00 00 
   145fa:	eb 84                	jmp    14580 <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0xd0>
                } else if (prob < mut_probs[3]) {
   145fc:	f3 0f 10 0d 0c 5b 00 	movss  0x5b0c(%rip),%xmm1        # 1a110 <_ZN7geneticL9mut_probsE.3>
   14603:	00 
   14604:	0f 2e c8             	ucomiss %xmm0,%xmm1
   14607:	49 8b 04 24          	mov    (%r12),%rax
   1460b:	76 0e                	jbe    1461b <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0x16b>
                    h_nextprogs[i].mut_type = mutation_t::point;
   1460d:	42 c7 44 30 18 04 00 	movl   $0x4,0x18(%rax,%r14,1)
   14614:	00 00 
   14616:	e9 65 ff ff ff       	jmpq   14580 <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0xd0>
                } else {
                    h_nextprogs[i].mut_type = mutation_t::reproduce;
   1461b:	42 c7 44 30 18 05 00 	movl   $0x5,0x18(%rax,%r14,1)
   14622:	00 00 
   14624:	e9 57 ff ff ff       	jmpq   14580 <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0xd0>
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   14629:	45 85 ff             	test   %r15d,%r15d
   1462c:	0f 88 03 02 00 00    	js     14835 <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0x385>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   14632:	74 3b                	je     1466f <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0x1bf>
   14634:	48 89 eb             	mov    %rbp,%rbx
   14637:	49 63 ef             	movslq %r15d,%rbp
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   1463a:	48 c1 e5 02          	shl    $0x2,%rbp
   1463e:	48 89 ef             	mov    %rbp,%rdi
   14641:	e8 1a 31 00 00       	callq  17760 <_Znwm@plt>
   14646:	49 89 c6             	mov    %rax,%r14
   14649:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      if (__n <= 0)
   1464f:	41 83 ff 01          	cmp    $0x1,%r15d
   14653:	74 15                	je     1466a <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0x1ba>
	      ++__first;
   14655:	4c 89 f7             	mov    %r14,%rdi
   14658:	48 83 c7 04          	add    $0x4,%rdi
      for (; __first != __last; ++__first)
   1465c:	48 83 c5 fc          	add    $0xfffffffffffffffc,%rbp
	*__first = __tmp;
   14660:	31 f6                	xor    %esi,%esi
   14662:	48 89 ea             	mov    %rbp,%rdx
   14665:	e8 26 33 00 00       	callq  17990 <memset@plt>
   1466a:	48 89 dd             	mov    %rbx,%rbp
   1466d:	eb 03                	jmp    14672 <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0x1c2>
   1466f:	45 31 f6             	xor    %r14d,%r14d
        return this->population_size + this->generations;
    }

    int param::criterion() const {
        // Returns 0 if a smaller value is preferred and 1 for the opposite
        switch (this->metric) {
   14672:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
   14679:	00 
   1467a:	8b 88 94 00 00 00    	mov    0x94(%rax),%ecx
   14680:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14685:	48 83 f9 05          	cmp    $0x5,%rcx
   14689:	77 0a                	ja     14695 <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0x1e5>
   1468b:	48 8d 05 d2 e8 fe ff 	lea    -0x1172e(%rip),%rax        # 2f64 <_IO_stdin_used+0x874>
   14692:	8b 04 88             	mov    (%rax,%rcx,4),%eax
                              criterion, params.parsimony_coefficient);
   14695:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
   1469c:	00 
   1469d:	f3 0f 10 81 98 00 00 	movss  0x98(%rcx),%xmm0
   146a4:	00 
            tournament_kernel(h_oldprogs, d_win_indices.data(), seed, n_progs, n_tours, tour_size,
   146a5:	89 04 24             	mov    %eax,(%rsp)
   146a8:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
   146ad:	4c 89 f6             	mov    %r14,%rsi
   146b0:	8b 94 24 90 00 00 00 	mov    0x90(%rsp),%edx
   146b7:	89 e9                	mov    %ebp,%ecx
   146b9:	45 89 f8             	mov    %r15d,%r8d
   146bc:	44 8b 4c 24 20       	mov    0x20(%rsp),%r9d
   146c1:	4c 89 74 24 18       	mov    %r14,0x18(%rsp)
   146c6:	e8 35 fc ff ff       	callq  14300 <_ZN7genetic17tournament_kernelERKSt6vectorINS_7programESaIS1_EEPiiiiiif>
   146cb:	85 ed                	test   %ebp,%ebp
            for (auto pos = 0; pos < n_progs; ++pos) {
   146cd:	0f 8e 18 01 00 00    	jle    147eb <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0x33b>
   146d3:	48 89 e8             	mov    %rbp,%rax
   146d6:	48 c1 e5 05          	shl    $0x5,%rbp
   146da:	31 db                	xor    %ebx,%ebx
   146dc:	4c 8d 3d d5 e7 fe ff 	lea    -0x1182b(%rip),%r15        # 2eb8 <_IO_stdin_used+0x7c8>
   146e3:	4d 89 f5             	mov    %r14,%r13
   146e6:	41 89 c6             	mov    %eax,%r14d
   146e9:	eb 36                	jmp    14721 <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0x271>
	return *(this->_M_impl._M_start + __n);
   146eb:	48 c1 e7 05          	shl    $0x5,%rdi
   146ef:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
   146f4:	48 03 38             	add    (%rax),%rdi
   146f7:	48 89 fe             	mov    %rdi,%rsi
                    h_nextprogs[pos] = h_oldprogs[parent_index];
   146fa:	48 89 d7             	mov    %rdx,%rdi
   146fd:	e8 3e 97 ff ff       	callq  de40 <_ZN7genetic7programaSERKS0_>
   14702:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   14709:	1f 84 00 00 00 00 00 
            for (auto pos = 0; pos < n_progs; ++pos) {
   14710:	49 83 c5 04          	add    $0x4,%r13
   14714:	48 83 c3 20          	add    $0x20,%rbx
   14718:	48 39 dd             	cmp    %rbx,%rbp
   1471b:	0f 84 cf 00 00 00    	je     147f0 <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0x340>
	return *(this->_M_impl._M_start + __n);
   14721:	49 8b 14 24          	mov    (%r12),%rdx
                if (h_nextprogs[pos].mut_type == mutation_t::crossover) {
   14725:	8b 44 1a 18          	mov    0x18(%rdx,%rbx,1),%eax
   14729:	ff c8                	dec    %eax
   1472b:	83 f8 04             	cmp    $0x4,%eax
   1472e:	77 e0                	ja     14710 <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0x260>
   14730:	49 63 7d 00          	movslq 0x0(%r13),%rdi
   14734:	48 01 da             	add    %rbx,%rdx
   14737:	49 63 04 87          	movslq (%r15,%rax,4),%rax
   1473b:	4c 01 f8             	add    %r15,%rax
   1473e:	ff e0                	jmpq   *%rax
                    auto donor_index = d_win_indices[donor_pos];
   14740:	49 63 c6             	movslq %r14d,%rax
   14743:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
   14748:	48 63 34 81          	movslq (%rcx,%rax,4),%rsi
   1474c:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
	return *(this->_M_impl._M_start + __n);
   14751:	48 8b 00             	mov    (%rax),%rax
   14754:	48 c1 e7 05          	shl    $0x5,%rdi
   14758:	48 01 c7             	add    %rax,%rdi
   1475b:	48 c1 e6 05          	shl    $0x5,%rsi
   1475f:	48 01 c6             	add    %rax,%rsi
                    crossover(h_oldprogs[parent_index], h_oldprogs[donor_index], h_nextprogs[pos],
   14762:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
   14769:	00 
   1476a:	4c 8d 44 24 0f       	lea    0xf(%rsp),%r8
   1476f:	e8 ec bd ff ff       	callq  10560 <_ZN7genetic9crossoverERKNS_7programES2_RS0_RKNS_5paramER12PhiloxEngine>
                    donor_pos++;
   14774:	41 ff c6             	inc    %r14d
   14777:	eb 97                	jmp    14710 <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0x260>
   14779:	48 c1 e7 05          	shl    $0x5,%rdi
   1477d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
   14782:	48 03 38             	add    (%rax),%rdi
                    hoist_mutation(h_oldprogs[parent_index], h_nextprogs[pos], params, h_gen);
   14785:	48 89 d6             	mov    %rdx,%rsi
   14788:	48 8b 94 24 80 00 00 	mov    0x80(%rsp),%rdx
   1478f:	00 
   14790:	48 8d 4c 24 0f       	lea    0xf(%rsp),%rcx
   14795:	e8 a6 c0 ff ff       	callq  10840 <_ZN7genetic14hoist_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine>
   1479a:	e9 71 ff ff ff       	jmpq   14710 <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0x260>
   1479f:	48 c1 e7 05          	shl    $0x5,%rdi
   147a3:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
   147a8:	48 03 38             	add    (%rax),%rdi
                    point_mutation(h_oldprogs[parent_index], h_nextprogs[pos], params, h_gen);
   147ab:	48 89 d6             	mov    %rdx,%rsi
   147ae:	48 8b 94 24 80 00 00 	mov    0x80(%rsp),%rdx
   147b5:	00 
   147b6:	48 8d 4c 24 0f       	lea    0xf(%rsp),%rcx
   147bb:	e8 80 b9 ff ff       	callq  10140 <_ZN7genetic14point_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine>
   147c0:	e9 4b ff ff ff       	jmpq   14710 <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0x260>
   147c5:	48 c1 e7 05          	shl    $0x5,%rdi
   147c9:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
   147ce:	48 03 38             	add    (%rax),%rdi
                    subtree_mutation(h_oldprogs[parent_index], h_nextprogs[pos], params, h_gen);
   147d1:	48 89 d6             	mov    %rdx,%rsi
   147d4:	48 8b 94 24 80 00 00 	mov    0x80(%rsp),%rdx
   147db:	00 
   147dc:	48 8d 4c 24 0f       	lea    0xf(%rsp),%rcx
   147e1:	e8 da bf ff ff       	callq  107c0 <_ZN7genetic16subtree_mutationERKNS_7programERS0_RKNS_5paramER12PhiloxEngine>
   147e6:	e9 25 ff ff ff       	jmpq   14710 <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0x260>
	if (__p)
   147eb:	4d 85 f6             	test   %r14,%r14
   147ee:	74 0a                	je     147fa <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0x34a>
   147f0:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
	::operator delete(__p
   147f5:	e8 c6 2e 00 00       	callq  176c0 <_ZdlPv@plt>
   147fa:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
        set_batched_fitness(n_progs, h_nextprogs, params, n_samples, data, y, sample_weights);
   147ff:	48 89 04 24          	mov    %rax,(%rsp)
   14803:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
   14808:	4c 89 e6             	mov    %r12,%rsi
   1480b:	48 8b 94 24 80 00 00 	mov    0x80(%rsp),%rdx
   14812:	00 
   14813:	8b 4c 24 24          	mov    0x24(%rsp),%ecx
   14817:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
   1481c:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
   14821:	e8 2a a8 ff ff       	callq  f050 <_ZN7genetic19set_batched_fitnessEiRSt6vectorINS_7programESaIS1_EERKNS_5paramEiPKfS9_S9_>
    }
   14826:	48 83 c4 48          	add    $0x48,%rsp
   1482a:	5b                   	pop    %rbx
   1482b:	41 5c                	pop    %r12
   1482d:	41 5d                	pop    %r13
   1482f:	41 5e                	pop    %r14
   14831:	41 5f                	pop    %r15
   14833:	5d                   	pop    %rbp
   14834:	c3                   	retq   
	  __throw_length_error(
   14835:	48 8d 3d 87 e5 fe ff 	lea    -0x11a79(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
   1483c:	e8 2f 2d 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
   14841:	48 89 c3             	mov    %rax,%rbx
	if (__p)
   14844:	4d 85 f6             	test   %r14,%r14
   14847:	75 07                	jne    14850 <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0x3a0>
   14849:	eb 0f                	jmp    1485a <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0x3aa>
   1484b:	eb 00                	jmp    1484d <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii+0x39d>
   1484d:	48 89 c3             	mov    %rax,%rbx
   14850:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
   14855:	e8 66 2e 00 00       	callq  176c0 <_ZdlPv@plt>
   1485a:	48 89 df             	mov    %rbx,%rdi
   1485d:	e8 0e 31 00 00       	callq  17970 <_Unwind_Resume@plt>
   14862:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   14869:	1f 84 00 00 00 00 00 

0000000000014870 <_ZNK7genetic5param9criterionEv>:
        switch (this->metric) {
   14870:	8b 8f 94 00 00 00    	mov    0x94(%rdi),%ecx
   14876:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1487b:	48 83 f9 05          	cmp    $0x5,%rcx
   1487f:	77 0a                	ja     1488b <_ZNK7genetic5param9criterionEv+0x1b>
   14881:	48 8d 05 dc e6 fe ff 	lea    -0x11924(%rip),%rax        # 2f64 <_IO_stdin_used+0x874>
   14888:	8b 04 88             	mov    (%rax,%rcx,4),%eax
            case metric_t::spearman:
                return 1;
            default:
                return -1;
        }
    }
   1488b:	c3                   	retq   
   1488c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000014890 <_ZNK7genetic5param11p_reproduceEv>:
        auto sum = this->p_crossover + this->p_subtree_mutation + this->p_hoist_mutation +
   14890:	f3 0f 10 8f 9c 00 00 	movss  0x9c(%rdi),%xmm1
   14897:	00 
   14898:	f3 0f 58 8f a0 00 00 	addss  0xa0(%rdi),%xmm1
   1489f:	00 
   148a0:	f3 0f 58 8f a4 00 00 	addss  0xa4(%rdi),%xmm1
   148a7:	00 
   148a8:	f3 0f 58 8f a8 00 00 	addss  0xa8(%rdi),%xmm1
   148af:	00 
   148b0:	f3 0f 10 15 18 de fe 	movss  -0x121e8(%rip),%xmm2        # 26d0 <_IO_stdin_used-0x20>
   148b7:	ff 
        auto ret = 1.f - sum;
   148b8:	0f 28 c2             	movaps %xmm2,%xmm0
   148bb:	f3 0f 5c c1          	subss  %xmm1,%xmm0
        return fmaxf(0.f, fminf(ret, 1.f));
   148bf:	f3 0f 5d c2          	minss  %xmm2,%xmm0
   148c3:	0f 57 c9             	xorps  %xmm1,%xmm1
   148c6:	f3 0f 5f c1          	maxss  %xmm1,%xmm0
   148ca:	c3                   	retq   
   148cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000148d0 <_ZNK7genetic5param12max_programsEv>:
        return this->population_size + this->generations;
   148d0:	8b 47 0c             	mov    0xc(%rdi),%eax
   148d3:	03 07                	add    (%rdi),%eax
   148d5:	c3                   	retq   
   148d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   148dd:	00 00 00 

00000000000148e0 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE>:

    std::string stringify(const program& prog) {
   148e0:	55                   	push   %rbp
   148e1:	41 57                	push   %r15
   148e3:	41 56                	push   %r14
   148e5:	41 55                	push   %r13
   148e7:	41 54                	push   %r12
   148e9:	53                   	push   %rbx
   148ea:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
   148f1:	49 89 f4             	mov    %rsi,%r12
   148f4:	48 89 fb             	mov    %rdi,%rbx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   148f7:	48 8d 47 10          	lea    0x10(%rdi),%rax
   148fb:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
   14902:	00 
	: allocator_type(__a), _M_p(__dat) { }
   14903:	48 89 07             	mov    %rax,(%rdi)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   14906:	66 c7 47 10 28 20    	movw   $0x2028,0x10(%rdi)
      { _M_string_length = __length; }
   1490c:	48 c7 47 08 02 00 00 	movq   $0x2,0x8(%rdi)
   14913:	00 
      { __c1 = __c2; }
   14914:	c6 47 12 00          	movb   $0x0,0x12(%rdi)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   14918:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
   1491f:	00 
	: allocator_type(__a), _M_p(__dat) { }
   14920:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
      { _M_string_length = __length; }
   14925:	48 c7 44 24 78 00 00 	movq   $0x0,0x78(%rsp)
   1492c:	00 00 
   1492e:	c6 84 24 80 00 00 00 	movb   $0x0,0x80(%rsp)
   14935:	00 
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   14936:	0f 57 c0             	xorps  %xmm0,%xmm0
   14939:	0f 29 44 24 60       	movaps %xmm0,0x60(%rsp)
   1493e:	0f 29 44 24 50       	movaps %xmm0,0x50(%rsp)
   14943:	0f 29 44 24 40       	movaps %xmm0,0x40(%rsp)
   14948:	0f 29 44 24 30       	movaps %xmm0,0x30(%rsp)
   1494d:	0f 29 44 24 20       	movaps %xmm0,0x20(%rsp)
   14952:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
      { _M_initialize_map(0); }
   14957:	31 f6                	xor    %esi,%esi
   14959:	e8 72 f3 ff ff       	callq  13cd0 <_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEm>
        std::string     eqn   = "( ";
        std::string     delim = "";
        std::stack<int> ar_stack;
        ar_stack.push(0);
   1495e:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
	if (this->_M_impl._M_finish._M_cur
   14965:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
	    != this->_M_impl._M_finish._M_last - 1)
   1496a:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
   1496f:	48 83 c1 fc          	add    $0xfffffffffffffffc,%rcx
   14973:	48 39 c8             	cmp    %rcx,%rax
	if (this->_M_impl._M_finish._M_cur
   14976:	74 11                	je     14989 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa9>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   14978:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
	    ++this->_M_impl._M_finish._M_cur;
   1497e:	48 83 c0 04          	add    $0x4,%rax
   14982:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
   14987:	eb 0d                	jmp    14996 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb6>
   14989:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
   1498e:	48 89 e6             	mov    %rsp,%rsi
	  _M_push_back_aux(std::forward<_Args>(__args)...);
   14991:	e8 aa f4 ff ff       	callq  13e40 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJiEEEvDpOT_>
   14996:	49 bf fc ff ff ff ff 	movabs $0x3ffffffffffffffc,%r15
   1499d:	ff ff 3f 

        for (int i = 0; i < prog.len; ++i) {
   149a0:	41 83 7c 24 08 00    	cmpl   $0x0,0x8(%r12)
   149a6:	0f 8e f2 09 00 00    	jle    1539e <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xabe>
   149ac:	45 31 ed             	xor    %r13d,%r13d
   149af:	49 8d 47 03          	lea    0x3(%r15),%rax
   149b3:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
   149ba:	00 
   149bb:	4c 89 a4 24 a0 00 00 	mov    %r12,0xa0(%rsp)
   149c2:	00 
   149c3:	eb 3a                	jmp    149ff <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x11f>
   149c5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
   149cc:	00 00 00 00 
      { return _M_string_length; }
   149d0:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
	return _M_replace(size_type(0), this->size(), __s,
   149d5:	41 b8 02 00 00 00    	mov    $0x2,%r8d
   149db:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
   149e0:	31 f6                	xor    %esi,%esi
   149e2:	48 8d 0d 6c df fe ff 	lea    -0x12094(%rip),%rcx        # 2955 <_IO_stdin_used+0x265>
   149e9:	e8 52 2c 00 00       	callq  17640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
   149ee:	49 ff c5             	inc    %r13
   149f1:	49 63 44 24 08       	movslq 0x8(%r12),%rax
   149f6:	49 39 c5             	cmp    %rax,%r13
   149f9:	0f 8d 9f 09 00 00    	jge    1539e <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xabe>
	return get()[__i];
   149ff:	4d 89 ee             	mov    %r13,%r14
   14a02:	49 c1 e6 04          	shl    $0x4,%r14
   14a06:	49 8b 3c 24          	mov    (%r12),%rdi
   14a0a:	4c 01 f7             	add    %r14,%rdi
            if (prog.nodes[i].is_terminal()) {
   14a0d:	e8 3e 24 00 00       	callq  16e50 <_ZNK7genetic4node11is_terminalEv>
   14a12:	84 c0                	test   %al,%al
   14a14:	0f 84 96 00 00 00    	je     14ab0 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x1d0>
      { return _M_dataplus._M_p; }
   14a1a:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
      { return _M_string_length; }
   14a1f:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
      { return _M_append(__str._M_data(), __str.size()); }
   14a24:	48 89 df             	mov    %rbx,%rdi
   14a27:	e8 54 2b 00 00       	callq  17580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   14a2c:	49 8b 04 24          	mov    (%r12),%rax
                eqn += delim;
                if (prog.nodes[i].t == node::type::variable) {
   14a30:	42 80 3c 30 00       	cmpb   $0x0,(%rax,%r14,1)
   14a35:	0f 84 ab 00 00 00    	je     14ae6 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x206>
                    // variable
                    eqn += "X";
                    eqn += std::to_string(prog.nodes[i].fid);
                } else {
                    // const
                    eqn += std::to_string(prog.nodes[i].val);
   14a3b:	f3 42 0f 10 44 30 08 	movss  0x8(%rax,%r14,1),%xmm0
  to_string(float __val)
  {
    const int __n = 
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
					   "%f", __val);
   14a42:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
   14a46:	ba 3a 00 00 00       	mov    $0x3a,%edx
   14a4b:	49 89 e6             	mov    %rsp,%r14
   14a4e:	4c 89 f7             	mov    %r14,%rdi
   14a51:	48 8b 35 98 43 00 00 	mov    0x4398(%rip),%rsi        # 18df0 <vsnprintf@GLIBC_2.2.5>
   14a58:	48 8d 0d 3f de fe ff 	lea    -0x121c1(%rip),%rcx        # 289e <_IO_stdin_used+0x1ae>
   14a5f:	b0 01                	mov    $0x1,%al
   14a61:	e8 aa 13 00 00       	callq  15e10 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z>
      { return _M_dataplus._M_p; }
   14a66:	48 8b 34 24          	mov    (%rsp),%rsi
      { return _M_string_length; }
   14a6a:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
      { return _M_append(__str._M_data(), __str.size()); }
   14a6f:	48 89 df             	mov    %rbx,%rdi
   14a72:	e8 09 2b 00 00       	callq  17580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
      { return _M_dataplus._M_p; }
   14a77:	48 8b 3c 24          	mov    (%rsp),%rdi
      { return _M_data() == _M_local_data(); }
   14a7b:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
   14a80:	48 39 c7             	cmp    %rax,%rdi
	if (!_M_is_local())
   14a83:	74 05                	je     14a8a <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x1aa>
	::operator delete(__p
   14a85:	e8 36 2c 00 00       	callq  176c0 <_ZdlPv@plt>
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
   14a8a:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
	if (_M_cur == _M_first)
   14a8f:	48 3b 7c 24 58       	cmp    0x58(%rsp),%rdi
   14a94:	0f 84 49 01 00 00    	je     14be3 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x303>
                }

                int end_elem = ar_stack.top();
   14a9a:	8b 6f fc             	mov    -0x4(%rdi),%ebp
	--_M_cur;
   14a9d:	48 83 c7 fc          	add    $0xfffffffffffffffc,%rdi
	    != this->_M_impl._M_finish._M_last - 1)
   14aa1:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
   14aa6:	e9 76 01 00 00       	jmpq   14c21 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x341>
   14aab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   14ab0:	49 8b 3c 24          	mov    (%r12),%rdi
	return get()[__i];
   14ab4:	4c 01 f7             	add    %r14,%rdi
                    ar_stack.pop();
                    ar_stack.push(end_elem - 1);
                }
                delim = ", ";
            } else {
                ar_stack.push(prog.nodes[i].arity());
   14ab7:	e8 a4 23 00 00       	callq  16e60 <_ZNK7genetic4node5arityEv>
   14abc:	89 04 24             	mov    %eax,(%rsp)
	if (this->_M_impl._M_finish._M_cur
   14abf:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
	    != this->_M_impl._M_finish._M_last - 1)
   14ac4:	48 8b 54 24 60       	mov    0x60(%rsp),%rdx
   14ac9:	48 83 c2 fc          	add    $0xfffffffffffffffc,%rdx
   14acd:	48 39 d1             	cmp    %rdx,%rcx
	if (this->_M_impl._M_finish._M_cur
   14ad0:	0f 84 a7 00 00 00    	je     14b7d <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x29d>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   14ad6:	89 01                	mov    %eax,(%rcx)
	    ++this->_M_impl._M_finish._M_cur;
   14ad8:	48 83 c1 04          	add    $0x4,%rcx
   14adc:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
   14ae1:	e9 a4 00 00 00       	jmpq   14b8a <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x2aa>
   14ae6:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
   14aed:	00 
	if (this->max_size() - (this->size() - __n1) < __n2)
   14aee:	48 39 43 08          	cmp    %rax,0x8(%rbx)
   14af2:	0f 84 4c 09 00 00    	je     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
	return _M_append(__s, __n);
   14af8:	ba 01 00 00 00       	mov    $0x1,%edx
   14afd:	48 89 df             	mov    %rbx,%rdi
   14b00:	48 8d 35 08 de fe ff 	lea    -0x121f8(%rip),%rsi        # 290f <_IO_stdin_used+0x21f>
   14b07:	e8 74 2a 00 00       	callq  17580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   14b0c:	49 8b 04 24          	mov    (%r12),%rax
                    eqn += std::to_string(prog.nodes[i].fid);
   14b10:	46 8b 64 30 04       	mov    0x4(%rax,%r14,1),%r12d
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   14b15:	45 89 e6             	mov    %r12d,%r14d
   14b18:	41 f7 de             	neg    %r14d
   14b1b:	45 0f 48 f4          	cmovs  %r12d,%r14d
   14b1f:	bd 01 00 00 00       	mov    $0x1,%ebp
      const unsigned __b2 = __base  * __base;
      const unsigned __b3 = __b2 * __base;
      const unsigned long __b4 = __b3 * __base;
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
   14b24:	41 83 fe 0a          	cmp    $0xa,%r14d
   14b28:	0f 82 62 02 00 00    	jb     14d90 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x4b0>
   14b2e:	bd 04 00 00 00       	mov    $0x4,%ebp
   14b33:	44 89 f0             	mov    %r14d,%eax
   14b36:	ba 59 17 b7 d1       	mov    $0xd1b71759,%edx
   14b3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	  if (__value < __b2) return __n + 1;
   14b40:	83 f8 63             	cmp    $0x63,%eax
   14b43:	0f 86 40 02 00 00    	jbe    14d89 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x4a9>
	  if (__value < __b3) return __n + 2;
   14b49:	3d e7 03 00 00       	cmp    $0x3e7,%eax
   14b4e:	0f 86 3a 02 00 00    	jbe    14d8e <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x4ae>
	  if (__value < __b4) return __n + 3;
   14b54:	3d 10 27 00 00       	cmp    $0x2710,%eax
   14b59:	0f 82 31 02 00 00    	jb     14d90 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x4b0>
	  __value /= __b4;
   14b5f:	89 c1                	mov    %eax,%ecx
   14b61:	48 0f af ca          	imul   %rdx,%rcx
   14b65:	48 c1 e9 2d          	shr    $0x2d,%rcx
	  if (__value < (unsigned)__base) return __n;
   14b69:	83 c5 04             	add    $0x4,%ebp
   14b6c:	3d 9f 86 01 00       	cmp    $0x1869f,%eax
   14b71:	89 c8                	mov    %ecx,%eax
   14b73:	77 cb                	ja     14b40 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x260>
    string __str(__neg + __len, '-');
   14b75:	83 c5 fd             	add    $0xfffffffd,%ebp
   14b78:	e9 13 02 00 00       	jmpq   14d90 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x4b0>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
   14b7d:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
   14b82:	48 89 e6             	mov    %rsp,%rsi
   14b85:	e8 b6 f2 ff ff       	callq  13e40 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJiEEEvDpOT_>
      { return _M_dataplus._M_p; }
   14b8a:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
      { return _M_string_length; }
   14b8f:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
      { return _M_append(__str._M_data(), __str.size()); }
   14b94:	48 89 df             	mov    %rbx,%rdi
   14b97:	e8 e4 29 00 00       	callq  17580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
   14b9c:	49 8b 04 24          	mov    (%r12),%rax
                eqn += delim;
                switch (prog.nodes[i].t) {
   14ba0:	42 0f b6 04 30       	movzbl (%rax,%r14,1),%eax
   14ba5:	83 c0 fe             	add    $0xfffffffe,%eax
   14ba8:	83 f8 1f             	cmp    $0x1f,%eax
   14bab:	0f 87 a7 07 00 00    	ja     15358 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa78>
   14bb1:	48 8d 0d 14 e3 fe ff 	lea    -0x11cec(%rip),%rcx        # 2ecc <_IO_stdin_used+0x7dc>
   14bb8:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
   14bbc:	48 01 c8             	add    %rcx,%rax
   14bbf:	ff e0                	jmpq   *%rax
      { return _M_string_length; }
   14bc1:	48 8b 43 08          	mov    0x8(%rbx),%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
   14bc5:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
   14bc9:	4c 39 f8             	cmp    %r15,%rax
   14bcc:	0f 84 72 08 00 00    	je     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   14bd2:	ba 04 00 00 00       	mov    $0x4,%edx
   14bd7:	48 8d 35 86 e0 fe ff 	lea    -0x11f7a(%rip),%rsi        # 2c64 <_IO_stdin_used+0x574>
   14bde:	e9 6d 07 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
   14be3:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
	_M_first = *__new_node;
   14be8:	48 8b 40 f8          	mov    -0x8(%rax),%rax
                int end_elem = ar_stack.top();
   14bec:	8b a8 fc 01 00 00    	mov    0x1fc(%rax),%ebp
	::operator delete(__p
   14bf2:	e8 c9 2a 00 00       	callq  176c0 <_ZdlPv@plt>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
   14bf7:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
   14bfc:	48 8d 48 f8          	lea    -0x8(%rax),%rcx
	_M_node = __new_node;
   14c00:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
	_M_first = *__new_node;
   14c05:	48 8b 78 f8          	mov    -0x8(%rax),%rdi
   14c09:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
	_M_last = _M_first + difference_type(_S_buffer_size());
   14c0e:	48 8d 87 00 02 00 00 	lea    0x200(%rdi),%rax
   14c15:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
   14c1a:	48 81 c7 fc 01 00 00 	add    $0x1fc,%rdi
   14c21:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
                ar_stack.push(end_elem - 1);
   14c26:	ff cd                	dec    %ebp
   14c28:	89 2c 24             	mov    %ebp,(%rsp)
	    != this->_M_impl._M_finish._M_last - 1)
   14c2b:	48 83 c0 fc          	add    $0xfffffffffffffffc,%rax
   14c2f:	48 39 c7             	cmp    %rax,%rdi
	if (this->_M_impl._M_finish._M_cur
   14c32:	0f 84 3f 01 00 00    	je     14d77 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x497>
   14c38:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   14c3f:	00 
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   14c40:	89 2f                	mov    %ebp,(%rdi)
	    ++this->_M_impl._M_finish._M_cur;
   14c42:	48 83 c7 04          	add    $0x4,%rdi
   14c46:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
   14c4b:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
	if (_M_cur == _M_first)
   14c50:	48 3b 7c 24 58       	cmp    0x58(%rsp),%rdi
   14c55:	74 19                	je     14c70 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x390>
                while (ar_stack.top() == 0) {
   14c57:	83 7f fc 00          	cmpl   $0x0,-0x4(%rdi)
   14c5b:	0f 85 6f fd ff ff    	jne    149d0 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xf0>
   14c61:	48 83 c7 fc          	add    $0xfffffffffffffffc,%rdi
   14c65:	eb 4e                	jmp    14cb5 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x3d5>
   14c67:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   14c6e:	00 00 
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
   14c70:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
	_M_first = *__new_node;
   14c75:	48 8b 40 f8          	mov    -0x8(%rax),%rax
   14c79:	83 b8 fc 01 00 00 00 	cmpl   $0x0,0x1fc(%rax)
   14c80:	0f 85 4a fd ff ff    	jne    149d0 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xf0>
	::operator delete(__p
   14c86:	e8 35 2a 00 00       	callq  176c0 <_ZdlPv@plt>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
   14c8b:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
   14c90:	48 8d 48 f8          	lea    -0x8(%rax),%rcx
	_M_node = __new_node;
   14c94:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
	_M_first = *__new_node;
   14c99:	48 8b 78 f8          	mov    -0x8(%rax),%rdi
   14c9d:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
	_M_last = _M_first + difference_type(_S_buffer_size());
   14ca2:	48 8d 87 00 02 00 00 	lea    0x200(%rdi),%rax
   14ca9:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
   14cae:	48 81 c7 fc 01 00 00 	add    $0x1fc,%rdi
   14cb5:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
      { return _M_string_length; }
   14cba:	48 8b 43 08          	mov    0x8(%rbx),%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
   14cbe:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
   14cc2:	49 8d 4f 02          	lea    0x2(%r15),%rcx
   14cc6:	48 39 c8             	cmp    %rcx,%rax
   14cc9:	0f 84 69 07 00 00    	je     15438 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb58>
	return _M_append(__s, __n);
   14ccf:	ba 02 00 00 00       	mov    $0x2,%edx
   14cd4:	48 89 df             	mov    %rbx,%rdi
   14cd7:	48 8d 35 5c df fe ff 	lea    -0x120a4(%rip),%rsi        # 2c3a <_IO_stdin_used+0x54a>
   14cde:	e8 9d 28 00 00       	callq  17580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
      { return __x._M_cur == __y._M_cur; }
   14ce3:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
   14ce8:	48 3b 7c 24 30       	cmp    0x30(%rsp),%rdi
                    if (ar_stack.empty()) {
   14ced:	0f 84 dd fc ff ff    	je     149d0 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xf0>
	if (_M_cur == _M_first)
   14cf3:	48 3b 7c 24 58       	cmp    0x58(%rsp),%rdi
   14cf8:	74 16                	je     14d10 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x430>
                    end_elem = ar_stack.top();
   14cfa:	8b 6f fc             	mov    -0x4(%rdi),%ebp
	--_M_cur;
   14cfd:	48 83 c7 fc          	add    $0xfffffffffffffffc,%rdi
	    != this->_M_impl._M_finish._M_last - 1)
   14d01:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
   14d06:	eb 46                	jmp    14d4e <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x46e>
   14d08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   14d0f:	00 
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
   14d10:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
	_M_first = *__new_node;
   14d15:	48 8b 40 f8          	mov    -0x8(%rax),%rax
   14d19:	8b a8 fc 01 00 00    	mov    0x1fc(%rax),%ebp
   14d1f:	e8 9c 29 00 00       	callq  176c0 <_ZdlPv@plt>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
   14d24:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
   14d29:	48 8d 48 f8          	lea    -0x8(%rax),%rcx
	_M_node = __new_node;
   14d2d:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
	_M_first = *__new_node;
   14d32:	48 8b 78 f8          	mov    -0x8(%rax),%rdi
   14d36:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
	_M_last = _M_first + difference_type(_S_buffer_size());
   14d3b:	48 8d 87 00 02 00 00 	lea    0x200(%rdi),%rax
   14d42:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
   14d47:	48 81 c7 fc 01 00 00 	add    $0x1fc,%rdi
   14d4e:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
                    ar_stack.push(end_elem - 1);
   14d53:	ff cd                	dec    %ebp
   14d55:	89 2c 24             	mov    %ebp,(%rsp)
	    != this->_M_impl._M_finish._M_last - 1)
   14d58:	48 83 c0 fc          	add    $0xfffffffffffffffc,%rax
   14d5c:	48 39 c7             	cmp    %rax,%rdi
	if (this->_M_impl._M_finish._M_cur
   14d5f:	0f 85 db fe ff ff    	jne    14c40 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x360>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
   14d65:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
   14d6a:	4c 89 f6             	mov    %r14,%rsi
   14d6d:	e8 ce f0 ff ff       	callq  13e40 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJiEEEvDpOT_>
   14d72:	e9 d4 fe ff ff       	jmpq   14c4b <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x36b>
   14d77:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
   14d7c:	4c 89 f6             	mov    %r14,%rsi
   14d7f:	e8 bc f0 ff ff       	callq  13e40 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJiEEEvDpOT_>
   14d84:	e9 c2 fe ff ff       	jmpq   14c4b <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x36b>
	  if (__value < __b2) return __n + 1;
   14d89:	83 c5 fe             	add    $0xfffffffe,%ebp
   14d8c:	eb 02                	jmp    14d90 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x4b0>
	  if (__value < __b3) return __n + 2;
   14d8e:	ff cd                	dec    %ebp
    string __str(__neg + __len, '-');
   14d90:	41 c1 ec 1f          	shr    $0x1f,%r12d
   14d94:	41 8d 34 2c          	lea    (%r12,%rbp,1),%esi
	: allocator_type(__a), _M_p(__dat) { }
   14d98:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
   14d9d:	48 89 04 24          	mov    %rax,(%rsp)
      { _M_construct(__n, __c); }
   14da1:	48 89 e7             	mov    %rsp,%rdi
   14da4:	ba 2d 00 00 00       	mov    $0x2d,%edx
   14da9:	e8 32 2a 00 00       	callq  177e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@plt>
	return _M_data()[__pos];
   14dae:	4c 03 24 24          	add    (%rsp),%r12
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
      while (__val >= 100)
   14db2:	41 83 fe 64          	cmp    $0x64,%r14d
   14db6:	48 8d 3d c3 e1 fe ff 	lea    -0x11e3d(%rip),%rdi        # 2f80 <_IO_stdin_used+0x890>
   14dbd:	72 69                	jb     14e28 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x548>
   14dbf:	83 c5 fe             	add    $0xfffffffe,%ebp
   14dc2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   14dc9:	1f 84 00 00 00 00 00 
	{
	  auto const __num = (__val % 100) * 2;
   14dd0:	8d 4d 01             	lea    0x1(%rbp),%ecx
	  __val /= 100;
   14dd3:	44 89 f0             	mov    %r14d,%eax
   14dd6:	48 69 c0 1f 85 eb 51 	imul   $0x51eb851f,%rax,%rax
   14ddd:	48 c1 e8 25          	shr    $0x25,%rax
   14de1:	6b d0 64             	imul   $0x64,%eax,%edx
   14de4:	44 89 f6             	mov    %r14d,%esi
   14de7:	29 d6                	sub    %edx,%esi
	  __first[__pos] = __digits[__num + 1];
	  __first[__pos - 1] = __digits[__num];
   14de9:	0f b6 14 77          	movzbl (%rdi,%rsi,2),%edx
	  __first[__pos] = __digits[__num + 1];
   14ded:	0f b6 74 77 01       	movzbl 0x1(%rdi,%rsi,2),%esi
   14df2:	41 88 34 0c          	mov    %sil,(%r12,%rcx,1)
	  __first[__pos - 1] = __digits[__num];
   14df6:	89 e9                	mov    %ebp,%ecx
   14df8:	41 88 14 0c          	mov    %dl,(%r12,%rcx,1)
      while (__val >= 100)
   14dfc:	83 c5 fe             	add    $0xfffffffe,%ebp
   14dff:	41 81 fe 0f 27 00 00 	cmp    $0x270f,%r14d
   14e06:	41 89 c6             	mov    %eax,%r14d
   14e09:	77 c5                	ja     14dd0 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x4f0>
	  __pos -= 2;
	}
      if (__val >= 10)
   14e0b:	83 f8 0a             	cmp    $0xa,%eax
   14e0e:	72 20                	jb     14e30 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x550>
   14e10:	89 c0                	mov    %eax,%eax
	{
	  auto const __num = __val * 2;
   14e12:	48 8d 0c 00          	lea    (%rax,%rax,1),%rcx
   14e16:	89 c9                	mov    %ecx,%ecx
	  __first[1] = __digits[__num + 1];
   14e18:	0f b6 4c 39 01       	movzbl 0x1(%rcx,%rdi,1),%ecx
   14e1d:	41 88 4c 24 01       	mov    %cl,0x1(%r12)
	  __first[0] = __digits[__num];
   14e22:	0f b6 04 47          	movzbl (%rdi,%rax,2),%eax
   14e26:	eb 0a                	jmp    14e32 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x552>
   14e28:	44 89 f0             	mov    %r14d,%eax
      if (__val >= 10)
   14e2b:	83 f8 0a             	cmp    $0xa,%eax
   14e2e:	73 e0                	jae    14e10 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x530>
	}
      else
	__first[0] = '0' + __val;
   14e30:	0c 30                	or     $0x30,%al
   14e32:	49 89 e6             	mov    %rsp,%r14
   14e35:	41 88 04 24          	mov    %al,(%r12)
      { return _M_dataplus._M_p; }
   14e39:	48 8b 34 24          	mov    (%rsp),%rsi
      { return _M_string_length; }
   14e3d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
      { return _M_append(__str._M_data(), __str.size()); }
   14e42:	48 89 df             	mov    %rbx,%rdi
   14e45:	e8 36 27 00 00       	callq  17580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
      { return _M_dataplus._M_p; }
   14e4a:	48 8b 3c 24          	mov    (%rsp),%rdi
      { return _M_data() == _M_local_data(); }
   14e4e:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
   14e53:	48 39 c7             	cmp    %rax,%rdi
   14e56:	4c 8b a4 24 a0 00 00 	mov    0xa0(%rsp),%r12
   14e5d:	00 
	if (!_M_is_local())
   14e5e:	0f 85 21 fc ff ff    	jne    14a85 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x1a5>
   14e64:	e9 21 fc ff ff       	jmpq   14a8a <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x1aa>
   14e69:	48 8b 43 08          	mov    0x8(%rbx),%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
   14e6d:	48 b9 05 00 00 00 00 	movabs $0xc000000000000005,%rcx
   14e74:	00 00 c0 
   14e77:	48 01 c8             	add    %rcx,%rax
   14e7a:	48 83 f8 05          	cmp    $0x5,%rax
   14e7e:	0f 82 c0 05 00 00    	jb     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   14e84:	ba 05 00 00 00       	mov    $0x5,%edx
   14e89:	48 8d 35 0a de fe ff 	lea    -0x121f6(%rip),%rsi        # 2c9a <_IO_stdin_used+0x5aa>
   14e90:	e9 bb 04 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
   14e95:	48 8b 43 08          	mov    0x8(%rbx),%rax
   14e99:	48 b9 05 00 00 00 00 	movabs $0xc000000000000005,%rcx
   14ea0:	00 00 c0 
   14ea3:	48 01 c8             	add    %rcx,%rax
   14ea6:	48 83 f8 05          	cmp    $0x5,%rax
   14eaa:	0f 82 94 05 00 00    	jb     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   14eb0:	ba 05 00 00 00       	mov    $0x5,%edx
   14eb5:	48 8d 35 ad dd fe ff 	lea    -0x12253(%rip),%rsi        # 2c69 <_IO_stdin_used+0x579>
   14ebc:	e9 8f 04 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
   14ec1:	48 8b 43 08          	mov    0x8(%rbx),%rax
   14ec5:	48 b9 05 00 00 00 00 	movabs $0xc000000000000005,%rcx
   14ecc:	00 00 c0 
   14ecf:	48 01 c8             	add    %rcx,%rax
   14ed2:	48 83 f8 05          	cmp    $0x5,%rax
   14ed6:	0f 82 68 05 00 00    	jb     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   14edc:	ba 05 00 00 00       	mov    $0x5,%edx
   14ee1:	48 8d 35 b0 d9 fe ff 	lea    -0x12650(%rip),%rsi        # 2898 <_IO_stdin_used+0x1a8>
   14ee8:	e9 63 04 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
      { return _M_string_length; }
   14eed:	48 8b 43 08          	mov    0x8(%rbx),%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
   14ef1:	48 b9 05 00 00 00 00 	movabs $0xc000000000000005,%rcx
   14ef8:	00 00 c0 
   14efb:	48 01 c8             	add    %rcx,%rax
   14efe:	48 ff c0             	inc    %rax
   14f01:	48 83 f8 06          	cmp    $0x6,%rax
   14f05:	0f 82 39 05 00 00    	jb     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   14f0b:	ba 06 00 00 00       	mov    $0x6,%edx
   14f10:	48 8d 35 b6 dc fe ff 	lea    -0x1234a(%rip),%rsi        # 2bcd <_IO_stdin_used+0x4dd>
   14f17:	e9 34 04 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
      { return _M_string_length; }
   14f1c:	48 8b 43 08          	mov    0x8(%rbx),%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
   14f20:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
   14f24:	4c 39 f8             	cmp    %r15,%rax
   14f27:	0f 84 17 05 00 00    	je     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   14f2d:	ba 04 00 00 00       	mov    $0x4,%edx
   14f32:	48 8d 35 5a d9 fe ff 	lea    -0x126a6(%rip),%rsi        # 2893 <_IO_stdin_used+0x1a3>
   14f39:	e9 12 04 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
   14f3e:	48 8b 43 08          	mov    0x8(%rbx),%rax
   14f42:	48 b9 05 00 00 00 00 	movabs $0xc000000000000005,%rcx
   14f49:	00 00 c0 
   14f4c:	48 01 c8             	add    %rcx,%rax
   14f4f:	48 83 f8 05          	cmp    $0x5,%rax
   14f53:	0f 82 eb 04 00 00    	jb     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   14f59:	ba 05 00 00 00       	mov    $0x5,%edx
   14f5e:	48 8d 35 33 dc fe ff 	lea    -0x123cd(%rip),%rsi        # 2b98 <_IO_stdin_used+0x4a8>
   14f65:	e9 e6 03 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
      { return _M_string_length; }
   14f6a:	48 8b 43 08          	mov    0x8(%rbx),%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
   14f6e:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
   14f72:	4c 39 f8             	cmp    %r15,%rax
   14f75:	0f 84 c9 04 00 00    	je     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   14f7b:	ba 04 00 00 00       	mov    $0x4,%edx
   14f80:	48 8d 35 41 dc fe ff 	lea    -0x123bf(%rip),%rsi        # 2bc8 <_IO_stdin_used+0x4d8>
   14f87:	e9 c4 03 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
      { return _M_string_length; }
   14f8c:	48 8b 43 08          	mov    0x8(%rbx),%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
   14f90:	48 b9 05 00 00 00 00 	movabs $0xc000000000000005,%rcx
   14f97:	00 00 c0 
   14f9a:	48 01 c8             	add    %rcx,%rax
   14f9d:	48 ff c0             	inc    %rax
   14fa0:	48 83 f8 06          	cmp    $0x6,%rax
   14fa4:	0f 82 9a 04 00 00    	jb     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   14faa:	ba 06 00 00 00       	mov    $0x6,%edx
   14faf:	48 8d 35 88 d8 fe ff 	lea    -0x12778(%rip),%rsi        # 283e <_IO_stdin_used+0x14e>
   14fb6:	e9 95 03 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
      { return _M_string_length; }
   14fbb:	48 8b 43 08          	mov    0x8(%rbx),%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
   14fbf:	48 b9 05 00 00 00 00 	movabs $0xc000000000000005,%rcx
   14fc6:	00 00 c0 
   14fc9:	48 01 c8             	add    %rcx,%rax
   14fcc:	48 ff c0             	inc    %rax
   14fcf:	48 83 f8 06          	cmp    $0x6,%rax
   14fd3:	0f 82 6b 04 00 00    	jb     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   14fd9:	ba 06 00 00 00       	mov    $0x6,%edx
   14fde:	48 8d 35 21 d9 fe ff 	lea    -0x126df(%rip),%rsi        # 2906 <_IO_stdin_used+0x216>
   14fe5:	e9 66 03 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
      { return _M_string_length; }
   14fea:	48 8b 43 08          	mov    0x8(%rbx),%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
   14fee:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
   14ff2:	4c 39 f8             	cmp    %r15,%rax
   14ff5:	0f 84 49 04 00 00    	je     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   14ffb:	ba 04 00 00 00       	mov    $0x4,%edx
   15000:	48 8d 35 46 dd fe ff 	lea    -0x122ba(%rip),%rsi        # 2d4d <_IO_stdin_used+0x65d>
   15007:	e9 44 03 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
      { return _M_string_length; }
   1500c:	48 8b 43 08          	mov    0x8(%rbx),%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
   15010:	48 b9 05 00 00 00 00 	movabs $0xc000000000000005,%rcx
   15017:	00 00 c0 
   1501a:	48 01 c8             	add    %rcx,%rax
   1501d:	48 ff c0             	inc    %rax
   15020:	48 83 f8 06          	cmp    $0x6,%rax
   15024:	0f 82 1a 04 00 00    	jb     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   1502a:	ba 06 00 00 00       	mov    $0x6,%edx
   1502f:	48 8d 35 68 db fe ff 	lea    -0x12498(%rip),%rsi        # 2b9e <_IO_stdin_used+0x4ae>
   15036:	e9 15 03 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
   1503b:	48 8b 43 08          	mov    0x8(%rbx),%rax
   1503f:	48 b9 05 00 00 00 00 	movabs $0xc000000000000005,%rcx
   15046:	00 00 c0 
   15049:	48 01 c8             	add    %rcx,%rax
   1504c:	48 83 f8 05          	cmp    $0x5,%rax
   15050:	0f 82 ee 03 00 00    	jb     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   15056:	ba 05 00 00 00       	mov    $0x5,%edx
   1505b:	48 8d 35 5b db fe ff 	lea    -0x124a5(%rip),%rsi        # 2bbd <_IO_stdin_used+0x4cd>
   15062:	e9 e9 02 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
      { return _M_string_length; }
   15067:	48 8b 43 08          	mov    0x8(%rbx),%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
   1506b:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
   1506f:	4c 39 f8             	cmp    %r15,%rax
   15072:	0f 84 cc 03 00 00    	je     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   15078:	ba 04 00 00 00       	mov    $0x4,%edx
   1507d:	48 8d 35 5f d9 fe ff 	lea    -0x126a1(%rip),%rsi        # 29e3 <_IO_stdin_used+0x2f3>
   15084:	e9 c7 02 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
      { return _M_string_length; }
   15089:	48 8b 43 08          	mov    0x8(%rbx),%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
   1508d:	48 b9 05 00 00 00 00 	movabs $0xc000000000000005,%rcx
   15094:	00 00 c0 
   15097:	48 01 c8             	add    %rcx,%rax
   1509a:	48 ff c0             	inc    %rax
   1509d:	48 83 f8 06          	cmp    $0x6,%rax
   150a1:	0f 82 9d 03 00 00    	jb     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   150a7:	ba 06 00 00 00       	mov    $0x6,%edx
   150ac:	48 8d 35 ba dc fe ff 	lea    -0x12346(%rip),%rsi        # 2d6d <_IO_stdin_used+0x67d>
   150b3:	e9 98 02 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
   150b8:	48 8b 43 08          	mov    0x8(%rbx),%rax
   150bc:	48 b9 05 00 00 00 00 	movabs $0xc000000000000005,%rcx
   150c3:	00 00 c0 
   150c6:	48 01 c8             	add    %rcx,%rax
   150c9:	48 83 f8 05          	cmp    $0x5,%rax
   150cd:	0f 82 71 03 00 00    	jb     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   150d3:	ba 05 00 00 00       	mov    $0x5,%edx
   150d8:	48 8d 35 5e db fe ff 	lea    -0x124a2(%rip),%rsi        # 2c3d <_IO_stdin_used+0x54d>
   150df:	e9 6c 02 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
      { return _M_string_length; }
   150e4:	48 8b 43 08          	mov    0x8(%rbx),%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
   150e8:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
   150ec:	4c 39 f8             	cmp    %r15,%rax
   150ef:	0f 84 4f 03 00 00    	je     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   150f5:	ba 04 00 00 00       	mov    $0x4,%edx
   150fa:	48 8d 35 8d da fe ff 	lea    -0x12573(%rip),%rsi        # 2b8e <_IO_stdin_used+0x49e>
   15101:	e9 4a 02 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
      { return _M_string_length; }
   15106:	48 8b 43 08          	mov    0x8(%rbx),%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
   1510a:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
   1510e:	4c 39 f8             	cmp    %r15,%rax
   15111:	0f 84 2d 03 00 00    	je     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   15117:	ba 04 00 00 00       	mov    $0x4,%edx
   1511c:	48 8d 35 51 dc fe ff 	lea    -0x123af(%rip),%rsi        # 2d74 <_IO_stdin_used+0x684>
   15123:	e9 28 02 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
      { return _M_string_length; }
   15128:	48 8b 43 08          	mov    0x8(%rbx),%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
   1512c:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
   15130:	4c 39 f8             	cmp    %r15,%rax
   15133:	0f 84 0b 03 00 00    	je     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   15139:	ba 04 00 00 00       	mov    $0x4,%edx
   1513e:	48 8d 35 4e da fe ff 	lea    -0x125b2(%rip),%rsi        # 2b93 <_IO_stdin_used+0x4a3>
   15145:	e9 06 02 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
      { return _M_string_length; }
   1514a:	48 8b 43 08          	mov    0x8(%rbx),%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
   1514e:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
   15152:	4c 39 f8             	cmp    %r15,%rax
   15155:	0f 84 e9 02 00 00    	je     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   1515b:	ba 04 00 00 00       	mov    $0x4,%edx
   15160:	48 8d 35 0f d9 fe ff 	lea    -0x126f1(%rip),%rsi        # 2a76 <_IO_stdin_used+0x386>
   15167:	e9 e4 01 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
      { return _M_string_length; }
   1516c:	48 8b 43 08          	mov    0x8(%rbx),%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
   15170:	48 b9 05 00 00 00 00 	movabs $0xc000000000000005,%rcx
   15177:	00 00 c0 
   1517a:	48 01 c8             	add    %rcx,%rax
   1517d:	48 ff c0             	inc    %rax
   15180:	48 83 f8 06          	cmp    $0x6,%rax
   15184:	0f 82 ba 02 00 00    	jb     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   1518a:	ba 06 00 00 00       	mov    $0x6,%edx
   1518f:	48 8d 35 00 dc fe ff 	lea    -0x12400(%rip),%rsi        # 2d96 <_IO_stdin_used+0x6a6>
   15196:	e9 b5 01 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
   1519b:	48 8b 43 08          	mov    0x8(%rbx),%rax
   1519f:	48 b9 05 00 00 00 00 	movabs $0xc000000000000005,%rcx
   151a6:	00 00 c0 
   151a9:	48 01 c8             	add    %rcx,%rax
   151ac:	48 83 f8 05          	cmp    $0x5,%rax
   151b0:	0f 82 8e 02 00 00    	jb     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   151b6:	ba 05 00 00 00       	mov    $0x5,%edx
   151bb:	48 8d 35 c2 d7 fe ff 	lea    -0x1283e(%rip),%rsi        # 2984 <_IO_stdin_used+0x294>
   151c2:	e9 89 01 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
   151c7:	48 8b 43 08          	mov    0x8(%rbx),%rax
   151cb:	48 b9 05 00 00 00 00 	movabs $0xc000000000000005,%rcx
   151d2:	00 00 c0 
   151d5:	48 01 c8             	add    %rcx,%rax
   151d8:	48 83 f8 05          	cmp    $0x5,%rax
   151dc:	0f 82 62 02 00 00    	jb     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   151e2:	ba 05 00 00 00       	mov    $0x5,%edx
   151e7:	48 8d 35 4a d6 fe ff 	lea    -0x129b6(%rip),%rsi        # 2838 <_IO_stdin_used+0x148>
   151ee:	e9 5d 01 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
   151f3:	48 8b 43 08          	mov    0x8(%rbx),%rax
   151f7:	48 b9 05 00 00 00 00 	movabs $0xc000000000000005,%rcx
   151fe:	00 00 c0 
   15201:	48 01 c8             	add    %rcx,%rax
   15204:	48 83 f8 05          	cmp    $0x5,%rax
   15208:	0f 82 36 02 00 00    	jb     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   1520e:	ba 05 00 00 00       	mov    $0x5,%edx
   15213:	48 8d 35 38 db fe ff 	lea    -0x124c8(%rip),%rsi        # 2d52 <_IO_stdin_used+0x662>
   1521a:	e9 31 01 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
      { return _M_string_length; }
   1521f:	48 8b 43 08          	mov    0x8(%rbx),%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
   15223:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
   15227:	4c 39 f8             	cmp    %r15,%rax
   1522a:	0f 84 14 02 00 00    	je     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   15230:	ba 04 00 00 00       	mov    $0x4,%edx
   15235:	48 8d 35 87 d9 fe ff 	lea    -0x12679(%rip),%rsi        # 2bc3 <_IO_stdin_used+0x4d3>
   1523c:	e9 0f 01 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
      { return _M_string_length; }
   15241:	48 8b 43 08          	mov    0x8(%rbx),%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
   15245:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
   15249:	4c 39 f8             	cmp    %r15,%rax
   1524c:	0f 84 f2 01 00 00    	je     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   15252:	ba 04 00 00 00       	mov    $0x4,%edx
   15257:	48 8d 35 f2 d6 fe ff 	lea    -0x1290e(%rip),%rsi        # 2950 <_IO_stdin_used+0x260>
   1525e:	e9 ed 00 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
      { return _M_string_length; }
   15263:	48 8b 43 08          	mov    0x8(%rbx),%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
   15267:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
   1526b:	4c 39 f8             	cmp    %r15,%rax
   1526e:	0f 84 d0 01 00 00    	je     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   15274:	ba 04 00 00 00       	mov    $0x4,%edx
   15279:	48 8d 35 d8 da fe ff 	lea    -0x12528(%rip),%rsi        # 2d58 <_IO_stdin_used+0x668>
   15280:	e9 cb 00 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
   15285:	48 8b 43 08          	mov    0x8(%rbx),%rax
   15289:	48 b9 05 00 00 00 00 	movabs $0xc000000000000005,%rcx
   15290:	00 00 c0 
   15293:	48 01 c8             	add    %rcx,%rax
   15296:	48 83 f8 05          	cmp    $0x5,%rax
   1529a:	0f 82 a4 01 00 00    	jb     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   152a0:	ba 05 00 00 00       	mov    $0x5,%edx
   152a5:	48 8d 35 b1 db fe ff 	lea    -0x1244f(%rip),%rsi        # 2e5d <_IO_stdin_used+0x76d>
   152ac:	e9 9f 00 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
      { return _M_string_length; }
   152b1:	48 8b 43 08          	mov    0x8(%rbx),%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
   152b5:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
   152b9:	4c 39 f8             	cmp    %r15,%rax
   152bc:	0f 84 82 01 00 00    	je     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   152c2:	ba 04 00 00 00       	mov    $0x4,%edx
   152c7:	48 8d 35 26 da fe ff 	lea    -0x125da(%rip),%rsi        # 2cf4 <_IO_stdin_used+0x604>
   152ce:	e9 7d 00 00 00       	jmpq   15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
      { return _M_string_length; }
   152d3:	48 8b 43 08          	mov    0x8(%rbx),%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
   152d7:	48 b9 05 00 00 00 00 	movabs $0xc000000000000005,%rcx
   152de:	00 00 c0 
   152e1:	48 01 c8             	add    %rcx,%rax
   152e4:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
   152e8:	48 83 f8 03          	cmp    $0x3,%rax
   152ec:	0f 82 52 01 00 00    	jb     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   152f2:	ba 03 00 00 00       	mov    $0x3,%edx
   152f7:	48 8d 35 ea d7 fe ff 	lea    -0x12816(%rip),%rsi        # 2ae8 <_IO_stdin_used+0x3f8>
   152fe:	eb 50                	jmp    15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
   15300:	48 8b 43 08          	mov    0x8(%rbx),%rax
   15304:	48 b9 05 00 00 00 00 	movabs $0xc000000000000005,%rcx
   1530b:	00 00 c0 
   1530e:	48 01 c8             	add    %rcx,%rax
   15311:	48 83 f8 05          	cmp    $0x5,%rax
   15315:	0f 82 29 01 00 00    	jb     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   1531b:	ba 05 00 00 00       	mov    $0x5,%edx
   15320:	48 8d 35 ea d5 fe ff 	lea    -0x12a16(%rip),%rsi        # 2911 <_IO_stdin_used+0x221>
   15327:	eb 27                	jmp    15350 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xa70>
      { return _M_string_length; }
   15329:	48 8b 43 08          	mov    0x8(%rbx),%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
   1532d:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
   15331:	4c 39 f8             	cmp    %r15,%rax
   15334:	0f 84 0a 01 00 00    	je     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
   1533a:	ba 04 00 00 00       	mov    $0x4,%edx
   1533f:	48 8d 35 1d db fe ff 	lea    -0x124e3(%rip),%rsi        # 2e63 <_IO_stdin_used+0x773>
   15346:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1534d:	00 00 00 
	return _M_append(__s, __n);
   15350:	48 89 df             	mov    %rbx,%rdi
   15353:	e8 28 22 00 00       	callq  17580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
   15358:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
   1535f:	00 
	if (this->max_size() - (this->size() - __n1) < __n2)
   15360:	48 39 43 08          	cmp    %rax,0x8(%rbx)
   15364:	0f 84 da 00 00 00    	je     15444 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb64>
	return _M_append(__s, __n);
   1536a:	ba 01 00 00 00       	mov    $0x1,%edx
   1536f:	48 89 df             	mov    %rbx,%rdi
   15372:	48 8d 35 94 d5 fe ff 	lea    -0x12a6c(%rip),%rsi        # 290d <_IO_stdin_used+0x21d>
   15379:	e8 02 22 00 00       	callq  17580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
      { return _M_string_length; }
   1537e:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
	return _M_replace(size_type(0), this->size(), __s,
   15383:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
   15388:	31 f6                	xor    %esi,%esi
   1538a:	48 8d 0d 0b d6 fe ff 	lea    -0x129f5(%rip),%rcx        # 299c <_IO_stdin_used+0x2ac>
   15391:	45 31 c0             	xor    %r8d,%r8d
   15394:	e8 a7 22 00 00       	callq  17640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
   15399:	e9 50 f6 ff ff       	jmpq   149ee <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0x10e>
	if (this->max_size() - (this->size() - __n1) < __n2)
   1539e:	49 83 c7 03          	add    $0x3,%r15
   153a2:	4c 39 7b 08          	cmp    %r15,0x8(%rbx)
   153a6:	0f 84 a4 00 00 00    	je     15450 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb70>
	return _M_append(__s, __n);
   153ac:	48 8d 35 c8 d6 fe ff 	lea    -0x12938(%rip),%rsi        # 2a7b <_IO_stdin_used+0x38b>
   153b3:	ba 01 00 00 00       	mov    $0x1,%edx
   153b8:	48 89 df             	mov    %rbx,%rdi
   153bb:	e8 c0 21 00 00       	callq  17580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
      if (this->_M_impl._M_map)
   153c0:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   153c5:	48 85 ff             	test   %rdi,%rdi
   153c8:	74 42                	je     1540c <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb2c>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   153ca:	4c 8b 74 24 48       	mov    0x48(%rsp),%r14
			   this->_M_impl._M_finish._M_node + 1);
   153cf:	4c 8b 7c 24 68       	mov    0x68(%rsp),%r15
   153d4:	49 8d 47 08          	lea    0x8(%r15),%rax
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   153d8:	49 39 c6             	cmp    %rax,%r14
   153db:	73 2a                	jae    15407 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb27>
   153dd:	49 83 c6 f8          	add    $0xfffffffffffffff8,%r14
   153e1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   153e8:	0f 1f 84 00 00 00 00 
   153ef:	00 
	_M_deallocate_node(*__n);
   153f0:	49 8b 7e 08          	mov    0x8(%r14),%rdi
   153f4:	49 83 c6 08          	add    $0x8,%r14
   153f8:	e8 c3 22 00 00       	callq  176c0 <_ZdlPv@plt>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   153fd:	4d 39 fe             	cmp    %r15,%r14
   15400:	72 ee                	jb     153f0 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb10>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
   15402:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   15407:	e8 b4 22 00 00       	callq  176c0 <_ZdlPv@plt>
      { return _M_dataplus._M_p; }
   1540c:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
      { return _M_data() == _M_local_data(); }
   15411:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
   15418:	00 
   15419:	48 39 c7             	cmp    %rax,%rdi
	if (!_M_is_local())
   1541c:	74 05                	je     15423 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb43>
   1541e:	e8 9d 22 00 00       	callq  176c0 <_ZdlPv@plt>
            }
        }

        eqn += ")";
        return eqn;
    }
   15423:	48 89 d8             	mov    %rbx,%rax
   15426:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
   1542d:	5b                   	pop    %rbx
   1542e:	41 5c                	pop    %r12
   15430:	41 5d                	pop    %r13
   15432:	41 5e                	pop    %r14
   15434:	41 5f                	pop    %r15
   15436:	5d                   	pop    %rbp
   15437:	c3                   	retq   
	  __throw_length_error(__N(__s));
   15438:	48 8d 3d 09 d8 fe ff 	lea    -0x127f7(%rip),%rdi        # 2c48 <_IO_stdin_used+0x558>
   1543f:	e8 2c 21 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
   15444:	48 8d 3d fd d7 fe ff 	lea    -0x12803(%rip),%rdi        # 2c48 <_IO_stdin_used+0x558>
   1544b:	e8 20 21 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
   15450:	48 8d 3d f1 d7 fe ff 	lea    -0x1280f(%rip),%rdi        # 2c48 <_IO_stdin_used+0x558>
   15457:	e8 14 21 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
   1545c:	eb 33                	jmp    15491 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xbb1>
   1545e:	49 89 c6             	mov    %rax,%r14
   15461:	eb 3b                	jmp    1549e <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xbbe>
   15463:	eb 2c                	jmp    15491 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xbb1>
   15465:	eb 2a                	jmp    15491 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xbb1>
   15467:	eb 28                	jmp    15491 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xbb1>
   15469:	eb 00                	jmp    1546b <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xb8b>
   1546b:	49 89 c6             	mov    %rax,%r14
      { return _M_dataplus._M_p; }
   1546e:	48 8b 3c 24          	mov    (%rsp),%rdi
      { return _M_data() == _M_local_data(); }
   15472:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
   15477:	48 39 c7             	cmp    %rax,%rdi
	if (!_M_is_local())
   1547a:	74 18                	je     15494 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xbb4>
   1547c:	e8 3f 22 00 00       	callq  176c0 <_ZdlPv@plt>
   15481:	eb 11                	jmp    15494 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xbb4>
   15483:	eb 0c                	jmp    15491 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xbb1>
   15485:	eb 0a                	jmp    15491 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xbb1>
   15487:	eb 08                	jmp    15491 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xbb1>
   15489:	eb 06                	jmp    15491 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xbb1>
   1548b:	eb 04                	jmp    15491 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xbb1>
   1548d:	eb 02                	jmp    15491 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xbb1>
   1548f:	eb 00                	jmp    15491 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xbb1>
   15491:	49 89 c6             	mov    %rax,%r14
   15494:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
   15499:	e8 e2 e7 ff ff       	callq  13c80 <_ZNSt5stackIiSt5dequeIiSaIiEEED2Ev>
      { return _M_dataplus._M_p; }
   1549e:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
      { return _M_data() == _M_local_data(); }
   154a3:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
   154aa:	00 
   154ab:	48 39 c7             	cmp    %rax,%rdi
	if (!_M_is_local())
   154ae:	74 05                	je     154b5 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xbd5>
   154b0:	e8 0b 22 00 00       	callq  176c0 <_ZdlPv@plt>
      { return _M_dataplus._M_p; }
   154b5:	48 8b 3b             	mov    (%rbx),%rdi
      { return _M_data() == _M_local_data(); }
   154b8:	48 3b bc 24 98 00 00 	cmp    0x98(%rsp),%rdi
   154bf:	00 
	if (!_M_is_local())
   154c0:	74 05                	je     154c7 <_ZN7genetic9stringifyB5cxx11ERKNS_7programE+0xbe7>
   154c2:	e8 f9 21 00 00       	callq  176c0 <_ZdlPv@plt>
   154c7:	4c 89 f7             	mov    %r14,%rdi
   154ca:	e8 a1 24 00 00       	callq  17970 <_Unwind_Resume@plt>
   154cf:	90                   	nop

00000000000154d0 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE>:

    void symFit(const float* input, const float* labels, const float* sample_weights,
                const int n_rows, param& params, program_t& final_progs,
                std::vector<std::vector<program>>& history) {
   154d0:	55                   	push   %rbp
   154d1:	41 57                	push   %r15
   154d3:	41 56                	push   %r14
   154d5:	41 55                	push   %r13
   154d7:	41 54                	push   %r12
   154d9:	53                   	push   %rbx
   154da:	48 83 ec 68          	sub    $0x68,%rsp
   154de:	4d 89 cc             	mov    %r9,%r12
   154e1:	4c 89 c3             	mov    %r8,%rbx
   154e4:	89 4c 24 44          	mov    %ecx,0x44(%rsp)
   154e8:	48 89 54 24 60       	mov    %rdx,0x60(%rsp)
   154ed:	48 89 74 24 58       	mov    %rsi,0x58(%rsp)
   154f2:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
        // }
        // params.arity_set[ar].push_back(f);
        // }

        // Check terminalRatio to dynamically set it
        bool growAuto = (params.terminalRatio == 0.0f);
   154f7:	f3 41 0f 10 88 b4 00 	movss  0xb4(%r8),%xmm1
   154fe:	00 00 
   15500:	0f 57 c0             	xorps  %xmm0,%xmm0
   15503:	f3 0f 11 4c 24 40    	movss  %xmm1,0x40(%rsp)
   15509:	0f 2e c8             	ucomiss %xmm0,%xmm1
        if (growAuto) {
   1550c:	75 48                	jne    15556 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x86>
   1550e:	7a 46                	jp     15556 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x86>
            params.terminalRatio =
                1.0f * params.num_features / (params.num_features + params.function_set.size());
   15510:	48 63 83 d0 00 00 00 	movslq 0xd0(%rbx),%rax
   15517:	0f 57 c0             	xorps  %xmm0,%xmm0
   1551a:	f3 0f 2a c0          	cvtsi2ss %eax,%xmm0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1551e:	48 03 43 38          	add    0x38(%rbx),%rax
   15522:	48 2b 43 30          	sub    0x30(%rbx),%rax
   15526:	78 0a                	js     15532 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x62>
   15528:	0f 57 c9             	xorps  %xmm1,%xmm1
   1552b:	f3 48 0f 2a c8       	cvtsi2ss %rax,%xmm1
   15530:	eb 18                	jmp    1554a <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x7a>
   15532:	48 89 c1             	mov    %rax,%rcx
   15535:	48 d1 e9             	shr    %rcx
   15538:	83 e0 01             	and    $0x1,%eax
   1553b:	48 09 c8             	or     %rcx,%rax
   1553e:	0f 57 c9             	xorps  %xmm1,%xmm1
   15541:	f3 48 0f 2a c8       	cvtsi2ss %rax,%xmm1
   15546:	f3 0f 58 c9          	addss  %xmm1,%xmm1
   1554a:	f3 0f 5e c1          	divss  %xmm1,%xmm0
            params.terminalRatio =
   1554e:	f3 0f 11 83 b4 00 00 	movss  %xmm0,0xb4(%rbx)
   15555:	00 
        }

        /* Initializations */

        std::vector<program> h_currprogs(params.population_size);
   15556:	4c 63 33             	movslq (%rbx),%r14
   15559:	4d 85 f6             	test   %r14,%r14
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   1555c:	0f 88 60 05 00 00    	js     15ac2 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x5f2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   15562:	45 85 f6             	test   %r14d,%r14d
   15565:	74 11                	je     15578 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0xa8>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   15567:	4c 89 f7             	mov    %r14,%rdi
   1556a:	48 c1 e7 05          	shl    $0x5,%rdi
   1556e:	e8 ed 21 00 00       	callq  17760 <_Znwm@plt>
   15573:	48 89 c7             	mov    %rax,%rdi
   15576:	eb 02                	jmp    1557a <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0xaa>
   15578:	31 ff                	xor    %edi,%edi
	this->_M_impl._M_start = this->_M_allocate(__n);
   1557a:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
	this->_M_impl._M_finish = this->_M_impl._M_start;
   1557f:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   15584:	4c 89 f0             	mov    %r14,%rax
   15587:	48 c1 e0 05          	shl    $0x5,%rax
   1558b:	48 01 f8             	add    %rdi,%rax
   1558e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
      return __uninitialized_default_n_1<__is_trivial(_ValueType)
   15593:	4c 89 f6             	mov    %r14,%rsi
   15596:	e8 d5 0b 00 00       	callq  16170 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN7genetic7programEmEET_S5_T0_>
	this->_M_impl._M_finish =
   1559b:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        std::vector<program> h_nextprogs(params.population_size);
   155a0:	4c 63 33             	movslq (%rbx),%r14
   155a3:	4d 85 f6             	test   %r14,%r14
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   155a6:	0f 88 22 05 00 00    	js     15ace <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x5fe>
	: _M_start(), _M_finish(), _M_end_of_storage()
   155ac:	0f 57 c0             	xorps  %xmm0,%xmm0
   155af:	0f 29 44 24 20       	movaps %xmm0,0x20(%rsp)
   155b4:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
   155bb:	00 00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   155bd:	45 85 f6             	test   %r14d,%r14d
   155c0:	74 11                	je     155d3 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x103>
   155c2:	4c 89 f7             	mov    %r14,%rdi
   155c5:	48 c1 e7 05          	shl    $0x5,%rdi
   155c9:	e8 92 21 00 00       	callq  17760 <_Znwm@plt>
   155ce:	48 89 c7             	mov    %rax,%rdi
   155d1:	eb 02                	jmp    155d5 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x105>
   155d3:	31 ff                	xor    %edi,%edi
	this->_M_impl._M_start = this->_M_allocate(__n);
   155d5:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
	this->_M_impl._M_finish = this->_M_impl._M_start;
   155da:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   155df:	4c 89 f0             	mov    %r14,%rax
   155e2:	48 c1 e0 05          	shl    $0x5,%rax
   155e6:	48 01 f8             	add    %rdi,%rax
   155e9:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
   155ee:	4c 89 f6             	mov    %r14,%rsi
   155f1:	e8 7a 0b 00 00       	callq  16170 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN7genetic7programEmEET_S5_T0_>
	this->_M_impl._M_finish =
   155f6:	48 89 44 24 28       	mov    %rax,0x28(%rsp)

        std::vector<float> h_fitness(params.population_size, 0.0f);
   155fb:	4c 63 33             	movslq (%rbx),%r14
   155fe:	4d 85 f6             	test   %r14,%r14
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   15601:	0f 88 d3 04 00 00    	js     15ada <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x60a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   15607:	45 85 f6             	test   %r14d,%r14d
   1560a:	74 1e                	je     1562a <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x15a>
   1560c:	49 c1 e6 02          	shl    $0x2,%r14
   15610:	4c 89 f7             	mov    %r14,%rdi
   15613:	e8 48 21 00 00       	callq  17760 <_Znwm@plt>
   15618:	49 89 c7             	mov    %rax,%r15
   1561b:	48 89 c7             	mov    %rax,%rdi
   1561e:	31 f6                	xor    %esi,%esi
   15620:	4c 89 f2             	mov    %r14,%rdx
   15623:	e8 68 23 00 00       	callq  17990 <memset@plt>
   15628:	eb 03                	jmp    1562d <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x15d>
   1562a:	45 31 ff             	xor    %r15d,%r15d
   1562d:	4c 89 64 24 48       	mov    %r12,0x48(%rsp)

        PhiloxEngine h_gen_engine(params.random_state);
   15632:	8b bb d4 00 00 00    	mov    0xd4(%rbx),%edi
    explicit PhiloxEngine(uint32_t seed) { philox_seed(seed); }
   15638:	e8 e3 0f 00 00       	callq  16620 <philox_seed>

        uniform_int_distribution_custom<int> seed_dist;

        mut_probs[0] = params.p_crossover;
   1563d:	f3 0f 10 83 9c 00 00 	movss  0x9c(%rbx),%xmm0
   15644:	00 
   15645:	f3 0f 10 8b a0 00 00 	movss  0xa0(%rbx),%xmm1
   1564c:	00 
	  __value = _GLIBCXX_MOVE_IF_20(__value) + *__first;
   1564d:	f3 0f 58 c8          	addss  %xmm0,%xmm1
   15651:	f3 0f 10 93 a4 00 00 	movss  0xa4(%rbx),%xmm2
   15658:	00 
   15659:	f3 0f 58 d1          	addss  %xmm1,%xmm2
   1565d:	f3 0f 10 9b a8 00 00 	movss  0xa8(%rbx),%xmm3
   15664:	00 
   15665:	f3 0f 58 da          	addss  %xmm2,%xmm3
      *__result = __value;
   15669:	f3 0f 11 05 7f 4a 00 	movss  %xmm0,0x4a7f(%rip)        # 1a0f0 <_ZN7geneticL9mut_probsE.0>
   15670:	00 
	  *++__result = __value;
   15671:	f3 0f 11 0d 87 4a 00 	movss  %xmm1,0x4a87(%rip)        # 1a100 <_ZN7geneticL9mut_probsE.1>
   15678:	00 
   15679:	f3 0f 11 15 87 4a 00 	movss  %xmm2,0x4a87(%rip)        # 1a108 <_ZN7geneticL9mut_probsE.2>
   15680:	00 
   15681:	f3 0f 11 1d 87 4a 00 	movss  %xmm3,0x4a87(%rip)        # 1a110 <_ZN7geneticL9mut_probsE.3>
   15688:	00 
        mut_probs[3] = params.p_point_mutation;
        std::partial_sum(mut_probs, mut_probs + 4, mut_probs);

        /* Begin training */
        auto gen          = 0;
        params.num_epochs = 0;
   15689:	c7 83 d8 00 00 00 00 	movl   $0x0,0xd8(%rbx)
   15690:	00 00 00 

        while (gen < params.generations) {
   15693:	83 7b 0c 00          	cmpl   $0x0,0xc(%rbx)
   15697:	0f 8e 31 03 00 00    	jle    159ce <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x4fe>
   1569d:	4c 8b ac 24 a0 00 00 	mov    0xa0(%rsp),%r13
   156a4:	00 
   156a5:	45 31 f6             	xor    %r14d,%r14d
   156a8:	4c 8d 64 24 04       	lea    0x4(%rsp),%r12
   156ad:	eb 1a                	jmp    156c9 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x1f9>
   156af:	90                   	nop
                    opt_fit = std::max(opt_fit, h_fitness[i]);
                }
            }

            // Check for stop criterion
            if ((crit == 0 && opt_fit <= params.stopping_criteria) ||
   156b0:	f3 0f 10 43 14       	movss  0x14(%rbx),%xmm0
   156b5:	0f 2e 04 24          	ucomiss (%rsp),%xmm0
   156b9:	0f 83 6b 02 00 00    	jae    1592a <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x45a>
        while (gen < params.generations) {
   156bf:	44 3b 73 0c          	cmp    0xc(%rbx),%r14d
   156c3:	0f 8d 05 03 00 00    	jge    159ce <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x4fe>
   156c9:	44 89 f5             	mov    %r14d,%ebp
   156cc:	0f 1f 40 00          	nopl   0x0(%rax)
    uint32_t                  operator()() { return philox_random_uint32(); }
   156d0:	e8 1b 13 00 00       	callq  169f0 <philox_random_uint32>
        } while (x >= limit);
   156d5:	85 c0                	test   %eax,%eax
   156d7:	78 f7                	js     156d0 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x200>
                       (gen + 1), init_seed);
   156d9:	44 8d 75 01          	lea    0x1(%rbp),%r14d
            cpp_evolve(h_currprogs, h_nextprogs, n_rows, input, labels, sample_weights, params,
   156dd:	48 83 ec 08          	sub    $0x8,%rsp
   156e1:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
   156e6:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
   156eb:	8b 54 24 4c          	mov    0x4c(%rsp),%edx
   156ef:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
   156f4:	4c 8b 44 24 60       	mov    0x60(%rsp),%r8
   156f9:	4c 8b 4c 24 68       	mov    0x68(%rsp),%r9
   156fe:	50                   	push   %rax
   156ff:	41 56                	push   %r14
   15701:	53                   	push   %rbx
   15702:	e8 a9 ed ff ff       	callq  144b0 <_ZN7genetic10cpp_evolveERKSt6vectorINS_7programESaIS1_EERS3_iPKfS8_S8_RKNS_5paramEii>
   15707:	48 83 c4 20          	add    $0x20,%rsp
            ++params.num_epochs;
   1570b:	ff 83 d8 00 00 00    	incl   0xd8(%rbx)
            h_currprogs = h_nextprogs;
   15711:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
   15716:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
   1571b:	e8 00 08 00 00       	callq  15f20 <_ZNSt6vectorIN7genetic7programESaIS1_EEaSERKS3_>
   15720:	49 8b 75 08          	mov    0x8(%r13),%rsi
   15724:	85 ed                	test   %ebp,%ebp
            if (!params.low_memory || gen == 0) {
   15726:	74 28                	je     15750 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x280>
   15728:	80 bb dc 00 00 00 00 	cmpb   $0x0,0xdc(%rbx)
   1572f:	74 1f                	je     15750 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x280>
      { return __normal_iterator(_M_current - __n); }
   15731:	48 83 c6 e8          	add    $0xffffffffffffffe8,%rsi
                history.back() = h_currprogs;
   15735:	48 89 f7             	mov    %rsi,%rdi
   15738:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
   1573d:	e8 de 07 00 00       	callq  15f20 <_ZNSt6vectorIN7genetic7programESaIS1_EEaSERKS3_>
   15742:	eb 3c                	jmp    15780 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x2b0>
   15744:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
   1574b:	00 00 00 00 00 
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   15750:	49 3b 75 10          	cmp    0x10(%r13),%rsi
   15754:	74 14                	je     1576a <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x29a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   15756:	48 89 f7             	mov    %rsi,%rdi
   15759:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
   1575e:	e8 3d 0d 00 00       	callq  164a0 <_ZNSt6vectorIN7genetic7programESaIS1_EEC2ERKS3_>
	    ++this->_M_impl._M_finish;
   15763:	49 83 45 08 18       	addq   $0x18,0x8(%r13)
   15768:	eb 16                	jmp    15780 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x2b0>
   1576a:	4c 89 ef             	mov    %r13,%rdi
	  _M_realloc_insert(end(), __x);
   1576d:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
   15772:	e8 69 0b 00 00       	callq  162e0 <_ZNSt6vectorIS_IN7genetic7programESaIS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>
   15777:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1577e:	00 00 
        switch (this->metric) {
   15780:	8b 83 94 00 00 00    	mov    0x94(%rbx),%eax
   15786:	48 83 f8 05          	cmp    $0x5,%rax
   1578a:	77 2b                	ja     157b7 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x2e7>
   1578c:	48 8d 0d b9 d7 fe ff 	lea    -0x12847(%rip),%rcx        # 2f4c <_IO_stdin_used+0x85c>
   15793:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
   15797:	48 01 c8             	add    %rcx,%rax
   1579a:	ff e0                	jmpq   *%rax
   1579c:	31 c0                	xor    %eax,%eax
   1579e:	b1 01                	mov    $0x1,%cl
   157a0:	eb 1c                	jmp    157be <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x2ee>
   157a2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   157a9:	1f 84 00 00 00 00 00 
   157b0:	b8 01 00 00 00       	mov    $0x1,%eax
   157b5:	eb 05                	jmp    157bc <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x2ec>
   157b7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   157bc:	31 c9                	xor    %ecx,%ecx
	return *(this->_M_impl._M_start + __n);
   157be:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
            h_fitness[0] = h_currprogs[0].raw_fitness_;
   157c3:	f3 0f 10 42 10       	movss  0x10(%rdx),%xmm0
   157c8:	f3 41 0f 11 07       	movss  %xmm0,(%r15)
   157cd:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
            auto opt_fit = h_fitness[0];
   157d2:	f3 0f 11 44 24 04    	movss  %xmm0,0x4(%rsp)
   157d8:	44 8b 03             	mov    (%rbx),%r8d
            for (auto i = 1; i < params.population_size; ++i) {
   157db:	41 83 f8 02          	cmp    $0x2,%r8d
   157df:	7c 65                	jl     15846 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x376>
   157e1:	49 8d 78 ff          	lea    -0x1(%r8),%rdi
   157e5:	be 01 00 00 00       	mov    $0x1,%esi
   157ea:	49 83 f8 02          	cmp    $0x2,%r8
   157ee:	0f 85 7c 00 00 00    	jne    15870 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x3a0>
   157f4:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
   157f9:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
   157fe:	40 f6 c7 01          	test   $0x1,%dil
   15802:	74 42                	je     15846 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x376>
                h_fitness[i] = h_currprogs[i].raw_fitness_;
   15804:	48 89 f7             	mov    %rsi,%rdi
   15807:	48 c1 e7 05          	shl    $0x5,%rdi
   1580b:	f3 0f 10 44 3a 10    	movss  0x10(%rdx,%rdi,1),%xmm0
   15811:	49 8d 14 b7          	lea    (%r15,%rsi,4),%rdx
   15815:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
                if (crit == 0) {
   1581a:	0f 2e c1             	ucomiss %xmm1,%xmm0
   1581d:	4c 89 e7             	mov    %r12,%rdi
   15820:	48 0f 47 fa          	cmova  %rdx,%rdi
                h_fitness[i] = h_currprogs[i].raw_fitness_;
   15824:	f3 41 0f 11 04 b7    	movss  %xmm0,(%r15,%rsi,4)
                if (crit == 0) {
   1582a:	0f 2e c8             	ucomiss %xmm0,%xmm1
   1582d:	49 0f 46 d4          	cmovbe %r12,%rdx
   15831:	84 c9                	test   %cl,%cl
   15833:	48 0f 44 d7          	cmove  %rdi,%rdx
   15837:	f3 0f 10 02          	movss  (%rdx),%xmm0
   1583b:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
   15840:	f3 0f 11 44 24 04    	movss  %xmm0,0x4(%rsp)
            if ((crit == 0 && opt_fit <= params.stopping_criteria) ||
   15846:	85 c0                	test   %eax,%eax
   15848:	0f 84 62 fe ff ff    	je     156b0 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x1e0>
   1584e:	83 f8 01             	cmp    $0x1,%eax
   15851:	0f 85 68 fe ff ff    	jne    156bf <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x1ef>
   15857:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
                (crit == 1 && opt_fit >= params.stopping_criteria)) {
   1585c:	0f 2e 43 14          	ucomiss 0x14(%rbx),%xmm0
   15860:	0f 82 59 fe ff ff    	jb     156bf <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x1ef>
   15866:	e9 bf 00 00 00       	jmpq   1592a <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x45a>
   1586b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            for (auto i = 1; i < params.population_size; ++i) {
   15870:	49 89 f8             	mov    %rdi,%r8
   15873:	49 83 e0 fe          	and    $0xfffffffffffffffe,%r8
   15877:	49 f7 d8             	neg    %r8
   1587a:	45 31 c9             	xor    %r9d,%r9d
   1587d:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
   15882:	eb 3e                	jmp    158c2 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x3f2>
   15884:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
   1588b:	00 00 00 00 00 
                if (crit == 0) {
   15890:	84 c9                	test   %cl,%cl
                h_fitness[i] = h_currprogs[i].raw_fitness_;
   15892:	f3 43 0f 11 44 0f 08 	movss  %xmm0,0x8(%r15,%r9,1)
                if (crit == 0) {
   15899:	4d 0f 45 da          	cmovne %r10,%r11
   1589d:	f3 41 0f 10 0b       	movss  (%r11),%xmm1
   158a2:	f3 0f 11 4c 24 04    	movss  %xmm1,0x4(%rsp)
            for (auto i = 1; i < params.population_size; ++i) {
   158a8:	49 83 c1 08          	add    $0x8,%r9
   158ac:	4d 8d 14 30          	lea    (%r8,%rsi,1),%r10
   158b0:	49 83 c2 02          	add    $0x2,%r10
   158b4:	48 83 c6 02          	add    $0x2,%rsi
   158b8:	49 83 fa 01          	cmp    $0x1,%r10
   158bc:	0f 84 37 ff ff ff    	je     157f9 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x329>
                h_fitness[i] = h_currprogs[i].raw_fitness_;
   158c2:	f3 42 0f 10 44 ca 30 	movss  0x30(%rdx,%r9,8),%xmm0
   158c9:	4f 8d 14 0f          	lea    (%r15,%r9,1),%r10
   158cd:	49 83 c2 04          	add    $0x4,%r10
   158d1:	f3 43 0f 11 44 0f 04 	movss  %xmm0,0x4(%r15,%r9,1)
   158d8:	0f 28 d1             	movaps %xmm1,%xmm2
                if (crit == 0) {
   158db:	0f 2e c1             	ucomiss %xmm1,%xmm0
   158de:	4d 89 d3             	mov    %r10,%r11
   158e1:	77 03                	ja     158e6 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x416>
   158e3:	4d 89 e3             	mov    %r12,%r11
   158e6:	0f 2e d0             	ucomiss %xmm0,%xmm2
   158e9:	77 03                	ja     158ee <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x41e>
   158eb:	4d 89 e2             	mov    %r12,%r10
   158ee:	84 c9                	test   %cl,%cl
   158f0:	4d 0f 45 da          	cmovne %r10,%r11
   158f4:	f3 41 0f 10 0b       	movss  (%r11),%xmm1
   158f9:	f3 0f 11 4c 24 04    	movss  %xmm1,0x4(%rsp)
                h_fitness[i] = h_currprogs[i].raw_fitness_;
   158ff:	f3 42 0f 10 44 ca 50 	movss  0x50(%rdx,%r9,8),%xmm0
   15906:	4f 8d 14 0f          	lea    (%r15,%r9,1),%r10
   1590a:	49 83 c2 08          	add    $0x8,%r10
                if (crit == 0) {
   1590e:	0f 2e c1             	ucomiss %xmm1,%xmm0
   15911:	4d 89 d3             	mov    %r10,%r11
   15914:	77 03                	ja     15919 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x449>
   15916:	4d 89 e3             	mov    %r12,%r11
   15919:	0f 2e c8             	ucomiss %xmm0,%xmm1
   1591c:	0f 87 6e ff ff ff    	ja     15890 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x3c0>
   15922:	4d 89 e2             	mov    %r12,%r10
   15925:	e9 66 ff ff ff       	jmpq   15890 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x3c0>
	__ostream_insert(__out, __s,
   1592a:	48 8b 3d 9f 34 00 00 	mov    0x349f(%rip),%rdi        # 18dd0 <_ZSt4cerr@GLIBCXX_3.4>
   15931:	48 8d 35 45 d1 fe ff 	lea    -0x12ebb(%rip),%rsi        # 2a7d <_IO_stdin_used+0x38d>
   15938:	ba 30 00 00 00       	mov    $0x30,%edx
   1593d:	e8 be 1d 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
                std::cerr << "Early stopping criterion reached in Generation #" << (gen + 1)
   15942:	48 8b 3d 87 34 00 00 	mov    0x3487(%rip),%rdi        # 18dd0 <_ZSt4cerr@GLIBCXX_3.4>
   15949:	44 89 f6             	mov    %r14d,%esi
   1594c:	e8 5f 1c 00 00       	callq  175b0 <_ZNSolsEi@plt>
   15951:	49 89 c6             	mov    %rax,%r14
   15954:	48 8d 35 9e d3 fe ff 	lea    -0x12c62(%rip),%rsi        # 2cf9 <_IO_stdin_used+0x609>
   1595b:	ba 0a 00 00 00       	mov    $0xa,%edx
   15960:	48 89 c7             	mov    %rax,%rdi
   15963:	e8 98 1d 00 00       	callq  17700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   15968:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
	return _M_insert(static_cast<double>(__f));
   1596d:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
   15971:	4c 89 f7             	mov    %r14,%rdi
   15974:	e8 97 1c 00 00       	callq  17610 <_ZNSo9_M_insertIdEERSoT_@plt>
                          << ", fitness=" << opt_fit << std::endl;
   15979:	49 89 c6             	mov    %rax,%r14
    { return flush(__os.put(__os.widen('\n'))); }
   1597c:	48 8b 00             	mov    (%rax),%rax
   1597f:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
   15983:	4d 8b a4 06 f0 00 00 	mov    0xf0(%r14,%rax,1),%r12
   1598a:	00 
      if (!__f)
   1598b:	4d 85 e4             	test   %r12,%r12
   1598e:	0f 84 52 01 00 00    	je     15ae6 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x616>
	if (_M_widen_ok)
   15994:	41 80 7c 24 38 00    	cmpb   $0x0,0x38(%r12)
   1599a:	74 08                	je     159a4 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x4d4>
	  return _M_widen[static_cast<unsigned char>(__c)];
   1599c:	41 0f b6 44 24 43    	movzbl 0x43(%r12),%eax
   159a2:	eb 17                	jmp    159bb <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x4eb>
	this->_M_widen_init();
   159a4:	4c 89 e7             	mov    %r12,%rdi
   159a7:	e8 84 1d 00 00       	callq  17730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
   159ac:	49 8b 04 24          	mov    (%r12),%rax
   159b0:	4c 89 e7             	mov    %r12,%rdi
   159b3:	be 0a 00 00 00       	mov    $0xa,%esi
   159b8:	ff 50 30             	callq  *0x30(%rax)
   159bb:	0f be f0             	movsbl %al,%esi
   159be:	4c 89 f7             	mov    %r14,%rdi
   159c1:	e8 5a 1d 00 00       	callq  17720 <_ZNSo3putEc@plt>
    { return __os.flush(); }
   159c6:	48 89 c7             	mov    %rax,%rdi
   159c9:	e8 72 1d 00 00       	callq  17740 <_ZNSo5flushEv@plt>
      : _M_current(__i) { }
   159ce:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
   159d3:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   159d8:	4d 29 f5             	sub    %r14,%r13
   159db:	49 c1 fd 05          	sar    $0x5,%r13
   159df:	4d 85 ed             	test   %r13,%r13
   159e2:	7e 28                	jle    15a0c <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x53c>
   159e4:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
            // Update generation
            ++gen;
        }

        // Set final generation programs(deepcopy)
        std::copy(h_currprogs.begin(), h_currprogs.end(), final_progs);
   159e9:	4c 8b 20             	mov    (%rax),%r12
   159ec:	49 ff c5             	inc    %r13
   159ef:	90                   	nop
	      *__result = *__first;
   159f0:	4c 89 e7             	mov    %r12,%rdi
   159f3:	4c 89 f6             	mov    %r14,%rsi
   159f6:	e8 45 84 ff ff       	callq  de40 <_ZN7genetic7programaSERKS0_>
	      ++__first;
   159fb:	49 83 c6 20          	add    $0x20,%r14
	      ++__result;
   159ff:	49 83 c4 20          	add    $0x20,%r12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   15a03:	49 ff cd             	dec    %r13
   15a06:	49 83 fd 01          	cmp    $0x1,%r13
   15a0a:	77 e4                	ja     159f0 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x520>
   15a0c:	0f 57 c0             	xorps  %xmm0,%xmm0
   15a0f:	f3 0f 10 4c 24 40    	movss  0x40(%rsp),%xmm1
        bool growAuto = (params.terminalRatio == 0.0f);
   15a15:	0f 2e c8             	ucomiss %xmm0,%xmm1

        // Reset automatic growth parameter
        if (growAuto) {
   15a18:	75 0c                	jne    15a26 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x556>
   15a1a:	7a 0a                	jp     15a26 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x556>
            params.terminalRatio = 0.0f;
   15a1c:	c7 83 b4 00 00 00 00 	movl   $0x0,0xb4(%rbx)
   15a23:	00 00 00 
	if (__p)
   15a26:	4d 85 ff             	test   %r15,%r15
   15a29:	74 08                	je     15a33 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x563>
	::operator delete(__p
   15a2b:	4c 89 ff             	mov    %r15,%rdi
   15a2e:	e8 8d 1c 00 00       	callq  176c0 <_ZdlPv@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   15a33:	48 8b 5c 24 20       	mov    0x20(%rsp),%rbx
   15a38:	4c 8b 74 24 28       	mov    0x28(%rsp),%r14
	  for (; __first != __last; ++__first)
   15a3d:	4c 39 f3             	cmp    %r14,%rbx
   15a40:	74 24                	je     15a66 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x596>
   15a42:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   15a49:	1f 84 00 00 00 00 00 
      __pointer->~_Tp();
   15a50:	48 89 df             	mov    %rbx,%rdi
   15a53:	e8 c8 82 ff ff       	callq  dd20 <_ZN7genetic7programD1Ev>
	  for (; __first != __last; ++__first)
   15a58:	48 83 c3 20          	add    $0x20,%rbx
   15a5c:	4c 39 f3             	cmp    %r14,%rbx
   15a5f:	75 ef                	jne    15a50 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x580>
	_M_deallocate(_M_impl._M_start,
   15a61:	48 8b 5c 24 20       	mov    0x20(%rsp),%rbx
	if (__p)
   15a66:	48 85 db             	test   %rbx,%rbx
   15a69:	74 08                	je     15a73 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x5a3>
   15a6b:	48 89 df             	mov    %rbx,%rdi
   15a6e:	e8 4d 1c 00 00       	callq  176c0 <_ZdlPv@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   15a73:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
   15a78:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
   15a7d:	4c 39 f3             	cmp    %r14,%rbx
   15a80:	74 24                	je     15aa6 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x5d6>
   15a82:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   15a89:	1f 84 00 00 00 00 00 
      __pointer->~_Tp();
   15a90:	48 89 df             	mov    %rbx,%rdi
   15a93:	e8 88 82 ff ff       	callq  dd20 <_ZN7genetic7programD1Ev>
	  for (; __first != __last; ++__first)
   15a98:	48 83 c3 20          	add    $0x20,%rbx
   15a9c:	4c 39 f3             	cmp    %r14,%rbx
   15a9f:	75 ef                	jne    15a90 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x5c0>
	_M_deallocate(_M_impl._M_start,
   15aa1:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
	if (__p)
   15aa6:	48 85 db             	test   %rbx,%rbx
   15aa9:	74 08                	je     15ab3 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x5e3>
   15aab:	48 89 df             	mov    %rbx,%rdi
   15aae:	e8 0d 1c 00 00       	callq  176c0 <_ZdlPv@plt>
        }
    }
   15ab3:	48 83 c4 68          	add    $0x68,%rsp
   15ab7:	5b                   	pop    %rbx
   15ab8:	41 5c                	pop    %r12
   15aba:	41 5d                	pop    %r13
   15abc:	41 5e                	pop    %r14
   15abe:	41 5f                	pop    %r15
   15ac0:	5d                   	pop    %rbp
   15ac1:	c3                   	retq   
	  __throw_length_error(
   15ac2:	48 8d 3d fa d2 fe ff 	lea    -0x12d06(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
   15ac9:	e8 a2 1a 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
   15ace:	48 8d 3d ee d2 fe ff 	lea    -0x12d12(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
   15ad5:	e8 96 1a 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
   15ada:	48 8d 3d e2 d2 fe ff 	lea    -0x12d1e(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
   15ae1:	e8 8a 1a 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
	__throw_bad_cast();
   15ae6:	e8 e5 1b 00 00       	callq  176d0 <_ZSt16__throw_bad_castv@plt>
   15aeb:	eb 41                	jmp    15b2e <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x65e>
   15aed:	48 89 c3             	mov    %rax,%rbx
	_M_deallocate(_M_impl._M_start,
   15af0:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (__p)
   15af5:	48 85 ff             	test   %rdi,%rdi
   15af8:	74 4e                	je     15b48 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x678>
   15afa:	e8 c1 1b 00 00       	callq  176c0 <_ZdlPv@plt>
   15aff:	eb 47                	jmp    15b48 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x678>
   15b01:	48 89 c3             	mov    %rax,%rbx
	_M_deallocate(_M_impl._M_start,
   15b04:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
	if (__p)
   15b09:	48 85 ff             	test   %rdi,%rdi
   15b0c:	74 44                	je     15b52 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x682>
   15b0e:	e8 ad 1b 00 00       	callq  176c0 <_ZdlPv@plt>
   15b13:	48 89 df             	mov    %rbx,%rdi
   15b16:	e8 55 1e 00 00       	callq  17970 <_Unwind_Resume@plt>
   15b1b:	48 89 c3             	mov    %rax,%rbx
   15b1e:	eb 1e                	jmp    15b3e <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x66e>
   15b20:	48 89 c3             	mov    %rax,%rbx
   15b23:	eb 23                	jmp    15b48 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x678>
   15b25:	48 89 c3             	mov    %rax,%rbx
   15b28:	eb 0c                	jmp    15b36 <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x666>
   15b2a:	eb 02                	jmp    15b2e <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x65e>
   15b2c:	eb 00                	jmp    15b2e <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x65e>
   15b2e:	48 89 c3             	mov    %rax,%rbx
   15b31:	4d 85 ff             	test   %r15,%r15
   15b34:	74 08                	je     15b3e <_ZN7genetic6symFitEPKfS1_S1_iRNS_5paramERPNS_7programERSt6vectorIS7_IS4_SaIS4_EESaIS9_EE+0x66e>
   15b36:	4c 89 ff             	mov    %r15,%rdi
   15b39:	e8 82 1b 00 00       	callq  176c0 <_ZdlPv@plt>
   15b3e:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
   15b43:	e8 d8 05 00 00       	callq  16120 <_ZNSt6vectorIN7genetic7programESaIS1_EED2Ev>
   15b48:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
   15b4d:	e8 ce 05 00 00       	callq  16120 <_ZNSt6vectorIN7genetic7programESaIS1_EED2Ev>
   15b52:	48 89 df             	mov    %rbx,%rdi
   15b55:	e8 16 1e 00 00       	callq  17970 <_Unwind_Resume@plt>
   15b5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000015b60 <_ZN7genetic13symRegPredictEPKfiRKPNS_7programEPf>:

    void symRegPredict(const float* input, const int n_rows, const program_t& best_prog,
                       float* output) {
   15b60:	49 89 c8             	mov    %rcx,%r8
   15b63:	48 89 f9             	mov    %rdi,%rcx
        // Assume best_prog is on device
        execute(best_prog, n_rows, 1, input, output);
   15b66:	48 89 d7             	mov    %rdx,%rdi
   15b69:	ba 01 00 00 00       	mov    $0x1,%edx
   15b6e:	e9 7d 85 ff ff       	jmpq   e0f0 <_ZN7genetic7executeERKPNS_7programEiiPKfPf>
   15b73:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   15b7a:	84 00 00 00 00 00 

0000000000015b80 <_ZN7genetic18symClfPredictProbsEPKfiRKNS_5paramERKPNS_7programEPf>:
    }

    void symClfPredictProbs(const float* input, const int n_rows, const param& params,
                            const program_t& best_prog, float* output) {
   15b80:	55                   	push   %rbp
   15b81:	41 57                	push   %r15
   15b83:	41 56                	push   %r14
   15b85:	41 54                	push   %r12
   15b87:	53                   	push   %rbx
   15b88:	4c 89 c3             	mov    %r8,%rbx
   15b8b:	49 89 d6             	mov    %rdx,%r14
   15b8e:	89 f5                	mov    %esi,%ebp
   15b90:	48 89 f8             	mov    %rdi,%rax
        // Assume output is of shape [n_rows, 2] in colMajor format
        execute(best_prog, n_rows, 1, input, output);
   15b93:	48 89 cf             	mov    %rcx,%rdi
   15b96:	ba 01 00 00 00       	mov    $0x1,%edx
   15b9b:	48 89 c1             	mov    %rax,%rcx
   15b9e:	e8 4d 85 ff ff       	callq  e0f0 <_ZN7genetic7executeERKPNS_7programEiiPKfPf>

        // Apply 2 map operations
        if (params.transformer == transformer_t::sigmoid) {
   15ba3:	41 83 be 90 00 00 00 	cmpl   $0x0,0x90(%r14)
   15baa:	00 
   15bab:	75 53                	jne    15c00 <_ZN7genetic18symClfPredictProbsEPKfiRKNS_5paramERKPNS_7programEPf+0x80>
   15bad:	85 ed                	test   %ebp,%ebp
   15baf:	7e 4f                	jle    15c00 <_ZN7genetic18symClfPredictProbsEPKfiRKNS_5paramERKPNS_7programEPf+0x80>
            for (auto i = 0; i < n_rows; ++i) {
   15bb1:	41 89 ee             	mov    %ebp,%r14d
   15bb4:	4e 8d 3c b3          	lea    (%rbx,%r14,4),%r15
   15bb8:	45 31 e4             	xor    %r12d,%r12d
   15bbb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                float in           = output[i];
                output[i + n_rows] = 1.0f / (1.0f + expf(-in));
   15bc0:	f3 42 0f 10 04 a3    	movss  (%rbx,%r12,4),%xmm0
   15bc6:	0f 57 05 33 cc fe ff 	xorps  -0x133cd(%rip),%xmm0        # 2800 <_IO_stdin_used+0x110>
   15bcd:	e8 3e 1d 00 00       	callq  17910 <expf@plt>
   15bd2:	f3 0f 10 15 f6 ca fe 	movss  -0x1350a(%rip),%xmm2        # 26d0 <_IO_stdin_used-0x20>
   15bd9:	ff 
   15bda:	f3 0f 58 c2          	addss  %xmm2,%xmm0
   15bde:	0f 28 ca             	movaps %xmm2,%xmm1
   15be1:	f3 0f 5e c8          	divss  %xmm0,%xmm1
   15be5:	f3 43 0f 11 0c a7    	movss  %xmm1,(%r15,%r12,4)
                output[i]          = 1.0f - output[i + n_rows];
   15beb:	0f 28 c2             	movaps %xmm2,%xmm0
   15bee:	f3 0f 5c c1          	subss  %xmm1,%xmm0
   15bf2:	f3 42 0f 11 04 a3    	movss  %xmm0,(%rbx,%r12,4)
            for (auto i = 0; i < n_rows; ++i) {
   15bf8:	49 ff c4             	inc    %r12
   15bfb:	4d 39 e6             	cmp    %r12,%r14
   15bfe:	75 c0                	jne    15bc0 <_ZN7genetic18symClfPredictProbsEPKfiRKNS_5paramERKPNS_7programEPf+0x40>
            }
        } else {
            // Only sigmoid supported for now
        }
    }
   15c00:	5b                   	pop    %rbx
   15c01:	41 5c                	pop    %r12
   15c03:	41 5e                	pop    %r14
   15c05:	41 5f                	pop    %r15
   15c07:	5d                   	pop    %rbp
   15c08:	c3                   	retq   
   15c09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000015c10 <_ZN7genetic13symClfPredictEPKfiRKNS_5paramERKPNS_7programEPf>:

    void symClfPredict(const float* input, const int n_rows, const param& params,
                       const program_t& best_prog, float* output) {
   15c10:	55                   	push   %rbp
   15c11:	41 57                	push   %r15
   15c13:	41 56                	push   %r14
   15c15:	41 55                	push   %r13
   15c17:	41 54                	push   %r12
   15c19:	53                   	push   %rbx
   15c1a:	50                   	push   %rax
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   15c1b:	85 f6                	test   %esi,%esi
   15c1d:	0f 88 bf 01 00 00    	js     15de2 <_ZN7genetic13symClfPredictEPKfiRKNS_5paramERKPNS_7programEPf+0x1d2>
   15c23:	4c 89 c3             	mov    %r8,%rbx
   15c26:	49 89 d4             	mov    %rdx,%r12
   15c29:	41 89 f7             	mov    %esi,%r15d
   15c2c:	48 89 fd             	mov    %rdi,%rbp
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   15c2f:	74 40                	je     15c71 <_ZN7genetic13symClfPredictEPKfiRKNS_5paramERKPNS_7programEPf+0x61>
   15c31:	48 89 0c 24          	mov    %rcx,(%rsp)
        // Memory for probabilities
        std::vector<float> probs(2 * n_rows);
   15c35:	43 8d 04 3f          	lea    (%r15,%r15,1),%eax
   15c39:	4d 89 e5             	mov    %r12,%r13
   15c3c:	4c 63 e0             	movslq %eax,%r12
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   15c3f:	4a 8d 3c a5 00 00 00 	lea    0x0(,%r12,4),%rdi
   15c46:	00 
   15c47:	e8 14 1b 00 00       	callq  17760 <_Znwm@plt>
   15c4c:	49 89 c6             	mov    %rax,%r14
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   15c4f:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
	      ++__first;
   15c55:	48 8d 78 04          	lea    0x4(%rax),%rdi
      for (; __first != __last; ++__first)
   15c59:	4a 8d 14 a5 fc ff ff 	lea    -0x4(,%r12,4),%rdx
   15c60:	ff 
   15c61:	4d 89 ec             	mov    %r13,%r12
	*__first = __tmp;
   15c64:	31 f6                	xor    %esi,%esi
   15c66:	e8 25 1d 00 00       	callq  17990 <memset@plt>
   15c6b:	48 8b 0c 24          	mov    (%rsp),%rcx
   15c6f:	eb 03                	jmp    15c74 <_ZN7genetic13symClfPredictEPKfiRKNS_5paramERKPNS_7programEPf+0x64>
   15c71:	45 31 f6             	xor    %r14d,%r14d
        execute(best_prog, n_rows, 1, input, output);
   15c74:	48 89 cf             	mov    %rcx,%rdi
   15c77:	44 89 fe             	mov    %r15d,%esi
   15c7a:	ba 01 00 00 00       	mov    $0x1,%edx
   15c7f:	48 89 e9             	mov    %rbp,%rcx
   15c82:	4d 89 f0             	mov    %r14,%r8
   15c85:	e8 66 84 ff ff       	callq  e0f0 <_ZN7genetic7executeERKPNS_7programEiiPKfPf>
   15c8a:	45 89 fd             	mov    %r15d,%r13d
   15c8d:	45 85 ff             	test   %r15d,%r15d
        if (params.transformer == transformer_t::sigmoid) {
   15c90:	74 5e                	je     15cf0 <_ZN7genetic13symClfPredictEPKfiRKNS_5paramERKPNS_7programEPf+0xe0>
   15c92:	41 83 bc 24 90 00 00 	cmpl   $0x0,0x90(%r12)
   15c99:	00 00 
   15c9b:	75 53                	jne    15cf0 <_ZN7genetic13symClfPredictEPKfiRKNS_5paramERKPNS_7programEPf+0xe0>
            for (auto i = 0; i < n_rows; ++i) {
   15c9d:	4f 8d 24 ae          	lea    (%r14,%r13,4),%r12
   15ca1:	31 ed                	xor    %ebp,%ebp
   15ca3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   15caa:	84 00 00 00 00 00 
                output[i + n_rows] = 1.0f / (1.0f + expf(-in));
   15cb0:	f3 41 0f 10 04 ae    	movss  (%r14,%rbp,4),%xmm0
   15cb6:	0f 57 05 43 cb fe ff 	xorps  -0x134bd(%rip),%xmm0        # 2800 <_IO_stdin_used+0x110>
   15cbd:	e8 4e 1c 00 00       	callq  17910 <expf@plt>
   15cc2:	f3 0f 10 15 06 ca fe 	movss  -0x135fa(%rip),%xmm2        # 26d0 <_IO_stdin_used-0x20>
   15cc9:	ff 
   15cca:	f3 0f 58 c2          	addss  %xmm2,%xmm0
   15cce:	0f 28 ca             	movaps %xmm2,%xmm1
   15cd1:	f3 0f 5e c8          	divss  %xmm0,%xmm1
   15cd5:	f3 41 0f 11 0c ac    	movss  %xmm1,(%r12,%rbp,4)
                output[i]          = 1.0f - output[i + n_rows];
   15cdb:	0f 28 c2             	movaps %xmm2,%xmm0
   15cde:	f3 0f 5c c1          	subss  %xmm1,%xmm0
   15ce2:	f3 41 0f 11 04 ae    	movss  %xmm0,(%r14,%rbp,4)
            for (auto i = 0; i < n_rows; ++i) {
   15ce8:	48 ff c5             	inc    %rbp
   15ceb:	49 39 ed             	cmp    %rbp,%r13
   15cee:	75 c0                	jne    15cb0 <_ZN7genetic13symClfPredictEPKfiRKNS_5paramERKPNS_7programEPf+0xa0>
   15cf0:	45 85 ff             	test   %r15d,%r15d
        symClfPredictProbs(input, n_rows, params, best_prog, probs.data());

        // Take argmax along columns
        // TODO: Further modification needed for n_classes
        for (auto i = 0; i < n_rows; ++i) {
   15cf3:	74 1a                	je     15d0f <_ZN7genetic13symClfPredictEPKfiRKNS_5paramERKPNS_7programEPf+0xff>
   15cf5:	41 83 ff 02          	cmp    $0x2,%r15d
   15cf9:	b8 01 00 00 00       	mov    $0x1,%eax
   15cfe:	41 0f 4d c7          	cmovge %r15d,%eax
   15d02:	41 83 ff 08          	cmp    $0x8,%r15d
   15d06:	7d 1f                	jge    15d27 <_ZN7genetic13symClfPredictEPKfiRKNS_5paramERKPNS_7programEPf+0x117>
   15d08:	31 c9                	xor    %ecx,%ecx
   15d0a:	e9 8e 00 00 00       	jmpq   15d9d <_ZN7genetic13symClfPredictEPKfiRKNS_5paramERKPNS_7programEPf+0x18d>
	if (__p)
   15d0f:	4d 85 f6             	test   %r14,%r14
   15d12:	0f 85 b4 00 00 00    	jne    15dcc <_ZN7genetic13symClfPredictEPKfiRKNS_5paramERKPNS_7programEPf+0x1bc>
            auto p0   = probs[i];
            auto p1   = probs[i + n_rows];
            output[i] = 1.0f * (p0 <= p1);
        }
    }
   15d18:	48 83 c4 08          	add    $0x8,%rsp
   15d1c:	5b                   	pop    %rbx
   15d1d:	41 5c                	pop    %r12
   15d1f:	41 5d                	pop    %r13
   15d21:	41 5e                	pop    %r14
   15d23:	41 5f                	pop    %r15
   15d25:	5d                   	pop    %rbp
   15d26:	c3                   	retq   
        for (auto i = 0; i < n_rows; ++i) {
   15d27:	89 c1                	mov    %eax,%ecx
   15d29:	81 e1 f8 ff ff 7f    	and    $0x7ffffff8,%ecx
   15d2f:	49 8d 56 10          	lea    0x10(%r14),%rdx
   15d33:	4b 8d 34 ae          	lea    (%r14,%r13,4),%rsi
   15d37:	48 83 c6 10          	add    $0x10,%rsi
   15d3b:	48 8d 3c 85 00 00 00 	lea    0x0(,%rax,4),%rdi
   15d42:	00 
   15d43:	48 83 e7 e0          	and    $0xffffffffffffffe0,%rdi
   15d47:	45 31 c0             	xor    %r8d,%r8d
   15d4a:	0f 28 05 bf ca fe ff 	movaps -0x13541(%rip),%xmm0        # 2810 <_IO_stdin_used+0x120>
   15d51:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   15d58:	0f 1f 84 00 00 00 00 
   15d5f:	00 
            auto p0   = probs[i];
   15d60:	42 0f 10 4c 02 f0    	movups -0x10(%rdx,%r8,1),%xmm1
   15d66:	42 0f 10 14 02       	movups (%rdx,%r8,1),%xmm2
            auto p1   = probs[i + n_rows];
   15d6b:	42 0f 10 5c 06 f0    	movups -0x10(%rsi,%r8,1),%xmm3
            output[i] = 1.0f * (p0 <= p1);
   15d71:	0f c2 cb 02          	cmpleps %xmm3,%xmm1
            auto p1   = probs[i + n_rows];
   15d75:	42 0f 10 1c 06       	movups (%rsi,%r8,1),%xmm3
            output[i] = 1.0f * (p0 <= p1);
   15d7a:	0f c2 d3 02          	cmpleps %xmm3,%xmm2
   15d7e:	0f 54 c8             	andps  %xmm0,%xmm1
   15d81:	0f 54 d0             	andps  %xmm0,%xmm2
   15d84:	42 0f 11 0c 03       	movups %xmm1,(%rbx,%r8,1)
   15d89:	42 0f 11 54 03 10    	movups %xmm2,0x10(%rbx,%r8,1)
        for (auto i = 0; i < n_rows; ++i) {
   15d8f:	49 83 c0 20          	add    $0x20,%r8
   15d93:	4c 39 c7             	cmp    %r8,%rdi
   15d96:	75 c8                	jne    15d60 <_ZN7genetic13symClfPredictEPKfiRKNS_5paramERKPNS_7programEPf+0x150>
   15d98:	48 39 c1             	cmp    %rax,%rcx
   15d9b:	74 2f                	je     15dcc <_ZN7genetic13symClfPredictEPKfiRKNS_5paramERKPNS_7programEPf+0x1bc>
   15d9d:	4b 8d 14 ae          	lea    (%r14,%r13,4),%rdx
   15da1:	f3 0f 10 05 27 c9 fe 	movss  -0x136d9(%rip),%xmm0        # 26d0 <_IO_stdin_used-0x20>
   15da8:	ff 
   15da9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            auto p0   = probs[i];
   15db0:	f3 41 0f 10 0c 8e    	movss  (%r14,%rcx,4),%xmm1
            output[i] = 1.0f * (p0 <= p1);
   15db6:	f3 0f c2 0c 8a 02    	cmpless (%rdx,%rcx,4),%xmm1
   15dbc:	0f 54 c8             	andps  %xmm0,%xmm1
   15dbf:	f3 0f 11 0c 8b       	movss  %xmm1,(%rbx,%rcx,4)
        for (auto i = 0; i < n_rows; ++i) {
   15dc4:	48 ff c1             	inc    %rcx
   15dc7:	48 39 c8             	cmp    %rcx,%rax
   15dca:	75 e4                	jne    15db0 <_ZN7genetic13symClfPredictEPKfiRKNS_5paramERKPNS_7programEPf+0x1a0>
	::operator delete(__p
   15dcc:	4c 89 f7             	mov    %r14,%rdi
   15dcf:	48 83 c4 08          	add    $0x8,%rsp
   15dd3:	5b                   	pop    %rbx
   15dd4:	41 5c                	pop    %r12
   15dd6:	41 5d                	pop    %r13
   15dd8:	41 5e                	pop    %r14
   15dda:	41 5f                	pop    %r15
   15ddc:	5d                   	pop    %rbp
   15ddd:	e9 de 18 00 00       	jmpq   176c0 <_ZdlPv@plt>
	  __throw_length_error(
   15de2:	48 8d 3d da cf fe ff 	lea    -0x13026(%rip),%rdi        # 2dc3 <_IO_stdin_used+0x6d3>
   15de9:	e8 82 17 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
   15dee:	48 89 c3             	mov    %rax,%rbx
	if (__p)
   15df1:	4d 85 f6             	test   %r14,%r14
   15df4:	74 08                	je     15dfe <_ZN7genetic13symClfPredictEPKfiRKNS_5paramERKPNS_7programEPf+0x1ee>
   15df6:	4c 89 f7             	mov    %r14,%rdi
   15df9:	e8 c2 18 00 00       	callq  176c0 <_ZdlPv@plt>
   15dfe:	48 89 df             	mov    %rbx,%rdi
   15e01:	e8 6a 1b 00 00       	callq  17970 <_Unwind_Resume@plt>
   15e06:	cc                   	int3   
   15e07:	cc                   	int3   
   15e08:	cc                   	int3   
   15e09:	cc                   	int3   
   15e0a:	cc                   	int3   
   15e0b:	cc                   	int3   
   15e0c:	cc                   	int3   
   15e0d:	cc                   	int3   
   15e0e:	cc                   	int3   
   15e0f:	cc                   	int3   

0000000000015e10 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z>:
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
   15e10:	55                   	push   %rbp
   15e11:	48 89 e5             	mov    %rsp,%rbp
   15e14:	41 57                	push   %r15
   15e16:	41 56                	push   %r14
   15e18:	41 54                	push   %r12
   15e1a:	53                   	push   %rbx
   15e1b:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
   15e22:	49 89 f2             	mov    %rsi,%r10
   15e25:	48 89 fb             	mov    %rdi,%rbx
   15e28:	4c 89 85 30 ff ff ff 	mov    %r8,-0xd0(%rbp)
   15e2f:	4c 89 8d 38 ff ff ff 	mov    %r9,-0xc8(%rbp)
   15e36:	84 c0                	test   %al,%al
   15e38:	74 2c                	je     15e66 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z+0x56>
   15e3a:	0f 29 85 40 ff ff ff 	movaps %xmm0,-0xc0(%rbp)
   15e41:	0f 29 8d 50 ff ff ff 	movaps %xmm1,-0xb0(%rbp)
   15e48:	0f 29 95 60 ff ff ff 	movaps %xmm2,-0xa0(%rbp)
   15e4f:	0f 29 9d 70 ff ff ff 	movaps %xmm3,-0x90(%rbp)
   15e56:	0f 29 65 80          	movaps %xmm4,-0x80(%rbp)
   15e5a:	0f 29 6d 90          	movaps %xmm5,-0x70(%rbp)
   15e5e:	0f 29 75 a0          	movaps %xmm6,-0x60(%rbp)
   15e62:	0f 29 7d b0          	movaps %xmm7,-0x50(%rbp)
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
   15e66:	49 89 e6             	mov    %rsp,%r14
   15e69:	48 8d 42 0f          	lea    0xf(%rdx),%rax
   15e6d:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
   15e71:	49 29 c6             	sub    %rax,%r14
   15e74:	4c 89 f4             	mov    %r14,%rsp
   15e77:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
   15e7e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   15e82:	48 8d 45 10          	lea    0x10(%rbp),%rax
   15e86:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   15e8a:	48 b8 20 00 00 00 30 	movabs $0x3000000020,%rax
   15e91:	00 00 00 
   15e94:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   15e98:	48 8d 45 c0          	lea    -0x40(%rbp),%rax

      const int __len = __convf(__s, __n, __fmt, __args);
   15e9c:	4c 89 f7             	mov    %r14,%rdi
   15e9f:	48 89 d6             	mov    %rdx,%rsi
   15ea2:	48 89 ca             	mov    %rcx,%rdx
   15ea5:	48 89 c1             	mov    %rax,%rcx
   15ea8:	41 ff d2             	callq  *%r10
   15eab:	41 89 c4             	mov    %eax,%r12d

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
   15eae:	4c 63 f8             	movslq %eax,%r15
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   15eb1:	48 8d 43 10          	lea    0x10(%rbx),%rax
	: allocator_type(__a), _M_p(__dat) { }
   15eb5:	48 89 03             	mov    %rax,(%rbx)
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   15eb8:	4c 89 7d d8          	mov    %r15,-0x28(%rbp)
	if (__dnew > size_type(_S_local_capacity))
   15ebc:	41 83 ff 10          	cmp    $0x10,%r15d
   15ec0:	72 19                	jb     15edb <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z+0xcb>
   15ec2:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
	    _M_data(_M_create(__dnew, size_type(0)));
   15ec6:	48 89 df             	mov    %rbx,%rdi
   15ec9:	31 d2                	xor    %edx,%edx
   15ecb:	e8 b0 18 00 00       	callq  17780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
   15ed0:	48 89 03             	mov    %rax,(%rbx)
	    _M_capacity(__dnew);
   15ed3:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
      { _M_allocated_capacity = __capacity; }
   15ed7:	48 89 4b 10          	mov    %rcx,0x10(%rbx)
	if (__n == 1)
   15edb:	45 85 e4             	test   %r12d,%r12d
   15ede:	74 1c                	je     15efc <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z+0xec>
   15ee0:	41 83 fc 01          	cmp    $0x1,%r12d
   15ee4:	75 08                	jne    15eee <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z+0xde>
   15ee6:	41 0f b6 0e          	movzbl (%r14),%ecx
   15eea:	88 08                	mov    %cl,(%rax)
   15eec:	eb 0e                	jmp    15efc <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z+0xec>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   15eee:	48 89 c7             	mov    %rax,%rdi
   15ef1:	4c 89 f6             	mov    %r14,%rsi
   15ef4:	4c 89 fa             	mov    %r15,%rdx
   15ef7:	e8 c4 1a 00 00       	callq  179c0 <memcpy@plt>
	_M_set_length(__dnew);
   15efc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      { _M_string_length = __length; }
   15f00:	48 89 43 08          	mov    %rax,0x8(%rbx)
      { return _M_dataplus._M_p; }
   15f04:	48 8b 0b             	mov    (%rbx),%rcx
      { __c1 = __c2; }
   15f07:	c6 04 01 00          	movb   $0x0,(%rcx,%rax,1)
    }
   15f0b:	48 89 d8             	mov    %rbx,%rax
   15f0e:	48 8d 65 e0          	lea    -0x20(%rbp),%rsp
   15f12:	5b                   	pop    %rbx
   15f13:	41 5c                	pop    %r12
   15f15:	41 5e                	pop    %r14
   15f17:	41 5f                	pop    %r15
   15f19:	5d                   	pop    %rbp
   15f1a:	c3                   	retq   
   15f1b:	cc                   	int3   
   15f1c:	cc                   	int3   
   15f1d:	cc                   	int3   
   15f1e:	cc                   	int3   
   15f1f:	cc                   	int3   

0000000000015f20 <_ZNSt6vectorIN7genetic7programESaIS1_EEaSERKS3_>:
    {
   15f20:	55                   	push   %rbp
   15f21:	41 57                	push   %r15
   15f23:	41 56                	push   %r14
   15f25:	41 55                	push   %r13
   15f27:	41 54                	push   %r12
   15f29:	53                   	push   %rbx
   15f2a:	48 83 ec 18          	sub    $0x18,%rsp
   15f2e:	49 89 fc             	mov    %rdi,%r12
      if (&__x != this)
   15f31:	48 39 fe             	cmp    %rdi,%rsi
   15f34:	0f 84 95 01 00 00    	je     160cf <_ZNSt6vectorIN7genetic7programESaIS1_EEaSERKS3_+0x1af>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   15f3a:	4c 8b 3e             	mov    (%rsi),%r15
   15f3d:	48 8b 6e 08          	mov    0x8(%rsi),%rbp
   15f41:	48 89 e9             	mov    %rbp,%rcx
   15f44:	4c 29 f9             	sub    %r15,%rcx
   15f47:	49 89 cd             	mov    %rcx,%r13
   15f4a:	49 c1 fd 05          	sar    $0x5,%r13
   15f4e:	4c 89 e3             	mov    %r12,%rbx
			 - this->_M_impl._M_start); }
   15f51:	4d 8b 24 24          	mov    (%r12),%r12
      { return size_type(this->_M_impl._M_end_of_storage
   15f55:	48 8b 43 10          	mov    0x10(%rbx),%rax
			 - this->_M_impl._M_start); }
   15f59:	4c 29 e0             	sub    %r12,%rax
	  if (__xlen > capacity())
   15f5c:	48 39 c1             	cmp    %rax,%rcx
   15f5f:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
   15f64:	76 5f                	jbe    15fc5 <_ZNSt6vectorIN7genetic7programESaIS1_EEaSERKS3_+0xa5>
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
   15f66:	48 89 df             	mov    %rbx,%rdi
   15f69:	4c 89 ee             	mov    %r13,%rsi
   15f6c:	4c 89 fa             	mov    %r15,%rdx
   15f6f:	48 89 e9             	mov    %rbp,%rcx
   15f72:	e8 79 02 00 00       	callq  161f0 <_ZNSt6vectorIN7genetic7programESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_mT_SB_>
   15f77:	49 89 c5             	mov    %rax,%r13
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   15f7a:	4c 8b 33             	mov    (%rbx),%r14
   15f7d:	4c 8b 7b 08          	mov    0x8(%rbx),%r15
	  for (; __first != __last; ++__first)
   15f81:	4d 39 fe             	cmp    %r15,%r14
   15f84:	49 89 dc             	mov    %rbx,%r12
   15f87:	74 1c                	je     15fa5 <_ZNSt6vectorIN7genetic7programESaIS1_EEaSERKS3_+0x85>
   15f89:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      __pointer->~_Tp();
   15f90:	4c 89 f7             	mov    %r14,%rdi
   15f93:	e8 88 7d ff ff       	callq  dd20 <_ZN7genetic7programD1Ev>
	  for (; __first != __last; ++__first)
   15f98:	49 83 c6 20          	add    $0x20,%r14
   15f9c:	4d 39 fe             	cmp    %r15,%r14
   15f9f:	75 ef                	jne    15f90 <_ZNSt6vectorIN7genetic7programESaIS1_EEaSERKS3_+0x70>
	      _M_deallocate(this->_M_impl._M_start,
   15fa1:	4d 8b 34 24          	mov    (%r12),%r14
	if (__p)
   15fa5:	4d 85 f6             	test   %r14,%r14
   15fa8:	74 08                	je     15fb2 <_ZNSt6vectorIN7genetic7programESaIS1_EEaSERKS3_+0x92>
   15faa:	4c 89 f7             	mov    %r14,%rdi
   15fad:	e8 0e 17 00 00       	callq  176c0 <_ZdlPv@plt>
	      this->_M_impl._M_start = __tmp;
   15fb2:	4d 89 2c 24          	mov    %r13,(%r12)
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   15fb6:	4c 03 6c 24 10       	add    0x10(%rsp),%r13
   15fbb:	4d 89 6c 24 10       	mov    %r13,0x10(%r12)
   15fc0:	e9 fc 00 00 00       	jmpq   160c1 <_ZNSt6vectorIN7genetic7programESaIS1_EEaSERKS3_+0x1a1>
   15fc5:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   15fca:	4c 8b 73 08          	mov    0x8(%rbx),%r14
   15fce:	4c 89 f3             	mov    %r14,%rbx
   15fd1:	4c 29 e3             	sub    %r12,%rbx
	  else if (size() >= __xlen)
   15fd4:	48 39 cb             	cmp    %rcx,%rbx
   15fd7:	73 4d                	jae    16026 <_ZNSt6vectorIN7genetic7programESaIS1_EEaSERKS3_+0x106>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   15fd9:	49 89 dd             	mov    %rbx,%r13
   15fdc:	49 c1 fd 05          	sar    $0x5,%r13
   15fe0:	4d 85 ed             	test   %r13,%r13
   15fe3:	0f 8e 7e 00 00 00    	jle    16067 <_ZNSt6vectorIN7genetic7programESaIS1_EEaSERKS3_+0x147>
   15fe9:	48 89 f3             	mov    %rsi,%rbx
   15fec:	49 ff c5             	inc    %r13
   15fef:	90                   	nop
	      *__result = *__first;
   15ff0:	4c 89 e7             	mov    %r12,%rdi
   15ff3:	4c 89 fe             	mov    %r15,%rsi
   15ff6:	e8 45 7e ff ff       	callq  de40 <_ZN7genetic7programaSERKS0_>
	      ++__first;
   15ffb:	49 83 c7 20          	add    $0x20,%r15
	      ++__result;
   15fff:	49 83 c4 20          	add    $0x20,%r12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   16003:	49 ff cd             	dec    %r13
   16006:	49 83 fd 01          	cmp    $0x1,%r13
   1600a:	77 e4                	ja     15ff0 <_ZNSt6vectorIN7genetic7programESaIS1_EEaSERKS3_+0xd0>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   1600c:	4c 8b 3b             	mov    (%rbx),%r15
					  __x._M_impl._M_finish,
   1600f:	48 8b 6b 08          	mov    0x8(%rbx),%rbp
   16013:	4c 8b 64 24 08       	mov    0x8(%rsp),%r12
   16018:	4d 8b 74 24 08       	mov    0x8(%r12),%r14
   1601d:	4c 89 f3             	mov    %r14,%rbx
   16020:	49 2b 1c 24          	sub    (%r12),%rbx
   16024:	eb 46                	jmp    1606c <_ZNSt6vectorIN7genetic7programESaIS1_EEaSERKS3_+0x14c>
   16026:	4d 85 ed             	test   %r13,%r13
   16029:	7e 75                	jle    160a0 <_ZNSt6vectorIN7genetic7programESaIS1_EEaSERKS3_+0x180>
   1602b:	49 8d 5d 01          	lea    0x1(%r13),%rbx
   1602f:	49 c1 e5 05          	shl    $0x5,%r13
   16033:	4d 01 e5             	add    %r12,%r13
   16036:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1603d:	00 00 00 
	      *__result = *__first;
   16040:	4c 89 e7             	mov    %r12,%rdi
   16043:	4c 89 fe             	mov    %r15,%rsi
   16046:	e8 f5 7d ff ff       	callq  de40 <_ZN7genetic7programaSERKS0_>
	      ++__first;
   1604b:	49 83 c7 20          	add    $0x20,%r15
	      ++__result;
   1604f:	49 83 c4 20          	add    $0x20,%r12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   16053:	48 ff cb             	dec    %rbx
   16056:	48 83 fb 01          	cmp    $0x1,%rbx
   1605a:	77 e4                	ja     16040 <_ZNSt6vectorIN7genetic7programESaIS1_EEaSERKS3_+0x120>
   1605c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
   16061:	4c 8b 70 08          	mov    0x8(%rax),%r14
   16065:	eb 3c                	jmp    160a3 <_ZNSt6vectorIN7genetic7programESaIS1_EEaSERKS3_+0x183>
   16067:	4c 8b 64 24 08       	mov    0x8(%rsp),%r12
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   1606c:	4c 01 fb             	add    %r15,%rbx
	      for (; __first != __last; ++__first, (void)++__cur)
   1606f:	48 39 eb             	cmp    %rbp,%rbx
   16072:	74 4d                	je     160c1 <_ZNSt6vectorIN7genetic7programESaIS1_EEaSERKS3_+0x1a1>
   16074:	45 31 ff             	xor    %r15d,%r15d
   16077:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1607e:	00 00 
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   16080:	4b 8d 3c 3e          	lea    (%r14,%r15,1),%rdi
   16084:	4a 8d 34 3b          	lea    (%rbx,%r15,1),%rsi
   16088:	e8 b3 7c ff ff       	callq  dd40 <_ZN7genetic7programC1ERKS0_>
   1608d:	4a 8d 04 3b          	lea    (%rbx,%r15,1),%rax
   16091:	48 83 c0 20          	add    $0x20,%rax
   16095:	49 83 c7 20          	add    $0x20,%r15
   16099:	48 39 e8             	cmp    %rbp,%rax
   1609c:	75 e2                	jne    16080 <_ZNSt6vectorIN7genetic7programESaIS1_EEaSERKS3_+0x160>
   1609e:	eb 21                	jmp    160c1 <_ZNSt6vectorIN7genetic7programESaIS1_EEaSERKS3_+0x1a1>
   160a0:	4d 89 e5             	mov    %r12,%r13
    { return __lhs.base() != __rhs.base(); }
   160a3:	4d 39 f4             	cmp    %r14,%r12
   160a6:	4c 8b 64 24 08       	mov    0x8(%rsp),%r12
	  for (; __first != __last; ++__first)
   160ab:	74 14                	je     160c1 <_ZNSt6vectorIN7genetic7programESaIS1_EEaSERKS3_+0x1a1>
   160ad:	0f 1f 00             	nopl   (%rax)
      __pointer->~_Tp();
   160b0:	4c 89 ef             	mov    %r13,%rdi
   160b3:	e8 68 7c ff ff       	callq  dd20 <_ZN7genetic7programD1Ev>
	++_M_current;
   160b8:	49 83 c5 20          	add    $0x20,%r13
    { return __lhs.base() != __rhs.base(); }
   160bc:	4d 39 f5             	cmp    %r14,%r13
	  for (; __first != __last; ++__first)
   160bf:	75 ef                	jne    160b0 <_ZNSt6vectorIN7genetic7programESaIS1_EEaSERKS3_+0x190>
   160c1:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   160c6:	49 03 04 24          	add    (%r12),%rax
   160ca:	49 89 44 24 08       	mov    %rax,0x8(%r12)
      return *this;
   160cf:	4c 89 e0             	mov    %r12,%rax
   160d2:	48 83 c4 18          	add    $0x18,%rsp
   160d6:	5b                   	pop    %rbx
   160d7:	41 5c                	pop    %r12
   160d9:	41 5d                	pop    %r13
   160db:	41 5e                	pop    %r14
   160dd:	41 5f                	pop    %r15
   160df:	5d                   	pop    %rbp
   160e0:	c3                   	retq   
	    }
   160e1:	48 89 c7             	mov    %rax,%rdi
   160e4:	e8 c7 15 00 00       	callq  176b0 <__cxa_begin_catch@plt>
   160e9:	4d 85 ff             	test   %r15,%r15
   160ec:	74 14                	je     16102 <_ZNSt6vectorIN7genetic7programESaIS1_EEaSERKS3_+0x1e2>
   160ee:	66 90                	xchg   %ax,%ax
      __pointer->~_Tp();
   160f0:	4c 89 f7             	mov    %r14,%rdi
   160f3:	e8 28 7c ff ff       	callq  dd20 <_ZN7genetic7programD1Ev>
	  for (; __first != __last; ++__first)
   160f8:	49 83 c6 20          	add    $0x20,%r14
   160fc:	49 83 c7 e0          	add    $0xffffffffffffffe0,%r15
   16100:	75 ee                	jne    160f0 <_ZNSt6vectorIN7genetic7programESaIS1_EEaSERKS3_+0x1d0>
	      __throw_exception_again;
   16102:	e8 89 16 00 00       	callq  17790 <__cxa_rethrow@plt>
   16107:	48 89 c3             	mov    %rax,%rbx
	    }
   1610a:	e8 b1 16 00 00       	callq  177c0 <__cxa_end_catch@plt>
   1610f:	48 89 df             	mov    %rbx,%rdi
   16112:	e8 59 18 00 00       	callq  17970 <_Unwind_Resume@plt>
   16117:	48 89 c7             	mov    %rax,%rdi
   1611a:	e8 61 67 ff ff       	callq  c880 <__clang_call_terminate>
   1611f:	cc                   	int3   

0000000000016120 <_ZNSt6vectorIN7genetic7programESaIS1_EED2Ev>:
      {
   16120:	41 57                	push   %r15
   16122:	41 56                	push   %r14
   16124:	53                   	push   %rbx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   16125:	48 8b 1f             	mov    (%rdi),%rbx
   16128:	4c 8b 7f 08          	mov    0x8(%rdi),%r15
   1612c:	4c 39 fb             	cmp    %r15,%rbx
   1612f:	74 23                	je     16154 <_ZNSt6vectorIN7genetic7programESaIS1_EED2Ev+0x34>
   16131:	49 89 fe             	mov    %rdi,%r14
   16134:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
   1613b:	00 00 00 00 00 
      __pointer->~_Tp();
   16140:	48 89 df             	mov    %rbx,%rdi
   16143:	e8 d8 7b ff ff       	callq  dd20 <_ZN7genetic7programD1Ev>
	  for (; __first != __last; ++__first)
   16148:	48 83 c3 20          	add    $0x20,%rbx
   1614c:	4c 39 fb             	cmp    %r15,%rbx
   1614f:	75 ef                	jne    16140 <_ZNSt6vectorIN7genetic7programESaIS1_EED2Ev+0x20>
	_M_deallocate(_M_impl._M_start,
   16151:	49 8b 1e             	mov    (%r14),%rbx
	if (__p)
   16154:	48 85 db             	test   %rbx,%rbx
   16157:	74 0d                	je     16166 <_ZNSt6vectorIN7genetic7programESaIS1_EED2Ev+0x46>
   16159:	48 89 df             	mov    %rbx,%rdi
   1615c:	5b                   	pop    %rbx
   1615d:	41 5e                	pop    %r14
   1615f:	41 5f                	pop    %r15
   16161:	e9 5a 15 00 00       	jmpq   176c0 <_ZdlPv@plt>
      }
   16166:	5b                   	pop    %rbx
   16167:	41 5e                	pop    %r14
   16169:	41 5f                	pop    %r15
   1616b:	c3                   	retq   
   1616c:	cc                   	int3   
   1616d:	cc                   	int3   
   1616e:	cc                   	int3   
   1616f:	cc                   	int3   

0000000000016170 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN7genetic7programEmEET_S5_T0_>:
        {
   16170:	41 57                	push   %r15
   16172:	41 56                	push   %r14
   16174:	53                   	push   %rbx
   16175:	48 89 fb             	mov    %rdi,%rbx
	      for (; __n > 0; --__n, (void) ++__cur)
   16178:	48 85 f6             	test   %rsi,%rsi
   1617b:	74 28                	je     161a5 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN7genetic7programEmEET_S5_T0_+0x35>
   1617d:	49 89 f6             	mov    %rsi,%r14
   16180:	45 31 ff             	xor    %r15d,%r15d
   16183:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   1618a:	84 00 00 00 00 00 
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   16190:	4a 8d 3c 3b          	lea    (%rbx,%r15,1),%rdi
   16194:	e8 67 7b ff ff       	callq  dd00 <_ZN7genetic7programC1Ev>
   16199:	49 83 c7 20          	add    $0x20,%r15
   1619d:	49 ff ce             	dec    %r14
   161a0:	75 ee                	jne    16190 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN7genetic7programEmEET_S5_T0_+0x20>
	      return __cur;
   161a2:	4c 01 fb             	add    %r15,%rbx
   161a5:	48 89 d8             	mov    %rbx,%rax
   161a8:	5b                   	pop    %rbx
   161a9:	41 5e                	pop    %r14
   161ab:	41 5f                	pop    %r15
   161ad:	c3                   	retq   
	    }
   161ae:	48 89 c7             	mov    %rax,%rdi
   161b1:	e8 fa 14 00 00       	callq  176b0 <__cxa_begin_catch@plt>
	  for (; __first != __last; ++__first)
   161b6:	4d 85 ff             	test   %r15,%r15
   161b9:	74 17                	je     161d2 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN7genetic7programEmEET_S5_T0_+0x62>
   161bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      __pointer->~_Tp();
   161c0:	48 89 df             	mov    %rbx,%rdi
   161c3:	e8 58 7b ff ff       	callq  dd20 <_ZN7genetic7programD1Ev>
	  for (; __first != __last; ++__first)
   161c8:	48 83 c3 20          	add    $0x20,%rbx
   161cc:	49 83 c7 e0          	add    $0xffffffffffffffe0,%r15
   161d0:	75 ee                	jne    161c0 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN7genetic7programEmEET_S5_T0_+0x50>
	      __throw_exception_again;
   161d2:	e8 b9 15 00 00       	callq  17790 <__cxa_rethrow@plt>
   161d7:	48 89 c3             	mov    %rax,%rbx
	    }
   161da:	e8 e1 15 00 00       	callq  177c0 <__cxa_end_catch@plt>
   161df:	48 89 df             	mov    %rbx,%rdi
   161e2:	e8 89 17 00 00       	callq  17970 <_Unwind_Resume@plt>
   161e7:	48 89 c7             	mov    %rax,%rdi
   161ea:	e8 91 66 ff ff       	callq  c880 <__clang_call_terminate>
   161ef:	cc                   	int3   

00000000000161f0 <_ZNSt6vectorIN7genetic7programESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_mT_SB_>:
	{
   161f0:	41 57                	push   %r15
   161f2:	41 56                	push   %r14
   161f4:	41 54                	push   %r12
   161f6:	53                   	push   %rbx
   161f7:	50                   	push   %rax
   161f8:	49 89 ce             	mov    %rcx,%r14
   161fb:	49 89 d7             	mov    %rdx,%r15
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   161fe:	48 85 f6             	test   %rsi,%rsi
   16201:	74 1f                	je     16222 <_ZNSt6vectorIN7genetic7programESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_mT_SB_+0x32>
	if (__n > this->_M_max_size())
   16203:	48 89 f0             	mov    %rsi,%rax
   16206:	48 c1 e8 3a          	shr    $0x3a,%rax
   1620a:	75 51                	jne    1625d <_ZNSt6vectorIN7genetic7programESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_mT_SB_+0x6d>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   1620c:	48 c1 e6 05          	shl    $0x5,%rsi
   16210:	48 89 f7             	mov    %rsi,%rdi
   16213:	e8 48 15 00 00       	callq  17760 <_Znwm@plt>
   16218:	48 89 c3             	mov    %rax,%rbx
   1621b:	4d 39 f7             	cmp    %r14,%r15
	      for (; __first != __last; ++__first, (void)++__cur)
   1621e:	75 09                	jne    16229 <_ZNSt6vectorIN7genetic7programESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_mT_SB_+0x39>
   16220:	eb 2c                	jmp    1624e <_ZNSt6vectorIN7genetic7programESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_mT_SB_+0x5e>
   16222:	31 db                	xor    %ebx,%ebx
   16224:	4d 39 f7             	cmp    %r14,%r15
   16227:	74 25                	je     1624e <_ZNSt6vectorIN7genetic7programESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_mT_SB_+0x5e>
   16229:	45 31 e4             	xor    %r12d,%r12d
   1622c:	0f 1f 40 00          	nopl   0x0(%rax)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   16230:	4a 8d 3c 23          	lea    (%rbx,%r12,1),%rdi
   16234:	4b 8d 34 27          	lea    (%r15,%r12,1),%rsi
   16238:	e8 03 7b ff ff       	callq  dd40 <_ZN7genetic7programC1ERKS0_>
   1623d:	4b 8d 04 27          	lea    (%r15,%r12,1),%rax
   16241:	48 83 c0 20          	add    $0x20,%rax
   16245:	49 83 c4 20          	add    $0x20,%r12
   16249:	4c 39 f0             	cmp    %r14,%rax
   1624c:	75 e2                	jne    16230 <_ZNSt6vectorIN7genetic7programESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_mT_SB_+0x40>
	      return __result;
   1624e:	48 89 d8             	mov    %rbx,%rax
   16251:	48 83 c4 08          	add    $0x8,%rsp
   16255:	5b                   	pop    %rbx
   16256:	41 5c                	pop    %r12
   16258:	41 5e                	pop    %r14
   1625a:	41 5f                	pop    %r15
   1625c:	c3                   	retq   
	  std::__throw_bad_alloc();
   1625d:	e8 3e 14 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
	    }
   16262:	48 89 c7             	mov    %rax,%rdi
   16265:	e8 46 14 00 00       	callq  176b0 <__cxa_begin_catch@plt>
	  for (; __first != __last; ++__first)
   1626a:	4d 85 e4             	test   %r12,%r12
   1626d:	74 23                	je     16292 <_ZNSt6vectorIN7genetic7programESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_mT_SB_+0xa2>
   1626f:	49 89 de             	mov    %rbx,%r14
   16272:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   16279:	1f 84 00 00 00 00 00 
      __pointer->~_Tp();
   16280:	4c 89 f7             	mov    %r14,%rdi
   16283:	e8 98 7a ff ff       	callq  dd20 <_ZN7genetic7programD1Ev>
	  for (; __first != __last; ++__first)
   16288:	49 83 c6 20          	add    $0x20,%r14
   1628c:	49 83 c4 e0          	add    $0xffffffffffffffe0,%r12
   16290:	75 ee                	jne    16280 <_ZNSt6vectorIN7genetic7programESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_mT_SB_+0x90>
	      __throw_exception_again;
   16292:	e8 f9 14 00 00       	callq  17790 <__cxa_rethrow@plt>
   16297:	49 89 c6             	mov    %rax,%r14
	    }
   1629a:	e8 21 15 00 00       	callq  177c0 <__cxa_end_catch@plt>
	    }
   1629f:	4c 89 f7             	mov    %r14,%rdi
   162a2:	e8 09 14 00 00       	callq  176b0 <__cxa_begin_catch@plt>
	if (__p)
   162a7:	48 85 db             	test   %rbx,%rbx
   162aa:	74 08                	je     162b4 <_ZNSt6vectorIN7genetic7programESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_mT_SB_+0xc4>
	::operator delete(__p
   162ac:	48 89 df             	mov    %rbx,%rdi
   162af:	e8 0c 14 00 00       	callq  176c0 <_ZdlPv@plt>
	      __throw_exception_again;
   162b4:	e8 d7 14 00 00       	callq  17790 <__cxa_rethrow@plt>
   162b9:	48 89 c3             	mov    %rax,%rbx
	    }
   162bc:	e8 ff 14 00 00       	callq  177c0 <__cxa_end_catch@plt>
   162c1:	48 89 df             	mov    %rbx,%rdi
   162c4:	e8 a7 16 00 00       	callq  17970 <_Unwind_Resume@plt>
   162c9:	48 89 c7             	mov    %rax,%rdi
   162cc:	e8 af 65 ff ff       	callq  c880 <__clang_call_terminate>
   162d1:	48 89 c7             	mov    %rax,%rdi
   162d4:	e8 a7 65 ff ff       	callq  c880 <__clang_call_terminate>
   162d9:	cc                   	int3   
   162da:	cc                   	int3   
   162db:	cc                   	int3   
   162dc:	cc                   	int3   
   162dd:	cc                   	int3   
   162de:	cc                   	int3   
   162df:	cc                   	int3   

00000000000162e0 <_ZNSt6vectorIS_IN7genetic7programESaIS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>:
    {
   162e0:	55                   	push   %rbp
   162e1:	41 57                	push   %r15
   162e3:	41 56                	push   %r14
   162e5:	41 55                	push   %r13
   162e7:	41 54                	push   %r12
   162e9:	53                   	push   %rbx
   162ea:	50                   	push   %rax
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   162eb:	4c 8b 37             	mov    (%rdi),%r14
   162ee:	48 8b 5f 08          	mov    0x8(%rdi),%rbx
   162f2:	48 89 d8             	mov    %rbx,%rax
   162f5:	4c 29 f0             	sub    %r14,%rax
   162f8:	48 b9 f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%rcx
   162ff:	ff ff 7f 
	if (max_size() - size() < __n)
   16302:	48 39 c8             	cmp    %rcx,%rax
   16305:	0f 84 48 01 00 00    	je     16453 <_ZNSt6vectorIS_IN7genetic7programESaIS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x173>
   1630b:	49 89 f7             	mov    %rsi,%r15
   1630e:	48 89 3c 24          	mov    %rdi,(%rsp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   16312:	48 c1 f8 03          	sar    $0x3,%rax
   16316:	48 b9 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rcx
   1631d:	aa aa aa 
   16320:	48 0f af c1          	imul   %rcx,%rax
	const size_type __len = size() + (std::max)(size(), __n);
   16324:	48 83 f8 01          	cmp    $0x1,%rax
   16328:	48 89 c7             	mov    %rax,%rdi
   1632b:	48 83 d7 00          	adc    $0x0,%rdi
   1632f:	4c 8d 2c 07          	lea    (%rdi,%rax,1),%r13
   16333:	48 be 55 55 55 55 55 	movabs $0x555555555555555,%rsi
   1633a:	55 55 05 
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1633d:	49 39 f5             	cmp    %rsi,%r13
   16340:	4c 0f 43 ee          	cmovae %rsi,%r13
	const size_type __len = size() + (std::max)(size(), __n);
   16344:	48 01 c7             	add    %rax,%rdi
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   16347:	4c 0f 42 ee          	cmovb  %rsi,%r13
    { return __lhs.base() - __rhs.base(); }
   1634b:	4c 89 fd             	mov    %r15,%rbp
   1634e:	4c 29 f5             	sub    %r14,%rbp
   16351:	48 c1 fd 03          	sar    $0x3,%rbp
   16355:	48 0f af e9          	imul   %rcx,%rbp
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   16359:	4d 85 ed             	test   %r13,%r13
   1635c:	74 1c                	je     1637a <_ZNSt6vectorIS_IN7genetic7programESaIS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x9a>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   1635e:	4a 8d 04 ed 00 00 00 	lea    0x0(,%r13,8),%rax
   16365:	00 
   16366:	48 8d 3c 40          	lea    (%rax,%rax,2),%rdi
   1636a:	49 89 d4             	mov    %rdx,%r12
   1636d:	e8 ee 13 00 00       	callq  17760 <_Znwm@plt>
   16372:	4c 89 e2             	mov    %r12,%rdx
   16375:	49 89 c4             	mov    %rax,%r12
   16378:	eb 03                	jmp    1637d <_ZNSt6vectorIS_IN7genetic7programESaIS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x9d>
   1637a:	45 31 e4             	xor    %r12d,%r12d
				   __new_start + __elems_before,
   1637d:	48 8d 04 6d 00 00 00 	lea    0x0(,%rbp,2),%rax
   16384:	00 
   16385:	48 01 e8             	add    %rbp,%rax
   16388:	49 8d 2c c4          	lea    (%r12,%rax,8),%rbp
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1638c:	48 89 ef             	mov    %rbp,%rdi
   1638f:	48 89 d6             	mov    %rdx,%rsi
   16392:	e8 09 01 00 00       	callq  164a0 <_ZNSt6vectorIN7genetic7programESaIS1_EEC2ERKS3_>
   16397:	4c 89 e5             	mov    %r12,%rbp
      for (; __first != __last; ++__first, (void)++__cur)
   1639a:	4d 39 fe             	cmp    %r15,%r14
   1639d:	74 38                	je     163d7 <_ZNSt6vectorIS_IN7genetic7programESaIS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0xf7>
   1639f:	0f 57 c0             	xorps  %xmm0,%xmm0
   163a2:	4c 89 e5             	mov    %r12,%rbp
   163a5:	4c 89 f0             	mov    %r14,%rax
   163a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   163af:	00 
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
   163b0:	0f 10 08             	movups (%rax),%xmm1
   163b3:	0f 11 4d 00          	movups %xmm1,0x0(%rbp)
	  _M_end_of_storage(__x._M_end_of_storage)
   163b7:	48 8b 48 10          	mov    0x10(%rax),%rcx
   163bb:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
   163bf:	0f 11 00             	movups %xmm0,(%rax)
   163c2:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   163c9:	00 
   163ca:	48 83 c5 18          	add    $0x18,%rbp
   163ce:	48 83 c0 18          	add    $0x18,%rax
   163d2:	4c 39 f8             	cmp    %r15,%rax
   163d5:	75 d9                	jne    163b0 <_ZNSt6vectorIS_IN7genetic7programESaIS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0xd0>
	      ++__new_finish;
   163d7:	48 83 c5 18          	add    $0x18,%rbp
   163db:	4c 39 fb             	cmp    %r15,%rbx
   163de:	74 39                	je     16419 <_ZNSt6vectorIS_IN7genetic7programESaIS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x139>
   163e0:	0f 57 c0             	xorps  %xmm0,%xmm0
   163e3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   163ea:	84 00 00 00 00 00 
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
   163f0:	41 0f 10 0f          	movups (%r15),%xmm1
   163f4:	0f 11 4d 00          	movups %xmm1,0x0(%rbp)
	  _M_end_of_storage(__x._M_end_of_storage)
   163f8:	49 8b 47 10          	mov    0x10(%r15),%rax
   163fc:	48 89 45 10          	mov    %rax,0x10(%rbp)
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
   16400:	41 0f 11 07          	movups %xmm0,(%r15)
   16404:	49 c7 47 10 00 00 00 	movq   $0x0,0x10(%r15)
   1640b:	00 
   1640c:	48 83 c5 18          	add    $0x18,%rbp
   16410:	49 83 c7 18          	add    $0x18,%r15
   16414:	49 39 df             	cmp    %rbx,%r15
   16417:	75 d7                	jne    163f0 <_ZNSt6vectorIS_IN7genetic7programESaIS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x110>
	if (__p)
   16419:	4d 85 f6             	test   %r14,%r14
   1641c:	74 08                	je     16426 <_ZNSt6vectorIS_IN7genetic7programESaIS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x146>
	::operator delete(__p
   1641e:	4c 89 f7             	mov    %r14,%rdi
   16421:	e8 9a 12 00 00       	callq  176c0 <_ZdlPv@plt>
   16426:	48 8b 0c 24          	mov    (%rsp),%rcx
      this->_M_impl._M_start = __new_start;
   1642a:	4c 89 21             	mov    %r12,(%rcx)
      this->_M_impl._M_finish = __new_finish;
   1642d:	48 89 69 08          	mov    %rbp,0x8(%rcx)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   16431:	4a 8d 04 6d 00 00 00 	lea    0x0(,%r13,2),%rax
   16438:	00 
   16439:	4c 01 e8             	add    %r13,%rax
   1643c:	49 8d 04 c4          	lea    (%r12,%rax,8),%rax
   16440:	48 89 41 10          	mov    %rax,0x10(%rcx)
    }
   16444:	48 83 c4 08          	add    $0x8,%rsp
   16448:	5b                   	pop    %rbx
   16449:	41 5c                	pop    %r12
   1644b:	41 5d                	pop    %r13
   1644d:	41 5e                	pop    %r14
   1644f:	41 5f                	pop    %r15
   16451:	5d                   	pop    %rbp
   16452:	c3                   	retq   
	  __throw_length_error(__N(__s));
   16453:	48 8d 3d 58 c6 fe ff 	lea    -0x139a8(%rip),%rdi        # 2ab2 <_IO_stdin_used+0x3c2>
   1645a:	e8 11 11 00 00       	callq  17570 <_ZSt20__throw_length_errorPKc@plt>
	}
   1645f:	48 89 c7             	mov    %rax,%rdi
   16462:	e8 49 12 00 00       	callq  176b0 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   16467:	4d 85 e4             	test   %r12,%r12
   1646a:	75 0e                	jne    1647a <_ZNSt6vectorIS_IN7genetic7programESaIS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x19a>
   1646c:	48 8b 3c 24          	mov    (%rsp),%rdi
	    _Alloc_traits::destroy(this->_M_impl,
   16470:	48 89 ee             	mov    %rbp,%rsi
   16473:	e8 28 01 00 00       	callq  165a0 <_ZNSt16allocator_traitsISaISt6vectorIN7genetic7programESaIS2_EEEE7destroyIS4_EEvRS5_PT_>
   16478:	eb 08                	jmp    16482 <_ZNSt6vectorIS_IN7genetic7programESaIS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x1a2>
   1647a:	4c 89 e7             	mov    %r12,%rdi
   1647d:	e8 3e 12 00 00       	callq  176c0 <_ZdlPv@plt>
	  __throw_exception_again;
   16482:	e8 09 13 00 00       	callq  17790 <__cxa_rethrow@plt>
   16487:	48 89 c3             	mov    %rax,%rbx
	}
   1648a:	e8 31 13 00 00       	callq  177c0 <__cxa_end_catch@plt>
   1648f:	48 89 df             	mov    %rbx,%rdi
   16492:	e8 d9 14 00 00       	callq  17970 <_Unwind_Resume@plt>
   16497:	48 89 c7             	mov    %rax,%rdi
   1649a:	e8 e1 63 ff ff       	callq  c880 <__clang_call_terminate>
   1649f:	cc                   	int3   

00000000000164a0 <_ZNSt6vectorIN7genetic7programESaIS1_EEC2ERKS3_>:
      {
   164a0:	41 57                	push   %r15
   164a2:	41 56                	push   %r14
   164a4:	41 55                	push   %r13
   164a6:	41 54                	push   %r12
   164a8:	53                   	push   %rbx
   164a9:	49 89 f7             	mov    %rsi,%r15
   164ac:	48 89 fb             	mov    %rdi,%rbx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   164af:	48 8b 7e 08          	mov    0x8(%rsi),%rdi
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   164b3:	48 8b 06             	mov    (%rsi),%rax
   164b6:	49 89 fc             	mov    %rdi,%r12
   164b9:	49 29 c4             	sub    %rax,%r12
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   164bc:	49 c1 fc 05          	sar    $0x5,%r12
	: _M_start(), _M_finish(), _M_end_of_storage()
   164c0:	0f 57 c0             	xorps  %xmm0,%xmm0
   164c3:	0f 11 03             	movups %xmm0,(%rbx)
   164c6:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
   164cd:	00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   164ce:	48 29 c7             	sub    %rax,%rdi
   164d1:	74 13                	je     164e6 <_ZNSt6vectorIN7genetic7programESaIS1_EEC2ERKS3_+0x46>
	if (__n > this->_M_max_size())
   164d3:	4c 89 e0             	mov    %r12,%rax
   164d6:	48 c1 e8 3a          	shr    $0x3a,%rax
   164da:	75 63                	jne    1653f <_ZNSt6vectorIN7genetic7programESaIS1_EEC2ERKS3_+0x9f>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   164dc:	e8 7f 12 00 00       	callq  17760 <_Znwm@plt>
   164e1:	49 89 c6             	mov    %rax,%r14
   164e4:	eb 03                	jmp    164e9 <_ZNSt6vectorIN7genetic7programESaIS1_EEC2ERKS3_+0x49>
   164e6:	45 31 f6             	xor    %r14d,%r14d
	this->_M_impl._M_start = this->_M_allocate(__n);
   164e9:	4c 89 33             	mov    %r14,(%rbx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
   164ec:	4c 89 73 08          	mov    %r14,0x8(%rbx)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   164f0:	49 c1 e4 05          	shl    $0x5,%r12
   164f4:	4d 01 f4             	add    %r14,%r12
   164f7:	4c 89 63 10          	mov    %r12,0x10(%rbx)
      : _M_current(__i) { }
   164fb:	4d 8b 27             	mov    (%r15),%r12
   164fe:	4d 8b 6f 08          	mov    0x8(%r15),%r13
    { return __lhs.base() != __rhs.base(); }
   16502:	4d 39 ec             	cmp    %r13,%r12
	      for (; __first != __last; ++__first, (void)++__cur)
   16505:	74 2a                	je     16531 <_ZNSt6vectorIN7genetic7programESaIS1_EEC2ERKS3_+0x91>
   16507:	45 31 ff             	xor    %r15d,%r15d
   1650a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   16510:	4b 8d 3c 3e          	lea    (%r14,%r15,1),%rdi
   16514:	4b 8d 34 3c          	lea    (%r12,%r15,1),%rsi
   16518:	e8 23 78 ff ff       	callq  dd40 <_ZN7genetic7programC1ERKS0_>
   1651d:	4b 8d 04 3c          	lea    (%r12,%r15,1),%rax
   16521:	48 83 c0 20          	add    $0x20,%rax
   16525:	49 83 c7 20          	add    $0x20,%r15
   16529:	4c 39 e8             	cmp    %r13,%rax
   1652c:	75 e2                	jne    16510 <_ZNSt6vectorIN7genetic7programESaIS1_EEC2ERKS3_+0x70>
	this->_M_impl._M_finish =
   1652e:	4d 01 fe             	add    %r15,%r14
   16531:	4c 89 73 08          	mov    %r14,0x8(%rbx)
      }
   16535:	5b                   	pop    %rbx
   16536:	41 5c                	pop    %r12
   16538:	41 5d                	pop    %r13
   1653a:	41 5e                	pop    %r14
   1653c:	41 5f                	pop    %r15
   1653e:	c3                   	retq   
	  std::__throw_bad_alloc();
   1653f:	e8 5c 11 00 00       	callq  176a0 <_ZSt17__throw_bad_allocv@plt>
	    }
   16544:	48 89 c7             	mov    %rax,%rdi
   16547:	e8 64 11 00 00       	callq  176b0 <__cxa_begin_catch@plt>
	  for (; __first != __last; ++__first)
   1654c:	4d 85 ff             	test   %r15,%r15
   1654f:	74 21                	je     16572 <_ZNSt6vectorIN7genetic7programESaIS1_EEC2ERKS3_+0xd2>
   16551:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   16558:	0f 1f 84 00 00 00 00 
   1655f:	00 
      __pointer->~_Tp();
   16560:	4c 89 f7             	mov    %r14,%rdi
   16563:	e8 b8 77 ff ff       	callq  dd20 <_ZN7genetic7programD1Ev>
	  for (; __first != __last; ++__first)
   16568:	49 83 c6 20          	add    $0x20,%r14
   1656c:	49 83 c7 e0          	add    $0xffffffffffffffe0,%r15
   16570:	75 ee                	jne    16560 <_ZNSt6vectorIN7genetic7programESaIS1_EEC2ERKS3_+0xc0>
	      __throw_exception_again;
   16572:	e8 19 12 00 00       	callq  17790 <__cxa_rethrow@plt>
   16577:	49 89 c6             	mov    %rax,%r14
	    }
   1657a:	e8 41 12 00 00       	callq  177c0 <__cxa_end_catch@plt>
	_M_deallocate(_M_impl._M_start,
   1657f:	48 8b 3b             	mov    (%rbx),%rdi
	if (__p)
   16582:	48 85 ff             	test   %rdi,%rdi
   16585:	74 05                	je     1658c <_ZNSt6vectorIN7genetic7programESaIS1_EEC2ERKS3_+0xec>
	::operator delete(__p
   16587:	e8 34 11 00 00       	callq  176c0 <_ZdlPv@plt>
   1658c:	4c 89 f7             	mov    %r14,%rdi
   1658f:	e8 dc 13 00 00       	callq  17970 <_Unwind_Resume@plt>
   16594:	48 89 c7             	mov    %rax,%rdi
   16597:	e8 e4 62 ff ff       	callq  c880 <__clang_call_terminate>
   1659c:	cc                   	int3   
   1659d:	cc                   	int3   
   1659e:	cc                   	int3   
   1659f:	cc                   	int3   

00000000000165a0 <_ZNSt16allocator_traitsISaISt6vectorIN7genetic7programESaIS2_EEEE7destroyIS4_EEvRS5_PT_>:
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
	noexcept(is_nothrow_destructible<_Up>::value)
	{
   165a0:	41 57                	push   %r15
   165a2:	41 56                	push   %r14
   165a4:	53                   	push   %rbx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   165a5:	48 8b 1e             	mov    (%rsi),%rbx
   165a8:	4c 8b 7e 08          	mov    0x8(%rsi),%r15
   165ac:	4c 39 fb             	cmp    %r15,%rbx
   165af:	74 23                	je     165d4 <_ZNSt16allocator_traitsISaISt6vectorIN7genetic7programESaIS2_EEEE7destroyIS4_EEvRS5_PT_+0x34>
   165b1:	49 89 f6             	mov    %rsi,%r14
   165b4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
   165bb:	00 00 00 00 00 
      __pointer->~_Tp();
   165c0:	48 89 df             	mov    %rbx,%rdi
   165c3:	e8 58 77 ff ff       	callq  dd20 <_ZN7genetic7programD1Ev>
	  for (; __first != __last; ++__first)
   165c8:	48 83 c3 20          	add    $0x20,%rbx
   165cc:	4c 39 fb             	cmp    %r15,%rbx
   165cf:	75 ef                	jne    165c0 <_ZNSt16allocator_traitsISaISt6vectorIN7genetic7programESaIS2_EEEE7destroyIS4_EEvRS5_PT_+0x20>
	_M_deallocate(_M_impl._M_start,
   165d1:	49 8b 1e             	mov    (%r14),%rbx
	if (__p)
   165d4:	48 85 db             	test   %rbx,%rbx
   165d7:	74 0d                	je     165e6 <_ZNSt16allocator_traitsISaISt6vectorIN7genetic7programESaIS2_EEEE7destroyIS4_EEvRS5_PT_+0x46>
   165d9:	48 89 df             	mov    %rbx,%rdi
   165dc:	5b                   	pop    %rbx
   165dd:	41 5e                	pop    %r14
   165df:	41 5f                	pop    %r15
   165e1:	e9 da 10 00 00       	jmpq   176c0 <_ZdlPv@plt>
#if __cplusplus <= 201703L
	  __a.destroy(__p);
#else
	  std::destroy_at(__p);
#endif
	}
   165e6:	5b                   	pop    %rbx
   165e7:	41 5e                	pop    %r14
   165e9:	41 5f                	pop    %r15
   165eb:	c3                   	retq   
   165ec:	cc                   	int3   
   165ed:	cc                   	int3   
   165ee:	cc                   	int3   
   165ef:	cc                   	int3   

00000000000165f0 <_GLOBAL__sub_I_genetic.cpp>:
   165f0:	53                   	push   %rbx
   165f1:	48 8d 1d e8 3a 00 00 	lea    0x3ae8(%rip),%rbx        # 1a0e0 <_ZStL8__ioinit>
   165f8:	48 89 df             	mov    %rbx,%rdi
   165fb:	e8 70 11 00 00       	callq  17770 <_ZNSt8ios_base4InitC1Ev@plt>
   16600:	48 8b 3d a9 27 00 00 	mov    0x27a9(%rip),%rdi        # 18db0 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
   16607:	48 8d 15 fa 37 00 00 	lea    0x37fa(%rip),%rdx        # 19e08 <__dso_handle>
   1660e:	48 89 de             	mov    %rbx,%rsi
   16611:	5b                   	pop    %rbx
   16612:	e9 b9 13 00 00       	jmpq   179d0 <__cxa_atexit@plt>
   16617:	cc                   	int3   
   16618:	cc                   	int3   
   16619:	cc                   	int3   
   1661a:	cc                   	int3   
   1661b:	cc                   	int3   
   1661c:	cc                   	int3   
   1661d:	cc                   	int3   
   1661e:	cc                   	int3   
   1661f:	cc                   	int3   

0000000000016620 <philox_seed>:
    key[1] += PHILOX_W32B;
}

/* Seed the RNG with a single value */
void philox_seed(uint32_t seed) {
    global_philox_state.counter[0]  = seed;
   16620:	89 3d fa 37 00 00    	mov    %edi,0x37fa(%rip)        # 19e20 <_ZL19global_philox_state>
    global_philox_state.counter[1]  = 2;
   16626:	0f 28 05 03 c1 fe ff 	movaps -0x13efd(%rip),%xmm0        # 2730 <_IO_stdin_used+0x40>
   1662d:	0f 11 05 f0 37 00 00 	movups %xmm0,0x37f0(%rip)        # 19e24 <_ZL19global_philox_state+0x4>
    global_philox_state.counter[2]  = 3;
    global_philox_state.counter[3]  = 4;
    global_philox_state.key[0]      = PHILOX_W32A;
    global_philox_state.key[1]      = PHILOX_W32B;
   16634:	c7 05 f6 37 00 00 85 	movl   $0xbb67ae85,0x37f6(%rip)        # 19e34 <_ZL19global_philox_state+0x14>
   1663b:	ae 67 bb 
    global_philox_state.initialized = true;
   1663e:	c6 05 f3 37 00 00 01 	movb   $0x1,0x37f3(%rip)        # 19e38 <_ZL19global_philox_state+0x18>
}
   16645:	c3                   	retq   
   16646:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1664d:	00 00 00 

0000000000016650 <philox_seed_with_key>:

/* Seed the RNG with a value and custom keys */
void philox_seed_with_key(uint32_t seed, uint32_t key0, uint32_t key1) {
    global_philox_state.counter[0]  = seed;
   16650:	89 3d ca 37 00 00    	mov    %edi,0x37ca(%rip)        # 19e20 <_ZL19global_philox_state>
   16656:	48 b8 02 00 00 00 03 	movabs $0x300000002,%rax
   1665d:	00 00 00 
    global_philox_state.counter[1]  = 2;
   16660:	48 89 05 bd 37 00 00 	mov    %rax,0x37bd(%rip)        # 19e24 <_ZL19global_philox_state+0x4>
    global_philox_state.counter[2]  = 3;
    global_philox_state.counter[3]  = 4;
   16667:	c7 05 bb 37 00 00 04 	movl   $0x4,0x37bb(%rip)        # 19e2c <_ZL19global_philox_state+0xc>
   1666e:	00 00 00 
    global_philox_state.key[0]      = key0;
   16671:	89 35 b9 37 00 00    	mov    %esi,0x37b9(%rip)        # 19e30 <_ZL19global_philox_state+0x10>
    global_philox_state.key[1]      = key1;
   16677:	89 15 b7 37 00 00    	mov    %edx,0x37b7(%rip)        # 19e34 <_ZL19global_philox_state+0x14>
    global_philox_state.initialized = true;
   1667d:	c6 05 b4 37 00 00 01 	movb   $0x1,0x37b4(%rip)        # 19e38 <_ZL19global_philox_state+0x18>
}
   16684:	c3                   	retq   
   16685:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
   1668c:	00 00 00 00 

0000000000016690 <philox_reset>:

/* Reset the RNG to its default state */
void philox_reset(void) {
    global_philox_state.counter[0]  = 1;
   16690:	0f 28 05 59 c1 fe ff 	movaps -0x13ea7(%rip),%xmm0        # 27f0 <_IO_stdin_used+0x100>
   16697:	0f 29 05 82 37 00 00 	movaps %xmm0,0x3782(%rip)        # 19e20 <_ZL19global_philox_state>
   1669e:	48 b8 38 00 00 00 c8 	movabs $0x2c800000038,%rax
   166a5:	02 00 00 
    global_philox_state.counter[1]  = 2;
    global_philox_state.counter[2]  = 3;
    global_philox_state.counter[3]  = 3;
    global_philox_state.key[0]      = 56;
   166a8:	48 89 05 81 37 00 00 	mov    %rax,0x3781(%rip)        # 19e30 <_ZL19global_philox_state+0x10>
    global_philox_state.key[1]      = 712;
    global_philox_state.initialized = true;
   166af:	c6 05 82 37 00 00 01 	movb   $0x1,0x3782(%rip)        # 19e38 <_ZL19global_philox_state+0x18>
}
   166b6:	c3                   	retq   
   166b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   166be:	00 00 

00000000000166c0 <philox_skip>:

/* Skip the specified number of samples of 128-bits in the current stream. */
void philox_skip(uint64_t count) {
    if (!global_philox_state.initialized) {
   166c0:	80 3d 71 37 00 00 00 	cmpb   $0x0,0x3771(%rip)        # 19e38 <_ZL19global_philox_state+0x18>
   166c7:	74 0e                	je     166d7 <philox_skip+0x17>
    }

    const uint32_t count_lo = (uint32_t)count;
    uint32_t       count_hi = (uint32_t)(count >> 32);

    global_philox_state.counter[0] += count_lo;
   166c9:	8b 0d 51 37 00 00    	mov    0x3751(%rip),%ecx        # 19e20 <_ZL19global_philox_state>
    if (global_philox_state.counter[0] < count_lo) {
        ++count_hi;
    }

    global_philox_state.counter[1] += count_hi;
   166cf:	8b 05 4f 37 00 00    	mov    0x374f(%rip),%eax        # 19e24 <_ZL19global_philox_state+0x4>
   166d5:	eb 1f                	jmp    166f6 <philox_skip+0x36>
    global_philox_state.counter[2]  = 3;
   166d7:	0f 28 05 22 c0 fe ff 	movaps -0x13fde(%rip),%xmm0        # 2700 <_IO_stdin_used+0x10>
   166de:	0f 11 05 43 37 00 00 	movups %xmm0,0x3743(%rip)        # 19e28 <_ZL19global_philox_state+0x8>
    global_philox_state.initialized = true;
   166e5:	c6 05 4c 37 00 00 01 	movb   $0x1,0x374c(%rip)        # 19e38 <_ZL19global_philox_state+0x18>
   166ec:	b9 01 00 00 00       	mov    $0x1,%ecx
   166f1:	b8 02 00 00 00       	mov    $0x2,%eax
    uint32_t       count_hi = (uint32_t)(count >> 32);
   166f6:	48 89 fa             	mov    %rdi,%rdx
   166f9:	48 c1 ea 20          	shr    $0x20,%rdx
    global_philox_state.counter[0] += count_lo;
   166fd:	01 cf                	add    %ecx,%edi
   166ff:	89 3d 1b 37 00 00    	mov    %edi,0x371b(%rip)        # 19e20 <_ZL19global_philox_state>
    if (global_philox_state.counter[0] < count_lo) {
   16705:	83 d2 00             	adc    $0x0,%edx
    global_philox_state.counter[1] += count_hi;
   16708:	01 c2                	add    %eax,%edx
   1670a:	89 15 14 37 00 00    	mov    %edx,0x3714(%rip)        # 19e24 <_ZL19global_philox_state+0x4>
    if (global_philox_state.counter[1] < count_hi) {
   16710:	73 0e                	jae    16720 <philox_skip+0x60>
        if (++global_philox_state.counter[2] == 0) {
   16712:	ff 05 10 37 00 00    	incl   0x3710(%rip)        # 19e28 <_ZL19global_philox_state+0x8>
   16718:	75 06                	jne    16720 <philox_skip+0x60>
            ++global_philox_state.counter[3];
   1671a:	ff 05 0c 37 00 00    	incl   0x370c(%rip)        # 19e2c <_ZL19global_philox_state+0xc>
        }
    }
}
   16720:	c3                   	retq   
   16721:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   16728:	0f 1f 84 00 00 00 00 
   1672f:	00 

0000000000016730 <philox_next4>:

/* Returns a group of four random numbers using the underlying Philox algorithm. */
void philox_next4(uint32_t out[4]) {
   16730:	55                   	push   %rbp
   16731:	41 57                	push   %r15
   16733:	41 56                	push   %r14
   16735:	41 55                	push   %r13
   16737:	41 54                	push   %r12
   16739:	53                   	push   %rbx
    if (!global_philox_state.initialized) {
   1673a:	80 3d f7 36 00 00 00 	cmpb   $0x0,0x36f7(%rip)        # 19e38 <_ZL19global_philox_state+0x18>
   16741:	74 31                	je     16774 <philox_next4+0x44>

    for (int i = 0; i < 4; i++) {
        out[i] = global_philox_state.counter[i];
    }

    uint32_t key[2] = {global_philox_state.key[0], global_philox_state.key[1]};
   16743:	8b 05 e7 36 00 00    	mov    0x36e7(%rip),%eax        # 19e30 <_ZL19global_philox_state+0x10>
   16749:	8b 0d e5 36 00 00    	mov    0x36e5(%rip),%ecx        # 19e34 <_ZL19global_philox_state+0x14>
   1674f:	8b 1d cb 36 00 00    	mov    0x36cb(%rip),%ebx        # 19e20 <_ZL19global_philox_state>
   16755:	44 8b 1d c8 36 00 00 	mov    0x36c8(%rip),%r11d        # 19e24 <_ZL19global_philox_state+0x4>
   1675c:	44 8b 15 c5 36 00 00 	mov    0x36c5(%rip),%r10d        # 19e28 <_ZL19global_philox_state+0x8>
   16763:	44 8b 0d c2 36 00 00 	mov    0x36c2(%rip),%r9d        # 19e2c <_ZL19global_philox_state+0xc>
    global_philox_state.counter[0] += count_lo;
   1676a:	ff c3                	inc    %ebx
        if (++global_philox_state.counter[2] == 0) {
   1676c:	41 ff c2             	inc    %r10d
            ++global_philox_state.counter[3];
   1676f:	41 ff c1             	inc    %r9d
   16772:	eb 47                	jmp    167bb <philox_next4+0x8b>
    global_philox_state.counter[0]  = 1;
   16774:	0f 28 05 75 c0 fe ff 	movaps -0x13f8b(%rip),%xmm0        # 27f0 <_IO_stdin_used+0x100>
   1677b:	0f 29 05 9e 36 00 00 	movaps %xmm0,0x369e(%rip)        # 19e20 <_ZL19global_philox_state>
   16782:	48 b8 38 00 00 00 c8 	movabs $0x2c800000038,%rax
   16789:	02 00 00 
    global_philox_state.key[0]      = 56;
   1678c:	48 89 05 9d 36 00 00 	mov    %rax,0x369d(%rip)        # 19e30 <_ZL19global_philox_state+0x10>
    global_philox_state.initialized = true;
   16793:	c6 05 9e 36 00 00 01 	movb   $0x1,0x369e(%rip)        # 19e38 <_ZL19global_philox_state+0x18>
   1679a:	b8 38 00 00 00       	mov    $0x38,%eax
   1679f:	b9 c8 02 00 00       	mov    $0x2c8,%ecx
   167a4:	41 bb 02 00 00 00    	mov    $0x2,%r11d
   167aa:	41 b9 04 00 00 00    	mov    $0x4,%r9d
   167b0:	41 ba 04 00 00 00    	mov    $0x4,%r10d
   167b6:	bb 02 00 00 00       	mov    $0x2,%ebx
        out[i] = global_philox_state.counter[i];
   167bb:	0f 28 05 5e 36 00 00 	movaps 0x365e(%rip),%xmm0        # 19e20 <_ZL19global_philox_state>
   167c2:	0f 11 07             	movups %xmm0,(%rdi)
   167c5:	44 8b 37             	mov    (%rdi),%r14d
   167c8:	8b 57 04             	mov    0x4(%rdi),%edx
   167cb:	44 8b 47 08          	mov    0x8(%rdi),%r8d
   167cf:	8b 77 0c             	mov    0xc(%rdi),%esi
    global_philox_state.counter[0] += count_lo;
   167d2:	89 1d 48 36 00 00    	mov    %ebx,0x3648(%rip)        # 19e20 <_ZL19global_philox_state>
    if (global_philox_state.counter[0] < count_lo) {
   167d8:	31 ed                	xor    %ebp,%ebp
   167da:	85 db                	test   %ebx,%ebx
   167dc:	40 0f 94 c5          	sete   %bpl
    global_philox_state.counter[1] += count_hi;
   167e0:	44 01 dd             	add    %r11d,%ebp
   167e3:	89 2d 3b 36 00 00    	mov    %ebp,0x363b(%rip)        # 19e24 <_ZL19global_philox_state+0x4>
    if (global_philox_state.counter[1] < count_hi) {
   167e9:	73 13                	jae    167fe <philox_next4+0xce>
        if (++global_philox_state.counter[2] == 0) {
   167eb:	44 89 15 36 36 00 00 	mov    %r10d,0x3636(%rip)        # 19e28 <_ZL19global_philox_state+0x8>
   167f2:	45 85 d2             	test   %r10d,%r10d
   167f5:	75 07                	jne    167fe <philox_next4+0xce>
            ++global_philox_state.counter[3];
   167f7:	44 89 0d 2e 36 00 00 	mov    %r9d,0x362e(%rip)        # 19e2c <_ZL19global_philox_state+0xc>
    key[0] += PHILOX_W32A;
   167fe:	44 8d 98 0f 54 84 53 	lea    0x5384540f(%rax),%r11d
    key[1] += PHILOX_W32B;
   16805:	8d 99 99 68 06 a9    	lea    -0x56f99767(%rcx),%ebx
    key[0] += PHILOX_W32A;
   1680b:	8d a8 2b 6d a6 da    	lea    -0x255992d5(%rax),%ebp
    key[1] += PHILOX_W32B;
   16811:	44 8d a1 85 ae 67 bb 	lea    -0x4498517b(%rcx),%r12d
   16818:	41 b9 57 8d 9e cd    	mov    $0xcd9e8d57,%r9d
    uint64_t product = (uint64_t)a * b;
   1681e:	4d 8d 91 fc 91 b2 04 	lea    0x4b291fc(%r9),%r10
   16825:	4d 0f af f2          	imul   %r10,%r14
   16829:	4d 0f af c1          	imul   %r9,%r8
    *result_high     = (uint32_t)(product >> 32);
   1682d:	4d 89 c7             	mov    %r8,%r15
   16830:	49 c1 ef 20          	shr    $0x20,%r15
    result[0] = hi1 ^ counter[1] ^ key[0];
   16834:	31 c2                	xor    %eax,%edx
   16836:	44 31 fa             	xor    %r15d,%edx
    uint64_t product = (uint64_t)a * b;
   16839:	49 0f af d2          	imul   %r10,%rdx
    *result_high     = (uint32_t)(product >> 32);
   1683d:	49 89 d5             	mov    %rdx,%r13
   16840:	49 c1 ed 20          	shr    $0x20,%r13
    result[2] = hi0 ^ counter[3] ^ key[1];
   16844:	45 89 f7             	mov    %r14d,%r15d
   16847:	45 31 e7             	xor    %r12d,%r15d
   1684a:	45 31 ef             	xor    %r13d,%r15d
    uint64_t product = (uint64_t)a * b;
   1684d:	4d 0f af f9          	imul   %r9,%r15
    key[1] += PHILOX_W32B;
   16851:	44 8d a1 0a 5d cf 76 	lea    0x76cf5d0a(%rcx),%r12d
    key[0] += PHILOX_W32A;
   16858:	44 8d a8 b9 79 37 9e 	lea    -0x61c88647(%rax),%r13d
    *result_high     = (uint32_t)(product >> 32);
   1685f:	49 c1 ee 20          	shr    $0x20,%r14
    result[2] = hi0 ^ counter[3] ^ key[1];
   16863:	31 ce                	xor    %ecx,%esi
   16865:	44 31 f6             	xor    %r14d,%esi
    uint64_t product = (uint64_t)a * b;
   16868:	49 0f af f1          	imul   %r9,%rsi
    *result_high     = (uint32_t)(product >> 32);
   1686c:	49 89 f6             	mov    %rsi,%r14
   1686f:	49 c1 ee 20          	shr    $0x20,%r14
    result[0] = hi1 ^ counter[1] ^ key[0];
   16873:	45 31 e8             	xor    %r13d,%r8d
   16876:	45 31 f0             	xor    %r14d,%r8d
    uint64_t product = (uint64_t)a * b;
   16879:	4d 0f af c2          	imul   %r10,%r8
    *result_high     = (uint32_t)(product >> 32);
   1687d:	4d 89 c6             	mov    %r8,%r14
   16880:	49 c1 ee 20          	shr    $0x20,%r14
    result[2] = hi0 ^ counter[3] ^ key[1];
   16884:	44 31 e2             	xor    %r12d,%edx
   16887:	44 31 f2             	xor    %r14d,%edx
    uint64_t product = (uint64_t)a * b;
   1688a:	49 0f af d1          	imul   %r9,%rdx
    *result_high     = (uint32_t)(product >> 32);
   1688e:	49 89 d4             	mov    %rdx,%r12
   16891:	49 c1 ec 20          	shr    $0x20,%r12
    result[0] = hi1 ^ counter[1] ^ key[0];
   16895:	45 89 fe             	mov    %r15d,%r14d
   16898:	41 31 ee             	xor    %ebp,%r14d
   1689b:	45 31 e6             	xor    %r12d,%r14d
    uint64_t product = (uint64_t)a * b;
   1689e:	4d 0f af f2          	imul   %r10,%r14
    key[0] += PHILOX_W32A;
   168a2:	8d a8 e4 e6 dd 78    	lea    0x78dde6e4(%rax),%ebp
    key[1] += PHILOX_W32B;
   168a8:	44 8d a1 8f 0b 37 32 	lea    0x32370b8f(%rcx),%r12d
    key[0] += PHILOX_W32A;
   168af:	44 8d a8 72 f3 6e 3c 	lea    0x3c6ef372(%rax),%r13d
    *result_high     = (uint32_t)(product >> 32);
   168b6:	49 c1 ef 20          	shr    $0x20,%r15
    result[0] = hi1 ^ counter[1] ^ key[0];
   168ba:	44 31 ee             	xor    %r13d,%esi
   168bd:	44 31 fe             	xor    %r15d,%esi
    uint64_t product = (uint64_t)a * b;
   168c0:	49 0f af f2          	imul   %r10,%rsi
    *result_high     = (uint32_t)(product >> 32);
   168c4:	49 89 f7             	mov    %rsi,%r15
   168c7:	49 c1 ef 20          	shr    $0x20,%r15
    result[2] = hi0 ^ counter[3] ^ key[1];
   168cb:	45 31 e0             	xor    %r12d,%r8d
   168ce:	45 31 f8             	xor    %r15d,%r8d
    uint64_t product = (uint64_t)a * b;
   168d1:	4d 0f af c1          	imul   %r9,%r8
    *result_high     = (uint32_t)(product >> 32);
   168d5:	4d 89 c7             	mov    %r8,%r15
   168d8:	49 c1 ef 20          	shr    $0x20,%r15
    result[0] = hi1 ^ counter[1] ^ key[0];
   168dc:	31 ea                	xor    %ebp,%edx
   168de:	44 31 fa             	xor    %r15d,%edx
    uint64_t product = (uint64_t)a * b;
   168e1:	49 0f af d2          	imul   %r10,%rdx
    *result_high     = (uint32_t)(product >> 32);
   168e5:	49 89 d4             	mov    %rdx,%r12
   168e8:	49 c1 ec 20          	shr    $0x20,%r12
    result[2] = hi0 ^ counter[3] ^ key[1];
   168ec:	45 89 f7             	mov    %r14d,%r15d
   168ef:	41 31 df             	xor    %ebx,%r15d
   168f2:	45 31 e7             	xor    %r12d,%r15d
    uint64_t product = (uint64_t)a * b;
   168f5:	4d 0f af f9          	imul   %r9,%r15
    key[1] += PHILOX_W32B;
   168f9:	8d 99 1e 17 6e 64    	lea    0x646e171e(%rcx),%ebx
    key[0] += PHILOX_W32A;
   168ff:	8d a8 9d 60 15 17    	lea    0x1715609d(%rax),%ebp
    key[1] += PHILOX_W32B;
   16905:	44 8d a1 14 ba 9e ed 	lea    -0x126145ec(%rcx),%r12d
    *result_high     = (uint32_t)(product >> 32);
   1690c:	49 c1 ee 20          	shr    $0x20,%r14
    result[2] = hi0 ^ counter[3] ^ key[1];
   16910:	44 31 e6             	xor    %r12d,%esi
   16913:	44 31 f6             	xor    %r14d,%esi
    uint64_t product = (uint64_t)a * b;
   16916:	49 0f af f1          	imul   %r9,%rsi
    *result_high     = (uint32_t)(product >> 32);
   1691a:	49 89 f6             	mov    %rsi,%r14
   1691d:	49 c1 ee 20          	shr    $0x20,%r14
    result[0] = hi1 ^ counter[1] ^ key[0];
   16921:	41 31 e8             	xor    %ebp,%r8d
   16924:	45 31 f0             	xor    %r14d,%r8d
    uint64_t product = (uint64_t)a * b;
   16927:	4d 0f af c2          	imul   %r10,%r8
    *result_high     = (uint32_t)(product >> 32);
   1692b:	4d 89 c6             	mov    %r8,%r14
   1692e:	49 c1 ee 20          	shr    $0x20,%r14
    result[2] = hi0 ^ counter[3] ^ key[1];
   16932:	31 da                	xor    %ebx,%edx
   16934:	44 31 f2             	xor    %r14d,%edx
    uint64_t product = (uint64_t)a * b;
   16937:	49 0f af d1          	imul   %r9,%rdx
    *result_high     = (uint32_t)(product >> 32);
   1693b:	49 89 d6             	mov    %rdx,%r14
   1693e:	49 c1 ee 20          	shr    $0x20,%r14
    result[0] = hi1 ^ counter[1] ^ key[0];
   16942:	44 89 fb             	mov    %r15d,%ebx
   16945:	44 31 db             	xor    %r11d,%ebx
   16948:	44 31 f3             	xor    %r14d,%ebx
    uint64_t product = (uint64_t)a * b;
   1694b:	49 0f af da          	imul   %r10,%rbx
    key[0] += PHILOX_W32A;
   1694f:	44 8d 98 c8 cd bb f1 	lea    -0xe443238(%rax),%r11d
    key[1] += PHILOX_W32B;
   16956:	8d a9 a3 c5 d5 1f    	lea    0x1fd5c5a3(%rcx),%ebp
    key[0] += PHILOX_W32A;
   1695c:	44 8d b0 56 da 4c b5 	lea    -0x4ab325aa(%rax),%r14d
    *result_high     = (uint32_t)(product >> 32);
   16963:	49 c1 ef 20          	shr    $0x20,%r15
    result[0] = hi1 ^ counter[1] ^ key[0];
   16967:	44 31 f6             	xor    %r14d,%esi
   1696a:	44 31 fe             	xor    %r15d,%esi
    uint64_t product = (uint64_t)a * b;
   1696d:	49 0f af f2          	imul   %r10,%rsi
    *result_high     = (uint32_t)(product >> 32);
   16971:	49 89 f6             	mov    %rsi,%r14
   16974:	49 c1 ee 20          	shr    $0x20,%r14
    result[2] = hi0 ^ counter[3] ^ key[1];
   16978:	41 31 e8             	xor    %ebp,%r8d
   1697b:	45 31 f0             	xor    %r14d,%r8d
    uint64_t product = (uint64_t)a * b;
   1697e:	4d 0f af c1          	imul   %r9,%r8
    *result_high     = (uint32_t)(product >> 32);
   16982:	4d 89 c6             	mov    %r8,%r14
   16985:	49 c1 ee 20          	shr    $0x20,%r14
    result[0] = hi1 ^ counter[1] ^ key[0];
   16989:	44 31 da             	xor    %r11d,%edx
   1698c:	44 31 f2             	xor    %r14d,%edx
    uint64_t product = (uint64_t)a * b;
   1698f:	49 0f af d2          	imul   %r10,%rdx
    *result_high     = (uint32_t)(product >> 32);
   16993:	49 89 d3             	mov    %rdx,%r11
   16996:	49 c1 eb 20          	shr    $0x20,%r11
    key[1] += PHILOX_W32B;
   1699a:	44 8d 91 ad 22 a5 96 	lea    -0x695add53(%rcx),%r10d
    result[2] = hi0 ^ counter[3] ^ key[1];
   169a1:	41 31 da             	xor    %ebx,%r10d
   169a4:	45 31 da             	xor    %r11d,%r10d
    key[1] += PHILOX_W32B;
   169a7:	81 c1 28 74 3d db    	add    $0xdb3d7428,%ecx
    *result_high     = (uint32_t)(product >> 32);
   169ad:	48 c1 eb 20          	shr    $0x20,%rbx
    result[2] = hi0 ^ counter[3] ^ key[1];
   169b1:	31 ce                	xor    %ecx,%esi
   169b3:	31 de                	xor    %ebx,%esi
    uint64_t product = (uint64_t)a * b;
   169b5:	49 0f af f1          	imul   %r9,%rsi
    *result_high     = (uint32_t)(product >> 32);
   169b9:	48 89 f1             	mov    %rsi,%rcx
   169bc:	48 c1 e9 20          	shr    $0x20,%rcx
    key[0] += PHILOX_W32A;
   169c0:	05 81 47 f3 8f       	add    $0x8ff34781,%eax
    result[0] = hi1 ^ counter[1] ^ key[0];
   169c5:	44 31 c0             	xor    %r8d,%eax
   169c8:	31 c8                	xor    %ecx,%eax
   169ca:	89 07                	mov    %eax,(%rdi)
   169cc:	44 89 57 08          	mov    %r10d,0x8(%rdi)
   169d0:	89 77 04             	mov    %esi,0x4(%rdi)
   169d3:	89 57 0c             	mov    %edx,0xc(%rdi)
            philox_skip(1);
        } else {
            philox_raisekey(key);
        }
    }
}
   169d6:	5b                   	pop    %rbx
   169d7:	41 5c                	pop    %r12
   169d9:	41 5d                	pop    %r13
   169db:	41 5e                	pop    %r14
   169dd:	41 5f                	pop    %r15
   169df:	5d                   	pop    %rbp
   169e0:	c3                   	retq   
   169e1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   169e8:	0f 1f 84 00 00 00 00 
   169ef:	00 

00000000000169f0 <philox_random_uint32>:

/* Generate a random 32-bit unsigned integer */
uint32_t philox_random_uint32(void) {
   169f0:	48 83 ec 18          	sub    $0x18,%rsp
   169f4:	48 89 e7             	mov    %rsp,%rdi
    uint32_t out[4];
    philox_next4(out);
   169f7:	e8 34 fd ff ff       	callq  16730 <philox_next4>
    return out[0];
   169fc:	8b 04 24             	mov    (%rsp),%eax
   169ff:	48 83 c4 18          	add    $0x18,%rsp
   16a03:	c3                   	retq   
   16a04:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
   16a0b:	00 00 00 00 00 

0000000000016a10 <philox_random_uint64>:
}

/* Generate a random 64-bit unsigned integer */
uint64_t philox_random_uint64(void) {
   16a10:	48 83 ec 18          	sub    $0x18,%rsp
   16a14:	48 89 e7             	mov    %rsp,%rdi
    uint32_t out[4];
    philox_next4(out);
   16a17:	e8 14 fd ff ff       	callq  16730 <philox_next4>
    return ((uint64_t)out[0] << 32) | out[1];
   16a1c:	8b 0c 24             	mov    (%rsp),%ecx
   16a1f:	8b 44 24 04          	mov    0x4(%rsp),%eax
   16a23:	48 c1 e1 20          	shl    $0x20,%rcx
   16a27:	48 09 c8             	or     %rcx,%rax
   16a2a:	48 83 c4 18          	add    $0x18,%rsp
   16a2e:	c3                   	retq   
   16a2f:	90                   	nop

0000000000016a30 <philox_random_double>:
}

/* Generate a random double in the range [0, 1) */
double philox_random_double(void) {
   16a30:	48 83 ec 18          	sub    $0x18,%rsp
   16a34:	48 89 e7             	mov    %rsp,%rdi
    uint32_t out[4];
    philox_next4(out);
   16a37:	e8 f4 fc ff ff       	callq  16730 <philox_next4>
    /* Use 53 bits of randomness for double precision */
    uint64_t x = ((uint64_t)out[0] << 32) | out[1];
   16a3c:	8b 04 24             	mov    (%rsp),%eax
   16a3f:	8b 4c 24 04          	mov    0x4(%rsp),%ecx
   16a43:	48 c1 e0 20          	shl    $0x20,%rax
   16a47:	48 09 c1             	or     %rax,%rcx
    return (x >> 11) * (1.0 / (UINT64_C(1) << 53));
   16a4a:	48 c1 e9 0b          	shr    $0xb,%rcx
   16a4e:	f2 48 0f 2a c1       	cvtsi2sd %rcx,%xmm0
   16a53:	f2 0f 59 05 35 c4 fe 	mulsd  -0x13bcb(%rip),%xmm0        # 2e90 <_IO_stdin_used+0x7a0>
   16a5a:	ff 
   16a5b:	48 83 c4 18          	add    $0x18,%rsp
   16a5f:	c3                   	retq   

0000000000016a60 <philox_random_float>:
}

/* Generate a random float in the range [0, 1) */
float philox_random_float(void) {
   16a60:	48 83 ec 18          	sub    $0x18,%rsp
   16a64:	48 89 e7             	mov    %rsp,%rdi
    philox_next4(out);
   16a67:	e8 c4 fc ff ff       	callq  16730 <philox_next4>
    return out[0];
   16a6c:	8b 04 24             	mov    (%rsp),%eax
    uint32_t x = philox_random_uint32();
    /* Use 24 bits of randomness for single precision */
    return (x >> 8) * (1.0f / (UINT32_C(1) << 24));
   16a6f:	c1 e8 08             	shr    $0x8,%eax
   16a72:	f3 0f 2a c0          	cvtsi2ss %eax,%xmm0
   16a76:	f3 0f 59 05 6e bc fe 	mulss  -0x14392(%rip),%xmm0        # 26ec <_IO_stdin_used-0x4>
   16a7d:	ff 
   16a7e:	48 83 c4 18          	add    $0x18,%rsp
   16a82:	c3                   	retq   
   16a83:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   16a8a:	84 00 00 00 00 00 

0000000000016a90 <philox_random_int32_range>:
}

/* Generate a random int32 in the range [min, max] */
int32_t philox_random_int32_range(int32_t min, int32_t max) {
   16a90:	55                   	push   %rbp
   16a91:	53                   	push   %rbx
   16a92:	48 83 ec 18          	sub    $0x18,%rsp
   16a96:	89 fb                	mov    %edi,%ebx
    if (min >= max) {
   16a98:	29 fe                	sub    %edi,%esi
   16a9a:	7e 15                	jle    16ab1 <philox_random_int32_range+0x21>
        return min;
    }
    uint32_t range = (uint32_t)(max - min + 1);
   16a9c:	ff c6                	inc    %esi
   16a9e:	48 89 e7             	mov    %rsp,%rdi
   16aa1:	89 f5                	mov    %esi,%ebp
    philox_next4(out);
   16aa3:	e8 88 fc ff ff       	callq  16730 <philox_next4>
    return out[0];
   16aa8:	8b 04 24             	mov    (%rsp),%eax
    uint32_t x     = philox_random_uint32();
    uint32_t r     = x % range;
   16aab:	31 d2                	xor    %edx,%edx
   16aad:	f7 f5                	div    %ebp
    return min + (int32_t)r;
   16aaf:	01 d3                	add    %edx,%ebx
}
   16ab1:	89 d8                	mov    %ebx,%eax
   16ab3:	48 83 c4 18          	add    $0x18,%rsp
   16ab7:	5b                   	pop    %rbx
   16ab8:	5d                   	pop    %rbp
   16ab9:	c3                   	retq   
   16aba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000016ac0 <philox_random_int64_range>:

/* Generate a random int64 in the range [min, max] */
int64_t philox_random_int64_range(int64_t min, int64_t max) {
   16ac0:	41 56                	push   %r14
   16ac2:	53                   	push   %rbx
   16ac3:	48 83 ec 18          	sub    $0x18,%rsp
   16ac7:	49 89 f6             	mov    %rsi,%r14
   16aca:	48 89 fb             	mov    %rdi,%rbx
    if (min >= max) {
   16acd:	49 29 fe             	sub    %rdi,%r14
   16ad0:	7e 31                	jle    16b03 <philox_random_int64_range+0x43>
        return min;
    }
    uint64_t range = (uint64_t)(max - min + 1);
   16ad2:	49 ff c6             	inc    %r14
   16ad5:	48 89 e7             	mov    %rsp,%rdi
    philox_next4(out);
   16ad8:	e8 53 fc ff ff       	callq  16730 <philox_next4>
    return ((uint64_t)out[0] << 32) | out[1];
   16add:	8b 0c 24             	mov    (%rsp),%ecx
   16ae0:	8b 44 24 04          	mov    0x4(%rsp),%eax
   16ae4:	48 c1 e1 20          	shl    $0x20,%rcx
   16ae8:	48 09 c8             	or     %rcx,%rax
    uint64_t x     = philox_random_uint64();
    uint64_t r     = x % range;
   16aeb:	4c 09 f1             	or     %r14,%rcx
   16aee:	48 c1 e9 20          	shr    $0x20,%rcx
   16af2:	74 07                	je     16afb <philox_random_int64_range+0x3b>
   16af4:	31 d2                	xor    %edx,%edx
   16af6:	49 f7 f6             	div    %r14
   16af9:	eb 05                	jmp    16b00 <philox_random_int64_range+0x40>
   16afb:	31 d2                	xor    %edx,%edx
   16afd:	41 f7 f6             	div    %r14d
    return min + (int64_t)r;
   16b00:	48 01 d3             	add    %rdx,%rbx
}
   16b03:	48 89 d8             	mov    %rbx,%rax
   16b06:	48 83 c4 18          	add    $0x18,%rsp
   16b0a:	5b                   	pop    %rbx
   16b0b:	41 5e                	pop    %r14
   16b0d:	c3                   	retq   
   16b0e:	66 90                	xchg   %ax,%ax

0000000000016b10 <philox_random_double_range>:

/* Generate a random double in the range [min, max) */
double philox_random_double_range(double min, double max) {
   16b10:	48 83 ec 28          	sub    $0x28,%rsp
   16b14:	f2 0f 11 44 24 08    	movsd  %xmm0,0x8(%rsp)
    return min + (max - min) * philox_random_double();
   16b1a:	f2 0f 5c c8          	subsd  %xmm0,%xmm1
   16b1e:	f2 0f 11 0c 24       	movsd  %xmm1,(%rsp)
   16b23:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
    philox_next4(out);
   16b28:	e8 03 fc ff ff       	callq  16730 <philox_next4>
    uint64_t x = ((uint64_t)out[0] << 32) | out[1];
   16b2d:	8b 44 24 10          	mov    0x10(%rsp),%eax
   16b31:	8b 4c 24 14          	mov    0x14(%rsp),%ecx
   16b35:	48 c1 e0 20          	shl    $0x20,%rax
   16b39:	48 09 c1             	or     %rax,%rcx
    return (x >> 11) * (1.0 / (UINT64_C(1) << 53));
   16b3c:	48 c1 e9 0b          	shr    $0xb,%rcx
   16b40:	0f 57 c0             	xorps  %xmm0,%xmm0
   16b43:	f2 48 0f 2a c1       	cvtsi2sd %rcx,%xmm0
   16b48:	f2 0f 59 05 40 c3 fe 	mulsd  -0x13cc0(%rip),%xmm0        # 2e90 <_IO_stdin_used+0x7a0>
   16b4f:	ff 
    return min + (max - min) * philox_random_double();
   16b50:	f2 0f 59 04 24       	mulsd  (%rsp),%xmm0
   16b55:	f2 0f 58 44 24 08    	addsd  0x8(%rsp),%xmm0
   16b5b:	48 83 c4 28          	add    $0x28,%rsp
   16b5f:	c3                   	retq   

0000000000016b60 <philox_random_float_range>:
}

/* Generate a random float in the range [min, max) */
float philox_random_float_range(float min, float max) {
   16b60:	48 83 ec 28          	sub    $0x28,%rsp
   16b64:	f3 0f 11 44 24 0c    	movss  %xmm0,0xc(%rsp)
    return min + (max - min) * philox_random_float();
   16b6a:	f3 0f 5c c8          	subss  %xmm0,%xmm1
   16b6e:	f3 0f 11 4c 24 08    	movss  %xmm1,0x8(%rsp)
   16b74:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
    philox_next4(out);
   16b79:	e8 b2 fb ff ff       	callq  16730 <philox_next4>
    return out[0];
   16b7e:	8b 44 24 10          	mov    0x10(%rsp),%eax
    return (x >> 8) * (1.0f / (UINT32_C(1) << 24));
   16b82:	c1 e8 08             	shr    $0x8,%eax
   16b85:	0f 57 c0             	xorps  %xmm0,%xmm0
   16b88:	f3 0f 2a c0          	cvtsi2ss %eax,%xmm0
   16b8c:	f3 0f 59 05 58 bb fe 	mulss  -0x144a8(%rip),%xmm0        # 26ec <_IO_stdin_used-0x4>
   16b93:	ff 
    return min + (max - min) * philox_random_float();
   16b94:	f3 0f 59 44 24 08    	mulss  0x8(%rsp),%xmm0
   16b9a:	f3 0f 58 44 24 0c    	addss  0xc(%rsp),%xmm0
   16ba0:	48 83 c4 28          	add    $0x28,%rsp
   16ba4:	c3                   	retq   
   16ba5:	cc                   	int3   
   16ba6:	cc                   	int3   
   16ba7:	cc                   	int3   
   16ba8:	cc                   	int3   
   16ba9:	cc                   	int3   
   16baa:	cc                   	int3   
   16bab:	cc                   	int3   
   16bac:	cc                   	int3   
   16bad:	cc                   	int3   
   16bae:	cc                   	int3   
   16baf:	cc                   	int3   

0000000000016bb0 <_ZN7genetic4nodeC1Ev>:
namespace genetic {

    const int node::kInvalidFeatureId = -1;

    node::node() {
    }
   16bb0:	c3                   	retq   
   16bb1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   16bb8:	0f 1f 84 00 00 00 00 
   16bbf:	00 

0000000000016bc0 <_ZN7genetic4nodeC1ENS0_4typeE>:

    node::node(node::type ft) : t(ft) {
   16bc0:	41 57                	push   %r15
   16bc2:	41 56                	push   %r14
   16bc4:	41 54                	push   %r12
   16bc6:	53                   	push   %rbx
   16bc7:	48 83 ec 28          	sub    $0x28,%rsp
   16bcb:	40 88 37             	mov    %sil,(%rdi)
            return t == node::type::variable || t == node::type::constant;
   16bce:	40 80 fe 01          	cmp    $0x1,%sil
        ASSERT(is_nonterminal(), "node: ctor with `type` argument expects functions type only!");
   16bd2:	76 3b                	jbe    16c0f <_ZN7genetic4nodeC1ENS0_4typeE+0x4f>
        fid              = kInvalidFeatureId;
   16bd4:	c7 47 04 ff ff ff ff 	movl   $0xffffffff,0x4(%rdi)
            if (node::type::unary_begin <= t && t <= node::type::unary_end) {
   16bdb:	8d 46 f5             	lea    -0xb(%rsi),%eax
   16bde:	40 80 c6 fe          	add    $0xfe,%sil
   16be2:	40 80 fe 09          	cmp    $0x9,%sil
   16be6:	0f 92 c1             	setb   %cl
        flags.arity_       = detail::arity(ft);
   16be9:	00 c9                	add    %cl,%cl
   16beb:	3c 17                	cmp    $0x17,%al
   16bed:	0f b6 c1             	movzbl %cl,%eax
   16bf0:	b9 01 00 00 00       	mov    $0x1,%ecx
   16bf5:	0f 43 c8             	cmovae %eax,%ecx
   16bf8:	0f b6 47 0c          	movzbl 0xc(%rdi),%eax
   16bfc:	24 f8                	and    $0xf8,%al
   16bfe:	08 c8                	or     %cl,%al
        flags.is_terminal_ = detail::is_terminal(ft);
   16c00:	88 47 0c             	mov    %al,0xc(%rdi)
    }
   16c03:	48 83 c4 28          	add    $0x28,%rsp
   16c07:	5b                   	pop    %rbx
   16c08:	41 5c                	pop    %r12
   16c0a:	41 5e                	pop    %r14
   16c0c:	41 5f                	pop    %r15
   16c0e:	c3                   	retq   
        ASSERT(is_nonterminal(), "node: ctor with `type` argument expects functions type only!");
   16c0f:	48 8d 15 87 c1 fe ff 	lea    -0x13e79(%rip),%rdx        # 2d9d <_IO_stdin_used+0x6ad>
   16c16:	48 8d 0d 13 bf fe ff 	lea    -0x140ed(%rip),%rcx        # 2b30 <_IO_stdin_used+0x440>
   16c1d:	31 ff                	xor    %edi,%edi
   16c1f:	31 f6                	xor    %esi,%esi
   16c21:	41 b8 25 00 00 00    	mov    $0x25,%r8d
   16c27:	31 c0                	xor    %eax,%eax
   16c29:	e8 e2 0d 00 00       	callq  17a10 <snprintf@plt>
   16c2e:	85 c0                	test   %eax,%eax
   16c30:	79 32                	jns    16c64 <_ZN7genetic4nodeC1ENS0_4typeE+0xa4>
   16c32:	bf 10 00 00 00       	mov    $0x10,%edi
   16c37:	e8 a4 0a 00 00       	callq  176e0 <__cxa_allocate_exception@plt>
   16c3c:	48 89 c3             	mov    %rax,%rbx
   16c3f:	48 8d 35 8e bf fe ff 	lea    -0x14072(%rip),%rsi        # 2bd4 <_IO_stdin_used+0x4e4>
   16c46:	48 89 c7             	mov    %rax,%rdi
   16c49:	e8 e2 09 00 00       	callq  17630 <_ZNSt13runtime_errorC1EPKc@plt>
   16c4e:	48 8b 35 73 21 00 00 	mov    0x2173(%rip),%rsi        # 18dc8 <_ZTISt13runtime_error@GLIBCXX_3.4>
   16c55:	48 8b 15 7c 21 00 00 	mov    0x217c(%rip),%rdx        # 18dd8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
   16c5c:	48 89 df             	mov    %rbx,%rdi
   16c5f:	e8 2c 0a 00 00       	callq  17690 <__cxa_throw@plt>
   16c64:	41 89 c6             	mov    %eax,%r14d
   16c67:	41 89 c4             	mov    %eax,%r12d
   16c6a:	4d 8d 7c 24 3d       	lea    0x3d(%r12),%r15
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
   16c6f:	4c 89 ff             	mov    %r15,%rdi
   16c72:	e8 e9 09 00 00       	callq  17660 <_Znam@plt>
   16c77:	48 89 c3             	mov    %rax,%rbx
   16c7a:	48 89 c7             	mov    %rax,%rdi
   16c7d:	31 f6                	xor    %esi,%esi
   16c7f:	4c 89 fa             	mov    %r15,%rdx
   16c82:	e8 09 0d 00 00       	callq  17990 <memset@plt>
   16c87:	41 ff c6             	inc    %r14d
   16c8a:	48 8d 15 0c c1 fe ff 	lea    -0x13ef4(%rip),%rdx        # 2d9d <_IO_stdin_used+0x6ad>
   16c91:	48 8d 0d 98 be fe ff 	lea    -0x14168(%rip),%rcx        # 2b30 <_IO_stdin_used+0x440>
   16c98:	48 89 df             	mov    %rbx,%rdi
   16c9b:	4c 89 f6             	mov    %r14,%rsi
   16c9e:	41 b8 25 00 00 00    	mov    $0x25,%r8d
   16ca4:	31 c0                	xor    %eax,%eax
   16ca6:	e8 65 0d 00 00       	callq  17a10 <snprintf@plt>
   16cab:	0f 10 05 64 bd fe ff 	movups -0x1429c(%rip),%xmm0        # 2a16 <_IO_stdin_used+0x326>
   16cb2:	42 0f 11 04 23       	movups %xmm0,(%rbx,%r12,1)
   16cb7:	0f 10 05 68 bd fe ff 	movups -0x14298(%rip),%xmm0        # 2a26 <_IO_stdin_used+0x336>
   16cbe:	42 0f 11 44 23 10    	movups %xmm0,0x10(%rbx,%r12,1)
   16cc4:	0f 10 05 6b bd fe ff 	movups -0x14295(%rip),%xmm0        # 2a36 <_IO_stdin_used+0x346>
   16ccb:	42 0f 11 44 23 20    	movups %xmm0,0x20(%rbx,%r12,1)
   16cd1:	0f 10 05 6b bd fe ff 	movups -0x14295(%rip),%xmm0        # 2a43 <_IO_stdin_used+0x353>
   16cd8:	42 0f 11 44 23 2d    	movups %xmm0,0x2d(%rbx,%r12,1)
   16cde:	4a 8d 54 23 3c       	lea    0x3c(%rbx,%r12,1),%rdx
   16ce3:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
   16ce8:	48 8d 4c 24 07       	lea    0x7(%rsp),%rcx
   16ced:	48 89 de             	mov    %rbx,%rsi
   16cf0:	e8 ab 06 00 00       	callq  173a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IPcvEET_S7_RKS3_>
   16cf5:	bf 10 00 00 00       	mov    $0x10,%edi
   16cfa:	e8 e1 09 00 00       	callq  176e0 <__cxa_allocate_exception@plt>
   16cff:	49 89 c7             	mov    %rax,%r15
   16d02:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
   16d07:	48 89 c7             	mov    %rax,%rdi
   16d0a:	e8 c1 08 00 00       	callq  175d0 <_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>
   16d0f:	48 8b 35 b2 20 00 00 	mov    0x20b2(%rip),%rsi        # 18dc8 <_ZTISt13runtime_error@GLIBCXX_3.4>
   16d16:	48 8b 15 bb 20 00 00 	mov    0x20bb(%rip),%rdx        # 18dd8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
   16d1d:	4c 89 ff             	mov    %r15,%rdi
   16d20:	e8 6b 09 00 00       	callq  17690 <__cxa_throw@plt>
   16d25:	49 89 c6             	mov    %rax,%r14
   16d28:	eb 0b                	jmp    16d35 <_ZN7genetic4nodeC1ENS0_4typeE+0x175>
   16d2a:	49 89 c6             	mov    %rax,%r14
   16d2d:	4c 89 ff             	mov    %r15,%rdi
   16d30:	e8 bb 0a 00 00       	callq  177f0 <__cxa_free_exception@plt>
   16d35:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   16d3a:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
      { return _M_data() == _M_local_data(); }
   16d3f:	48 39 c7             	cmp    %rax,%rdi
	if (!_M_is_local())
   16d42:	74 0a                	je     16d4e <_ZN7genetic4nodeC1ENS0_4typeE+0x18e>
   16d44:	e8 77 09 00 00       	callq  176c0 <_ZdlPv@plt>
   16d49:	eb 03                	jmp    16d4e <_ZN7genetic4nodeC1ENS0_4typeE+0x18e>
   16d4b:	49 89 c6             	mov    %rax,%r14
	  delete [] __ptr;
   16d4e:	48 89 df             	mov    %rbx,%rdi
   16d51:	e8 ba 09 00 00       	callq  17710 <_ZdaPv@plt>
   16d56:	4c 89 f7             	mov    %r14,%rdi
   16d59:	e8 12 0c 00 00       	callq  17970 <_Unwind_Resume@plt>
   16d5e:	49 89 c6             	mov    %rax,%r14
   16d61:	48 89 df             	mov    %rbx,%rdi
   16d64:	e8 87 0a 00 00       	callq  177f0 <__cxa_free_exception@plt>
   16d69:	4c 89 f7             	mov    %r14,%rdi
   16d6c:	e8 ff 0b 00 00       	callq  17970 <_Unwind_Resume@plt>
   16d71:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   16d78:	0f 1f 84 00 00 00 00 
   16d7f:	00 

0000000000016d80 <_ZNK7genetic4node14is_nonterminalEv>:
            return t == node::type::variable || t == node::type::constant;
   16d80:	80 3f 02             	cmpb   $0x2,(%rdi)
   16d83:	0f 93 c0             	setae  %al
    bool node::is_terminal() const {
        return detail::is_terminal(t);
    }

    bool node::is_nonterminal() const {
        return detail::is_nonterminal(t);
   16d86:	c3                   	retq   
   16d87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   16d8e:	00 00 

0000000000016d90 <_ZN7genetic4nodeC1Ei>:
    node::node(int fid) : t(node::type::variable), fid(fid) {
   16d90:	c6 07 00             	movb   $0x0,(%rdi)
   16d93:	89 77 04             	mov    %esi,0x4(%rdi)
        flags.arity_       = detail::arity(t);
   16d96:	0f b6 47 0c          	movzbl 0xc(%rdi),%eax
        flags.is_terminal_ = detail::is_terminal(t);
   16d9a:	24 f8                	and    $0xf8,%al
   16d9c:	0c 04                	or     $0x4,%al
   16d9e:	88 47 0c             	mov    %al,0xc(%rdi)
    }
   16da1:	c3                   	retq   
   16da2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   16da9:	1f 84 00 00 00 00 00 

0000000000016db0 <_ZN7genetic4nodeC1Ef>:
    node::node(float val) : t(node::type::constant), val(val) {
   16db0:	c6 07 01             	movb   $0x1,(%rdi)
   16db3:	f3 0f 11 47 08       	movss  %xmm0,0x8(%rdi)
        flags.arity_       = detail::arity(t);
   16db8:	0f b6 47 0c          	movzbl 0xc(%rdi),%eax
        flags.is_terminal_ = detail::is_terminal(t);
   16dbc:	24 f8                	and    $0xf8,%al
   16dbe:	0c 04                	or     $0x4,%al
   16dc0:	88 47 0c             	mov    %al,0xc(%rdi)
    }
   16dc3:	c3                   	retq   
   16dc4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
   16dcb:	00 00 00 00 00 

0000000000016dd0 <_ZN7genetic4nodeC1ERKS0_>:
    node::node(const node& src) : t(src.t), fid(src.fid), val(src.val) {
   16dd0:	0f b6 06             	movzbl (%rsi),%eax
   16dd3:	88 07                	mov    %al,(%rdi)
   16dd5:	8b 46 04             	mov    0x4(%rsi),%eax
   16dd8:	89 47 04             	mov    %eax,0x4(%rdi)
   16ddb:	f3 0f 10 46 08       	movss  0x8(%rsi),%xmm0
   16de0:	f3 0f 11 47 08       	movss  %xmm0,0x8(%rdi)
        flags.arity_       = src.flags.arity_;
   16de5:	0f b6 46 0c          	movzbl 0xc(%rsi),%eax
   16de9:	24 03                	and    $0x3,%al
   16deb:	0f b6 4f 0c          	movzbl 0xc(%rdi),%ecx
   16def:	80 e1 fc             	and    $0xfc,%cl
   16df2:	08 c1                	or     %al,%cl
   16df4:	88 4f 0c             	mov    %cl,0xc(%rdi)
        flags.is_terminal_ = src.flags.is_terminal_;
   16df7:	0f b6 46 0c          	movzbl 0xc(%rsi),%eax
   16dfb:	24 04                	and    $0x4,%al
   16dfd:	80 e1 fb             	and    $0xfb,%cl
   16e00:	08 c1                	or     %al,%cl
   16e02:	88 4f 0c             	mov    %cl,0xc(%rdi)
    }
   16e05:	c3                   	retq   
   16e06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   16e0d:	00 00 00 

0000000000016e10 <_ZN7genetic4nodeaSERKS0_>:
    node& node::operator=(const node& src) {
   16e10:	48 89 f8             	mov    %rdi,%rax
        t                  = src.t;
   16e13:	0f b6 0e             	movzbl (%rsi),%ecx
   16e16:	88 0f                	mov    %cl,(%rdi)
        fid                 = src.fid;
   16e18:	8b 4e 04             	mov    0x4(%rsi),%ecx
   16e1b:	89 4f 04             	mov    %ecx,0x4(%rdi)
        val                  = src.val;
   16e1e:	f3 0f 10 46 08       	movss  0x8(%rsi),%xmm0
   16e23:	f3 0f 11 47 08       	movss  %xmm0,0x8(%rdi)
        flags.arity_       = src.flags.arity_;
   16e28:	0f b6 4e 0c          	movzbl 0xc(%rsi),%ecx
   16e2c:	80 e1 03             	and    $0x3,%cl
   16e2f:	0f b6 57 0c          	movzbl 0xc(%rdi),%edx
   16e33:	80 e2 fc             	and    $0xfc,%dl
   16e36:	08 ca                	or     %cl,%dl
   16e38:	88 57 0c             	mov    %dl,0xc(%rdi)
        flags.is_terminal_ = src.flags.is_terminal_;
   16e3b:	0f b6 4e 0c          	movzbl 0xc(%rsi),%ecx
   16e3f:	80 e1 04             	and    $0x4,%cl
   16e42:	80 e2 fb             	and    $0xfb,%dl
   16e45:	08 ca                	or     %cl,%dl
   16e47:	88 57 0c             	mov    %dl,0xc(%rdi)
        return *this;
   16e4a:	c3                   	retq   
   16e4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000016e50 <_ZNK7genetic4node11is_terminalEv>:
   16e50:	80 3f 02             	cmpb   $0x2,(%rdi)
   16e53:	0f 92 c0             	setb   %al
        return detail::is_terminal(t);
   16e56:	c3                   	retq   
   16e57:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   16e5e:	00 00 

0000000000016e60 <_ZNK7genetic4node5arityEv>:
    }

    int node::arity() const {
        return detail::arity(t);
   16e60:	0f b6 07             	movzbl (%rdi),%eax
            if (node::type::unary_begin <= t && t <= node::type::unary_end) {
   16e63:	8d 48 f5             	lea    -0xb(%rax),%ecx
   16e66:	04 fe                	add    $0xfe,%al
   16e68:	31 d2                	xor    %edx,%edx
   16e6a:	3c 09                	cmp    $0x9,%al
   16e6c:	0f 92 c2             	setb   %dl
   16e6f:	01 d2                	add    %edx,%edx
   16e71:	80 f9 17             	cmp    $0x17,%cl
   16e74:	b8 01 00 00 00       	mov    $0x1,%eax
   16e79:	0f 43 c2             	cmovae %edx,%eax
   16e7c:	c3                   	retq   
   16e7d:	0f 1f 00             	nopl   (%rax)

0000000000016e80 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

#define CASE(str, val)                                                                             \
    if (#val == str)                                                                               \
    return node::type::val

    node::type node::from_str(const std::string& ntype) {
   16e80:	55                   	push   %rbp
   16e81:	41 57                	push   %r15
   16e83:	41 56                	push   %r14
   16e85:	41 55                	push   %r13
   16e87:	41 54                	push   %r12
   16e89:	53                   	push   %rbx
   16e8a:	48 83 ec 28          	sub    $0x28,%rsp
   16e8e:	48 89 fb             	mov    %rdi,%rbx
    { return __rhs.compare(__lhs) == 0; }
   16e91:	48 8d 35 f2 ba fe ff 	lea    -0x1450e(%rip),%rsi        # 298a <_IO_stdin_used+0x29a>
   16e98:	e8 b3 06 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   16e9d:	85 c0                	test   %eax,%eax
        CASE(ntype, variable);
   16e9f:	0f 84 ea 03 00 00    	je     1728f <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x40f>
   16ea5:	48 8d 35 58 be fe ff 	lea    -0x141a8(%rip),%rsi        # 2d04 <_IO_stdin_used+0x614>
   16eac:	48 89 df             	mov    %rbx,%rdi
   16eaf:	e8 9c 06 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   16eb4:	85 c0                	test   %eax,%eax
        CASE(ntype, constant);
   16eb6:	0f 84 d7 03 00 00    	je     17293 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x413>
   16ebc:	48 8d 35 da ba fe ff 	lea    -0x14526(%rip),%rsi        # 299d <_IO_stdin_used+0x2ad>
   16ec3:	48 89 df             	mov    %rbx,%rdi
   16ec6:	e8 85 06 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   16ecb:	85 c0                	test   %eax,%eax
        // note: keep the case statements in alphabetical order under each category of
        // operators.
        // binary operators
        CASE(ntype, add);
   16ecd:	0f 84 c4 03 00 00    	je     17297 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x417>
   16ed3:	48 8d 35 f2 bb fe ff 	lea    -0x1440e(%rip),%rsi        # 2acc <_IO_stdin_used+0x3dc>
   16eda:	48 89 df             	mov    %rbx,%rdi
   16edd:	e8 6e 06 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   16ee2:	85 c0                	test   %eax,%eax
        CASE(ntype, atan2);
   16ee4:	0f 84 b1 03 00 00    	je     1729b <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x41b>
   16eea:	48 8d 35 b0 ba fe ff 	lea    -0x14550(%rip),%rsi        # 29a1 <_IO_stdin_used+0x2b1>
   16ef1:	48 89 df             	mov    %rbx,%rdi
   16ef4:	e8 57 06 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   16ef9:	85 c0                	test   %eax,%eax
        CASE(ntype, div);
   16efb:	0f 84 9e 03 00 00    	je     1729f <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x41f>
   16f01:	48 8d 35 0f ba fe ff 	lea    -0x145f1(%rip),%rsi        # 2917 <_IO_stdin_used+0x227>
   16f08:	48 89 df             	mov    %rbx,%rdi
   16f0b:	e8 40 06 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   16f10:	85 c0                	test   %eax,%eax
        CASE(ntype, fdim);
   16f12:	0f 84 8b 03 00 00    	je     172a3 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x423>
   16f18:	48 8d 35 8f bb fe ff 	lea    -0x14471(%rip),%rsi        # 2aae <_IO_stdin_used+0x3be>
   16f1f:	48 89 df             	mov    %rbx,%rdi
   16f22:	e8 29 06 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   16f27:	85 c0                	test   %eax,%eax
        CASE(ntype, max);
   16f29:	0f 84 78 03 00 00    	je     172a7 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x427>
   16f2f:	48 8d 35 e6 b9 fe ff 	lea    -0x1461a(%rip),%rsi        # 291c <_IO_stdin_used+0x22c>
   16f36:	48 89 df             	mov    %rbx,%rdi
   16f39:	e8 12 06 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   16f3e:	85 c0                	test   %eax,%eax
        CASE(ntype, min);
   16f40:	0f 84 65 03 00 00    	je     172ab <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42b>
   16f46:	48 8d 35 2c be fe ff 	lea    -0x141d4(%rip),%rsi        # 2d79 <_IO_stdin_used+0x689>
   16f4d:	48 89 df             	mov    %rbx,%rdi
   16f50:	e8 fb 05 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   16f55:	85 c0                	test   %eax,%eax
        CASE(ntype, mul);
   16f57:	0f 84 52 03 00 00    	je     172af <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42f>
   16f5d:	48 8d 35 04 bf fe ff 	lea    -0x140fc(%rip),%rsi        # 2e68 <_IO_stdin_used+0x778>
   16f64:	48 89 df             	mov    %rbx,%rdi
   16f67:	e8 e4 05 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   16f6c:	85 c0                	test   %eax,%eax
        CASE(ntype, pow);
   16f6e:	0f 84 3f 03 00 00    	je     172b3 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x433>
   16f74:	48 8d 35 ca b8 fe ff 	lea    -0x14736(%rip),%rsi        # 2845 <_IO_stdin_used+0x155>
   16f7b:	48 89 df             	mov    %rbx,%rdi
   16f7e:	e8 cd 05 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   16f83:	85 c0                	test   %eax,%eax
        CASE(ntype, sub);
   16f85:	0f 84 2c 03 00 00    	je     172b7 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x437>
   16f8b:	48 8d 35 01 ba fe ff 	lea    -0x145ff(%rip),%rsi        # 2993 <_IO_stdin_used+0x2a3>
   16f92:	48 89 df             	mov    %rbx,%rdi
   16f95:	e8 b6 05 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   16f9a:	85 c0                	test   %eax,%eax
        // unary operators
        CASE(ntype, abs);
   16f9c:	0f 84 19 03 00 00    	je     172bb <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x43b>
   16fa2:	48 8d 35 f8 b8 fe ff 	lea    -0x14708(%rip),%rsi        # 28a1 <_IO_stdin_used+0x1b1>
   16fa9:	48 89 df             	mov    %rbx,%rdi
   16fac:	e8 9f 05 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   16fb1:	85 c0                	test   %eax,%eax
        CASE(ntype, acos);
   16fb3:	0f 84 06 03 00 00    	je     172bf <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x43f>
   16fb9:	48 8d 35 89 b8 fe ff 	lea    -0x14777(%rip),%rsi        # 2849 <_IO_stdin_used+0x159>
   16fc0:	48 89 df             	mov    %rbx,%rdi
   16fc3:	e8 88 05 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   16fc8:	85 c0                	test   %eax,%eax
        CASE(ntype, asin);
   16fca:	0f 84 f3 02 00 00    	je     172c3 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x443>
   16fd0:	48 8d 35 11 ba fe ff 	lea    -0x145ef(%rip),%rsi        # 29e8 <_IO_stdin_used+0x2f8>
   16fd7:	48 89 df             	mov    %rbx,%rdi
   16fda:	e8 71 05 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   16fdf:	85 c0                	test   %eax,%eax
        CASE(ntype, atan);
   16fe1:	0f 84 e0 02 00 00    	je     172c7 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x447>
   16fe7:	48 8d 35 8f bd fe ff 	lea    -0x14271(%rip),%rsi        # 2d7d <_IO_stdin_used+0x68d>
   16fee:	48 89 df             	mov    %rbx,%rdi
   16ff1:	e8 5a 05 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   16ff6:	85 c0                	test   %eax,%eax
        CASE(ntype, acosh);
   16ff8:	0f 84 cd 02 00 00    	je     172cb <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44b>
   16ffe:	48 8d 35 e7 ba fe ff 	lea    -0x14519(%rip),%rsi        # 2aec <_IO_stdin_used+0x3fc>
   17005:	48 89 df             	mov    %rbx,%rdi
   17008:	e8 43 05 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   1700d:	85 c0                	test   %eax,%eax
        CASE(ntype, asinh);
   1700f:	0f 84 ba 02 00 00    	je     172cf <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44f>
   17015:	48 8d 35 53 bc fe ff 	lea    -0x143ad(%rip),%rsi        # 2c6f <_IO_stdin_used+0x57f>
   1701c:	48 89 df             	mov    %rbx,%rdi
   1701f:	e8 2c 05 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   17024:	85 c0                	test   %eax,%eax
        CASE(ntype, atanh);
   17026:	0f 84 a7 02 00 00    	je     172d3 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x453>
   1702c:	48 8d 35 cd bb fe ff 	lea    -0x14433(%rip),%rsi        # 2c00 <_IO_stdin_used+0x510>
   17033:	48 89 df             	mov    %rbx,%rdi
   17036:	e8 15 05 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   1703b:	85 c0                	test   %eax,%eax
        CASE(ntype, cbrt);
   1703d:	0f 84 94 02 00 00    	je     172d7 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x457>
   17043:	48 8d 35 a3 b9 fe ff 	lea    -0x1465d(%rip),%rsi        # 29ed <_IO_stdin_used+0x2fd>
   1704a:	48 89 df             	mov    %rbx,%rdi
   1704d:	e8 fe 04 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   17052:	85 c0                	test   %eax,%eax
        CASE(ntype, cos);
   17054:	0f 84 81 02 00 00    	je     172db <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x45b>
   1705a:	48 8d 35 22 bd fe ff 	lea    -0x142de(%rip),%rsi        # 2d83 <_IO_stdin_used+0x693>
   17061:	48 89 df             	mov    %rbx,%rdi
   17064:	e8 e7 04 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   17069:	85 c0                	test   %eax,%eax
        CASE(ntype, cosh);
   1706b:	0f 84 6e 02 00 00    	je     172df <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x45f>
   17071:	48 8d 35 1f b9 fe ff 	lea    -0x146e1(%rip),%rsi        # 2997 <_IO_stdin_used+0x2a7>
   17078:	48 89 df             	mov    %rbx,%rdi
   1707b:	e8 d0 04 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   17080:	85 c0                	test   %eax,%eax
        CASE(ntype, cube);
   17082:	0f 84 5b 02 00 00    	je     172e3 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x463>
   17088:	48 8d 35 17 b8 fe ff 	lea    -0x147e9(%rip),%rsi        # 28a6 <_IO_stdin_used+0x1b6>
   1708f:	48 89 df             	mov    %rbx,%rdi
   17092:	e8 b9 04 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   17097:	85 c0                	test   %eax,%eax
        CASE(ntype, exp);
   17099:	0f 84 48 02 00 00    	je     172e7 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x467>
   1709f:	48 8d 35 e2 bc fe ff 	lea    -0x1431e(%rip),%rsi        # 2d88 <_IO_stdin_used+0x698>
   170a6:	48 89 df             	mov    %rbx,%rdi
   170a9:	e8 a2 04 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   170ae:	85 c0                	test   %eax,%eax
        CASE(ntype, inv);
   170b0:	0f 84 35 02 00 00    	je     172eb <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x46b>
   170b6:	48 8d 35 af bd fe ff 	lea    -0x14251(%rip),%rsi        # 2e6c <_IO_stdin_used+0x77c>
   170bd:	48 89 df             	mov    %rbx,%rdi
   170c0:	e8 8b 04 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   170c5:	85 c0                	test   %eax,%eax
        CASE(ntype, log);
   170c7:	0f 84 22 02 00 00    	je     172ef <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x46f>
   170cd:	48 8d 35 39 bc fe ff 	lea    -0x143c7(%rip),%rsi        # 2d0d <_IO_stdin_used+0x61d>
   170d4:	48 89 df             	mov    %rbx,%rdi
   170d7:	e8 74 04 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   170dc:	85 c0                	test   %eax,%eax
        CASE(ntype, neg);
   170de:	0f 84 0f 02 00 00    	je     172f3 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x473>
   170e4:	48 8d 35 ba b8 fe ff 	lea    -0x14746(%rip),%rsi        # 29a5 <_IO_stdin_used+0x2b5>
   170eb:	48 89 df             	mov    %rbx,%rdi
   170ee:	e8 5d 04 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   170f3:	85 c0                	test   %eax,%eax
        CASE(ntype, rcbrt);
   170f5:	0f 84 fc 01 00 00    	je     172f7 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x477>
   170fb:	48 8d 35 0f bc fe ff 	lea    -0x143f1(%rip),%rsi        # 2d11 <_IO_stdin_used+0x621>
   17102:	48 89 df             	mov    %rbx,%rdi
   17105:	e8 46 04 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   1710a:	85 c0                	test   %eax,%eax
        CASE(ntype, rsqrt);
   1710c:	0f 84 e9 01 00 00    	je     172fb <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x47b>
   17112:	48 8d 35 ef b9 fe ff 	lea    -0x14611(%rip),%rsi        # 2b08 <_IO_stdin_used+0x418>
   17119:	48 89 df             	mov    %rbx,%rdi
   1711c:	e8 2f 04 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   17121:	85 c0                	test   %eax,%eax
        CASE(ntype, sq);
   17123:	0f 84 d6 01 00 00    	je     172ff <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x47f>
   17129:	48 8d 35 13 bb fe ff 	lea    -0x144ed(%rip),%rsi        # 2c43 <_IO_stdin_used+0x553>
   17130:	48 89 df             	mov    %rbx,%rdi
   17133:	e8 18 04 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   17138:	85 c0                	test   %eax,%eax
        CASE(ntype, sqrt);
   1713a:	0f 84 c3 01 00 00    	je     17303 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x483>
   17140:	48 8d 35 8b b9 fe ff 	lea    -0x14675(%rip),%rsi        # 2ad2 <_IO_stdin_used+0x3e2>
   17147:	48 89 df             	mov    %rbx,%rdi
   1714a:	e8 01 04 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   1714f:	85 c0                	test   %eax,%eax
        CASE(ntype, sin);
   17151:	0f 84 b0 01 00 00    	je     17307 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x487>
   17157:	48 8d 35 47 ba fe ff 	lea    -0x145b9(%rip),%rsi        # 2ba5 <_IO_stdin_used+0x4b5>
   1715e:	48 89 df             	mov    %rbx,%rdi
   17161:	e8 ea 03 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   17166:	85 c0                	test   %eax,%eax
        CASE(ntype, sinh);
   17168:	0f 84 9d 01 00 00    	je     1730b <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x48b>
   1716e:	48 8d 35 35 b7 fe ff 	lea    -0x148cb(%rip),%rsi        # 28aa <_IO_stdin_used+0x1ba>
   17175:	48 89 df             	mov    %rbx,%rdi
   17178:	e8 d3 03 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   1717d:	85 c0                	test   %eax,%eax
        CASE(ntype, tan);
   1717f:	0f 84 8a 01 00 00    	je     1730f <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x48f>
   17185:	48 8d 35 7f b9 fe ff 	lea    -0x14681(%rip),%rsi        # 2b0b <_IO_stdin_used+0x41b>
   1718c:	48 89 df             	mov    %rbx,%rdi
   1718f:	e8 bc 03 00 00       	callq  17550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>
   17194:	89 c1                	mov    %eax,%ecx
   17196:	b0 21                	mov    $0x21,%al
   17198:	85 c9                	test   %ecx,%ecx
        CASE(ntype, tanh);
   1719a:	0f 84 71 01 00 00    	je     17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
        ASSERT(false, "node::from_str: Bad type passed '%s'!", ntype.c_str());
   171a0:	48 8d 15 f6 bb fe ff 	lea    -0x1440a(%rip),%rdx        # 2d9d <_IO_stdin_used+0x6ad>
   171a7:	48 8d 0d 82 b9 fe ff 	lea    -0x1467e(%rip),%rcx        # 2b30 <_IO_stdin_used+0x440>
   171ae:	31 ff                	xor    %edi,%edi
   171b0:	31 f6                	xor    %esi,%esi
   171b2:	41 b8 7a 00 00 00    	mov    $0x7a,%r8d
   171b8:	31 c0                	xor    %eax,%eax
   171ba:	e8 51 08 00 00       	callq  17a10 <snprintf@plt>
   171bf:	41 89 c7             	mov    %eax,%r15d
      { return _M_dataplus._M_p; }
   171c2:	48 8b 0b             	mov    (%rbx),%rcx
   171c5:	48 8d 15 e2 b6 fe ff 	lea    -0x1491e(%rip),%rdx        # 28ae <_IO_stdin_used+0x1be>
   171cc:	31 ff                	xor    %edi,%edi
   171ce:	31 f6                	xor    %esi,%esi
   171d0:	31 c0                	xor    %eax,%eax
   171d2:	e8 39 08 00 00       	callq  17a10 <snprintf@plt>
   171d7:	41 89 c4             	mov    %eax,%r12d
   171da:	44 09 f8             	or     %r15d,%eax
   171dd:	0f 88 3d 01 00 00    	js     17320 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4a0>
   171e3:	41 8d 6f 01          	lea    0x1(%r15),%ebp
   171e7:	43 8d 04 27          	lea    (%r15,%r12,1),%eax
   171eb:	ff c0                	inc    %eax
   171ed:	4c 63 e8             	movslq %eax,%r13
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
   171f0:	4c 89 ef             	mov    %r13,%rdi
   171f3:	e8 68 04 00 00       	callq  17660 <_Znam@plt>
   171f8:	49 89 c6             	mov    %rax,%r14
   171fb:	48 89 c7             	mov    %rax,%rdi
   171fe:	31 f6                	xor    %esi,%esi
   17200:	4c 89 ea             	mov    %r13,%rdx
   17203:	e8 88 07 00 00       	callq  17990 <memset@plt>
   17208:	48 63 f5             	movslq %ebp,%rsi
   1720b:	48 8d 15 8b bb fe ff 	lea    -0x14475(%rip),%rdx        # 2d9d <_IO_stdin_used+0x6ad>
   17212:	48 8d 0d 17 b9 fe ff 	lea    -0x146e9(%rip),%rcx        # 2b30 <_IO_stdin_used+0x440>
   17219:	4c 89 f7             	mov    %r14,%rdi
   1721c:	41 b8 7a 00 00 00    	mov    $0x7a,%r8d
   17222:	31 c0                	xor    %eax,%eax
   17224:	e8 e7 07 00 00       	callq  17a10 <snprintf@plt>
   17229:	44 89 ff             	mov    %r15d,%edi
   1722c:	4c 01 f7             	add    %r14,%rdi
   1722f:	41 ff c4             	inc    %r12d
   17232:	49 63 f4             	movslq %r12d,%rsi
   17235:	48 8b 0b             	mov    (%rbx),%rcx
   17238:	48 8d 15 6f b6 fe ff 	lea    -0x14991(%rip),%rdx        # 28ae <_IO_stdin_used+0x1be>
   1723f:	31 c0                	xor    %eax,%eax
   17241:	e8 ca 07 00 00       	callq  17a10 <snprintf@plt>
   17246:	4b 8d 14 2e          	lea    (%r14,%r13,1),%rdx
   1724a:	48 ff ca             	dec    %rdx
   1724d:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
   17252:	48 8d 4c 24 07       	lea    0x7(%rsp),%rcx
   17257:	4c 89 f6             	mov    %r14,%rsi
   1725a:	e8 41 01 00 00       	callq  173a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IPcvEET_S7_RKS3_>
   1725f:	bf 10 00 00 00       	mov    $0x10,%edi
   17264:	e8 77 04 00 00       	callq  176e0 <__cxa_allocate_exception@plt>
   17269:	49 89 c7             	mov    %rax,%r15
   1726c:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
   17271:	48 89 c7             	mov    %rax,%rdi
   17274:	e8 57 03 00 00       	callq  175d0 <_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>
   17279:	48 8b 35 48 1b 00 00 	mov    0x1b48(%rip),%rsi        # 18dc8 <_ZTISt13runtime_error@GLIBCXX_3.4>
   17280:	48 8b 15 51 1b 00 00 	mov    0x1b51(%rip),%rdx        # 18dd8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
   17287:	4c 89 ff             	mov    %r15,%rdi
   1728a:	e8 01 04 00 00       	callq  17690 <__cxa_throw@plt>
   1728f:	31 c0                	xor    %eax,%eax
   17291:	eb 7e                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   17293:	b0 01                	mov    $0x1,%al
   17295:	eb 7a                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   17297:	b0 02                	mov    $0x2,%al
   17299:	eb 76                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   1729b:	b0 03                	mov    $0x3,%al
   1729d:	eb 72                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   1729f:	b0 04                	mov    $0x4,%al
   172a1:	eb 6e                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   172a3:	b0 05                	mov    $0x5,%al
   172a5:	eb 6a                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   172a7:	b0 06                	mov    $0x6,%al
   172a9:	eb 66                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   172ab:	b0 07                	mov    $0x7,%al
   172ad:	eb 62                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   172af:	b0 08                	mov    $0x8,%al
   172b1:	eb 5e                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   172b3:	b0 09                	mov    $0x9,%al
   172b5:	eb 5a                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   172b7:	b0 0a                	mov    $0xa,%al
   172b9:	eb 56                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   172bb:	b0 0b                	mov    $0xb,%al
   172bd:	eb 52                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   172bf:	b0 0c                	mov    $0xc,%al
   172c1:	eb 4e                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   172c3:	b0 0e                	mov    $0xe,%al
   172c5:	eb 4a                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   172c7:	b0 10                	mov    $0x10,%al
   172c9:	eb 46                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   172cb:	b0 0d                	mov    $0xd,%al
   172cd:	eb 42                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   172cf:	b0 0f                	mov    $0xf,%al
   172d1:	eb 3e                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   172d3:	b0 11                	mov    $0x11,%al
   172d5:	eb 3a                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   172d7:	b0 12                	mov    $0x12,%al
   172d9:	eb 36                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   172db:	b0 13                	mov    $0x13,%al
   172dd:	eb 32                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   172df:	b0 14                	mov    $0x14,%al
   172e1:	eb 2e                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   172e3:	b0 15                	mov    $0x15,%al
   172e5:	eb 2a                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   172e7:	b0 16                	mov    $0x16,%al
   172e9:	eb 26                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   172eb:	b0 17                	mov    $0x17,%al
   172ed:	eb 22                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   172ef:	b0 18                	mov    $0x18,%al
   172f1:	eb 1e                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   172f3:	b0 19                	mov    $0x19,%al
   172f5:	eb 1a                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   172f7:	b0 1a                	mov    $0x1a,%al
   172f9:	eb 16                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   172fb:	b0 1b                	mov    $0x1b,%al
   172fd:	eb 12                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   172ff:	b0 1e                	mov    $0x1e,%al
   17301:	eb 0e                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   17303:	b0 1f                	mov    $0x1f,%al
   17305:	eb 0a                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   17307:	b0 1c                	mov    $0x1c,%al
   17309:	eb 06                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   1730b:	b0 1d                	mov    $0x1d,%al
   1730d:	eb 02                	jmp    17311 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x491>
   1730f:	b0 20                	mov    $0x20,%al
    }
   17311:	48 83 c4 28          	add    $0x28,%rsp
   17315:	5b                   	pop    %rbx
   17316:	41 5c                	pop    %r12
   17318:	41 5d                	pop    %r13
   1731a:	41 5e                	pop    %r14
   1731c:	41 5f                	pop    %r15
   1731e:	5d                   	pop    %rbp
   1731f:	c3                   	retq   
        ASSERT(false, "node::from_str: Bad type passed '%s'!", ntype.c_str());
   17320:	bf 10 00 00 00       	mov    $0x10,%edi
   17325:	e8 b6 03 00 00       	callq  176e0 <__cxa_allocate_exception@plt>
   1732a:	49 89 c6             	mov    %rax,%r14
   1732d:	48 8d 35 a0 b8 fe ff 	lea    -0x14760(%rip),%rsi        # 2bd4 <_IO_stdin_used+0x4e4>
   17334:	48 89 c7             	mov    %rax,%rdi
   17337:	e8 f4 02 00 00       	callq  17630 <_ZNSt13runtime_errorC1EPKc@plt>
   1733c:	48 8b 35 85 1a 00 00 	mov    0x1a85(%rip),%rsi        # 18dc8 <_ZTISt13runtime_error@GLIBCXX_3.4>
   17343:	48 8b 15 8e 1a 00 00 	mov    0x1a8e(%rip),%rdx        # 18dd8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
   1734a:	4c 89 f7             	mov    %r14,%rdi
   1734d:	e8 3e 03 00 00       	callq  17690 <__cxa_throw@plt>
   17352:	48 89 c3             	mov    %rax,%rbx
   17355:	eb 0b                	jmp    17362 <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e2>
   17357:	48 89 c3             	mov    %rax,%rbx
   1735a:	4c 89 ff             	mov    %r15,%rdi
   1735d:	e8 8e 04 00 00       	callq  177f0 <__cxa_free_exception@plt>
   17362:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   17367:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
      { return _M_data() == _M_local_data(); }
   1736c:	48 39 c7             	cmp    %rax,%rdi
	if (!_M_is_local())
   1736f:	74 1d                	je     1738e <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x50e>
   17371:	e8 4a 03 00 00       	callq  176c0 <_ZdlPv@plt>
   17376:	eb 16                	jmp    1738e <_ZN7genetic4node8from_strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x50e>
   17378:	48 89 c3             	mov    %rax,%rbx
   1737b:	4c 89 f7             	mov    %r14,%rdi
   1737e:	e8 6d 04 00 00       	callq  177f0 <__cxa_free_exception@plt>
   17383:	48 89 df             	mov    %rbx,%rdi
   17386:	e8 e5 05 00 00       	callq  17970 <_Unwind_Resume@plt>
   1738b:	48 89 c3             	mov    %rax,%rbx
	  delete [] __ptr;
   1738e:	4c 89 f7             	mov    %r14,%rdi
   17391:	e8 7a 03 00 00       	callq  17710 <_ZdaPv@plt>
   17396:	48 89 df             	mov    %rbx,%rdi
   17399:	e8 d2 05 00 00       	callq  17970 <_Unwind_Resume@plt>
   1739e:	cc                   	int3   
   1739f:	cc                   	int3   

00000000000173a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IPcvEET_S7_RKS3_>:
	{ _M_construct(__beg, __end); }
   173a0:	41 57                	push   %r15
   173a2:	41 56                	push   %r14
   173a4:	53                   	push   %rbx
   173a5:	48 83 ec 10          	sub    $0x10,%rsp
   173a9:	48 89 fb             	mov    %rdi,%rbx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   173ac:	48 8d 47 10          	lea    0x10(%rdi),%rax
	: allocator_type(__a), _M_p(__dat) { }
   173b0:	48 89 07             	mov    %rax,(%rdi)

  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }
   173b3:	48 85 f6             	test   %rsi,%rsi
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   173b6:	75 05                	jne    173bd <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IPcvEET_S7_RKS3_+0x1d>
   173b8:	48 85 d2             	test   %rdx,%rdx
   173bb:	75 6c                	jne    17429 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IPcvEET_S7_RKS3_+0x89>
   173bd:	48 29 f2             	sub    %rsi,%rdx
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   173c0:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
	if (__dnew > size_type(_S_local_capacity))
   173c5:	48 83 fa 10          	cmp    $0x10,%rdx
   173c9:	72 2a                	jb     173f5 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IPcvEET_S7_RKS3_+0x55>
   173cb:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
	    _M_data(_M_create(__dnew, size_type(0)));
   173d0:	48 89 df             	mov    %rbx,%rdi
   173d3:	49 89 f6             	mov    %rsi,%r14
   173d6:	48 89 c6             	mov    %rax,%rsi
   173d9:	49 89 d7             	mov    %rdx,%r15
   173dc:	31 d2                	xor    %edx,%edx
   173de:	e8 9d 03 00 00       	callq  17780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
   173e3:	4c 89 f6             	mov    %r14,%rsi
   173e6:	4c 89 fa             	mov    %r15,%rdx
      { _M_dataplus._M_p = __p; }
   173e9:	48 89 03             	mov    %rax,(%rbx)
	    _M_capacity(__dnew);
   173ec:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
      { _M_allocated_capacity = __capacity; }
   173f1:	48 89 4b 10          	mov    %rcx,0x10(%rbx)
	if (__n == 1)
   173f5:	48 85 d2             	test   %rdx,%rdx
   173f8:	74 15                	je     1740f <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IPcvEET_S7_RKS3_+0x6f>
   173fa:	48 83 fa 01          	cmp    $0x1,%rdx
   173fe:	75 07                	jne    17407 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IPcvEET_S7_RKS3_+0x67>
   17400:	0f b6 0e             	movzbl (%rsi),%ecx
   17403:	88 08                	mov    %cl,(%rax)
   17405:	eb 08                	jmp    1740f <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IPcvEET_S7_RKS3_+0x6f>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   17407:	48 89 c7             	mov    %rax,%rdi
   1740a:	e8 b1 05 00 00       	callq  179c0 <memcpy@plt>
	_M_set_length(__dnew);
   1740f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
      { _M_string_length = __length; }
   17414:	48 89 43 08          	mov    %rax,0x8(%rbx)
      { return _M_dataplus._M_p; }
   17418:	48 8b 0b             	mov    (%rbx),%rcx
      { __c1 = __c2; }
   1741b:	c6 04 01 00          	movb   $0x0,(%rcx,%rax,1)
	{ _M_construct(__beg, __end); }
   1741f:	48 83 c4 10          	add    $0x10,%rsp
   17423:	5b                   	pop    %rbx
   17424:	41 5e                	pop    %r14
   17426:	41 5f                	pop    %r15
   17428:	c3                   	retq   
	  std::__throw_logic_error(__N("basic_string::"
   17429:	48 8d 3d e7 b8 fe ff 	lea    -0x14719(%rip),%rdi        # 2d17 <_IO_stdin_used+0x627>
   17430:	e8 9b 03 00 00       	callq  177d0 <_ZSt19__throw_logic_errorPKc@plt>
   17435:	cc                   	int3   
   17436:	cc                   	int3   
   17437:	cc                   	int3   
   17438:	cc                   	int3   
   17439:	cc                   	int3   
   1743a:	cc                   	int3   
   1743b:	cc                   	int3   
   1743c:	cc                   	int3   
   1743d:	cc                   	int3   
   1743e:	cc                   	int3   
   1743f:	cc                   	int3   

0000000000017440 <_GLOBAL__sub_I_node.cpp>:
   17440:	53                   	push   %rbx
   17441:	48 8d 1d cc 2c 00 00 	lea    0x2ccc(%rip),%rbx        # 1a114 <_ZStL8__ioinit>
   17448:	48 89 df             	mov    %rbx,%rdi
   1744b:	e8 20 03 00 00       	callq  17770 <_ZNSt8ios_base4InitC1Ev@plt>
   17450:	48 8b 3d 59 19 00 00 	mov    0x1959(%rip),%rdi        # 18db0 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
   17457:	48 8d 15 aa 29 00 00 	lea    0x29aa(%rip),%rdx        # 19e08 <__dso_handle>
   1745e:	48 89 de             	mov    %rbx,%rsi
   17461:	5b                   	pop    %rbx
   17462:	e9 69 05 00 00       	jmpq   179d0 <__cxa_atexit@plt>
   17467:	cc                   	int3   
   17468:	cc                   	int3   
   17469:	cc                   	int3   
   1746a:	cc                   	int3   
   1746b:	cc                   	int3   
   1746c:	cc                   	int3   
   1746d:	cc                   	int3   
   1746e:	cc                   	int3   
   1746f:	cc                   	int3   

0000000000017470 <__libc_csu_init>:
   17470:	f3 0f 1e fa          	endbr64 
   17474:	41 57                	push   %r15
   17476:	4c 8d 3d ab 15 00 00 	lea    0x15ab(%rip),%r15        # 18a28 <__frame_dummy_init_array_entry>
   1747d:	41 56                	push   %r14
   1747f:	49 89 d6             	mov    %rdx,%r14
   17482:	41 55                	push   %r13
   17484:	49 89 f5             	mov    %rsi,%r13
   17487:	41 54                	push   %r12
   17489:	41 89 fc             	mov    %edi,%r12d
   1748c:	55                   	push   %rbp
   1748d:	48 8d 2d bc 15 00 00 	lea    0x15bc(%rip),%rbp        # 18a50 <__init_array_end>
   17494:	53                   	push   %rbx
   17495:	4c 29 fd             	sub    %r15,%rbp
   17498:	48 83 ec 08          	sub    $0x8,%rsp
   1749c:	e8 47 00 00 00       	callq  174e8 <_init>
   174a1:	48 c1 fd 03          	sar    $0x3,%rbp
   174a5:	74 1f                	je     174c6 <__libc_csu_init+0x56>
   174a7:	31 db                	xor    %ebx,%ebx
   174a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   174b0:	4c 89 f2             	mov    %r14,%rdx
   174b3:	4c 89 ee             	mov    %r13,%rsi
   174b6:	44 89 e7             	mov    %r12d,%edi
   174b9:	41 ff 14 df          	callq  *(%r15,%rbx,8)
   174bd:	48 83 c3 01          	add    $0x1,%rbx
   174c1:	48 39 dd             	cmp    %rbx,%rbp
   174c4:	75 ea                	jne    174b0 <__libc_csu_init+0x40>
   174c6:	48 83 c4 08          	add    $0x8,%rsp
   174ca:	5b                   	pop    %rbx
   174cb:	5d                   	pop    %rbp
   174cc:	41 5c                	pop    %r12
   174ce:	41 5d                	pop    %r13
   174d0:	41 5e                	pop    %r14
   174d2:	41 5f                	pop    %r15
   174d4:	c3                   	retq   
   174d5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
   174dc:	00 00 00 00 

00000000000174e0 <__libc_csu_fini>:
   174e0:	f3 0f 1e fa          	endbr64 
   174e4:	c3                   	retq   

Disassembly of section .init:

00000000000174e8 <_init>:
   174e8:	f3 0f 1e fa          	endbr64 
   174ec:	48 83 ec 08          	sub    $0x8,%rsp
   174f0:	48 8b 05 81 18 00 00 	mov    0x1881(%rip),%rax        # 18d78 <__gmon_start__@Base>
   174f7:	48 85 c0             	test   %rax,%rax
   174fa:	74 02                	je     174fe <_init+0x16>
   174fc:	ff d0                	callq  *%rax
   174fe:	48 83 c4 08          	add    $0x8,%rsp
   17502:	c3                   	retq   

Disassembly of section .fini:

0000000000017504 <_fini>:
   17504:	f3 0f 1e fa          	endbr64 
   17508:	48 83 ec 08          	sub    $0x8,%rsp
   1750c:	48 83 c4 08          	add    $0x8,%rsp
   17510:	c3                   	retq   

Disassembly of section .plt:

0000000000017520 <__cxa_finalize@plt-0x10>:
   17520:	ff 35 22 29 00 00    	pushq  0x2922(%rip)        # 19e48 <__TMC_END__+0x8>
   17526:	ff 25 24 29 00 00    	jmpq   *0x2924(%rip)        # 19e50 <__TMC_END__+0x10>
   1752c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000017530 <__cxa_finalize@plt>:
   17530:	ff 25 22 29 00 00    	jmpq   *0x2922(%rip)        # 19e58 <__cxa_finalize@GLIBC_2.2.5>
   17536:	68 00 00 00 00       	pushq  $0x0
   1753b:	e9 e0 ff ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017540 <_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode@plt>:
   17540:	ff 25 1a 29 00 00    	jmpq   *0x291a(%rip)        # 19e60 <_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode@GLIBCXX_3.4.21>
   17546:	68 01 00 00 00       	pushq  $0x1
   1754b:	e9 d0 ff ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>:
   17550:	ff 25 12 29 00 00    	jmpq   *0x2912(%rip)        # 19e68 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@GLIBCXX_3.4.21>
   17556:	68 02 00 00 00       	pushq  $0x2
   1755b:	e9 c0 ff ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017560 <_ZNSt6localeD1Ev@plt>:
   17560:	ff 25 0a 29 00 00    	jmpq   *0x290a(%rip)        # 19e70 <_ZNSt6localeD1Ev@GLIBCXX_3.4>
   17566:	68 03 00 00 00       	pushq  $0x3
   1756b:	e9 b0 ff ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017570 <_ZSt20__throw_length_errorPKc@plt>:
   17570:	ff 25 02 29 00 00    	jmpq   *0x2902(%rip)        # 19e78 <_ZSt20__throw_length_errorPKc@GLIBCXX_3.4>
   17576:	68 04 00 00 00       	pushq  $0x4
   1757b:	e9 a0 ff ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>:
   17580:	ff 25 fa 28 00 00    	jmpq   *0x28fa(%rip)        # 19e80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@GLIBCXX_3.4.21>
   17586:	68 05 00 00 00       	pushq  $0x5
   1758b:	e9 90 ff ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017590 <_ZSt9terminatev@plt>:
   17590:	ff 25 f2 28 00 00    	jmpq   *0x28f2(%rip)        # 19e88 <_ZSt9terminatev@GLIBCXX_3.4>
   17596:	68 06 00 00 00       	pushq  $0x6
   1759b:	e9 80 ff ff ff       	jmpq   17520 <_fini+0x1c>

00000000000175a0 <_ZNSt8ios_baseD2Ev@plt>:
   175a0:	ff 25 ea 28 00 00    	jmpq   *0x28ea(%rip)        # 19e90 <_ZNSt8ios_baseD2Ev@GLIBCXX_3.4>
   175a6:	68 07 00 00 00       	pushq  $0x7
   175ab:	e9 70 ff ff ff       	jmpq   17520 <_fini+0x1c>

00000000000175b0 <_ZNSolsEi@plt>:
   175b0:	ff 25 e2 28 00 00    	jmpq   *0x28e2(%rip)        # 19e98 <_ZNSolsEi@GLIBCXX_3.4>
   175b6:	68 08 00 00 00       	pushq  $0x8
   175bb:	e9 60 ff ff ff       	jmpq   17520 <_fini+0x1c>

00000000000175c0 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@plt>:
   175c0:	ff 25 da 28 00 00    	jmpq   *0x28da(%rip)        # 19ea0 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GLIBCXX_3.4>
   175c6:	68 09 00 00 00       	pushq  $0x9
   175cb:	e9 50 ff ff ff       	jmpq   17520 <_fini+0x1c>

00000000000175d0 <_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
   175d0:	ff 25 d2 28 00 00    	jmpq   *0x28d2(%rip)        # 19ea8 <_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@GLIBCXX_3.4.21>
   175d6:	68 0a 00 00 00       	pushq  $0xa
   175db:	e9 40 ff ff ff       	jmpq   17520 <_fini+0x1c>

00000000000175e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm@plt>:
   175e0:	ff 25 ca 28 00 00    	jmpq   *0x28ca(%rip)        # 19eb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm@GLIBCXX_3.4.21>
   175e6:	68 0b 00 00 00       	pushq  $0xb
   175eb:	e9 30 ff ff ff       	jmpq   17520 <_fini+0x1c>

00000000000175f0 <_ZNSo9_M_insertImEERSoT_@plt>:
   175f0:	ff 25 c2 28 00 00    	jmpq   *0x28c2(%rip)        # 19eb8 <_ZNSo9_M_insertImEERSoT_@GLIBCXX_3.4.9>
   175f6:	68 0c 00 00 00       	pushq  $0xc
   175fb:	e9 20 ff ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017600 <_ZNSt14basic_ifstreamIcSt11char_traitsIcEED2Ev@plt>:
   17600:	ff 25 ba 28 00 00    	jmpq   *0x28ba(%rip)        # 19ec0 <_ZNSt14basic_ifstreamIcSt11char_traitsIcEED2Ev@GLIBCXX_3.4>
   17606:	68 0d 00 00 00       	pushq  $0xd
   1760b:	e9 10 ff ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017610 <_ZNSo9_M_insertIdEERSoT_@plt>:
   17610:	ff 25 b2 28 00 00    	jmpq   *0x28b2(%rip)        # 19ec8 <_ZNSo9_M_insertIdEERSoT_@GLIBCXX_3.4.9>
   17616:	68 0e 00 00 00       	pushq  $0xe
   1761b:	e9 00 ff ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017620 <_ZSt24__throw_invalid_argumentPKc@plt>:
   17620:	ff 25 aa 28 00 00    	jmpq   *0x28aa(%rip)        # 19ed0 <_ZSt24__throw_invalid_argumentPKc@GLIBCXX_3.4>
   17626:	68 0f 00 00 00       	pushq  $0xf
   1762b:	e9 f0 fe ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017630 <_ZNSt13runtime_errorC1EPKc@plt>:
   17630:	ff 25 a2 28 00 00    	jmpq   *0x28a2(%rip)        # 19ed8 <_ZNSt13runtime_errorC1EPKc@GLIBCXX_3.4.21>
   17636:	68 10 00 00 00       	pushq  $0x10
   1763b:	e9 e0 fe ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>:
   17640:	ff 25 9a 28 00 00    	jmpq   *0x289a(%rip)        # 19ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@GLIBCXX_3.4.21>
   17646:	68 11 00 00 00       	pushq  $0x11
   1764b:	e9 d0 fe ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017650 <_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_@plt>:
   17650:	ff 25 92 28 00 00    	jmpq   *0x2892(%rip)        # 19ee8 <_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_@GLIBCXX_3.4.21>
   17656:	68 12 00 00 00       	pushq  $0x12
   1765b:	e9 c0 fe ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017660 <_Znam@plt>:
   17660:	ff 25 8a 28 00 00    	jmpq   *0x288a(%rip)        # 19ef0 <_Znam@GLIBCXX_3.4>
   17666:	68 13 00 00 00       	pushq  $0x13
   1766b:	e9 b0 fe ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017670 <_ZNSt16invalid_argumentC1EPKc@plt>:
   17670:	ff 25 82 28 00 00    	jmpq   *0x2882(%rip)        # 19ef8 <_ZNSt16invalid_argumentC1EPKc@GLIBCXX_3.4.21>
   17676:	68 14 00 00 00       	pushq  $0x14
   1767b:	e9 a0 fe ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017680 <_ZNKSt12__basic_fileIcE7is_openEv@plt>:
   17680:	ff 25 7a 28 00 00    	jmpq   *0x287a(%rip)        # 19f00 <_ZNKSt12__basic_fileIcE7is_openEv@GLIBCXX_3.4>
   17686:	68 15 00 00 00       	pushq  $0x15
   1768b:	e9 90 fe ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017690 <__cxa_throw@plt>:
   17690:	ff 25 72 28 00 00    	jmpq   *0x2872(%rip)        # 19f08 <__cxa_throw@CXXABI_1.3>
   17696:	68 16 00 00 00       	pushq  $0x16
   1769b:	e9 80 fe ff ff       	jmpq   17520 <_fini+0x1c>

00000000000176a0 <_ZSt17__throw_bad_allocv@plt>:
   176a0:	ff 25 6a 28 00 00    	jmpq   *0x286a(%rip)        # 19f10 <_ZSt17__throw_bad_allocv@GLIBCXX_3.4>
   176a6:	68 17 00 00 00       	pushq  $0x17
   176ab:	e9 70 fe ff ff       	jmpq   17520 <_fini+0x1c>

00000000000176b0 <__cxa_begin_catch@plt>:
   176b0:	ff 25 62 28 00 00    	jmpq   *0x2862(%rip)        # 19f18 <__cxa_begin_catch@CXXABI_1.3>
   176b6:	68 18 00 00 00       	pushq  $0x18
   176bb:	e9 60 fe ff ff       	jmpq   17520 <_fini+0x1c>

00000000000176c0 <_ZdlPv@plt>:
   176c0:	ff 25 5a 28 00 00    	jmpq   *0x285a(%rip)        # 19f20 <_ZdlPv@GLIBCXX_3.4>
   176c6:	68 19 00 00 00       	pushq  $0x19
   176cb:	e9 50 fe ff ff       	jmpq   17520 <_fini+0x1c>

00000000000176d0 <_ZSt16__throw_bad_castv@plt>:
   176d0:	ff 25 52 28 00 00    	jmpq   *0x2852(%rip)        # 19f28 <_ZSt16__throw_bad_castv@GLIBCXX_3.4>
   176d6:	68 1a 00 00 00       	pushq  $0x1a
   176db:	e9 40 fe ff ff       	jmpq   17520 <_fini+0x1c>

00000000000176e0 <__cxa_allocate_exception@plt>:
   176e0:	ff 25 4a 28 00 00    	jmpq   *0x284a(%rip)        # 19f30 <__cxa_allocate_exception@CXXABI_1.3>
   176e6:	68 1b 00 00 00       	pushq  $0x1b
   176eb:	e9 30 fe ff ff       	jmpq   17520 <_fini+0x1c>

00000000000176f0 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1ERKNS_12basic_stringIcS2_S3_EESt13_Ios_Openmode@plt>:
   176f0:	ff 25 42 28 00 00    	jmpq   *0x2842(%rip)        # 19f38 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1ERKNS_12basic_stringIcS2_S3_EESt13_Ios_Openmode@GLIBCXX_3.4.21>
   176f6:	68 1c 00 00 00       	pushq  $0x1c
   176fb:	e9 20 fe ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017700 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>:
   17700:	ff 25 3a 28 00 00    	jmpq   *0x283a(%rip)        # 19f40 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@GLIBCXX_3.4.9>
   17706:	68 1d 00 00 00       	pushq  $0x1d
   1770b:	e9 10 fe ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017710 <_ZdaPv@plt>:
   17710:	ff 25 32 28 00 00    	jmpq   *0x2832(%rip)        # 19f48 <_ZdaPv@GLIBCXX_3.4>
   17716:	68 1e 00 00 00       	pushq  $0x1e
   1771b:	e9 00 fe ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017720 <_ZNSo3putEc@plt>:
   17720:	ff 25 2a 28 00 00    	jmpq   *0x282a(%rip)        # 19f50 <_ZNSo3putEc@GLIBCXX_3.4>
   17726:	68 1f 00 00 00       	pushq  $0x1f
   1772b:	e9 f0 fd ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017730 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>:
   17730:	ff 25 22 28 00 00    	jmpq   *0x2822(%rip)        # 19f58 <_ZNKSt5ctypeIcE13_M_widen_initEv@GLIBCXX_3.4.11>
   17736:	68 20 00 00 00       	pushq  $0x20
   1773b:	e9 e0 fd ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017740 <_ZNSo5flushEv@plt>:
   17740:	ff 25 1a 28 00 00    	jmpq   *0x281a(%rip)        # 19f60 <_ZNSo5flushEv@GLIBCXX_3.4>
   17746:	68 21 00 00 00       	pushq  $0x21
   1774b:	e9 d0 fd ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017750 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>:
   17750:	ff 25 12 28 00 00    	jmpq   *0x2812(%rip)        # 19f68 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@GLIBCXX_3.4>
   17756:	68 22 00 00 00       	pushq  $0x22
   1775b:	e9 c0 fd ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017760 <_Znwm@plt>:
   17760:	ff 25 0a 28 00 00    	jmpq   *0x280a(%rip)        # 19f70 <_Znwm@GLIBCXX_3.4>
   17766:	68 23 00 00 00       	pushq  $0x23
   1776b:	e9 b0 fd ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017770 <_ZNSt8ios_base4InitC1Ev@plt>:
   17770:	ff 25 02 28 00 00    	jmpq   *0x2802(%rip)        # 19f78 <_ZNSt8ios_base4InitC1Ev@GLIBCXX_3.4>
   17776:	68 24 00 00 00       	pushq  $0x24
   1777b:	e9 a0 fd ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>:
   17780:	ff 25 fa 27 00 00    	jmpq   *0x27fa(%rip)        # 19f80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@GLIBCXX_3.4.21>
   17786:	68 25 00 00 00       	pushq  $0x25
   1778b:	e9 90 fd ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017790 <__cxa_rethrow@plt>:
   17790:	ff 25 f2 27 00 00    	jmpq   *0x27f2(%rip)        # 19f88 <__cxa_rethrow@CXXABI_1.3>
   17796:	68 26 00 00 00       	pushq  $0x26
   1779b:	e9 80 fd ff ff       	jmpq   17520 <_fini+0x1c>

00000000000177a0 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@plt>:
   177a0:	ff 25 ea 27 00 00    	jmpq   *0x27ea(%rip)        # 19f90 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
   177a6:	68 27 00 00 00       	pushq  $0x27
   177ab:	e9 70 fd ff ff       	jmpq   17520 <_fini+0x1c>

00000000000177b0 <_ZSt20__throw_out_of_rangePKc@plt>:
   177b0:	ff 25 e2 27 00 00    	jmpq   *0x27e2(%rip)        # 19f98 <_ZSt20__throw_out_of_rangePKc@GLIBCXX_3.4>
   177b6:	68 28 00 00 00       	pushq  $0x28
   177bb:	e9 60 fd ff ff       	jmpq   17520 <_fini+0x1c>

00000000000177c0 <__cxa_end_catch@plt>:
   177c0:	ff 25 da 27 00 00    	jmpq   *0x27da(%rip)        # 19fa0 <__cxa_end_catch@CXXABI_1.3>
   177c6:	68 29 00 00 00       	pushq  $0x29
   177cb:	e9 50 fd ff ff       	jmpq   17520 <_fini+0x1c>

00000000000177d0 <_ZSt19__throw_logic_errorPKc@plt>:
   177d0:	ff 25 d2 27 00 00    	jmpq   *0x27d2(%rip)        # 19fa8 <_ZSt19__throw_logic_errorPKc@GLIBCXX_3.4>
   177d6:	68 2a 00 00 00       	pushq  $0x2a
   177db:	e9 40 fd ff ff       	jmpq   17520 <_fini+0x1c>

00000000000177e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@plt>:
   177e0:	ff 25 ca 27 00 00    	jmpq   *0x27ca(%rip)        # 19fb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@GLIBCXX_3.4.21>
   177e6:	68 2b 00 00 00       	pushq  $0x2b
   177eb:	e9 30 fd ff ff       	jmpq   17520 <_fini+0x1c>

00000000000177f0 <__cxa_free_exception@plt>:
   177f0:	ff 25 c2 27 00 00    	jmpq   *0x27c2(%rip)        # 19fb8 <__cxa_free_exception@CXXABI_1.3>
   177f6:	68 2c 00 00 00       	pushq  $0x2c
   177fb:	e9 20 fd ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017800 <atanhf@plt>:
   17800:	ff 25 ba 27 00 00    	jmpq   *0x27ba(%rip)        # 19fc0 <atanhf@GLIBC_2.2.5>
   17806:	68 2d 00 00 00       	pushq  $0x2d
   1780b:	e9 10 fd ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017810 <asinhf@plt>:
   17810:	ff 25 b2 27 00 00    	jmpq   *0x27b2(%rip)        # 19fc8 <asinhf@GLIBC_2.2.5>
   17816:	68 2e 00 00 00       	pushq  $0x2e
   1781b:	e9 00 fd ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017820 <log1pf@plt>:
   17820:	ff 25 aa 27 00 00    	jmpq   *0x27aa(%rip)        # 19fd0 <log1pf@GLIBC_2.2.5>
   17826:	68 2f 00 00 00       	pushq  $0x2f
   1782b:	e9 f0 fc ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017830 <asinf@plt>:
   17830:	ff 25 a2 27 00 00    	jmpq   *0x27a2(%rip)        # 19fd8 <asinf@GLIBC_2.2.5>
   17836:	68 30 00 00 00       	pushq  $0x30
   1783b:	e9 e0 fc ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017840 <atan2f@plt>:
   17840:	ff 25 9a 27 00 00    	jmpq   *0x279a(%rip)        # 19fe0 <atan2f@GLIBC_2.2.5>
   17846:	68 31 00 00 00       	pushq  $0x31
   1784b:	e9 d0 fc ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017850 <tanhf@plt>:
   17850:	ff 25 92 27 00 00    	jmpq   *0x2792(%rip)        # 19fe8 <tanhf@GLIBC_2.2.5>
   17856:	68 32 00 00 00       	pushq  $0x32
   1785b:	e9 c0 fc ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017860 <fdimf@plt>:
   17860:	ff 25 8a 27 00 00    	jmpq   *0x278a(%rip)        # 19ff0 <fdimf@GLIBC_2.2.5>
   17866:	68 33 00 00 00       	pushq  $0x33
   1786b:	e9 b0 fc ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017870 <acoshf@plt>:
   17870:	ff 25 82 27 00 00    	jmpq   *0x2782(%rip)        # 19ff8 <acoshf@GLIBC_2.2.5>
   17876:	68 34 00 00 00       	pushq  $0x34
   1787b:	e9 a0 fc ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017880 <sinhf@plt>:
   17880:	ff 25 7a 27 00 00    	jmpq   *0x277a(%rip)        # 1a000 <sinhf@GLIBC_2.2.5>
   17886:	68 35 00 00 00       	pushq  $0x35
   1788b:	e9 90 fc ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017890 <sqrtf@plt>:
   17890:	ff 25 72 27 00 00    	jmpq   *0x2772(%rip)        # 1a008 <sqrtf@GLIBC_2.2.5>
   17896:	68 36 00 00 00       	pushq  $0x36
   1789b:	e9 80 fc ff ff       	jmpq   17520 <_fini+0x1c>

00000000000178a0 <acosf@plt>:
   178a0:	ff 25 6a 27 00 00    	jmpq   *0x276a(%rip)        # 1a010 <acosf@GLIBC_2.2.5>
   178a6:	68 37 00 00 00       	pushq  $0x37
   178ab:	e9 70 fc ff ff       	jmpq   17520 <_fini+0x1c>

00000000000178b0 <coshf@plt>:
   178b0:	ff 25 62 27 00 00    	jmpq   *0x2762(%rip)        # 1a018 <coshf@GLIBC_2.2.5>
   178b6:	68 38 00 00 00       	pushq  $0x38
   178bb:	e9 60 fc ff ff       	jmpq   17520 <_fini+0x1c>

00000000000178c0 <sinf@plt>:
   178c0:	ff 25 5a 27 00 00    	jmpq   *0x275a(%rip)        # 1a020 <sinf@GLIBC_2.2.5>
   178c6:	68 39 00 00 00       	pushq  $0x39
   178cb:	e9 50 fc ff ff       	jmpq   17520 <_fini+0x1c>

00000000000178d0 <atanf@plt>:
   178d0:	ff 25 52 27 00 00    	jmpq   *0x2752(%rip)        # 1a028 <atanf@GLIBC_2.2.5>
   178d6:	68 3a 00 00 00       	pushq  $0x3a
   178db:	e9 40 fc ff ff       	jmpq   17520 <_fini+0x1c>

00000000000178e0 <logf@plt>:
   178e0:	ff 25 4a 27 00 00    	jmpq   *0x274a(%rip)        # 1a030 <logf@GLIBC_2.27>
   178e6:	68 3b 00 00 00       	pushq  $0x3b
   178eb:	e9 30 fc ff ff       	jmpq   17520 <_fini+0x1c>

00000000000178f0 <cosf@plt>:
   178f0:	ff 25 42 27 00 00    	jmpq   *0x2742(%rip)        # 1a038 <cosf@GLIBC_2.2.5>
   178f6:	68 3c 00 00 00       	pushq  $0x3c
   178fb:	e9 20 fc ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017900 <cbrtf@plt>:
   17900:	ff 25 3a 27 00 00    	jmpq   *0x273a(%rip)        # 1a040 <cbrtf@GLIBC_2.2.5>
   17906:	68 3d 00 00 00       	pushq  $0x3d
   1790b:	e9 10 fc ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017910 <expf@plt>:
   17910:	ff 25 32 27 00 00    	jmpq   *0x2732(%rip)        # 1a048 <expf@GLIBC_2.27>
   17916:	68 3e 00 00 00       	pushq  $0x3e
   1791b:	e9 00 fc ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017920 <tanf@plt>:
   17920:	ff 25 2a 27 00 00    	jmpq   *0x272a(%rip)        # 1a050 <tanf@GLIBC_2.2.5>
   17926:	68 3f 00 00 00       	pushq  $0x3f
   1792b:	e9 f0 fb ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017930 <powf@plt>:
   17930:	ff 25 22 27 00 00    	jmpq   *0x2722(%rip)        # 1a058 <powf@GLIBC_2.27>
   17936:	68 40 00 00 00       	pushq  $0x40
   1793b:	e9 e0 fb ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017940 <__errno_location@plt>:
   17940:	ff 25 1a 27 00 00    	jmpq   *0x271a(%rip)        # 1a060 <__errno_location@GLIBC_2.2.5>
   17946:	68 41 00 00 00       	pushq  $0x41
   1794b:	e9 d0 fb ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017950 <strtof@plt>:
   17950:	ff 25 12 27 00 00    	jmpq   *0x2712(%rip)        # 1a068 <strtof@GLIBC_2.2.5>
   17956:	68 42 00 00 00       	pushq  $0x42
   1795b:	e9 c0 fb ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017960 <memmove@plt>:
   17960:	ff 25 0a 27 00 00    	jmpq   *0x270a(%rip)        # 1a070 <memmove@GLIBC_2.2.5>
   17966:	68 43 00 00 00       	pushq  $0x43
   1796b:	e9 b0 fb ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017970 <_Unwind_Resume@plt>:
   17970:	ff 25 02 27 00 00    	jmpq   *0x2702(%rip)        # 1a078 <_Unwind_Resume@GCC_3.0>
   17976:	68 44 00 00 00       	pushq  $0x44
   1797b:	e9 a0 fb ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017980 <strlen@plt>:
   17980:	ff 25 fa 26 00 00    	jmpq   *0x26fa(%rip)        # 1a080 <strlen@GLIBC_2.2.5>
   17986:	68 45 00 00 00       	pushq  $0x45
   1798b:	e9 90 fb ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017990 <memset@plt>:
   17990:	ff 25 f2 26 00 00    	jmpq   *0x26f2(%rip)        # 1a088 <memset@GLIBC_2.2.5>
   17996:	68 46 00 00 00       	pushq  $0x46
   1799b:	e9 80 fb ff ff       	jmpq   17520 <_fini+0x1c>

00000000000179a0 <clock_gettime@plt>:
   179a0:	ff 25 ea 26 00 00    	jmpq   *0x26ea(%rip)        # 1a090 <clock_gettime@GLIBC_2.17>
   179a6:	68 47 00 00 00       	pushq  $0x47
   179ab:	e9 70 fb ff ff       	jmpq   17520 <_fini+0x1c>

00000000000179b0 <printf@plt>:
   179b0:	ff 25 e2 26 00 00    	jmpq   *0x26e2(%rip)        # 1a098 <printf@GLIBC_2.2.5>
   179b6:	68 48 00 00 00       	pushq  $0x48
   179bb:	e9 60 fb ff ff       	jmpq   17520 <_fini+0x1c>

00000000000179c0 <memcpy@plt>:
   179c0:	ff 25 da 26 00 00    	jmpq   *0x26da(%rip)        # 1a0a0 <memcpy@GLIBC_2.14>
   179c6:	68 49 00 00 00       	pushq  $0x49
   179cb:	e9 50 fb ff ff       	jmpq   17520 <_fini+0x1c>

00000000000179d0 <__cxa_atexit@plt>:
   179d0:	ff 25 d2 26 00 00    	jmpq   *0x26d2(%rip)        # 1a0a8 <__cxa_atexit@GLIBC_2.2.5>
   179d6:	68 4a 00 00 00       	pushq  $0x4a
   179db:	e9 40 fb ff ff       	jmpq   17520 <_fini+0x1c>

00000000000179e0 <__kmpc_fork_call@plt>:
   179e0:	ff 25 ca 26 00 00    	jmpq   *0x26ca(%rip)        # 1a0b0 <__kmpc_fork_call@VERSION>
   179e6:	68 4b 00 00 00       	pushq  $0x4b
   179eb:	e9 30 fb ff ff       	jmpq   17520 <_fini+0x1c>

00000000000179f0 <__kmpc_dispatch_init_8u@plt>:
   179f0:	ff 25 c2 26 00 00    	jmpq   *0x26c2(%rip)        # 1a0b8 <__kmpc_dispatch_init_8u@VERSION>
   179f6:	68 4c 00 00 00       	pushq  $0x4c
   179fb:	e9 20 fb ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017a00 <__kmpc_dispatch_next_8u@plt>:
   17a00:	ff 25 ba 26 00 00    	jmpq   *0x26ba(%rip)        # 1a0c0 <__kmpc_dispatch_next_8u@VERSION>
   17a06:	68 4d 00 00 00       	pushq  $0x4d
   17a0b:	e9 10 fb ff ff       	jmpq   17520 <_fini+0x1c>

0000000000017a10 <snprintf@plt>:
   17a10:	ff 25 b2 26 00 00    	jmpq   *0x26b2(%rip)        # 1a0c8 <snprintf@GLIBC_2.2.5>
   17a16:	68 4e 00 00 00       	pushq  $0x4e
   17a1b:	e9 00 fb ff ff       	jmpq   17520 <_fini+0x1c>
