--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         23068672 B, 64 B, 11-way associative
Command:          ./genetic_benchmark housing
Data file:        cachegrind.out.5657
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                       I1mr           ILmr           Dr                      D1mr                DLmr                Dw                      D1mw                DLmw                
--------------------------------------------------------------------------------
168,872,185,578 (100.0%) 5,782 (100.0%) 5,279 (100.0%) 38,165,285,485 (100.0%) 70,077,313 (100.0%) 17,322,381 (100.0%) 12,549,567,452 (100.0%) 34,142,856 (100.0%) 34,022,066 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                      I1mr           ILmr         Dr                      D1mr                DLmr                Dw                     D1mw                DLmw                 file:function
--------------------------------------------------------------------------------
39,730,493,280 (23.53%)     2 ( 0.03%)   2 ( 0.04%) 14,647,316,352 (38.38%) 35,237,524 (50.28%)    158,910 ( 0.92%) 6,965,133,120 (55.50%)        205 ( 0.00%)          3 ( 0.00%)  /home/dhruvs6/598APE-HW2/src/node_detail.h:void genetic::execute_kernel<20>(genetic::program*, float const*, float*, unsigned long, unsigned long) [clone ._omp_fn.0]
38,540,683,968 (22.82%)     7 ( 0.12%)   7 ( 0.13%)  3,470,727,456 ( 9.09%)          4 ( 0.00%)          0          4,147,100,256 (33.05%)        908 ( 0.00%)         64 ( 0.00%)  /home/dhruvs6/598APE-HW2/src/reg_stack.h:void genetic::execute_kernel<20>(genetic::program*, float const*, float*, unsigned long, unsigned long) [clone ._omp_fn.0]
30,495,254,720 (18.06%)    21 ( 0.36%)  21 ( 0.40%)  3,876,667,076 (10.16%)     32,284 ( 0.05%)     22,903 ( 0.13%)   135,316,682 ( 1.08%)  8,455,592 (24.77%)  8,454,361 (24.85%)  /home/dhruvs6/598APE-HW2/src/program.cpp:void genetic::execute_kernel<20>(genetic::program*, float const*, float*, unsigned long, unsigned long) [clone ._omp_fn.0]
12,927,073,024 ( 7.65%)     6 ( 0.10%)   6 ( 0.11%)  3,031,694,707 ( 7.94%)      5,474 ( 0.01%)         96 ( 0.00%)             0                   0                   0           ./math/../sysdeps/ieee754/flt-32/e_logf.c:__logf_fma
 7,159,830,722 ( 4.24%)    19 ( 0.33%)  19 ( 0.36%)  1,982,886,355 ( 5.20%)     13,507 ( 0.02%)        130 ( 0.00%)             0                   0                   0           ./math/../sysdeps/ieee754/flt-32/e_expf.c:__expf_fma
 6,941,454,912 ( 4.11%)     1 ( 0.02%)   1 ( 0.02%)  3,470,727,456 ( 9.09%)        395 ( 0.00%)          4 ( 0.00%)             0                   0                   0           /usr/include/c++/11/bits/unique_ptr.h:void genetic::execute_kernel<20>(genetic::program*, float const*, float*, unsigned long, unsigned long) [clone ._omp_fn.0]
 2,915,429,643 ( 1.73%) 1,002 (17.33%) 932 (17.65%)  1,413,762,978 ( 3.70%)     42,422 ( 0.06%)        927 ( 0.01%)        22,777 ( 0.00%)        828 ( 0.00%)        765 ( 0.00%)  ???:???
 2,901,446,582 ( 1.72%)    19 ( 0.33%)  19 ( 0.36%)    214,373,401 ( 0.56%)      8,154 ( 0.01%)         18 ( 0.00%)             0                   0                   0           ./math/../sysdeps/ieee754/flt-32/s_cosf.c:__cosf_fma
 2,817,968,216 ( 1.67%)    19 ( 0.33%)  19 ( 0.36%)    143,372,870 ( 0.38%)         25 ( 0.00%)          0                      0                   0                   0           ./math/../sysdeps/ieee754/flt-32/s_sinf.c:__sinf_fma
 2,520,421,137 ( 1.49%)    20 ( 0.35%)  20 ( 0.38%)    364,487,914 ( 0.96%)      6,873 ( 0.01%)         43 ( 0.00%)             0                   0                   0           ./math/../sysdeps/ieee754/flt-32/s_sincosf.h:__sinf_fma
 2,364,599,664 ( 1.40%)     2 ( 0.03%)   2 ( 0.04%)  1,086,904,742 ( 2.85%)      1,842 ( 0.00%)         38 ( 0.00%)             0                   0                   0           ./math/../sysdeps/x86/fpu/sincosf_poly.h:__sinf_fma
 2,312,623,279 ( 1.37%)     2 ( 0.03%)   2 ( 0.04%)  1,089,736,339 ( 2.86%)      1,923 ( 0.00%)         16 ( 0.00%)             0                   0                   0           ./math/../sysdeps/x86/fpu/sincosf_poly.h:__cosf_fma
 2,300,748,576 ( 1.36%)    76 ( 1.31%)  76 ( 1.44%)    541,329,552 ( 1.42%) 33,841,344 (48.29%) 16,941,376 (97.80%)   135,274,656 ( 1.08%)  8,462,384 (24.79%)  8,454,372 (24.85%)  /home/dhruvs6/598APE-HW2/include/fitness.h:void genetic::meanSquareError<float>(unsigned long, unsigned long, float const*, float const*, float const*, float*)
 2,171,571,268 ( 1.29%)     7 ( 0.12%)   7 ( 0.13%)    447,044,196 ( 1.17%)      2,385 ( 0.00%)         18 ( 0.00%)             0                   0                   0           ./math/./s_fdim_template.c:fdimf
 2,082,014,528 ( 1.23%)    18 ( 0.31%)  18 ( 0.34%)    348,511,442 ( 0.91%)      5,649 ( 0.01%)         21 ( 0.00%)             0                   0                   0           ./math/../sysdeps/ieee754/flt-32/s_sincosf.h:__cosf_fma
 1,645,894,682 ( 0.97%)     2 ( 0.03%)   2 ( 0.04%)    421,123,693 ( 1.10%)          0                   0                      0                   0                   0           /home/dhruvs6/598APE-HW2/src/../include/evaluate.h:function_table::{lambda(float, float)#23}::_FUN(float, float)
 1,254,239,136 ( 0.74%)     6 ( 0.10%)   6 ( 0.11%)    418,079,712 ( 1.10%)          9 ( 0.00%)          0                      0                   0                   0           /home/dhruvs6/598APE-HW2/src/../include/evaluate.h:function_table::{lambda(float, float)#1}::_FUN(float, float)
 1,083,216,242 ( 0.64%)     8 ( 0.14%)   5 ( 0.09%)            310 ( 0.00%)         53 ( 0.00%)         48 ( 0.00%) 1,083,211,946 ( 8.63%) 16,926,211 (49.57%) 16,922,631 (49.74%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms
   706,420,512 ( 0.42%)     1 ( 0.02%)   1 ( 0.02%)    235,473,504 ( 0.62%)          7 ( 0.00%)          0                      0                   0                   0           /home/dhruvs6/598APE-HW2/src/../include/evaluate.h:function_table::{lambda(float, float)#9}::_FUN(float, float)
   508,279,301 ( 0.30%)     0            0                       0                   0                   0                      0                   0                   0           ./math/../sysdeps/ieee754/flt-32/math_config.h:__expf_fma
   408,916,173 ( 0.24%)     1 ( 0.02%)   1 ( 0.02%)              0                   0                   0                      0                   0                   0           ./math/../sysdeps/ieee754/flt-32/math_config.h:__cosf_fma
   407,537,292 ( 0.24%)     0            0                       0                   0                   0                      0                   0                   0           ./math/../sysdeps/ieee754/flt-32/math_config.h:__sinf_fma
   401,823,648 ( 0.24%)     0            0             401,823,648 ( 1.05%)        419 ( 0.00%)         14 ( 0.00%)             0                   0                   0           /usr/include/c++/11/bits/std_abs.h:function_table::{lambda(float, float)#23}::_FUN(float, float)
   382,523,603 ( 0.23%)     0            0                       0                   0                   0                      0                   0                   0           /usr/include/c++/11/cmath:function_table::{lambda(float, float)#23}::_FUN(float, float)
   382,523,603 ( 0.23%)     0            0                       0                   0                   0                      0                   0                   0           ./math/../sysdeps/ieee754/flt-32/math_config.h:__logf_fma
   351,817,056 ( 0.21%)     0            0             117,272,352 ( 0.31%)          7 ( 0.00%)          0                      0                   0                   0           /home/dhruvs6/598APE-HW2/src/../include/evaluate.h:function_table::{lambda(float, float)#7}::_FUN(float, float)
   281,967,168 ( 0.17%)     4 ( 0.07%)   4 ( 0.08%)    140,983,584 ( 0.37%)          5 ( 0.00%)          0                      0                   0                   0           /home/dhruvs6/598APE-HW2/src/../include/evaluate.h:function_table::{lambda(float, float)#10}::_FUN(float, float)
   264,064,032 ( 0.16%)     0            0                       0                   0                   0                      0                   0                   0           /usr/include/c++/11/cmath:function_table::{lambda(float, float)#21}::_FUN(float, float)
   264,064,032 ( 0.16%)     0            0                       0                   0                   0                      0                   0                   0           /home/dhruvs6/598APE-HW2/src/../include/evaluate.h:function_table::{lambda(float, float)#21}::_FUN(float, float)
   250,924,608 ( 0.15%)     1 ( 0.02%)   1 ( 0.02%)              0                   0                   0                      0                   0                   0           /home/dhruvs6/598APE-HW2/src/../include/evaluate.h:function_table::{lambda(float, float)#18}::_FUN(float, float)
   250,924,608 ( 0.15%)     0            0                       0                   0                   0                      0                   0                   0           /usr/include/c++/11/cmath:function_table::{lambda(float, float)#18}::_FUN(float, float)
   250,173,312 ( 0.15%)     1 ( 0.02%)   1 ( 0.02%)              0                   0                   0                      0                   0                   0           /home/dhruvs6/598APE-HW2/src/../include/evaluate.h:function_table::{lambda(float, float)#27}::_FUN(float, float)
   250,173,312 ( 0.15%)     0            0                       0                   0                   0                      0                   0                   0           /usr/include/c++/11/cmath:function_table::{lambda(float, float)#27}::_FUN(float, float)
   242,916,288 ( 0.14%)     0            0                       0                   0                   0                      0                   0                   0           /home/dhruvs6/598APE-HW2/src/../include/evaluate.h:function_table::{lambda(float, float)#4}::_FUN(float, float)
   242,916,288 ( 0.14%)     0            0                       0                   0                   0                      0                   0                   0           /usr/include/c++/11/cmath:function_table::{lambda(float, float)#4}::_FUN(float, float)

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/dhruvs6/598APE-HW2/src/program.cpp
--------------------------------------------------------------------------------
Ir                      I1mr        ILmr        Dr                     D1mr            DLmr            Dw                   D1mw               DLmw               

-- line 14 ----------------------------------------
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .           namespace genetic {
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .               /**
             .           .           .                      .               .               .                    .                  .                  .                * Execution kernel for a single program. We assume that the input data
             .           .           .                      .               .               .                    .                  .                  .                * is stored in column major format.
             .           .           .                      .               .               .                    .                  .                  .                */
             .           .           .                      .               .               .                    .                  .                  .               template <int MaxSize = MAX_STACK_SIZE>
            64 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)             0               0               0                    0                  0                  0               void execute_kernel(const program_t d_progs, const float* data, float* y_pred,
             .           .           .                      .               .               .                    .                  .                  .                                   const uint64_t n_rows, const uint64_t n_progs) {
         3,578 ( 0.00%) 18 ( 0.31%) 18 ( 0.34%)         1,240 ( 0.00%)    233 ( 0.00%)    164 ( 0.00%)       1,256 ( 0.00%)       237 ( 0.00%)       207 ( 0.00%)  #pragma omp parallel for schedule(dynamic)
             .           .           .                      .               .               .                    .                  .                  .                   for (uint64_t pid = 0; pid < n_progs; ++pid) {
   406,085,888 ( 0.24%)  2 ( 0.03%)  2 ( 0.04%)   135,389,276 ( 0.35%)  5,925 ( 0.01%)      4 ( 0.00%)      40,970 ( 0.00%)         0                  0                       for (uint64_t row_id = 0; row_id < n_rows; ++row_id) {
             .           .           .                      .               .               .                    .                  .                  .                           stack<float, MaxSize> eval_stack;
             .           .           .                      .               .               .                    .                  .                  .                           const program&        curr_p = d_progs[pid]; // Current program
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                           float res   = 0.0f;
 1,082,196,480 ( 0.64%)  1 ( 0.02%)  1 ( 0.02%)             0               0               0                    0                  0                  0                           float in1   = 0.0f;
   135,274,560 ( 0.08%)  0           0                      0               0               0                    0                  0                  0                           float in2   = 0.0f;
             .           .           .                      .               .               .                    .                  .                  .           
11,223,829,728 ( 6.65%)  0           0            135,274,560 ( 0.35%)  4,261 ( 0.01%)  4,097 ( 0.02%)           0                  0                  0                           for (int i = curr_p.len - 1; i >= 0; --i) {
             .           .           .                      .               .               .                    .                  .                  .                               const node& curr_node = curr_p.nodes[i];
10,412,182,368 ( 6.17%)  0           0          3,470,727,456 ( 9.09%) 21,743 ( 0.03%) 18,634 ( 0.11%)           0                  0                  0                               if (curr_node.flags.is_terminal_ == false) {
 2,321,711,040 ( 1.37%)  0           0                      0               0               0                    0                  0                  0                                   int ar = curr_node.flags.arity_;
             .           .           .                      .               .               .                    .                  .                  .                                   in1    = eval_stack.pop(); // Min arity of function is 1
 4,643,422,080 ( 2.75%)  0           0                      0               0               0                    0                  0                  0                                   if (ar > 1)
             .           .           .                      .               .               .                    .                  .                  .                                       in2 = eval_stack.pop();
             .           .           .                      .               .               .                    .                  .                  .                               }
             .           .           .                      .               .               .                    .                  .                  .                               res = detail::evaluate_node_lookup(curr_node, data, n_rows, row_id, in1, in2);
             .           .           .                      .               .               .                    .                  .                  .                               // res = detail::evaluate_node(*curr_node, data, n_rows, row_id, in);
             .           .           .                      .               .               .                    .                  .                  .                               eval_stack.push(res);
             .           .           .                      .               .               .                    .                  .                  .                           }
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                           // Outputs stored in col-major format
   270,549,120 ( 0.16%)  0           0            135,274,560 ( 0.35%)    122 ( 0.00%)      4 ( 0.00%) 135,274,560 ( 1.08%) 8,455,371 (24.76%) 8,454,170 (24.85%)                  y_pred[pid * n_rows + row_id] = eval_stack.pop();
             .           .           .                      .               .               .                    .                  .                  .                       }
             .           .           .                      .               .               .                    .                  .                  .                   }
             .           .           .                      .               .               .                    .                  .                  .               }
             .           .           .                      .               .               .                    .                  .                  .           
         2,634 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)             0               0               0                  732 ( 0.00%)         0                  0               program::program()
         4,608 ( 0.00%)  0           0                      0               0               0                3,072 ( 0.00%)       510 ( 0.00%)       255 ( 0.00%)          : nodes(nullptr), len(0), depth(0), raw_fitness_(0.0f), metric(metric_t::mse),
         1,902 ( 0.00%)  0           0                      0               0               0                1,902 ( 0.00%)         0                  0                     mut_type(mutation_t::none) {
         1,536 ( 0.00%)  0           0                  1,536 ( 0.00%)      0               0                    0                  0                  0               }
             .           .           .                      .               .               .                    .                  .                  .           
         9,728 ( 0.00%)  2 ( 0.03%)  1 ( 0.02%)             0               0               0                    0                  0                  0               program::~program() {
             .           .           .                      .               .               .                    .                  .                  .                   // delete[] nodes;
             .           .           .                      .               .               .                    .                  .                  .                   // delete[] nodes;
             .           .           .                      .               .               .                    .                  .                  .               }
             .           .           .                      .               .               .                    .                  .                  .           
        73,728 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)             0               0               0               49,152 ( 0.00%)         0                  0               program::program(const program& src)
        32,768 ( 0.00%)  0           0                 16,384 ( 0.00%)  4,096 ( 0.01%)      0               16,384 ( 0.00%)         0                  0                   : len(src.len), depth(src.depth), raw_fitness_(src.raw_fitness_), metric(src.metric),
        16,384 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)         8,192 ( 0.00%)      0               0                8,192 ( 0.00%)     1,787 ( 0.01%)     1,780 ( 0.01%)            mut_type(src.mut_type) {
         8,192 ( 0.00%)  0           0                  8,192 ( 0.00%)      0               0                    0                  0                  0                   nodes = std::make_unique<node[]>(len);
             .           .           .                      .               .               .                    .                  .                  .           
        24,576 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)         8,192 ( 0.00%)      0               0                    0                  0                  0                   std::copy(src.nodes.get(), src.nodes.get() + src.len, nodes.get());
        65,536 ( 0.00%)  0           0                 57,344 ( 0.00%)      0               0                    0                  0                  0               }
             .           .           .                      .               .               .                    .                  .                  .           
        78,320 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)             0               0               0               58,740 ( 0.00%)         0                  0               program& program::operator=(const program& src) {
        19,580 ( 0.00%)  0           0                  9,790 ( 0.00%)      0               0                9,790 ( 0.00%)         0                  0                   len          = src.len;
        19,580 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)         9,790 ( 0.00%)  1,087 ( 0.00%)      0                9,790 ( 0.00%)     4,353 ( 0.01%)     4,353 ( 0.01%)          depth        = src.depth;
        19,580 ( 0.00%)  0           0                  9,790 ( 0.00%)  3,913 ( 0.01%)      0                9,790 ( 0.00%)         0                  0                   raw_fitness_ = src.raw_fitness_;
        19,580 ( 0.00%)  0           0                  9,790 ( 0.00%)      0               0                9,790 ( 0.00%)         0                  0                   metric       = src.metric;
        19,580 ( 0.00%)  0           0                  9,790 ( 0.00%)      0               0                9,790 ( 0.00%)         0                  0                   mut_type     = src.mut_type;
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   // Copy nodes
             .           .           .                      .               .               .                    .                  .                  .                   // delete[] nodes;
             .           .           .                      .               .               .                    .                  .                  .                   // delete[] nodes;
             .           .           .                      .               .               .                    .                  .                  .                   nodes = std::make_unique<node[]>(len);
        29,370 ( 0.00%)  0           0                  9,790 ( 0.00%)      0               0                    0                  0                  0                   std::copy(src.nodes.get(), src.nodes.get() + src.len, nodes.get());
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   return *this;
        88,110 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)        68,530 ( 0.00%)      0               0                    0                  0                  0               }
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .               void compute_metric(int n_rows, int n_progs, const float* y, const float* y_pred,
            48 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)             0               0               0                   16 ( 0.00%)         0                  0                                   const float* w, float* score, const param& params) {
             .           .           .                      .               .               .                    .                  .                  .                   // Call appropriate metric function based on metric defined in params
            64 ( 0.00%)  0           0                     32 ( 0.00%)     16 ( 0.00%)     16 ( 0.00%)           0                  0                  0                   if (params.metric == metric_t::pearson) {
             .           .           .                      .               .               .                    .                  .                  .                       weightedPearson(n_rows, n_progs, y, y_pred, w, score);
            96 ( 0.00%)  0           0                     16 ( 0.00%)     16 ( 0.00%)     16 ( 0.00%)           0                  0                  0                   } else if (params.metric == metric_t::spearman) {
             .           .           .                      .               .               .                    .                  .                  .                       weightedSpearman(n_rows, n_progs, y, y_pred, w, score);
             .           .           .                      .               .               .                    .                  .                  .                   } else if (params.metric == metric_t::mae) {
             .           .           .                      .               .               .                    .                  .                  .                       meanAbsoluteError(n_rows, n_progs, y, y_pred, w, score);
             .           .           .                      .               .               .                    .                  .                  .                   } else if (params.metric == metric_t::mse) {
            48 ( 0.00%)  0           0                      0               0               0                    0                  0                  0                       meanSquareError(n_rows, n_progs, y, y_pred, w, score);
             .           .           .                      .               .               .                    .                  .                  .                   } else if (params.metric == metric_t::rmse) {
             .           .           .                      .               .               .                    .                  .                  .                       rootMeanSquareError(n_rows, n_progs, y, y_pred, w, score);
             .           .           .                      .               .               .                    .                  .                  .                   } else if (params.metric == metric_t::logloss) {
             .           .           .                      .               .               .                    .                  .                  .                       logLoss(n_rows, n_progs, y, y_pred, w, score);
             .           .           .                      .               .               .                    .                  .                  .                   } else {
             .           .           .                      .               .               .                    .                  .                  .                       // This should not be reachable
             .           .           .                      .               .               .                    .                  .                  .                   }
            32 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)            16 ( 0.00%)      0               0                    0                  0                  0               }
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .               void execute(const program_t& d_progs, const int n_rows, const int n_progs, const float* data,
             4 ( 0.00%)  0           0                      0               0               0                    0                  0                  0                            float* y_pred) {
            20 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)             4 ( 0.00%)      1 ( 0.00%)      0                    6 ( 0.00%)         0                  0                   execute_kernel(d_progs, data, y_pred, static_cast<uint64_t>(n_rows),
             .           .           .                      .               .               .                    .                  .                  .                                  static_cast<uint64_t>(n_progs));
            10 ( 0.00%)  0           0                      6 ( 0.00%)      0               0                    0                  0                  0               }
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .               void find_fitness(program_t d_prog, float* score, const param& params, const int n_rows,
             .           .           .                      .               .               .                    .                  .                  .                                 const float* data, const float* y, const float* sample_weights) {
             .           .           .                      .               .               .                    .                  .                  .                   // Compute predicted values
             .           .           .                      .               .               .                    .                  .                  .                   std::vector<float> y_pred(n_rows);
             .           .           .                      .               .               .                    .                  .                  .                   execute(d_prog, n_rows, 1, data, y_pred.data());
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   // Compute error
             .           .           .                      .               .               .                    .                  .                  .                   compute_metric(n_rows, 1, y, y_pred.data(), sample_weights, score, params);
             .           .           .                      .               .               .                    .                  .                  .               }
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .               void find_batched_fitness(int n_progs, program_t d_progs, float* score, const param& params,
             .           .           .                      .               .               .                    .                  .                  .                                         const int n_rows, const float* data, const float* y,
           272 ( 0.00%)  3 ( 0.05%)  3 ( 0.06%)            48 ( 0.00%)      0               0                  128 ( 0.00%)         0                  0                                         const float* sample_weights) {
            32 ( 0.00%)  0           0                      0               0               0                    0                  0                  0                   std::vector<float> y_pred((uint64_t)n_rows * (uint64_t)n_progs);
             .           .           .                      .               .               .                    .                  .                  .                   execute(d_progs, n_rows, n_progs, data, y_pred.data());
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   // Compute error
           192 ( 0.00%)  2 ( 0.03%)  2 ( 0.04%)            64 ( 0.00%)     16 ( 0.00%)     16 ( 0.00%)          32 ( 0.00%)         0                  0                   compute_metric(n_rows, n_progs, y, y_pred.data(), sample_weights, score, params);
           112 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)            96 ( 0.00%)     16 ( 0.00%)     16 ( 0.00%)           0                  0                  0               }
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .               void set_fitness(program& h_prog, const param& params, const int n_rows, const float* data,
             .           .           .                      .               .               .                    .                  .                  .                                const float* y, const float* sample_weights) {
             .           .           .                      .               .               .                    .                  .                  .                   std::vector<float> score(1);
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   find_fitness(&h_prog, score.data(), params, n_rows, data, y, sample_weights);
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   // Update host and device score for program
             .           .           .                      .               .               .                    .                  .                  .                   h_prog.raw_fitness_ = score[0];
             .           .           .                      .               .               .                    .                  .                  .               }
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .               void set_batched_fitness(int n_progs, std::vector<program>& h_progs, const param& params,
             .           .           .                      .               .               .                    .                  .                  .                                        const int n_rows, const float* data, const float* y,
           176 ( 0.00%)  2 ( 0.03%)  2 ( 0.04%)            16 ( 0.00%)      0               0                   96 ( 0.00%)         0                  0                                        const float* sample_weights) {
             .           .           .                      .               .               .                    .                  .                  .                   std::vector<float> score(n_progs);
             .           .           .                      .               .               .                    .                  .                  .           
           176 ( 0.00%) 16 ( 0.28%) 16 ( 0.30%)            64 ( 0.00%)      0               0                   48 ( 0.00%)         0                  0                   find_batched_fitness(n_progs, h_progs.data(), score.data(), params, n_rows, data, y,
             .           .           .                      .               .               .                    .                  .                  .                                        sample_weights);
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   // Update scores on host and device
             .           .           .                      .               .               .                    .                  .                  .                   // TODO: Find a way to reduce the number of implicit memory transfers
        32,912 ( 0.00%)  0           0                     32 ( 0.00%)     32 ( 0.00%)     32 ( 0.00%)           0                  0                  0                   for (auto i = 0; i < n_progs; ++i) {
        16,384 ( 0.00%)  0           0                  8,192 ( 0.00%)    508 ( 0.00%)    173 ( 0.00%)       8,192 ( 0.00%)     4,112 ( 0.01%)     4,112 ( 0.01%)              h_progs[i].raw_fitness_ = score[i];
             .           .           .                      .               .               .                    .                  .                  .                   }
           112 ( 0.00%)  0           0                     96 ( 0.00%)     16 ( 0.00%)     16 ( 0.00%)           0                  0                  0               }
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .               float get_fitness(const program& prog, const param& params) {
             .           .           .                      .               .               .                    .                  .                  .                   int   crit    = params.criterion();
             .           .           .                      .               .               .                    .                  .                  .                   float penalty = params.parsimony_coefficient * prog.len * (2 * crit - 1);
             .           .           .                      .               .               .                    .                  .                  .                   return (prog.raw_fitness_ - penalty);
             .           .           .                      .               .               .                    .                  .                  .               }
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .               /**
             .           .           .                      .               .               .                    .                  .                  .                * @brief Get a random subtree of the current program nodes (on CPU)
             .           .           .                      .               .               .                    .                  .                  .                *
             .           .           .                      .               .               .                    .                  .                  .                * @param pnodes  AST represented as a list of nodes
             .           .           .                      .               .               .                    .                  .                  .                * @param len     The total number of nodes in the AST
             .           .           .                      .               .               .                    .                  .                  .                * @param rng     Random number generator for subtree selection
             .           .           .                      .               .               .                    .                  .                  .                * @return A tuple [first,last) which contains the required subtree
             .           .           .                      .               .               .                    .                  .                  .                */
       174,057 ( 0.00%)  2 ( 0.03%)  2 ( 0.04%)        13,389 ( 0.00%)      0               0              107,112 ( 0.00%)         0                  0               std::pair<int, int> get_subtree(node* pnodes, int len, PhiloxEngine& rng) {
             .           .           .                      .               .               .                    .                  .                  .                   int start, end;
             .           .           .                      .               .               .                    .                  .                  .                   start = end = 0;
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   // Specify RNG
             .           .           .                      .               .               .                    .                  .                  .                   uniform_real_distribution_custom<float> dist_uniform(0.0f, 1.0f);
             .           .           .                      .               .               .                    .                  .                  .                   float                                   bound = dist_uniform(rng);
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   // Specify subtree start probs acc to Koza's selection approach
        13,389 ( 0.00%)  0           0                      0               0               0                    0                  0                  0                   std::vector<float> node_probs(len, 0.1);
        80,334 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)        13,389 ( 0.00%)      0               0               13,389 ( 0.00%)         0                  0                   float              sum = 0.1 * len;
             .           .           .                      .               .               .                    .                  .                  .           
     1,546,080 ( 0.00%)  0           0                 13,389 ( 0.00%)      0               0                    0                  0                  0                   for (int i = 0; i < len; ++i) {
     1,438,968 ( 0.00%)  0           0                      0               0               0              359,742 ( 0.00%)         0                  0                       if (pnodes[i].is_nonterminal()) {
       241,072 ( 0.00%)  0           0                      0               0               0              241,072 ( 0.00%)         0                  0                           node_probs[i] = 0.9;
     1,446,432 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)       482,144 ( 0.00%)      0               0              241,072 ( 0.00%)         0                  0                           sum += 0.8;
             .           .           .                      .               .               .                    .                  .                  .                       }
             .           .           .                      .               .               .                    .                  .                  .                   }
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   // Normalize vector
     1,079,226 ( 0.00%)  0           0                      0               0               0                    0                  0                  0                   for (int i = 0; i < len; ++i) {
     1,079,226 ( 0.00%)  0           0                719,484 ( 0.00%)      0               0              359,742 ( 0.00%)         0                  0                       node_probs[i] /= sum;
             .           .           .                      .               .               .                    .                  .                  .                   }
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   // Compute cumulative sum
             .           .           .                      .               .               .                    .                  .                  .                   std::partial_sum(node_probs.begin(), node_probs.end(), node_probs.begin());
             .           .           .                      .               .               .                    .                  .                  .           
        13,389 ( 0.00%)  0           0                      0               0               0               13,389 ( 0.00%)         0                  0                   start = std::lower_bound(node_probs.begin(), node_probs.end(), bound) - node_probs.begin();
             .           .           .                      .               .               .                    .                  .                  .                   end   = start;
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   // Iterate until all function arguments are satisfied in current subtree
       107,112 ( 0.00%)  0           0                      0               0               0               13,389 ( 0.00%)         0                  0                   int num_args = 1;
       552,608 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)        26,778 ( 0.00%)      0               0                    0                  0                  0                   while (num_args > end - start) {
       210,332 ( 0.00%) 15 ( 0.26%) 15 ( 0.28%)             0               0               0              105,166 ( 0.00%)         0                  0                       node curr;
       315,498 ( 0.00%)  0           0                      0               0               0              105,166 ( 0.00%)         0                  0                       curr = pnodes[end];
       420,664 ( 0.00%)  0           0                      0               0               0              105,166 ( 0.00%)         0                  0                       if (curr.is_nonterminal())
       259,952 ( 0.00%)  0           0                      0               0               0               64,988 ( 0.00%)         0                  0                           num_args += curr.arity();
       105,166 ( 0.00%)  0           0                105,166 ( 0.00%)      0               0                    0                  0                  0                       ++end;
             .           .           .                      .               .               .                    .                  .                  .                   }
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   return std::make_pair(start, end);
       160,668 ( 0.00%)  0           0                120,501 ( 0.00%)      0               0                    0                  0                  0               }
             .           .           .                      .               .               .                    .                  .                  .           
        88,335 ( 0.00%)  2 ( 0.03%)  2 ( 0.04%)         6,795 ( 0.00%)      0               0               54,360 ( 0.00%)         0                  0               int get_depth(const program& p_out) {
         6,795 ( 0.00%)  0           0                      0               0               0                6,795 ( 0.00%)         0                  0                   int             depth = 0;
             .           .           .                      .               .               .                    .                  .                  .                   std::stack<int> arity_stack;
       793,187 ( 0.00%)  0           0                386,401 ( 0.00%)      0               0                    0                  0                  0                   for (auto i = 0; i < p_out.len; ++i) {
       379,672 ( 0.00%)  0           0                      0               0               0              189,836 ( 0.00%)         0                  0                       node curr(p_out.nodes[i]);
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                       // Update depth
             .           .           .                      .               .               .                    .                  .                  .                       int sz = arity_stack.size();
             .           .           .                      .               .               .                    .                  .                  .                       depth  = std::max(depth, sz);
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                       // Update stack
       759,344 ( 0.00%)  0           0                      0               0               0              189,836 ( 0.00%)         0                  0                       if (curr.is_nonterminal()) {
       381,807 ( 0.00%)  0           0                      0               0               0              254,538 ( 0.00%)         0                  0                           arity_stack.push(curr.arity());
             .           .           .                      .               .               .                    .                  .                  .                       } else {
             .           .           .                      .               .               .                    .                  .                  .                           // Only triggered for a depth 0 node
       125,134 ( 0.00%)  0           0                 62,567 ( 0.00%)      0               0                    0                  0                  0                           if (arity_stack.empty())
             .           .           .                      .               .               .                    .                  .                  .                               break;
             .           .           .                      .               .               .                    .                  .                  .           
        62,534 ( 0.00%)  0           0                 62,534 ( 0.00%)      0               0                    0                  0                  0                           int e = arity_stack.top();
             .           .           .                      .               .               .                    .                  .                  .                           arity_stack.pop();
       125,068 ( 0.00%)  0           0                      0               0               0               62,534 ( 0.00%)         0                  0                           arity_stack.push(e - 1);
             .           .           .                      .               .               .                    .                  .                  .           
       549,123 ( 0.00%)  0           0                183,041 ( 0.00%)      0               0                    0                  0                  0                           while (arity_stack.top() == 0) {
             .           .           .                      .               .               .                    .                  .                  .                               arity_stack.pop();
       254,538 ( 0.00%)  0           0                127,269 ( 0.00%)      0               0                    0                  0                  0                               if (arity_stack.empty())
             .           .           .                      .               .               .                    .                  .                  .                                   break;
             .           .           .                      .               .               .                    .                  .                  .           
       120,507 ( 0.00%)  0           0                120,507 ( 0.00%)      0               0                    0                  0                  0                               e = arity_stack.top();
             .           .           .                      .               .               .                    .                  .                  .                               arity_stack.pop();
       241,014 ( 0.00%)  0           0                      0               0               0              120,507 ( 0.00%)         0                  0                               arity_stack.push(e - 1);
             .           .           .                      .               .               .                    .                  .                  .                           }
             .           .           .                      .               .               .                    .                  .                  .                       }
             .           .           .                      .               .               .                    .                  .                  .                   }
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   return depth;
        81,540 ( 0.00%) 15 ( 0.26%) 15 ( 0.28%)        67,950 ( 0.00%)      0               0                    0                  0                  0               }
             .           .           .                      .               .               .                    .                  .                  .           
        12,292 ( 0.00%) 18 ( 0.31%) 18 ( 0.34%)           878 ( 0.00%)      0               0                7,902 ( 0.00%)         2 ( 0.00%)         0               void build_program(program& p_out, const param& params, PhiloxEngine& rng) {
             .           .           .                      .               .               .                    .                  .                  .                   // Define data structures needed for tree
             .           .           .                      .               .               .                    .                  .                  .                   std::stack<int>   arity_stack;
             .           .           .                      .               .               .                    .                  .                  .                   std::vector<node> nodelist;
             .           .           .                      .               .               .                    .                  .                  .                   nodelist.reserve(1 << (MAX_STACK_SIZE));
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   // Specify Distributions with parameters
           878 ( 0.00%)  2 ( 0.03%)  2 ( 0.04%)             0               0               0                  878 ( 0.00%)         1 ( 0.00%)         0                   uniform_int_distribution_custom<int>    dist_function(0, params.function_set.size() - 1);
           878 ( 0.00%)  0           0                    878 ( 0.00%)      0               0                    0                  0                  0                   uniform_int_distribution_custom<int>    dist_initDepth(params.init_depth[0],
         1,756 ( 0.00%)  0           0                  1,756 ( 0.00%)    106 ( 0.00%)      0                    0                  0                  0                                                                          params.init_depth[1]);
         2,634 ( 0.00%)  0           0                  1,756 ( 0.00%)    121 ( 0.00%)      0                  878 ( 0.00%)         0                  0                   uniform_int_distribution_custom<int>    dist_terminalChoice(0, params.num_features);
         1,756 ( 0.00%)  0           0                    878 ( 0.00%)      0               0                  878 ( 0.00%)         0                  0                   uniform_real_distribution_custom<float> dist_constVal(params.const_range[0],
         2,634 ( 0.00%)  2 ( 0.03%)  2 ( 0.04%)         1,756 ( 0.00%)      0               0                  878 ( 0.00%)         0                  0                                                                         params.const_range[1]);
         2,634 ( 0.00%)  0           0                  1,756 ( 0.00%)      0               0                  878 ( 0.00%)         0                  0                   bernoulli_distribution_custom           dist_nodeChoice(params.terminalRatio);
             .           .           .                      .               .               .                    .                  .                  .                   bernoulli_distribution_custom           dist_coinToss(0.5);
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   // Initialize nodes
             .           .           .                      .               .               .                    .                  .                  .                   int        max_depth = dist_initDepth(rng);
         3,512 ( 0.00%)  0           0                  2,634 ( 0.00%)      0               0                    0                  0                  0                   node::type func      = params.function_set[dist_function(rng)];
         3,512 ( 0.00%)  0           0                    878 ( 0.00%)    140 ( 0.00%)     14 ( 0.00%)         878 ( 0.00%)         0                  0                   node       curr_node(func);
             .           .           .                      .               .               .                    .                  .                  .                   nodelist.push_back(curr_node);
         2,634 ( 0.00%)  0           0                      0               0               0                1,756 ( 0.00%)         0                  0                   arity_stack.push(curr_node.arity());
             .           .           .                      .               .               .                    .                  .                  .           
         1,756 ( 0.00%)  0           0                    878 ( 0.00%)      0               0                  878 ( 0.00%)         0                  0                   init_method_t method = params.init_method;
         1,756 ( 0.00%)  0           0                      0               0               0                    0                  0                  0                   if (method == init_method_t::half_and_half) {
             .           .           .                      .               .               .                    .                  .                  .                       // Choose either grow or full for this tree
             .           .           .                      .               .               .                    .                  .                  .                       bool choice = dist_coinToss(rng);
         5,268 ( 0.00%)  0           0                    878 ( 0.00%)      2 ( 0.00%)      2 ( 0.00%)         878 ( 0.00%)         0                  0                       method      = choice ? init_method_t::grow : init_method_t::full;
             .           .           .                      .               .               .                    .                  .                  .                   }
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   // Fill tree
        23,444 ( 0.00%)  0           0                      0               0               0                    0                  0                  0                   while (!arity_stack.empty()) {
             .           .           .                      .               .               .                    .                  .                  .                       int depth        = arity_stack.size();
        56,415 ( 0.00%)  0           0                 22,566 ( 0.00%)      0               0               11,283 ( 0.00%)         0                  0                       p_out.depth      = std::max(depth, p_out.depth);
             .           .           .                      .               .               .                    .                  .                  .                       bool node_choice = dist_nodeChoice(rng);
             .           .           .                      .               .               .                    .                  .                  .           
        45,712 ( 0.00%)  0           0                 11,573 ( 0.00%)      0               0                    0                  0                  0                       if ((node_choice == false || method == init_method_t::full) && depth < max_depth) {
             .           .           .                      .               .               .                    .                  .                  .                           // Add a function to node list
        69,300 ( 0.00%)  2 ( 0.03%)  2 ( 0.04%)        27,720 ( 0.00%)      0               0               13,860 ( 0.00%)         0                  0                           curr_node = node(params.function_set[dist_function(rng)]);
             .           .           .                      .               .               .                    .                  .                  .                           nodelist.push_back(curr_node);
        20,790 ( 0.00%)  0           0                      0               0               0               13,860 ( 0.00%)         0                  0                           arity_stack.push(curr_node.arity());
             .           .           .                      .               .               .                    .                  .                  .                       } else {
             .           .           .                      .               .               .                    .                  .                  .                           // Add terminal
             .           .           .                      .               .               .                    .                  .                  .                           int terminal_choice = dist_terminalChoice(rng);
        13,059 ( 0.00%)  0           0                  8,706 ( 0.00%)      0               0                    0                  0                  0                           if (terminal_choice == params.num_features) {
             .           .           .                      .               .               .                    .                  .                  .                               // Add constant
             .           .           .                      .               .               .                    .                  .                  .                               float val = dist_constVal(rng);
         1,392 ( 0.00%)  0           0                      0               0               0                  464 ( 0.00%)         0                  0                               curr_node = node(val);
             .           .           .                      .               .               .                    .                  .                  .                           } else {
             .           .           .                      .               .               .                    .                  .                  .                               // Add variable
             .           .           .                      .               .               .                    .                  .                  .                               int fid   = terminal_choice;
        24,726 ( 0.00%)  2 ( 0.03%)  2 ( 0.04%)             0               0               0                8,242 ( 0.00%)         0                  0                               curr_node = node(fid);
             .           .           .                      .               .               .                    .                  .                  .                           }
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                           // Modify nodelist
             .           .           .                      .               .               .                    .                  .                  .                           nodelist.push_back(curr_node);
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                           // Modify stack
         4,353 ( 0.00%)  0           0                  4,353 ( 0.00%)      0               0                    0                  0                  0                           int e = arity_stack.top();
             .           .           .                      .               .               .                    .                  .                  .                           arity_stack.pop();
         8,706 ( 0.00%)  0           0                      0               0               0                4,353 ( 0.00%)         0                  0                           arity_stack.push(e - 1);
        33,849 ( 0.00%)  0           0                 11,283 ( 0.00%)      0               0                    0                  0                  0                           while (arity_stack.top() == 0) {
             .           .           .                      .               .               .                    .                  .                  .                               arity_stack.pop();
        15,616 ( 0.00%)  0           0                  7,808 ( 0.00%)      0               0                    0                  0                  0                               if (arity_stack.empty()) {
             .           .           .                      .               .               .                    .                  .                  .                                   break;
             .           .           .                      .               .               .                    .                  .                  .                               }
             .           .           .                      .               .               .                    .                  .                  .           
         6,930 ( 0.00%)  0           0                  6,930 ( 0.00%)      0               0                    0                  0                  0                               e = arity_stack.top();
             .           .           .                      .               .               .                    .                  .                  .                               arity_stack.pop();
        13,860 ( 0.00%)  0           0                      0               0               0                6,930 ( 0.00%)         0                  0                               arity_stack.push(e - 1);
             .           .           .                      .               .               .                    .                  .                  .                           }
             .           .           .                      .               .               .                    .                  .                  .                       }
             .           .           .                      .               .               .                    .                  .                  .                   }
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   // Set new program parameters - need to do a copy as
             .           .           .                      .               .               .                    .                  .                  .                   // nodelist will be deleted using RAII semantics
             .           .           .                      .               .               .                    .                  .                  .                   p_out.nodes = std::make_unique<node[]>(nodelist.size());
             .           .           .                      .               .               .                    .                  .                  .                   std::copy(nodelist.begin(), nodelist.end(), p_out.nodes.get());
             .           .           .                      .               .               .                    .                  .                  .           
         2,634 ( 0.00%)  2 ( 0.03%)  2 ( 0.04%)         1,756 ( 0.00%)      0               0                  878 ( 0.00%)         0                  0                   p_out.len          = nodelist.size();
         2,634 ( 0.00%)  0           0                  1,756 ( 0.00%)    139 ( 0.00%)      0                  878 ( 0.00%)         0                  0                   p_out.metric       = params.metric;
           878 ( 0.00%)  0           0                      0               0               0                  878 ( 0.00%)       234 ( 0.00%)         0                   p_out.raw_fitness_ = 0.0f;
         9,658 ( 0.00%)  0           0                  7,902 ( 0.00%)      0               0                    0                  0                  0               }
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .               void point_mutation(const program& prog, program& p_out, const param& params,
         1,155 ( 0.00%) 30 ( 0.52%) 30 ( 0.57%)            77 ( 0.00%)      0               0                  616 ( 0.00%)         0                  0                                   PhiloxEngine& rng) {
             .           .           .                      .               .               .                    .                  .                  .                   // deep-copy program
           154 ( 0.00%)  0           0                      0               0               0                   77 ( 0.00%)         0                  0                   p_out = prog;
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   // Specify RNGs
             .           .           .                      .               .               .                    .                  .                  .                   uniform_real_distribution_custom<float> dist_uniform(0.0f, 1.0f);
           154 ( 0.00%)  0           0                     77 ( 0.00%)     19 ( 0.00%)      0                   77 ( 0.00%)         0                  0                   uniform_int_distribution_custom<int>    dist_terminalChoice(0, params.num_features);
           154 ( 0.00%)  0           0                     77 ( 0.00%)      0               0                   77 ( 0.00%)         0                  0                   uniform_real_distribution_custom<float> dist_constantVal(params.const_range[0],
           154 ( 0.00%)  0           0                     77 ( 0.00%)     17 ( 0.00%)      0                   77 ( 0.00%)         0                  0                                                                            params.const_range[1]);
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   // Fill with uniform numbers
           154 ( 0.00%) 15 ( 0.26%) 15 ( 0.28%)           154 ( 0.00%)      0               0                    0                  0                  0                   std::vector<float> node_probs(p_out.len);
             .           .           .                      .               .               .                    .                  .                  .                   std::generate(node_probs.begin(), node_probs.end(),
             .           .           .                      .               .               .                    .                  .                  .                                 [&dist_uniform, &rng] { return dist_uniform(rng); });
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   // Mutate nodes
           154 ( 0.00%)  0           0                    154 ( 0.00%)      0               0                    0                  0                  0                   int len = p_out.len;
         9,805 ( 0.00%)  0           0                  2,355 ( 0.00%)      0               0                   77 ( 0.00%)         0                  0                   for (int i = 0; i < len; ++i) {
         4,556 ( 0.00%)  0           0                      0               0               0                2,278 ( 0.00%)         0                  0                       node curr(prog.nodes[i]);
             .           .           .                      .               .               .                    .                  .                  .           
         6,834 ( 0.00%)  0           0                  4,556 ( 0.00%)     20 ( 0.00%)      0                    0                  0                  0                       if (node_probs[i] < params.p_point_replace) {
           388 ( 0.00%)  0           0                      0               0               0                   97 ( 0.00%)         0                  0                           if (curr.is_terminal()) {
             .           .           .                      .               .               .                    .                  .                  .                               int choice = dist_terminalChoice(rng);
             .           .           .                      .               .               .                    .                  .                  .           
            52 ( 0.00%)  0           0                     26 ( 0.00%)      0               0                    0                  0                  0                               if (choice == params.num_features) {
             .           .           .                      .               .               .                    .                  .                  .                                   // Add a randomly generated constant
            16 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)             0               0               0                    4 ( 0.00%)         0                  0                                   curr = node(dist_constantVal(rng));
             .           .           .                      .               .               .                    .                  .                  .                               } else {
             .           .           .                      .               .               .                    .                  .                  .                                   // Add a variable with fid=choice
           166 ( 0.00%)  0           0                      0               0               0                   48 ( 0.00%)         0                  0                                   curr = node(choice);
             .           .           .                      .               .               .                    .                  .                  .                               }
           284 ( 0.00%)  0           0                      0               0               0                   71 ( 0.00%)         0                  0                           } else if (curr.is_nonterminal()) {
             .           .           .                      .               .               .                    .                  .                  .                               // Replace current function with another function of the same arity
           142 ( 0.00%)  0           0                      0               0               0                   71 ( 0.00%)         0                  0                               int ar = curr.arity();
             .           .           .                      .               .               .                    .                  .                  .                               // CUML_LOG_DEBUG("Arity is %d, curr function is
             .           .           .                      .               .               .                    .                  .                  .                               // %d",ar,static_cast<std::underlying_type<node::type>::type>(curr.t));
           284 ( 0.00%)  0           0                      0               0               0                    0                  0                  0                               std::vector<node::type>              fset = params.arity_set[ar];
            71 ( 0.00%)  0           0                      0               0               0                   71 ( 0.00%)         0                  0                               uniform_int_distribution_custom<int> dist_fset(0, fset.size() - 1);
             .           .           .                      .               .               .                    .                  .                  .                               int                                  choice = dist_fset(rng);
           710 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)           213 ( 0.00%)      0               0                  142 ( 0.00%)         0                  0                               curr                                        = node(fset[choice]);
             .           .           .                      .               .               .                    .                  .                  .                           }
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                           // Update p_out with updated value
           194 ( 0.00%)  0           0                      0               0               0                   97 ( 0.00%)         0                  0                           p_out.nodes[i] = curr;
             .           .           .                      .               .               .                    .                  .                  .                       }
             .           .           .                      .               .               .                    .                  .                  .                   }
           539 ( 0.00%)  0           0                    462 ( 0.00%)      0               0                    0                  0                  0               }
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .               void crossover(const program& prog, const program& donor, program& p_out,
        91,336 ( 0.00%) 15 ( 0.26%) 15 ( 0.28%)             0               0               0               52,192 ( 0.00%)         0                  0                              [[maybe_unused]] const param& params, PhiloxEngine& rng) {
             .           .           .                      .               .               .                    .                  .                  .                   // Get a random subtree of prog to replace
        19,572 ( 0.00%)  0           0                 13,048 ( 0.00%)  4,866 ( 0.01%)      0                6,524 ( 0.00%)         0                  0                   std::pair<int, int> prog_slice = get_subtree(prog.nodes.get(), prog.len, rng);
         6,524 ( 0.00%)  0           0                      0               0               0                6,524 ( 0.00%)         0                  0                   int                 prog_start = prog_slice.first;
        19,572 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)             0               0               0                6,524 ( 0.00%)         0                  0                   int                 prog_end   = prog_slice.second;
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   // Set metric of output program
        13,048 ( 0.00%)  0           0                  6,524 ( 0.00%)      0               0                6,524 ( 0.00%)         0                  0                   p_out.metric = prog.metric;
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   // MAX_STACK_SIZE can only handle tree of depth MAX_STACK_SIZE -
             .           .           .                      .               .               .                    .                  .                  .                   // max(func_arity=2) + 1 Thus we continuously hoist the donor subtree. Actual
             .           .           .                      .               .               .                    .                  .                  .                   // indices in donor
         6,524 ( 0.00%)  0           0                      0               0               0                6,524 ( 0.00%)         0                  0                   int donor_start  = 0;
        13,048 ( 0.00%)  0           0                  6,524 ( 0.00%)  4,589 ( 0.01%)      0                6,524 ( 0.00%)         0                  0                   int donor_end    = donor.len;
         6,524 ( 0.00%) 15 ( 0.26%) 15 ( 0.28%)             0               0               0                6,524 ( 0.00%)         0                  0                   int output_depth = 0;
             .           .           .                      .               .               .                    .                  .                  .                   do {
             .           .           .                      .               .               .                    .                  .                  .                       // Get donor subtree
             .           .           .                      .               .               .                    .                  .                  .                       std::pair<int, int> donor_slice =
        67,250 ( 0.00%) 15 ( 0.26%) 15 ( 0.28%)        40,350 ( 0.00%)      0               0                6,725 ( 0.00%)         0                  0                           get_subtree(donor.nodes.get() + donor_start, donor_end - donor_start, rng);
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                       // Get indices w.r.t current subspace [donor_start,donor_end)
             .           .           .                      .               .               .                    .                  .                  .                       int donor_substart = donor_slice.first;
        20,175 ( 0.00%)  0           0                      0               0               0                    0                  0                  0                       int donor_subend   = donor_slice.second;
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                       // Update relative indices to global indices
        13,450 ( 0.00%)  0           0                      0               0               0                6,725 ( 0.00%)         0                  0                       donor_substart += donor_start;
        13,450 ( 0.00%)  0           0                      0               0               0                6,725 ( 0.00%)         0                  0                       donor_subend += donor_start;
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                       // Update to new subspace
             .           .           .                      .               .               .                    .                  .                  .                       donor_start = donor_substart;
             .           .           .                      .               .               .                    .                  .                  .                       donor_end   = donor_subend;
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                       // Evolve on current subspace
        60,525 ( 0.00%)  0           0                 20,175 ( 0.00%)      0               0               13,450 ( 0.00%)         0                  0                       p_out.len = (prog_start) + (donor_end - donor_start) + (prog.len - prog_end);
             .           .           .                      .               .               .                    .                  .                  .                       // delete[] p_out.nodes;
         6,725 ( 0.00%) 15 ( 0.26%) 15 ( 0.28%)             0               0               0                    0                  0                  0                       p_out.nodes = std::make_unique<node[]>(p_out.len);
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                       // Copy slices using std::copy
        32,620 ( 0.00%)  0           0                      0               0               0               13,048 ( 0.00%)         0                  0                       std::copy(prog.nodes.get(), prog.nodes.get() + prog_start, p_out.nodes.get());
        80,700 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)        33,625 ( 0.00%)      0               0                6,725 ( 0.00%)         0                  0                       std::copy(donor.nodes.get() + donor_start, donor.nodes.get() + donor_end,
             .           .           .                      .               .               .                    .                  .                  .                                 p_out.nodes.get() + prog_start);
        73,171 ( 0.00%)  0           0                 20,175 ( 0.00%)      0               0                6,524 ( 0.00%)         0                  0                       std::copy(prog.nodes.get() + prog_end, prog.nodes.get() + prog.len,
        20,175 ( 0.00%)  5 ( 0.09%)  5 ( 0.09%)        13,450 ( 0.00%)      0               0                    0                  0                  0                                 p_out.nodes.get() + (prog_start) + (donor_end - donor_start));
             .           .           .                      .               .               .                    .                  .                  .           
        13,450 ( 0.00%)  0           0                      0               0               0                6,725 ( 0.00%)         0                  0                       output_depth = get_depth(p_out);
        13,450 ( 0.00%)  0           0                      0               0               0                    0                  0                  0                   } while (output_depth >= MAX_STACK_SIZE);
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   // Set the depth of the final program
         6,524 ( 0.00%)  0           0                      0               0               0                6,524 ( 0.00%)         0                  0                   p_out.depth = output_depth;
        52,192 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)        45,668 ( 0.00%)      0               0                    0                  0                  0               }
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .               void subtree_mutation(const program& prog, program& p_out, const param& params,
         5,124 ( 0.00%)  2 ( 0.03%)  2 ( 0.04%)           366 ( 0.00%)      0               0                2,196 ( 0.00%)         0                  0                                     PhiloxEngine& rng) {
             .           .           .                      .               .               .                    .                  .                  .                   // Generate a random program and perform crossover
             .           .           .                      .               .               .                    .                  .                  .                   program new_program;
         1,830 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)             0               0               0                  366 ( 0.00%)         0                  0                   build_program(new_program, params, rng);
         2,196 ( 0.00%)  0           0                      0               0               0                  366 ( 0.00%)         0                  0                   crossover(prog, new_program, p_out, params, rng);
         2,196 ( 0.00%)  0           0                  1,830 ( 0.00%)      0               0                    0                  0                  0               }
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .               void hoist_mutation(const program& prog, program& p_out, [[maybe_unused]] const param& params,
           840 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)             0               0               0                  490 ( 0.00%)         0                  0                                   PhiloxEngine& rng) {
             .           .           .                      .               .               .                    .                  .                  .                   // Replace program subtree with a random sub-subtree
             .           .           .                      .               .               .                    .                  .                  .           
           350 ( 0.00%)  0           0                    140 ( 0.00%)     55 ( 0.00%)      0                   70 ( 0.00%)         0                  0                   std::pair<int, int> prog_slice = get_subtree(prog.nodes.get(), prog.len, rng);
             .           .           .                      .               .               .                    .                  .                  .                   int                 prog_start = prog_slice.first;
           210 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)             0               0               0                   70 ( 0.00%)         0                  0                   int                 prog_end   = prog_slice.second;
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   std::pair<int, int> sub_slice =
           770 ( 0.00%)  0           0                     70 ( 0.00%)      0               0                  140 ( 0.00%)         0                  0                       get_subtree(prog.nodes.get() + prog_start, prog_end - prog_start, rng);
             .           .           .                      .               .               .                    .                  .                  .                   int sub_start = sub_slice.first;
           140 ( 0.00%)  0           0                      0               0               0                    0                  0                  0                   int sub_end   = sub_slice.second;
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   // Update subtree indices to global indices
           140 ( 0.00%)  0           0                      0               0               0                   70 ( 0.00%)         0                  0                   sub_start += prog_start;
           140 ( 0.00%)  0           0                      0               0               0                   70 ( 0.00%)         0                  0                   sub_end += prog_start;
             .           .           .                      .               .               .                    .                  .                  .           
           560 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)            70 ( 0.00%)      0               0                  140 ( 0.00%)         0                  0                   p_out.len    = (prog_start) + (sub_end - sub_start) + (prog.len - prog_end);
            70 ( 0.00%)  0           0                      0               0               0                    0                  0                  0                   p_out.nodes  = std::make_unique<node[]>(p_out.len);
           210 ( 0.00%)  0           0                    140 ( 0.00%)      0               0                   70 ( 0.00%)         0                  0                   p_out.metric = prog.metric;
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   // Copy node slices using std::copy
             .           .           .                      .               .               .                    .                  .                  .                   std::copy(prog.nodes.get(), prog.nodes.get() + prog_start, p_out.nodes.get());
           560 ( 0.00%)  0           0                    140 ( 0.00%)      0               0                    0                  0                  0                   std::copy(prog.nodes.get() + sub_start, prog.nodes.get() + sub_end,
             .           .           .                      .               .               .                    .                  .                  .                             p_out.nodes.get() + prog_start);
           560 ( 0.00%)  0           0                    140 ( 0.00%)      0               0                    0                  0                  0                   std::copy(prog.nodes.get() + prog_end, prog.nodes.get() + prog.len,
           210 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)           140 ( 0.00%)      0               0                    0                  0                  0                             p_out.nodes.get() + (prog_start) + (sub_end - sub_start));
             .           .           .                      .               .               .                    .                  .                  .           
             .           .           .                      .               .               .                    .                  .                  .                   // Update depth
           280 ( 0.00%)  0           0                     70 ( 0.00%)      0               0                  140 ( 0.00%)         0                  0                   p_out.depth = get_depth(p_out);
           560 ( 0.00%)  0           0                    490 ( 0.00%)      0               0                    0                  0                  0               }
             .           .           .                      .               .               .                    .                  .                  .           
             3 ( 0.00%)  0           0                      1 ( 0.00%)      0               0                    1 ( 0.00%)         0                  0           } // namespace genetic

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/dhruvs6/598APE-HW2/src/node_detail.h
--------------------------------------------------------------------------------
Ir                      I1mr       ILmr       Dr                     D1mr                DLmr             Dw                     D1mw         DLmw       

-- line 7 ----------------------------------------
             .          .          .                      .                   .                .                      .            .          .           #include <cstdlib>
             .          .          .                      .                   .                .                      .            .          .           
             .          .          .                      .                   .                .                      .            .          .           namespace genetic {
             .          .          .                      .                   .                .                      .            .          .               namespace detail {
             .          .          .                      .                   .                .                      .            .          .           
             .          .          .                      .                   .                .                      .            .          .                   static constexpr float MIN_VAL = 0.001f;
             .          .          .                      .                   .                .                      .            .          .           
             .          .          .                      .                   .                .                      .            .          .                   inline bool is_terminal(node::type t) {
           360 ( 0.00%) 0          0                    180 ( 0.00%)         17 ( 0.00%)       0                      0            0          0                       return t == node::type::variable || t == node::type::constant;
             .          .          .                      .                   .                .                      .            .          .                   }
             .          .          .                      .                   .                .                      .            .          .           
             .          .          .                      .                   .                .                      .            .          .                   inline bool is_nonterminal(node::type t) {
     1,309,630 ( 0.00%) 0          0                654,815 ( 0.00%)     63,638 ( 0.09%)       0                      0            0          0                       return !is_terminal(t);
             .          .          .                      .                   .                .                      .            .          .                   }
             .          .          .                      .                   .                .                      .            .          .           
             .          .          .                      .                   .                .                      .            .          .                   inline int arity(node::type t) {
       632,080 ( 0.00%) 0          0                      0                   0                0                      0            0          0                       if (node::type::unary_begin <= t && t <= node::type::unary_end) {
       200,188 ( 0.00%) 0          0                      0                   0                0                      0            0          0                           return 1;
             .          .          .                      .                   .                .                      .            .          .                       }
       444,522 ( 0.00%) 1 ( 0.02%) 1 ( 0.02%)             0                   0                0                      0            0          0                       if (node::type::binary_begin <= t && t <= node::type::binary_end) {
             .          .          .                      .                   .                .                      .            .          .                           return 2;
             .          .          .                      .                   .                .                      .            .          .                       }
             .          .          .                      .                   .                .                      .            .          .                       return 0;
             .          .          .                      .                   .                .                      .            .          .                   }
             .          .          .                      .                   .                .                      .            .          .           
             .          .          .                      .                   .                .                      .            .          .                   inline float evaluate_node_lookup(const node& n, const float* data, const uint64_t stride,
             .          .          .                      .                   .                .                      .            .          .                                                     const uint64_t idx, const float in1, const float in2) {
 3,470,727,456 ( 2.06%) 0          0          3,470,727,456 ( 9.09%)     27,885 ( 0.04%)  24,661 ( 0.14%)             0            0          0                       const auto& func = function_table[static_cast<size_t>(n.t)];
 6,941,454,912 ( 4.11%) 1 ( 0.02%) 1 ( 0.02%)             0                   0                0                      0            0          0                       if (n.t == node::type::constant) {
   256,406,592 ( 0.15%) 0          0            128,203,296 ( 0.34%)          0                0                      0            0          0                           return n.u.val;
 6,685,048,320 ( 3.96%) 0          0                      0                   0                0                      0            0          0                       } else if (n.t == node::type::variable) {
 6,124,878,720 ( 3.63%) 1 ( 0.02%) 1 ( 0.02%) 4,083,252,480 (10.70%) 35,206,168 (50.24%) 134,177 ( 0.77%)             0            0          0                           return data[(stride * n.u.fid) + idx];
             .          .          .                      .                   .                .                      .            .          .                       } else {
16,251,977,280 ( 9.62%) 0          0          6,965,133,120 (18.25%)      3,471 ( 0.00%)      72 ( 0.00%) 6,965,133,120 (55.50%) 205 ( 0.00%) 3 ( 0.00%)                  return func(in1, in2);
             .          .          .                      .                   .                .                      .            .          .                       }
             .          .          .                      .                   .                .                      .            .          .                   }
             .          .          .                      .                   .                .                      .            .          .           
             .          .          .                      .                   .                .                      .            .          .                   // `data` assumed to be stored in col-major format
             .          .          .                      .                   .                .                      .            .          .                   inline float evaluate_node(const node& n, const float* data, const uint64_t stride,
             .          .          .                      .                   .                .                      .            .          .                                              const uint64_t idx, const float* in) {
             .          .          .                      .                   .                .                      .            .          .                       if (n.t == node::type::constant) {
             .          .          .                      .                   .                .                      .            .          .                           return n.u.val;
-- line 48 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/dhruvs6/598APE-HW2/src/../include/evaluate.h
--------------------------------------------------------------------------------
Ir                     I1mr       ILmr       Dr                   D1mr       DLmr       Dw         D1mw       DLmw       

-- line 16 ----------------------------------------
            .          .          .                    .          .          .          .          .          .           */
            .          .          .                    .          .          .          .          .          .           
            .          .          .                    .          .          .          .          .          .           static constexpr float EPSILON = 0.001f;
            .          .          .                    .          .          .          .          .          .           
            .          .          .                    .          .          .          .          .          .           static const FnPtr function_table[] = {
            .          .          .                    .          .          .          .          .          .               // Skip variable (0) and constant (1)
            .          .          .                    .          .          .          .          .          .               nullptr, nullptr,
            .          .          .                    .          .          .          .          .          .               // Binary functions
1,254,239,136 ( 0.74%) 6 ( 0.10%) 6 ( 0.11%) 418,079,712 ( 1.10%) 9 ( 0.00%) 0          0          0          0               [](float a, float b) { return a + b; },                                // add
            .          .          .                    .          .          .          .          .          .               [](float a, float b) { return std::atan2(a, b); },                     // atan2
            .          .          .                    .          .          .          .          .          .               [](float a, float b) { return std::abs(b) < EPSILON ? 1.0f : a / b; }, // div
  242,916,288 ( 0.14%) 0          0                    0          0          0          0          0          0               [](float a, float b) { return std::fdim(a, b); },                      // fdim
            .          .          .                    .          .          .          .          .          .               [](float a, float b) { return std::max(a, b); },                       // max
            .          .          .                    .          .          .          .          .          .               [](float a, float b) { return std::min(a, b); },                       // min
  351,817,056 ( 0.21%) 0          0          117,272,352 ( 0.31%) 7 ( 0.00%) 0          0          0          0               [](float a, float b) { return a * b; },                                // mul
            .          .          .                    .          .          .          .          .          .               [](float a, float b) { return std::pow(a, b); },                       // pow
  706,420,512 ( 0.42%) 1 ( 0.02%) 1 ( 0.02%) 235,473,504 ( 0.62%) 7 ( 0.00%) 0          0          0          0               [](float a, float b) { return a - b; },                                // sub
            .          .          .                    .          .          .          .          .          .               // Unary functions
  281,967,168 ( 0.17%) 4 ( 0.07%) 4 ( 0.08%) 140,983,584 ( 0.37%) 5 ( 0.00%) 0          0          0          0               [](float a, float) { return std::abs(a); },                           // abs
            .          .          .                    .          .          .          .          .          .               [](float a, float) { return std::acos(a); },                          // acos
            .          .          .                    .          .          .          .          .          .               [](float a, float) { return std::acosh(a); },                         // acosh
            .          .          .                    .          .          .          .          .          .               [](float a, float) { return std::asin(a); },                          // asin
            .          .          .                    .          .          .          .          .          .               [](float a, float) { return std::asinh(a); },                         // asinh
            .          .          .                    .          .          .          .          .          .               [](float a, float) { return std::atan(a); },                          // atan
            .          .          .                    .          .          .          .          .          .               [](float a, float) { return std::atanh(a); },                         // atanh
            .          .          .                    .          .          .          .          .          .               [](float a, float) { return std::cbrt(a); },                          // cbrt
  250,924,608 ( 0.15%) 1 ( 0.02%) 1 ( 0.02%)           0          0          0          0          0          0               [](float a, float) { return std::cos(a); },                           // cos
            .          .          .                    .          .          .          .          .          .               [](float a, float) { return std::cosh(a); },                          // cosh
            .          .          .                    .          .          .          .          .          .               [](float a, float) { return a * a * a; },                             // cube
  264,064,032 ( 0.16%) 0          0                    0          0          0          0          0          0               [](float a, float) { return std::exp(a); },                           // exp
            .          .          .                    .          .          .          .          .          .               [](float a, float) { return std::abs(a) < EPSILON ? 0.f : 1.f / a; }, // inv
  401,823,648 ( 0.24%) 1 ( 0.02%) 1 ( 0.02%)           0          0          0          0          0          0               [](float a, float) {
            .          .          .                    .          .          .          .          .          .                   float abs_a = std::abs(a);
1,205,470,944 ( 0.71%) 1 ( 0.02%) 1 ( 0.02%) 401,823,648 ( 1.05%) 0          0          0          0          0                   return abs_a < EPSILON ? 0.f : std::log(abs_a);
   38,600,090 ( 0.02%) 0          0           19,300,045 ( 0.05%) 0          0          0          0          0               },                                                            // log
            .          .          .                    .          .          .          .          .          .               [](float a, float) { return -a; },                            // neg
            .          .          .                    .          .          .          .          .          .               [](float a, float) { return 1.0f / std::cbrt(a); },           // rcbrt
            .          .          .                    .          .          .          .          .          .               [](float a, float) { return 1.0f / std::sqrt(std::abs(a)); }, // rsqrt
  250,173,312 ( 0.15%) 1 ( 0.02%) 1 ( 0.02%)           0          0          0          0          0          0               [](float a, float) { return std::sin(a); },                   // sin
            .          .          .                    .          .          .          .          .          .               [](float a, float) { return std::sinh(a); },                  // sinh
            .          .          .                    .          .          .          .          .          .               [](float a, float) { return a * a; },                         // sq
            .          .          .                    .          .          .          .          .          .               [](float a, float) { return std::sqrt(std::abs(a)); },        // sqrt
            .          .          .                    .          .          .          .          .          .               [](float a, float) { return std::tan(a); },                   // tan
            .          .          .                    .          .          .          .          .          .               [](float a, float) { return std::tanh(a); },                  // tanh
            .          .          .                    .          .          .          .          .          .           };
--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/std_abs.h
--------------------------------------------------------------------------------
Ir                   I1mr       ILmr       Dr                   D1mr         DLmr        Dw         D1mw       DLmw       

-- line 68 ----------------------------------------
          .          .          .                    .            .           .          .          .          .           
          .          .          .                    .            .           .          .          .          .           #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
          .          .          .                    .            .           .          .          .          .             inline _GLIBCXX_CONSTEXPR double
          .          .          .                    .            .           .          .          .          .             abs(double __x)
          .          .          .                    .            .           .          .          .          .             { return __builtin_fabs(__x); }
          .          .          .                    .            .           .          .          .          .           
          .          .          .                    .            .           .          .          .          .             inline _GLIBCXX_CONSTEXPR float
          .          .          .                    .            .           .          .          .          .             abs(float __x)
542,807,232 ( 0.32%) 0          0          542,807,232 ( 1.42%) 714 ( 0.00%) 18 ( 0.00%) 0          0          0             { return __builtin_fabsf(__x); }
          .          .          .                    .            .           .          .          .          .           
          .          .          .                    .            .           .          .          .          .             inline _GLIBCXX_CONSTEXPR long double
          .          .          .                    .            .           .          .          .          .             abs(long double __x)
          .          .          .                    .            .           .          .          .          .             { return __builtin_fabsl(__x); }
          .          .          .                    .            .           .          .          .          .           #endif
          .          .          .                    .            .           .          .          .          .           
          .          .          .                    .            .           .          .          .          .           #if defined(__GLIBCXX_TYPE_INT_N_0)
          .          .          .                    .            .           .          .          .          .             inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0
-- line 84 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/cmath
--------------------------------------------------------------------------------
Ir                   I1mr       ILmr       Dr         D1mr       DLmr       Dw         D1mw       DLmw       

-- line 177 ----------------------------------------
          .          .          .          .          .          .          .          .          .               ceil(_Tp __x)
          .          .          .          .          .          .          .          .          .               { return __builtin_ceil(__x); }
          .          .          .          .          .          .          .          .          .           
          .          .          .          .          .          .          .          .          .             using ::cos;
          .          .          .          .          .          .          .          .          .           
          .          .          .          .          .          .          .          .          .           #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
          .          .          .          .          .          .          .          .          .             inline _GLIBCXX_CONSTEXPR float
          .          .          .          .          .          .          .          .          .             cos(float __x)
250,924,608 ( 0.15%) 0          0          0          0          0          0          0          0             { return __builtin_cosf(__x); }
          .          .          .          .          .          .          .          .          .           
          .          .          .          .          .          .          .          .          .             inline _GLIBCXX_CONSTEXPR long double
          .          .          .          .          .          .          .          .          .             cos(long double __x)
          .          .          .          .          .          .          .          .          .             { return __builtin_cosl(__x); }
          .          .          .          .          .          .          .          .          .           #endif
          .          .          .          .          .          .          .          .          .           
          .          .          .          .          .          .          .          .          .             template<typename _Tp>
          .          .          .          .          .          .          .          .          .               inline _GLIBCXX_CONSTEXPR
-- line 193 ----------------------------------------
-- line 215 ----------------------------------------
          .          .          .          .          .          .          .          .          .               cosh(_Tp __x)
          .          .          .          .          .          .          .          .          .               { return __builtin_cosh(__x); }
          .          .          .          .          .          .          .          .          .           
          .          .          .          .          .          .          .          .          .             using ::exp;
          .          .          .          .          .          .          .          .          .           
          .          .          .          .          .          .          .          .          .           #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
          .          .          .          .          .          .          .          .          .             inline _GLIBCXX_CONSTEXPR float
          .          .          .          .          .          .          .          .          .             exp(float __x)
264,064,032 ( 0.16%) 0          0          0          0          0          0          0          0             { return __builtin_expf(__x); }
          .          .          .          .          .          .          .          .          .           
          .          .          .          .          .          .          .          .          .             inline _GLIBCXX_CONSTEXPR long double
          .          .          .          .          .          .          .          .          .             exp(long double __x)
          .          .          .          .          .          .          .          .          .             { return __builtin_expl(__x); }
          .          .          .          .          .          .          .          .          .           #endif
          .          .          .          .          .          .          .          .          .           
          .          .          .          .          .          .          .          .          .             template<typename _Tp>
          .          .          .          .          .          .          .          .          .               inline _GLIBCXX_CONSTEXPR
-- line 231 ----------------------------------------
-- line 331 ----------------------------------------
          .          .          .          .          .          .          .          .          .               ldexp(_Tp __x, int __exp)
          .          .          .          .          .          .          .          .          .               { return __builtin_ldexp(__x, __exp); }
          .          .          .          .          .          .          .          .          .           
          .          .          .          .          .          .          .          .          .             using ::log;
          .          .          .          .          .          .          .          .          .           
          .          .          .          .          .          .          .          .          .           #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
          .          .          .          .          .          .          .          .          .             inline _GLIBCXX_CONSTEXPR float
          .          .          .          .          .          .          .          .          .             log(float __x)
382,523,603 ( 0.23%) 0          0          0          0          0          0          0          0             { return __builtin_logf(__x); }
          .          .          .          .          .          .          .          .          .           
          .          .          .          .          .          .          .          .          .             inline _GLIBCXX_CONSTEXPR long double
          .          .          .          .          .          .          .          .          .             log(long double __x)
          .          .          .          .          .          .          .          .          .             { return __builtin_logl(__x); }
          .          .          .          .          .          .          .          .          .           #endif
          .          .          .          .          .          .          .          .          .           
          .          .          .          .          .          .          .          .          .             template<typename _Tp>
          .          .          .          .          .          .          .          .          .               inline _GLIBCXX_CONSTEXPR
-- line 347 ----------------------------------------
-- line 418 ----------------------------------------
          .          .          .          .          .          .          .          .          .                 return pow(__type(__x), __type(__y));
          .          .          .          .          .          .          .          .          .               }
          .          .          .          .          .          .          .          .          .           
          .          .          .          .          .          .          .          .          .             using ::sin;
          .          .          .          .          .          .          .          .          .           
          .          .          .          .          .          .          .          .          .           #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
          .          .          .          .          .          .          .          .          .             inline _GLIBCXX_CONSTEXPR float
          .          .          .          .          .          .          .          .          .             sin(float __x)
250,173,312 ( 0.15%) 0          0          0          0          0          0          0          0             { return __builtin_sinf(__x); }
          .          .          .          .          .          .          .          .          .           
          .          .          .          .          .          .          .          .          .             inline _GLIBCXX_CONSTEXPR long double
          .          .          .          .          .          .          .          .          .             sin(long double __x)
          .          .          .          .          .          .          .          .          .             { return __builtin_sinl(__x); }
          .          .          .          .          .          .          .          .          .           #endif
          .          .          .          .          .          .          .          .          .           
          .          .          .          .          .          .          .          .          .             template<typename _Tp>
          .          .          .          .          .          .          .          .          .               inline _GLIBCXX_CONSTEXPR
-- line 434 ----------------------------------------
-- line 1371 ----------------------------------------
          .          .          .          .          .          .          .          .          .                                                         double>::__type
          .          .          .          .          .          .          .          .          .               expm1(_Tp __x)
          .          .          .          .          .          .          .          .          .               { return __builtin_expm1(__x); }
          .          .          .          .          .          .          .          .          .           #endif
          .          .          .          .          .          .          .          .          .           
          .          .          .          .          .          .          .          .          .           #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
          .          .          .          .          .          .          .          .          .             constexpr float
          .          .          .          .          .          .          .          .          .             fdim(float __x, float __y)
242,916,288 ( 0.14%) 0          0          0          0          0          0          0          0             { return __builtin_fdimf(__x, __y); }
          .          .          .          .          .          .          .          .          .           
          .          .          .          .          .          .          .          .          .             constexpr long double
          .          .          .          .          .          .          .          .          .             fdim(long double __x, long double __y)
          .          .          .          .          .          .          .          .          .             { return __builtin_fdiml(__x, __y); }
          .          .          .          .          .          .          .          .          .           #endif
          .          .          .          .          .          .          .          .          .           
          .          .          .          .          .          .          .          .          .           #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
          .          .          .          .          .          .          .          .          .             template<typename _Tp, typename _Up>
-- line 1387 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/dhruvs6/598APE-HW2/src/reg_stack.h
--------------------------------------------------------------------------------
Ir                      I1mr       ILmr       Dr                     D1mr       DLmr       Dw                     D1mw         DLmw        

-- line 7 ----------------------------------------
             .          .          .                      .          .          .                      .            .           .                *
             .          .          .                      .          .          .                      .            .           .                * The idea is to use only the registers to store the elements of the stack,
             .          .          .                      .          .          .                      .            .           .                * thereby achieving the best performance.
             .          .          .                      .          .          .                      .            .           .                *
             .          .          .                      .          .          .                      .            .           .                * @tparam DataT   data type of the stack elements
             .          .          .                      .          .          .                      .            .           .                * @tparam MaxSize max capacity of the stack
             .          .          .                      .          .          .                      .            .           .                */
             .          .          .                      .          .          .                      .            .           .               template <typename DataT, int MaxSize> struct stack {
   405,823,680 ( 0.24%) 0          0                      0          0          0                      0            0           0                   explicit stack() : elements_(0) {
             .          .          .                      .          .          .                      .            .           .                       // could replace with memset
             .          .          .                      .          .          .                      .            .           .                       for (int i = 0; i < MaxSize; ++i) {
   811,647,360 ( 0.48%) 1 ( 0.02%) 1 ( 0.02%)             0          0          0            676,372,800 ( 5.39%) 478 ( 0.00%) 56 ( 0.00%)                  regs_[i] = DataT(0);
             .          .          .                      .          .          .                      .            .           .                       }
             .          .          .                      .          .          .                      .            .           .                   }
             .          .          .                      .          .          .                      .            .           .           
             .          .          .                      .          .          .                      .            .           .                   /** Checks if the stack is empty */
             .          .          .                      .          .          .                      .            .           .                   inline bool empty() const { return elements_ == 0; }
             .          .          .                      .          .          .                      .            .           .           
             .          .          .                      .          .          .                      .            .           .                   /** Current number of elements in the stack */
             .          .          .                      .          .          .                      .            .           .                   inline int size() const { return elements_; }
-- line 26 ----------------------------------------
-- line 40 ----------------------------------------
             .          .          .                      .          .          .                      .            .           .                    */
             .          .          .                      .          .          .                      .            .           .                   void push(DataT val) {
             .          .          .                      .          .          .                      .            .           .                       // for (int i = MaxSize - 1; i >= 0; --i) {
             .          .          .                      .          .          .                      .            .           .                       //   if (elements_ == i) {
             .          .          .                      .          .          .                      .            .           .                       //     ++elements_;
             .          .          .                      .          .          .                      .            .           .                       //     regs_[i] = val;
             .          .          .                      .          .          .                      .            .           .                       //   }
             .          .          .                      .          .          .                      .            .           .                       // }
 6,941,454,912 ( 4.11%) 0          0                      0          0          0                      0            0           0                       if (!full()) {
 6,941,454,912 ( 4.11%) 0          0                      0          0          0          3,470,727,456 (27.66%) 430 ( 0.00%)  8 ( 0.00%)                  regs_[elements_] = val;
 3,470,727,456 ( 2.06%) 0          0                      0          0          0                      0            0           0                           elements_++;
             .          .          .                      .          .          .                      .            .           .                       }
             .          .          .                      .          .          .                      .            .           .                   }
             .          .          .                      .          .          .                      .            .           .           
             .          .          .                      .          .          .                      .            .           .                   /**
             .          .          .                      .          .          .                      .            .           .                    * @brief Lazily pops the top element from the stack
             .          .          .                      .          .          .                      .            .           .                    *
             .          .          .                      .          .          .                      .            .           .                    * @return pops the element and returns it, if already reached bottom, then it
             .          .          .                      .          .          .                      .            .           .                    *         returns zero.
-- line 58 ----------------------------------------
-- line 65 ----------------------------------------
             .          .          .                      .          .          .                      .            .           .                   DataT pop() {
             .          .          .                      .          .          .                      .            .           .                       // for (int i = 0; i < MaxSize; ++i) {
             .          .          .                      .          .          .                      .            .           .                       //   if (elements_ == (i + 1)) {
             .          .          .                      .          .          .                      .            .           .                       //     elements_--;
             .          .          .                      .          .          .                      .            .           .                       //     return regs_[i];
             .          .          .                      .          .          .                      .            .           .                       //   }
             .          .          .                      .          .          .                      .            .           .                       // }
             .          .          .                      .          .          .                      .            .           .           
19,969,575,648 (11.83%) 6 ( 0.10%) 6 ( 0.11%) 3,470,727,456 ( 9.09%) 4 ( 0.00%) 0                      0            0           0                       return empty() ? DataT(0) : regs_[(--elements_)];
             .          .          .                      .          .          .                      .            .           .                   }
             .          .          .                      .          .          .                      .            .           .           
             .          .          .                      .          .          .                      .            .           .               private:
             .          .          .                      .          .          .                      .            .           .                   int   elements_;
             .          .          .                      .          .          .                      .            .           .                   DataT regs_[MaxSize];
             .          .          .                      .          .          .                      .            .           .               }; // struct stack
             .          .          .                      .          .          .                      .            .           .           
             .          .          .                      .          .          .                      .            .           .           } // namespace genetic
-- line 81 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/dhruvs6/598APE-HW2/include/fitness.h
--------------------------------------------------------------------------------
Ir                   I1mr        ILmr        Dr                   D1mr                DLmr               Dw                   D1mw               DLmw               

-- line 217 ----------------------------------------
          .           .           .                    .                   .                  .                    .                  .                  .                       out[pid] = static_cast<math_t>(0);
          .           .           .                    .                   .                  .                    .                  .                  .                       for (uint64_t i = 0; i < n_samples; ++i) {
          .           .           .                    .                   .                  .                    .                  .                  .                           out[pid] += error[pid * n_samples + i] / N;
          .           .           .                    .                   .                  .                    .                  .                  .                       }
          .           .           .                    .                   .                  .                    .                  .                  .                   }
          .           .           .                    .                   .                  .                    .                  .                  .               }
          .           .           .                    .                   .                  .                    .                  .                  .           
          .           .           .                    .                   .                  .                    .                  .                  .               template <typename math_t = float>
        144 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)           0                   0                  0                   96 ( 0.00%)         0                  0               void meanSquareError(const uint64_t n_samples, const uint64_t n_progs, const math_t* Y,
          .           .           .                    .                   .                  .                    .                  .                  .                                    const math_t* Y_pred, const math_t* W, math_t* out) {
         32 ( 0.00%) 16 ( 0.28%) 16 ( 0.30%)           0                   0                  0                    0                  0                  0                   std::vector<math_t> error(n_samples * n_progs);
         64 ( 0.00%)  0           0                    0                   0                  0                    0                  0                  0                   math_t              N = static_cast<math_t>(n_samples);
          .           .           .                    .                   .                  .                    .                  .                  .           
          .           .           .                    .                   .                  .                    .                  .                  .                   // Weight Sum
         80 ( 0.00%)  0           0                    0                   0                  0                    0                  0                  0                   math_t WS = static_cast<math_t>(0);
    792,608 ( 0.00%)  0           0                    0                   0                  0                    0                  0                  0                   for (uint64_t i = 0; i < n_samples; ++i) {
    264,192 ( 0.00%) 16 ( 0.28%) 16 ( 0.30%)     264,192 ( 0.00%)     16,528 ( 0.02%)    16,528 ( 0.10%)           0                  0                  0                       WS += W[i];
          .           .           .                    .                   .                  .                    .                  .                  .                   }
          .           .           .                    .                   .                  .                    .                  .                  .           
          .           .           .                    .                   .                  .                    .                  .                  .                   // Compute absolute differences
     41,056 ( 0.00%)  0           0                    0                   0                  0                    0                  0                  0                   for (uint64_t pid = 0; pid < n_progs; ++pid) {
405,831,696 ( 0.24%)  0           0                    0                   0                  0                    0                  0                  0                       for (uint64_t i = 0; i < n_samples; ++i) {
946,864,128 ( 0.56%) 16 ( 0.28%) 16 ( 0.30%) 405,798,912 ( 1.06%) 25,370,640 (36.20%) 8,470,672 (48.90%) 135,266,304 ( 1.08%) 8,454,160 (24.76%) 8,454,160 (24.85%)                  error[pid * n_samples + i] = N * W[i] * (Y_pred[pid * n_samples + i] - Y[i]) *
135,266,304 ( 0.08%)  0           0                    0                   0                  0                    0                  0                  0                                                        (Y_pred[pid * n_samples + i] - Y[i]) / WS;
          .           .           .                    .                   .                  .                    .                  .                  .                       }
          .           .           .                    .                   .                  .                    .                  .                  .                   }
          .           .           .                    .                   .                  .                    .                  .                  .           
          .           .           .                    .                   .                  .                    .                  .                  .                   // Average along rows
     32,768 ( 0.00%)  0           0                    0                   0                  0                    0                  0                  0                   for (uint64_t pid = 0; pid < n_progs; ++pid) {
        224 ( 0.00%)  6 ( 0.10%)  6 ( 0.11%)          48 ( 0.00%)          0                  0                   64 ( 0.00%)        32 ( 0.00%)        32 ( 0.00%)              out[pid] = static_cast<math_t>(0);
405,856,256 ( 0.24%) 16 ( 0.28%) 16 ( 0.30%)           0                   0                  0                8,192 ( 0.00%)     8,192 ( 0.02%)       180 ( 0.00%)              for (uint64_t i = 0; i < n_samples; ++i) {
405,798,912 ( 0.24%)  0           0          135,266,304 ( 0.35%)  8,454,160 (12.06%) 8,454,160 (48.80%)           0                  0                  0                           out[pid] += error[pid * n_samples + i] / N;
          .           .           .                    .                   .                  .                    .                  .                  .                       }
          .           .           .                    .                   .                  .                    .                  .                  .                   }
        112 ( 0.00%)  5 ( 0.09%)  5 ( 0.09%)          96 ( 0.00%)         16 ( 0.00%)        16 ( 0.00%)           0                  0                  0               }
          .           .           .                    .                   .                  .                    .                  .                  .           
          .           .           .                    .                   .                  .                    .                  .                  .               template <typename math_t = float>
          .           .           .                    .                   .                  .                    .                  .                  .               void rootMeanSquareError(const uint64_t n_samples, const uint64_t n_progs, const math_t* Y,
          .           .           .                    .                   .                  .                    .                  .                  .                                        const math_t* Y_pred, const math_t* W, math_t* out) {
          .           .           .                    .                   .                  .                    .                  .                  .                   // Find MSE
          .           .           .                    .                   .                  .                    .                  .                  .                   meanSquareError(n_samples, n_progs, Y, Y_pred, W, out);
          .           .           .                    .                   .                  .                    .                  .                  .           
          .           .           .                    .                   .                  .                    .                  .                  .                   // Take sqrt on all entries
-- line 259 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/unique_ptr.h
--------------------------------------------------------------------------------
Ir                     I1mr        ILmr        Dr                     D1mr           DLmr           Dw               D1mw       DLmw       

-- line 112 ----------------------------------------
            .           .           .                      .              .              .                .          .          .           
            .           .           .                      .              .              .                .          .          .                 /// Calls `delete[] __ptr`
            .           .           .                      .              .              .                .          .          .                 template<typename _Up>
            .           .           .                      .              .              .                .          .          .           	typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
            .           .           .                      .              .              .                .          .          .           	operator()(_Up* __ptr) const
            .           .           .                      .              .              .                .          .          .           	{
            .           .           .                      .              .              .                .          .          .           	  static_assert(sizeof(_Tp)>0,
            .           .           .                      .              .              .                .          .          .           			"can't delete pointer to incomplete type");
       26,753 ( 0.00%)  2 ( 0.03%)  2 ( 0.04%)           732 ( 0.00%)     0              0           15,561 ( 0.00%) 0          0           	  delete [] __ptr;
            .           .           .                      .              .              .                .          .          .           	}
            .           .           .                      .              .              .                .          .          .               };
            .           .           .                      .              .              .                .          .          .           
            .           .           .                      .              .              .                .          .          .             /// @cond undocumented
            .           .           .                      .              .              .                .          .          .           
            .           .           .                      .              .              .                .          .          .             // Manages the pointer and deleter of a unique_ptr
            .           .           .                      .              .              .                .          .          .             template <typename _Tp, typename _Dp>
            .           .           .                      .              .              .                .          .          .               class __uniq_ptr_impl
-- line 128 ----------------------------------------
-- line 165 ----------------------------------------
            .           .           .                      .              .              .                .          .          .                 __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
            .           .           .                      .              .              .                .          .          .                 {
            .           .           .                      .              .              .                .          .          .           	reset(__u.release());
            .           .           .                      .              .              .                .          .          .           	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
            .           .           .                      .              .              .                .          .          .           	return *this;
            .           .           .                      .              .              .                .          .          .                 }
            .           .           .                      .              .              .                .          .          .           
            .           .           .                      .              .              .                .          .          .                 pointer&   _M_ptr() { return std::get<0>(_M_t); }
       53,701 ( 0.00%)  1 ( 0.02%)  1 ( 0.02%)        53,618 ( 0.00%)     0              0                0          0          0                 pointer    _M_ptr() const { return std::get<0>(_M_t); }
            .           .           .                      .              .              .                .          .          .                 _Dp&       _M_deleter() { return std::get<1>(_M_t); }
            .           .           .                      .              .              .                .          .          .                 const _Dp& _M_deleter() const { return std::get<1>(_M_t); }
            .           .           .                      .              .              .                .          .          .           
            .           .           .                      .              .              .                .          .          .                 void reset(pointer __p) noexcept
            .           .           .                      .              .              .                .          .          .                 {
       26,603 ( 0.00%)  0           0                 26,603 ( 0.00%)     0              0                0          0          0           	const pointer __old_p = _M_ptr();
       25,655 ( 0.00%)  2 ( 0.03%)  2 ( 0.04%)             0              0              0           25,655 ( 0.00%) 0          0           	_M_ptr() = __p;
       51,310 ( 0.00%)  0           0                      0              0              0                0          0          0           	if (__old_p)
            .           .           .                      .              .              .                .          .          .           	  _M_deleter()(__old_p);
            .           .           .                      .              .              .                .          .          .                 }
            .           .           .                      .              .              .                .          .          .           
            .           .           .                      .              .              .                .          .          .                 pointer release() noexcept
            .           .           .                      .              .              .                .          .          .                 {
            .           .           .                      .              .              .                .          .          .           	pointer __p = _M_ptr();
            .           .           .                      .              .              .                .          .          .           	_M_ptr() = nullptr;
            .           .           .                      .              .              .                .          .          .           	return __p;
-- line 189 ----------------------------------------
-- line 603 ----------------------------------------
            .           .           .                      .              .              .                .          .          .           	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
            .           .           .                      .              .              .                .          .          .           	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
            .           .           .                      .              .              .                .          .          .           	{ }
            .           .           .                      .              .              .                .          .          .           
            .           .           .                      .              .              .                .          .          .                 /// Destructor, invokes the deleter if the stored pointer is not null.
            .           .           .                      .              .              .                .          .          .                 ~unique_ptr()
            .           .           .                      .              .              .                .          .          .                 {
            .           .           .                      .              .              .                .          .          .           	auto& __ptr = _M_t._M_ptr();
       30,282 ( 0.00%)  0           0                 10,094 ( 0.00%) 4,872 ( 0.01%) 3,838 ( 0.02%)       0          0          0           	if (__ptr != nullptr)
            .           .           .                      .              .              .                .          .          .           	  get_deleter()(__ptr);
            .           .           .                      .              .              .                .          .          .           	__ptr = pointer();
            .           .           .                      .              .              .                .          .          .                 }
            .           .           .                      .              .              .                .          .          .           
            .           .           .                      .              .              .                .          .          .                 // Assignment.
            .           .           .                      .              .              .                .          .          .           
            .           .           .                      .              .              .                .          .          .                 /** @brief Move assignment operator.
            .           .           .                      .              .              .                .          .          .                  *
-- line 619 ----------------------------------------
-- line 652 ----------------------------------------
            .           .           .                      .              .              .                .          .          .           
            .           .           .                      .              .              .                .          .          .                 // Observers.
            .           .           .                      .              .              .                .          .          .           
            .           .           .                      .              .              .                .          .          .                 /// Access an element of owned array.
            .           .           .                      .              .              .                .          .          .                 typename std::add_lvalue_reference<element_type>::type
            .           .           .                      .              .              .                .          .          .                 operator[](size_t __i) const
            .           .           .                      .              .              .                .          .          .                 {
            .           .           .                      .              .              .                .          .          .           	__glibcxx_assert(get() != pointer());
6,942,219,684 ( 4.11%) 19 ( 0.33%) 19 ( 0.36%) 3,471,109,932 ( 9.09%)   395 ( 0.00%)     4 ( 0.00%)       0          0          0           	return get()[__i];
            .           .           .                      .              .              .                .          .          .                 }
            .           .           .                      .              .              .                .          .          .           
            .           .           .                      .              .              .                .          .          .                 /// Return the stored pointer.
            .           .           .                      .              .              .                .          .          .                 pointer
            .           .           .                      .              .              .                .          .          .                 get() const noexcept
            .           .           .                      .              .              .                .          .          .                 { return _M_t._M_ptr(); }
            .           .           .                      .              .              .                .          .          .           
            .           .           .                      .              .              .                .          .          .                 /// Return a reference to the stored deleter.
-- line 668 ----------------------------------------
-- line 960 ----------------------------------------
            .           .           .                      .              .              .                .          .          .               inline typename _MakeUniq<_Tp>::__single_object
            .           .           .                      .              .              .                .          .          .               make_unique(_Args&&... __args)
            .           .           .                      .              .              .                .          .          .               { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
            .           .           .                      .              .              .                .          .          .           
            .           .           .                      .              .              .                .          .          .             /// std::make_unique for arrays of unknown bound
            .           .           .                      .              .              .                .          .          .             template<typename _Tp>
            .           .           .                      .              .              .                .          .          .               inline typename _MakeUniq<_Tp>::__array
            .           .           .                      .              .              .                .          .          .               make_unique(size_t __num)
    4,129,703 ( 0.00%) 29 ( 0.50%) 29 ( 0.55%)             0              0              0          702,539 ( 0.01%) 0          0               { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
            .           .           .                      .              .              .                .          .          .           
            .           .           .                      .              .              .                .          .          .             /// Disable std::make_unique for arrays of known bound
            .           .           .                      .              .              .                .          .          .             template<typename _Tp, typename... _Args>
            .           .           .                      .              .              .                .          .          .               typename _MakeUniq<_Tp>::__invalid_type
            .           .           .                      .              .              .                .          .          .               make_unique(_Args&&...) = delete;
            .           .           .                      .              .              .                .          .          .           
            .           .           .                      .              .              .                .          .          .           #if __cplusplus > 201703L
            .           .           .                      .              .              .                .          .          .             /// std::make_unique_for_overwrite for single objects
-- line 976 ----------------------------------------

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./math/../sysdeps/ieee754/flt-32/e_expf.c
  ./math/../sysdeps/ieee754/flt-32/e_logf.c
  ./math/../sysdeps/ieee754/flt-32/math_config.h
  ./math/../sysdeps/ieee754/flt-32/s_cosf.c
  ./math/../sysdeps/ieee754/flt-32/s_sincosf.h
  ./math/../sysdeps/ieee754/flt-32/s_sinf.c
  ./math/../sysdeps/x86/fpu/sincosf_poly.h
  ./math/./s_fdim_template.c
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                       I1mr         ILmr         Dr                      D1mr                DLmr                Dw                      D1mw                DLmw                
--------------------------------------------------------------------------------
125,213,046,753 (74.15%) 399 ( 6.90%) 398 ( 7.54%) 27,886,722,242 (73.07%) 69,200,611 (98.75%) 17,127,350 (98.87%) 11,386,629,422 (90.73%) 16,930,104 (49.59%) 16,919,316 (49.73%)  events annotated

